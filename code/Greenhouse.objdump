
Greenhouse.elf:     file format elf32-littlenios2
Greenhouse.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0400027c

Program Header:
    LOAD off    0x00001020 vaddr 0x08088020 paddr 0x04000000 align 2**12
         filesz 0x0000027c memsz 0x0000027c flags r-x
    LOAD off    0x0000227c vaddr 0x0400027c paddr 0x0400027c align 2**12
         filesz 0x00015d8c memsz 0x00015d8c flags r-x
    LOAD off    0x00018008 vaddr 0x04016008 paddr 0x04016ca4 align 2**12
         filesz 0x00000c9c memsz 0x00000c9c flags rw-
    LOAD off    0x00019940 vaddr 0x04017940 paddr 0x04017940 align 2**12
         filesz 0x00000000 memsz 0x00001d60 flags rw-
    LOAD off    0x00019000 vaddr 0x08088000 paddr 0x08088000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08088000  08088000  00019000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000027c  08088020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015490  0400027c  0400027c  0000227c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008fc  0401570c  0401570c  0001770c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000c9c  04016008  04016ca4  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001d60  04017940  04017940  00019940  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  040196a0  040196a0  00019020  2**0
                  CONTENTS
  7 .onchip_ram   00000000  0808829c  0808829c  00019020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00019020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001150  00000000  00000000  00019048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00029f7a  00000000  00000000  0001a198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a69b  00000000  00000000  00044112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d16e  00000000  00000000  0004e7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000034f0  00000000  00000000  0005b91c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004ce2  00000000  00000000  0005ee0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001a9c6  00000000  00000000  00063aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0007e4b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001d88  00000000  00000000  0007e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00084b89  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00084b8c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00084b98  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00084b99  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00084b9a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00084b9e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00084ba2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00084ba6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00084baf  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00084bb8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00084bc1  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000004c  00000000  00000000  00084bcc  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000c20a6  00000000  00000000  00084c18  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08088000 l    d  .entry	00000000 .entry
08088020 l    d  .exceptions	00000000 .exceptions
0400027c l    d  .text	00000000 .text
0401570c l    d  .rodata	00000000 .rodata
04016008 l    d  .rwdata	00000000 .rwdata
04017940 l    d  .bss	00000000 .bss
040196a0 l    d  .sdram_controller	00000000 .sdram_controller
0808829c l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Greenhouse_bsp//obj/HAL/src/crt0.o
040002b4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 analog_code.c
00000000 l    df *ABS*	00000000 auto_code.c
00000000 l    df *ABS*	00000000 digital_in_code.c
00000000 l    df *ABS*	00000000 error_code.c
00000000 l    df *ABS*	00000000 functions_greenhouse.c
00000000 l    df *ABS*	00000000 hmi_code.c
00000000 l    df *ABS*	00000000 idle.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401588f l     O .rodata	00000010 zeroes.4404
040034a0 l     F .text	000000bc __sbprintf
0401589f l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040036b0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04005208 l     F .text	00000008 __fp_unlock
0400521c l     F .text	0000019c __sinit.part.1
040053b8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04016008 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0401644c l     O .rwdata	00000020 lc_ctype_charset
0401642c l     O .rwdata	00000020 lc_message_charset
0401646c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
040158d0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04007d9c l     F .text	000000fc __sprint_r.part.0
040159f4 l     O .rodata	00000010 zeroes.4349
040093d8 l     F .text	000000bc __sbprintf
04015a04 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400ddcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400dee0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400df0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400e000 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400e0e8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400e1d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400e3a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04016c8c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400e614 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400e750 l     F .text	00000034 alt_dev_reg
04016a54 l     O .rwdata	00000038 accelerometer_i2c
04016a8c l     O .rwdata	00000038 arduino_i2c
04016ac4 l     O .rwdata	0000002c jtag_uart
04016af0 l     O .rwdata	0000002c uart_0
04016b1c l     O .rwdata	0000003c modular_adc_0
00000000 l    df *ABS*	00000000 DE10_Lite_Arduino_Driver.c
04017980 l     O .bss	00000004 sequencer
04017984 l     O .bss	00000004 sample_store
04017988 l     O .bss	00000004 accelerometer_dev
0401798c l     O .bss	00000004 accelerometer_status
04017990 l     O .bss	00000004 arduino_i2c_dev
04017994 l     O .bss	00000004 i2c_status
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0400f06c l     F .text	00000110 optional_irq_callback
0400f1cc l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
04011180 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
04011280 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_modular_adc.c
0401139c l     F .text	000000a8 alt_adc_irq
00000000 l    df *ABS*	00000000 draw_vga.c
00000000 l    df *ABS*	00000000 sierra.c
04012988 l     F .text	0000004c init_Sierra_interrupt
00000000 l    df *ABS*	00000000 sierra_sem.c
00000000 l    df *ABS*	00000000 sierra_task.c
00000000 l    df *ABS*	00000000 sierra_time.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04013a2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04013e5c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401413c l     F .text	0000003c alt_get_errno
04014178 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 char_map.c
00000000 l    df *ABS*	00000000 csw.o
040146d8 l       .text	00000000 restore_context
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 alt_exit.c
0401799c g     O .bss	00000004 current_tcb
040078ac g     F .text	00000074 _mprec_log10
0401163c g     F .text	00000050 adc_stop
04007998 g     F .text	0000008c __any_on
04009e54 g     F .text	00000054 _isatty_r
040158dc g     O .rodata	00000028 __mprec_tinytens
0400e2ec g     F .text	0000006c alt_main
04011c14 g     F .text	00000068 safe_write_pixel
04014b24 g     F .text	000000c0 _puts_r
040195a0 g     O .bss	00000100 alt_irq
0400049c g     F .text	0000014c digital_in_code
04009ea8 g     F .text	00000060 _lseek_r
00000000 g       .debug_aranges	00000000 alt_exception_trap
04017941 g     O .bss	00000001 key_flag1
04012e94 g     F .text	0000008c sem_release
040136ec g     F .text	00000070 init_period_time
04016ca4 g       *ABS*	00000000 __flash_rwdata_start
0400c7a4 g     F .text	00000088 .hidden __eqdf2
04019140 g     O .bss	00000460 TCB_LIST
04012aa0 g     F .text	000000a4 Sierra_Initiation_HW_and_SW
040196a0 g       *ABS*	00000000 __alt_heap_start
0400116c g     F .text	0000003c printf
0400a780 g     F .text	0000009c _wcrtomb_r
04007bc4 g     F .text	0000005c __sseek
04005568 g     F .text	00000010 __sinit
0400a628 g     F .text	00000140 __swbuf_r
04017940 g     O .bss	00000001 key_flag
04005b74 g     F .text	0000007c _setlocale_r
040053c0 g     F .text	00000078 __sfmoreglue
0400f8c4 g     F .text	000000a8 alt_avalon_i2c_rx_read
0400e37c g     F .text	00000024 __malloc_unlock
0401464c g     F .text	00000040 upper_char_line
04014d78 g     F .text	00000440 .hidden __divsf3
04000aac g     F .text	00000060 analog_value
04010adc g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0400f648 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
04009f08 g     F .text	0000015c memmove
04005550 g     F .text	00000018 _cleanup
0401032c g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
0400696c g     F .text	000000a8 _Balloc
04000678 g     F .text	000003bc hmi
04017945 g     O .bss	00000001 pump_flag
0401345c g     F .text	000000c4 task_block
04013088 g     F .text	0000008c flag_set
0400e930 g     F .text	00000080 arduino_digital_write
0400c82c g     F .text	000000dc .hidden __gtdf2
04014628 g     F .text	00000024 altera_nios2_gen2_irq_init
0400e8b0 g     F .text	00000080 arduino_pin_mode
08088000 g     F .entry	0000000c __reset
04011800 g     F .text	00000048 adc_interrupt_disable
040126f8 g     F .text	00000148 int_print
0401332c g     F .text	000000a4 task_getinfo
04000000 g       *ABS*	00000000 __flash_exceptions_start
0400e9b0 g     F .text	0000003c arduino_digital_read
04009930 g     F .text	0000005c _fstat_r
04017970 g     O .bss	00000004 errno
04007b40 g     F .text	00000008 __seofread
0808816c g       .exceptions	00000000 .Ltrap_handler
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller
040114f0 g     F .text	00000074 altera_modular_adc_init
04017978 g     O .bss	00000004 alt_argv
0401ec58 g       *ABS*	00000000 _gp
04010b20 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0400eab4 g     F .text	00000094 arduino_analog_read_voltage
0400f7d8 g     F .text	00000044 alt_avalon_i2c_is_busy
040168d4 g     O .rwdata	00000180 alt_fd_list
040129d4 g     F .text	00000030 sierra_SW_driver_version
04015e88 g     O .rodata	0000017c font32lower
0400f57c g     F .text	000000cc alt_avalon_i2c_master_config_set
04013b0c g     F .text	00000090 alt_find_dev
040066fc g     F .text	00000148 memcpy
040119a4 g     F .text	0000007c draw_vline
04005210 g     F .text	0000000c _cleanup_r
0400dbe4 g     F .text	000000dc .hidden __floatsidf
04011704 g     F .text	0000003c adc_set_mode_run_continuously
04013f40 g     F .text	0000007c alt_io_redirect
0400c908 g     F .text	000000f4 .hidden __ltdf2
0401016c g     F .text	000001c0 alt_avalon_i2c_master_transmit
04014be4 g     F .text	00000014 puts
04011a20 g     F .text	00000014 swap
04007a24 g     F .text	00000074 __fpclassifyd
04007808 g     F .text	000000a4 __ratio
040093bc g     F .text	0000001c __vfiprintf_internal
04012c68 g     F .text	0000004c tsw_off
04010d44 g     F .text	000000ec altera_avalon_jtag_uart_read
0400113c g     F .text	00000030 _printf_r
04001058 g     F .text	00000064 .hidden __udivsi3
0400e03c g     F .text	000000ac isatty
0401592c g     O .rodata	000000c8 __mprec_tens
04013658 g     F .text	00000094 task_yield
04005bf0 g     F .text	0000000c __locale_charset
0400f3e8 g     F .text	00000098 alt_avalon_i2c_enable
0401796c g     O .bss	00000004 __malloc_top_pad
0400eb48 g     F .text	0000004c accelerometer_open_dev
040179d0 g     O .bss	000003e8 idle_stack
04012c18 g     F .text	00000050 tsw_on
04010a10 g     F .text	00000068 alt_avalon_i2c_int_disable
04016c64 g     O .rwdata	00000004 __mb_cur_max
04005c20 g     F .text	0000000c _localeconv_r
0400998c g     F .text	000004c8 __sfvwrite_r
04006da0 g     F .text	0000003c __i2b
04007a98 g     F .text	00000054 _sbrk_r
04016c5a g     O .rwdata	00000001 level_old
0400a064 g     F .text	00000060 _read_r
04016c98 g     O .rwdata	00000008 altera_modular_adc_list
04016c84 g     O .rwdata	00000004 alt_max_fd
04009624 g     F .text	000000f0 _fclose_r
0401359c g     F .text	000000bc task_change_prio
04012300 g     F .text	0000036c char_print
040051d8 g     F .text	00000030 fflush
04017968 g     O .bss	00000004 __malloc_max_sbrked_mem
04013fbc g     F .text	00000180 alt_irq_register
04010538 g     F .text	00000210 alt_avalon_i2c_master_receive
04016c58 g     O .rwdata	00000001 tank_level
0400b528 g     F .text	000008ac .hidden __adddf3
04000a34 g     F .text	00000078 analog_map
040075b0 g     F .text	0000010c __b2d
04012840 g     F .text	0000010c vga_init
0400af64 g     F .text	000005c4 .hidden __umoddi3
0400e210 g     F .text	000000dc lseek
04010a78 g     F .text	00000064 alt_avalon_i2c_int_enable
04016c5c g     O .rwdata	00000004 _global_impure_ptr
0400a0c4 g     F .text	00000564 _realloc_r
040196a0 g       *ABS*	00000000 __bss_end
04013d6c g     F .text	000000f0 alt_iic_isr_register
0400ee3c g     F .text	000000f4 i2c_receive
0400a968 g     F .text	000005fc .hidden __udivdi3
04010938 g     F .text	00000058 alt_avalon_i2c_int_status_get
0400988c g     F .text	00000024 _fputwc_r
040118cc g     F .text	0000003c adc_wait_for_interrupt
04015904 g     O .rodata	00000028 __mprec_bigtens
04006b84 g     F .text	00000104 __s2b
0400dcc0 g     F .text	000000a8 .hidden __floatunsidf
040072f0 g     F .text	00000060 __mcmp
080880e4 g       .exceptions	00000000 sierra_irq_or_trap
04017db8 g     O .bss	000003e8 auto_stack
0400ed60 g     F .text	00000038 i2c_open_dev
04005588 g     F .text	00000018 __fp_lock_all
04013d20 g     F .text	0000004c alt_ic_irq_enabled
0400f268 g     F .text	00000054 alt_avalon_i2c_register_callback
040179a4 g     O .bss	00000004 alt_irq_active
0400f2bc g     F .text	000000ec alt_avalon_i2c_init
080881c8 g     F .exceptions	000000d4 alt_irq_handler
040168ac g     O .rwdata	00000028 alt_dev_null
040116c4 g     F .text	00000040 adc_set_mode_run_once
04013a0c g     F .text	00000020 alt_dcache_flush_all
04006c88 g     F .text	00000068 __hi0bits
04014734 g       .text	00000000 SW_CTX_SWITCH
0400db64 g     F .text	00000080 .hidden __fixdfsi
04017954 g     O .bss	00000004 light
04016ca4 g       *ABS*	00000000 __ram_rwdata_end
04016c7c g     O .rwdata	00000008 alt_dev_list
0400e650 g     F .text	00000100 write
040149bc g     F .text	000000a0 _putc_r
0400fbf8 g     F .text	0000004c alt_avalon_i2c_check_arblost
040109d4 g     F .text	0000003c alt_avalon_i2c_int_clear
04016008 g       *ABS*	00000000 __ram_rodata_end
0400df48 g     F .text	000000b8 fstat
080880b4 g       .exceptions	00000000 context_switch
0400c908 g     F .text	000000f4 .hidden __ledf2
04016c90 g     O .rwdata	00000008 alt_avalon_i2c_list
0400ea5c g     F .text	00000058 arduino_analog_read
0401168c g     F .text	00000038 adc_start
04007068 g     F .text	00000140 __pow5mult
04007eb0 g     F .text	0000150c ___vfiprintf_internal_r
04017960 g     O .bss	00000004 __nlocale_changed
040010bc g     F .text	00000058 .hidden __umodsi3
04012fc4 g     F .text	000000c4 flag_wait
040196a0 g       *ABS*	00000000 end
040146cc g       .text	00000000 HW_CTX_SWITCH
040179a0 g     O .bss	00000001 NEXT_TASKID
04017950 g     O .bss	00000004 humidity
040112bc g     F .text	000000e0 altera_avalon_uart_write
0400f3a8 g     F .text	00000040 alt_avalon_i2c_open
08000000 g       *ABS*	00000000 __alt_stack_pointer
0400fd80 g     F .text	000000e8 alt_avalon_i2c_master_tx
04011120 g     F .text	00000060 altera_avalon_uart_write_fd
0400dd68 g     F .text	00000064 .hidden __clzsi2
04010e30 g     F .text	00000094 altera_avalon_jtag_uart_write
04005578 g     F .text	00000004 __sfp_lock_acquire
04006618 g     F .text	000000e4 memchr
08088150 g       .exceptions	00000000 interrupt_testing
040011a8 g     F .text	000022dc ___vfprintf_internal_r
040056dc g     F .text	00000310 _free_r
040143c0 g     F .text	0000022c alt_printf
04005bfc g     F .text	00000010 __locale_mb_cur_max
04014bf8 g     F .text	00000180 __call_exitprocs
0401795c g     O .bss	00000004 __mlocale_changed
0400f17c g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
04016c68 g     O .rwdata	00000004 __malloc_sbrk_base
0400027c g     F .text	0000003c _start
0401192c g     F .text	00000078 draw_hline
04010748 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
04010b6c g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
040071a8 g     F .text	00000148 __lshift
04010ec4 g     F .text	000001fc alt_avalon_spi_command
0400e3dc g     F .text	00000104 read
0400e7bc g     F .text	00000074 alt_sys_init
0400ffa4 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
04006ddc g     F .text	0000028c __multiply
04001114 g     F .text	00000028 .hidden __mulsi3
04016008 g       *ABS*	00000000 __ram_rwdata_start
0401570c g       *ABS*	00000000 __ram_rodata_start
040179a8 g     O .bss	00000028 __malloc_current_mallinfo
0400ef70 g     F .text	00000048 i2c_set_fast_mode
040076bc g     F .text	0000014c __d2b
040181a0 g     O .bss	000003e8 hmi_stack
0400edd4 g     F .text	00000068 i2c_transmit
04010c84 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04014844 g     F .text	000000c4 alt_get_fd
04013114 g     F .text	0000008c flag_clear
040138b4 g     F .text	00000158 alt_busy_sleep
040094f4 g     F .text	00000054 _close_r
0400ed98 g     F .text	0000003c i2c_set_slave_address
04014940 g     F .text	0000007c memcmp
0400f81c g     F .text	000000a8 alt_avalon_i2c_rx_read_available
040131a0 g     F .text	0000018c task_create
040196a0 g       *ABS*	00000000 __alt_stack_base
0400355c g     F .text	00000154 __swsetup_r
040117bc g     F .text	00000044 adc_interrupt_enable
04017948 g     O .bss	00000001 error_flag2
0400bdd4 g     F .text	000009d0 .hidden __divdf3
04005438 g     F .text	00000118 __sfp
04007920 g     F .text	00000078 __copybits
040164a4 g     O .rwdata	00000408 __malloc_av_
04005584 g     F .text	00000004 __sinit_lock_release
0400eb94 g     F .text	00000078 accelerometer_init
0400e86c g     F .text	00000044 arduino_spi_enable
0400c9fc g     F .text	0000086c .hidden __muldf3
0401794c g     O .bss	00000004 water_flow
0401375c g     F .text	000000ac wait_for_next_period
04007aec g     F .text	00000054 __sread
04011a34 g     F .text	000001e0 draw_angled_line
0401473c g     F .text	00000108 alt_find_file
04013a68 g     F .text	000000a4 alt_dev_llist_insert
0400e358 g     F .text	00000024 __malloc_lock
0400e564 g     F .text	000000b0 sbrk
0400fc44 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0400fbac g     F .text	0000004c alt_avalon_i2c_check_nack
0400517c g     F .text	0000005c _fflush_r
04009548 g     F .text	000000dc _calloc_r
04012b44 g     F .text	000000d4 get_next_task
04016b58 g     O .rwdata	00000100 .hidden __divsi3_table
04017940 g       *ABS*	00000000 __bss_start
04006844 g     F .text	00000128 memset
040179a1 g     O .bss	00000001 RUNNING_TASKID
04000de0 g     F .text	00000180 main
04017998 g     O .bss	00000004 first_csw
0400fb78 g     F .text	00000034 alt_avalon_i2c_master_target_set
0401797c g     O .bss	00000004 alt_envp
04017964 g     O .bss	00000004 __malloc_max_total_mem
04010ce4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400a768 g     F .text	00000018 __swbuf
04010990 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
04017942 g     O .bss	00000001 key_flag2
04011444 g     F .text	000000ac alt_adc_word_read
04007c20 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04009714 g     F .text	00000014 fclose
040038d8 g     F .text	00001688 _dtoa_r
04005e0c g     F .text	0000080c _malloc_r
0400a8dc g     F .text	00000030 __ascii_wctomb
04016c88 g     O .rwdata	00000004 alt_errno
040059ec g     F .text	000000c4 _fwalk
04018588 g     O .bss	000003e8 digital_in_stack
0400efb8 g     F .text	00000064 spi_command
04014a5c g     F .text	000000c8 putc
04000f60 g     F .text	00000084 .hidden __divsi3
040055b8 g     F .text	00000124 _malloc_trim_r
04012a04 g     F .text	00000034 sierra_HW_version
040151b8 g     F .text	00000430 .hidden __mulsf3
04007c28 g     F .text	000000dc strcmp
0401570c g       *ABS*	00000000 __flash_rodata_start
04012a38 g     F .text	00000034 SierraTime_base_reg
04013808 g     F .text	000000ac delay
0400c7a4 g     F .text	00000088 .hidden __nedf2
04012cb4 g     F .text	00000058 get_new_task
0400e784 g     F .text	00000038 alt_irq_init
0400e4e0 g     F .text	00000084 alt_release_fd
04015a14 g     O .rodata	00000100 .hidden __clz_tab
04017958 g     O .bss	00000004 _PathLocale
04015d0c g     O .rodata	0000017c font32upper
04009494 g     F .text	00000060 _write_r
0400f01c g     F .text	00000050 spi_tx
04000b78 g     F .text	000001b8 error_handler
040146d0 g       .text	00000000 gettask
04005c2c g     F .text	00000018 setlocale
04013520 g     F .text	0000007c task_delete
0401468c g     F .text	00000040 lower_char_line
04016c60 g     O .rwdata	00000004 _impure_ptr
04017974 g     O .bss	00000004 alt_argc
04000db0 g     F .text	00000030 idle_code
04004f60 g     F .text	0000021c __sflush_r
04005c18 g     F .text	00000008 __locale_cjk_lang
0400fb40 g     F .text	00000038 alt_avalon_i2c_master_target_get
04018970 g     O .bss	000003e8 error_stack
0400fa50 g     F .text	000000f0 alt_avalon_i2c_send_address
0401294c g     F .text	0000003c key_down_up
04017946 g     O .bss	00000001 welcome_flag
08088020 g       .exceptions	00000000 alt_irq_entry
0400e9ec g     F .text	00000070 arduino_analog_init
0400754c g     F .text	00000064 __ulp
040055a0 g     F .text	00000018 __fp_unlock_all
04016c74 g     O .rwdata	00000008 alt_fs_list
040002b8 g     F .text	00000074 analog_code
08088020 g       *ABS*	00000000 __ram_exceptions_start
04005c44 g     F .text	0000000c localeconv
04010c1c g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0400ef30 g     F .text	00000040 i2c_set_normal_mode
04013bbc g     F .text	00000050 alt_ic_isr_register
0400f480 g     F .text	0000004c alt_avalon_i2c_disable
04016ca4 g       *ABS*	00000000 _edata
040110c0 g     F .text	00000060 altera_avalon_uart_read_fd
04011f9c g     F .text	00000058 safey_write_pixel
040196a0 g       *ABS*	00000000 _end
080880e0 g       .exceptions	00000000 sierra_trap
0401188c g     F .text	00000040 adc_interrupt_asserted
04009728 g     F .text	00000164 __fputwc
0808829c g       *ABS*	00000000 __ram_exceptions_end
04000d30 g     F .text	00000080 hmi_code
04012a6c g     F .text	00000034 set_timebase
0400ec0c g     F .text	00000154 accelerometer_read
040133d0 g     F .text	0000008c task_start
0400f4cc g     F .text	000000b0 alt_avalon_i2c_master_config_get
04013c94 g     F .text	0000008c alt_ic_irq_disable
04016c59 g     O .rwdata	00000001 level_new
04007b48 g     F .text	0000007c __swrite
04016c6c g     O .rwdata	00000004 __malloc_trim_threshold
04011848 g     F .text	00000044 adc_clear_interrupt_status
04017944 g     O .bss	00000001 manual_flag
04005c0c g     F .text	0000000c __locale_msgcharset
04014908 g     F .text	00000038 exit
04005ab0 g     F .text	000000c4 _fwalk_reent
040155e8 g     F .text	000000f0 .hidden __floatunsisf
04007350 g     F .text	000001fc __mdiff
04000fe4 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
08088020 g     F .exceptions	00000000 alt_exception
0400557c g     F .text	00000004 __sfp_lock_release
04012dd0 g     F .text	000000c4 sem_take
0400f6dc g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
04012f20 g     F .text	000000a4 sem_read
08088000 g       *ABS*	00000000 __alt_mem_onchip_ram
0400f96c g     F .text	000000e4 alt_avalon_i2c_cmd_write
040115fc g     F .text	00000040 altera_modular_adc_open
040156d8 g     F .text	00000034 _exit
04011c7c g     F .text	00000320 draw_circle
04011ff4 g     F .text	0000030c draw_filled_circle
040005e8 g     F .text	00000090 error_code
04005c50 g     F .text	000001bc __smakebuf_r
04012d0c g     F .text	000000c4 irq_wait
04007d04 g     F .text	00000098 strlen
04014264 g     F .text	0000015c open
0400c82c g     F .text	000000dc .hidden __gedf2
040145ec g     F .text	0000003c alt_putchar
04017947 g     O .bss	00000001 error_flag1
04011740 g     F .text	0000007c adc_recalibrate
04016c70 g     O .rwdata	00000004 __wctomb
04007e98 g     F .text	00000018 __sprint_r
04013b9c g     F .text	00000020 alt_icache_flush_all
04016ca0 g     O .rwdata	00000004 alt_priority_mask
04013c0c g     F .text	00000088 alt_ic_irq_enable
04003484 g     F .text	0000001c __vfprintf_internal
040111bc g     F .text	000000c4 altera_avalon_uart_read
0400a90c g     F .text	0000005c _wctomb_r
04011908 g     F .text	00000024 clear_screen
0400d268 g     F .text	000008fc .hidden __subdf3
0401266c g     F .text	0000008c tty_print
04006cf0 g     F .text	000000b0 __lo0bits
0400032c g     F .text	00000170 auto_code
0400a81c g     F .text	000000c0 wcrtomb
0400de08 g     F .text	000000d8 close
04018d58 g     O .bss	000003e8 analog_stack
04010bd0 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0400e150 g     F .text	00000084 alt_load
0400e830 g     F .text	0000003c arduino_uart_enable
0400fe68 g     F .text	0000013c alt_avalon_i2c_master_rx
04017943 g     O .bss	00000001 reset_flag
040098b0 g     F .text	00000080 fputwc
04011564 g     F .text	00000098 alt_adc_register_callback
04005580 g     F .text	00000004 __sinit_lock_acquire
04006a3c g     F .text	00000148 __multadd
04000b0c g     F .text	0000006c full_auto
04006a14 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08088000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8088000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8088004:	08409f14 	ori	at,at,636
    jmp r1
 8088008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08088020 <alt_exception>:
         */
         
        /*
         * !S Is the exception caused by a Sierra HW IRQ?
         */
        addi  	sp, sp, -8			 	# used registers to stack
 8088020:	defffe04 	addi	sp,sp,-8
        stwio  	r2, 0(sp) 
 8088024:	d8800035 	stwio	r2,0(sp)
        stwio  	at, 4(sp)
 8088028:	d8400135 	stwio	at,4(sp)
 808802c:	00420274 	movhi	at,2057
        
        movia 	at, CPUstatusB_reg
 8088030:	08440c04 	addi	at,at,4144
   	    ldwio 	at, 0(at)    			# Read Status-register B
 8088034:	08400037 	ldwio	at,0(at)
   	    andi  	at, at, 1               # Only lowest bit is interesting
 8088038:	0840004c 	andi	at,at,1
   	    bgtu  	at, r0, context_switch 	# If the bit is set (at>0), it is  
 808803c:	00401d36 	bltu	zero,at,80880b4 <context_switch>
   	    						      	# a Sierra HW irq (HW ctx swtich)

        /*
         * !S Is the exception caused by a Sierra trap?
         */
        ldwio r2, -4(ea)              	/* last instr. op-code is put in r2 */ 
 8088040:	e8bfff37 	ldwio	r2,-4(ea)
        movhi at, 0x003b              	/* upper half of trap opcode */
 8088044:	00400ef4 	movhi	at,59
        ori   at, at, 0x683a          	/* lower half of trap opcode */
 8088048:	085a0e94 	ori	at,at,26682
        beq   r2, at, sierra_trap 		# Sierra trap (SW ctx switch)
 808804c:	10402426 	beq	r2,at,80880e0 <sierra_trap>
           
        /*
         * !S Not Sierra irq or exception. Restore r2, at and stack
         */   

       ldwio r2, 0(sp)
 8088050:	d8800037 	ldwio	r2,0(sp)
       ldwio at, 4(sp)
 8088054:	d8400137 	ldwio	at,4(sp)
       addi sp, sp, 8 					# sp now in original position (1/3)
 8088058:	dec00204 	addi	sp,sp,8

# normal exception.entry starts here       
       addi  sp, sp, -76
 808805c:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8088060:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8088064:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 8088068:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 808806c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8088070:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8088074:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 8088078:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 808807c:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8088080:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8088084:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 8088088:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 808808c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8088090:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8088094:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 8088098:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 808809c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 80880a0:	dbc01015 	stw	r15,64(sp)

        stw   r5,  68(sp) 		/* r5=estatus */ 
 80880a4:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4 		/* re-issue the interrupted instruction */
 80880a8:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80880ac:	dbc01215 	stw	r15,72(sp)
        
        br 	  interrupt_testing # !S Branch added to avoid sierra routines
 80880b0:	00002706 	br	8088150 <interrupt_testing>

080880b4 <context_switch>:
 80880b4:	00810074 	movhi	r2,1025
       /* 
        * Do not save context on first tsw interrupt 
        * (no task status needs to be saved) 
        */

   		movia 	r2, first_csw 
 80880b8:	109e6604 	addi	r2,r2,31128
   		ldwio   at, 0(r2)
 80880bc:	10400037 	ldwio	at,0(r2)
   		bgtu  	at, r0, sierra_irq_or_trap		# Jump to if first_csw != 0
 80880c0:	00400836 	bltu	zero,at,80880e4 <sierra_irq_or_trap>
   		
   		addi  	at, r0, 1            			# Set first_csw = 1
 80880c4:	00400044 	movi	at,1
   		stwio   at, 0(r2)						# first_csw(et) <- (at)
 80880c8:	10400035 	stwio	at,0(r2)
		
		ldwio	r2, 0(sp)					# restore r2, at and stack
 80880cc:	d8800037 	ldwio	r2,0(sp)
		ldwio 	at, 4(sp) 
 80880d0:	d8400137 	ldwio	at,4(sp)
   		addi 	sp, sp, 8					# sp now in original position (2/3)
 80880d4:	dec00204 	addi	sp,sp,8
   		rdctl 	r5, estatus
 80880d8:	000b307a 	rdctl	r5,estatus
 		br 		interrupt_testing			# results in jump to HW_CTX_SWITCH 
 80880dc:	00001c06 	br	8088150 <interrupt_testing>

080880e0 <sierra_trap>:
	 * !S Save content of registers into running tasks tcb 
	 * (hw irq or sw trap) 
	 */
sierra_trap: 

		addi ea, ea, 4		/* !S add ea temporary so save register can be used 
 80880e0:	ef400104 	addi	ea,ea,4

080880e4 <sierra_irq_or_trap>:
		                       by both hw irq and sw trap */
		
		
sierra_irq_or_trap:

		ldwio 	r2, 0(sp)
 80880e4:	d8800037 	ldwio	r2,0(sp)

		ldwio 	at, 4(sp) 				
 80880e8:	d8400137 	ldwio	at,4(sp)
    	stwio	at, TCB_REG_AT(at)
 80880ec:	08400235 	stwio	at,8(at)
       	
       	addi 	sp, sp, 8			  # sp now in original position (3/3)
 80880f0:	dec00204 	addi	sp,sp,8
 80880f4:	00410074 	movhi	at,1025
       	       	
       	movia	at, current_tcb		  # at = current_tcb
 80880f8:	085e6704 	addi	at,at,31132
	    ldwio   at, 0(at)			  # Get address to current_tcb variable
 80880fc:	08400037 	ldwio	at,0(at)
 
		stwio	r2, TCB_REG_RETURNVALUES+0(at)
 8088100:	08800335 	stwio	r2,12(at)
   		stwio	r3, TCB_REG_RETURNVALUES+4(at)
 8088104:	08c00435 	stwio	r3,16(at)
    
   		stwio	r4, TCB_REG_ARG+0(at)
 8088108:	09000535 	stwio	r4,20(at)
   		stwio	r5, TCB_REG_ARG+4(at)
 808810c:	09400635 	stwio	r5,24(at)
   		stwio	r6, TCB_REG_ARG+8(at)
 8088110:	09800735 	stwio	r6,28(at)
		stwio 	r7, TCB_REG_ARG+12(at)
 8088114:	09c00835 	stwio	r7,32(at)
	
		rdctl r5, estatus 
 8088118:	000b307a 	rdctl	r5,estatus
	
		stwio	r8,  TCB_REG_GPR+0(at)
 808811c:	0a000935 	stwio	r8,36(at)
		stwio	r9,  TCB_REG_GPR+4(at)
 8088120:	0a400a35 	stwio	r9,40(at)
		stwio	r10, TCB_REG_GPR+8(at)
 8088124:	0a800b35 	stwio	r10,44(at)
		stwio	r11, TCB_REG_GPR+12(at)
 8088128:	0ac00c35 	stwio	r11,48(at)
		stwio	r12, TCB_REG_GPR+16(at)
 808812c:	0b000d35 	stwio	r12,52(at)
		stwio	r13, TCB_REG_GPR+20(at)
 8088130:	0b400e35 	stwio	r13,56(at)
		stwio	r14, TCB_REG_GPR+24(at)
 8088134:	0b800f35 	stwio	r14,60(at)
		stwio	r15, TCB_REG_GPR+28(at)
 8088138:	0bc01035 	stwio	r15,64(at)
	
 		# r16-r23 is callee saved registers
		/* r24, r25 not affected */
		/* r26, GP not affected */
	
    	stwio	sp, TCB_STACKPTR(at) 	# r27
 808813c:	0ec01e35 	stwio	sp,120(at)
	
		stwio	r28, TCB_REG_FP(at)
 8088140:	0f001b35 	stwio	fp,108(at)

        addi  	r15, ea, -4 	        # s49 nios ref, hw isr must substract -4 from ea
 8088144:	ebffff04 	addi	r15,ea,-4
        								# trap case is handled later
        stwio   r15, TCB_REG_EA(at)		# r29 return address from interrupt
 8088148:	0bc01c35 	stwio	r15,112(at)

		/* r30 not affected */
		stwio	ra, TCB_REG_RA(at)		# r31 return address  to subrutine
 808814c:	0fc01d35 	stwio	ra,116(at)

08088150 <interrupt_testing>:
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8088150:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8088154:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 8088158:	10000326 	beq	r2,zero,8088168 <interrupt_testing+0x18>
        beq   r4, zero, .Lnot_irq
 808815c:	20000226 	beq	r4,zero,8088168 <interrupt_testing+0x18>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8088160:	80881c80 	call	80881c8 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8088164:	00000306 	br	8088174 <.Ltrap_handler+0x8>
        /*
         * The other exception handling code goes here.
         */
         
         #/////////////////////////////////
         br .Ltrap_handler   # !S taskswitch trap 
 8088168:	00000006 	br	808816c <.Ltrap_handler>

0808816c <.Ltrap_handler>:
         */

        #break    #(SN)

	
		jmpi SW_CTX_SWITCH 
 808816c:	40147341 	jmpi	4014734 <SW_CTX_SWITCH>

        /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8088170:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8088174:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)
 8088178:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 808817c:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 8088180:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 8088184:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 8088188:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 808818c:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 8088190:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 8088194:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 8088198:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 808819c:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80881a0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80881a4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80881a8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80881ac:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80881b0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80881b4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80881b8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80881bc:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80881c0:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80881c4:	ef80083a 	eret

080881c8 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80881c8:	defff904 	addi	sp,sp,-28
 80881cc:	dfc00615 	stw	ra,24(sp)
 80881d0:	df000515 	stw	fp,20(sp)
 80881d4:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80881d8:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80881dc:	0005313a 	rdctl	r2,ipending
 80881e0:	e0bffe15 	stw	r2,-8(fp)

  return active;
 80881e4:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 80881e8:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 80881ec:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 80881f0:	00800044 	movi	r2,1
 80881f4:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 80881f8:	e0fffb17 	ldw	r3,-20(fp)
 80881fc:	e0bffc17 	ldw	r2,-16(fp)
 8088200:	1884703a 	and	r2,r3,r2
 8088204:	10001426 	beq	r2,zero,8088258 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 8088208:	008100b4 	movhi	r2,1026
 808820c:	10a56804 	addi	r2,r2,-27232
 8088210:	e0fffd17 	ldw	r3,-12(fp)
 8088214:	180690fa 	slli	r3,r3,3
 8088218:	10c5883a 	add	r2,r2,r3
 808821c:	10c00017 	ldw	r3,0(r2)
 8088220:	008100b4 	movhi	r2,1026
 8088224:	10a56804 	addi	r2,r2,-27232
 8088228:	e13ffd17 	ldw	r4,-12(fp)
 808822c:	200890fa 	slli	r4,r4,3
 8088230:	1105883a 	add	r2,r2,r4
 8088234:	10800104 	addi	r2,r2,4
 8088238:	10800017 	ldw	r2,0(r2)
 808823c:	1009883a 	mov	r4,r2
 8088240:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8088244:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8088248:	0005313a 	rdctl	r2,ipending
 808824c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8088250:	e0bfff17 	ldw	r2,-4(fp)
 8088254:	00000706 	br	8088274 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 8088258:	e0bffc17 	ldw	r2,-16(fp)
 808825c:	1085883a 	add	r2,r2,r2
 8088260:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8088264:	e0bffd17 	ldw	r2,-12(fp)
 8088268:	10800044 	addi	r2,r2,1
 808826c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8088270:	003fe106 	br	80881f8 <__ram_exceptions_end+0xffffff5c>

    active = alt_irq_pending ();
 8088274:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 8088278:	e0bffb17 	ldw	r2,-20(fp)
 808827c:	103fdb1e 	bne	r2,zero,80881ec <__ram_exceptions_end+0xffffff50>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 8088280:	0001883a 	nop
}
 8088284:	0001883a 	nop
 8088288:	e037883a 	mov	sp,fp
 808828c:	dfc00117 	ldw	ra,4(sp)
 8088290:	df000017 	ldw	fp,0(sp)
 8088294:	dec00204 	addi	sp,sp,8
 8088298:	f800283a 	ret

Disassembly of section .text:

0400027c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 400027c:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000280:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000284:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000288:	d6bb1614 	ori	gp,gp,60504
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 400028c:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000290:	109e5014 	ori	r2,r2,31040

    movhi r3, %hi(__bss_end)
 4000294:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000298:	18e5a814 	ori	r3,r3,38560

    beq r2, r3, 1f
 400029c:	10c00326 	beq	r2,r3,40002ac <_start+0x30>

0:
    stw zero, (r2)
 40002a0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40002a4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40002a8:	10fffd36 	bltu	r2,r3,40002a0 <__ram_exceptions_end+0xfbf78004>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40002ac:	400e1500 	call	400e150 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40002b0:	400e2ec0 	call	400e2ec <alt_main>

040002b4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40002b4:	003fff06 	br	40002b4 <__ram_exceptions_end+0xfbf78018>

040002b8 <analog_code>:

//alt_u32 light = 0;
//alt_u32 humidity = 0; //analog 1 light sensor, analog 2 humidity sensor

void analog_code(void)
{
 40002b8:	defffd04 	addi	sp,sp,-12
 40002bc:	dfc00215 	stw	ra,8(sp)
 40002c0:	df000115 	stw	fp,4(sp)
 40002c4:	df000104 	addi	fp,sp,4
	task_periodic_start_union test;
    //printf("analog,Prio 1\n ");
    init_period_time(50); // 1 seconds period time
 40002c8:	01000c84 	movi	r4,50
 40002cc:	40136ec0 	call	40136ec <init_period_time>

    while(1) // Loop forever
    {
       	test = wait_for_next_period(); //every 1 second
 40002d0:	401375c0 	call	401375c <wait_for_next_period>
 40002d4:	e0bfff15 	stw	r2,-4(fp)
        	if((test.periodic_start_integer & 0x1) != 0)
 40002d8:	e0bfff17 	ldw	r2,-4(fp)
 40002dc:	1080004c 	andi	r2,r2,1
 40002e0:	10000326 	beq	r2,zero,40002f0 <analog_code+0x38>
        	{
        		printf("deadline miss, plot_acc");
 40002e4:	01010074 	movhi	r4,1025
 40002e8:	2115c304 	addi	r4,r4,22284
 40002ec:	400116c0 	call	400116c <printf>
        	}
        	sem_take(sem_id_1);
 40002f0:	01000044 	movi	r4,1
 40002f4:	4012dd00 	call	4012dd0 <sem_take>
        	light = analog_value(CH1);
 40002f8:	01000044 	movi	r4,1
 40002fc:	4000aac0 	call	4000aac <analog_value>
 4000300:	d0a33f15 	stw	r2,-29444(gp)
        	sem_release(sem_id_1);
 4000304:	01000044 	movi	r4,1
 4000308:	4012e940 	call	4012e94 <sem_release>
        	sem_take(sem_id_1);
 400030c:	01000044 	movi	r4,1
 4000310:	4012dd00 	call	4012dd0 <sem_take>
        	humidity = analog_value(CH0);
 4000314:	0009883a 	mov	r4,zero
 4000318:	4000aac0 	call	4000aac <analog_value>
 400031c:	d0a33e15 	stw	r2,-29448(gp)
        	sem_release(sem_id_1);
 4000320:	01000044 	movi	r4,1
 4000324:	4012e940 	call	4012e94 <sem_release>

    	//printf("analog");
    }
 4000328:	003fe906 	br	40002d0 <__ram_exceptions_end+0xfbf78034>

0400032c <auto_code>:

#include "functions_greenhouse.h"
#include "sierra_includes.h"

void auto_code(void)
{
 400032c:	defffd04 	addi	sp,sp,-12
 4000330:	dfc00215 	stw	ra,8(sp)
 4000334:	df000115 	stw	fp,4(sp)
 4000338:	df000104 	addi	fp,sp,4
	task_periodic_start_union test;
  //  printf("auto ,Prio 1\n ");
    init_period_time(25); // 1 seconds period time
 400033c:	01000644 	movi	r4,25
 4000340:	40136ec0 	call	40136ec <init_period_time>
    arduino_pin_mode(6, 1);
 4000344:	01400044 	movi	r5,1
 4000348:	01000184 	movi	r4,6
 400034c:	400e8b00 	call	400e8b0 <arduino_pin_mode>
    arduino_pin_mode(8,0);
 4000350:	000b883a 	mov	r5,zero
 4000354:	01000204 	movi	r4,8
 4000358:	400e8b00 	call	400e8b0 <arduino_pin_mode>

    while(1) // Loop forever
    {
       	test = wait_for_next_period(); //every 1 second
 400035c:	401375c0 	call	401375c <wait_for_next_period>
 4000360:	e0bfff15 	stw	r2,-4(fp)
        	if((test.periodic_start_integer & 0x1) != 0)
 4000364:	e0bfff17 	ldw	r2,-4(fp)
 4000368:	1080004c 	andi	r2,r2,1
 400036c:	10000326 	beq	r2,zero,400037c <auto_code+0x50>
        	{
        		printf("deadline miss, plot_acc");
 4000370:	01010074 	movhi	r4,1025
 4000374:	2115c904 	addi	r4,r4,22308
 4000378:	400116c0 	call	400116c <printf>
        	}
       if(error_flag1 == 0 && welcome_flag == 1)
 400037c:	d0a33bc3 	ldbu	r2,-29457(gp)
 4000380:	10803fcc 	andi	r2,r2,255
 4000384:	103ff51e 	bne	r2,zero,400035c <__ram_exceptions_end+0xfbf780c0>
 4000388:	d0a33b83 	ldbu	r2,-29458(gp)
 400038c:	10803fcc 	andi	r2,r2,255
 4000390:	10800058 	cmpnei	r2,r2,1
 4000394:	103ff11e 	bne	r2,zero,400035c <__ram_exceptions_end+0xfbf780c0>
        {
        	//auto mode
        	if (manual_flag == 0)
 4000398:	d0a33b03 	ldbu	r2,-29460(gp)
 400039c:	10803fcc 	andi	r2,r2,255
 40003a0:	10000d1e 	bne	r2,zero,40003d8 <auto_code+0xac>
        	{
        		pump_flag = full_auto(humidity,light);
 40003a4:	d0a33e17 	ldw	r2,-29448(gp)
 40003a8:	d0e33f17 	ldw	r3,-29444(gp)
 40003ac:	180b883a 	mov	r5,r3
 40003b0:	1009883a 	mov	r4,r2
 40003b4:	4000b0c0 	call	4000b0c <full_auto>
 40003b8:	d0a33b45 	stb	r2,-29459(gp)
        		sem_take(sem_id_1);
 40003bc:	01000044 	movi	r4,1
 40003c0:	4012dd00 	call	4012dd0 <sem_take>
        		level_old = level_new;
 40003c4:	d0a00043 	ldbu	r2,-32767(gp)
 40003c8:	d0a00085 	stb	r2,-32766(gp)
        		sem_release(sem_id_1);
 40003cc:	01000044 	movi	r4,1
 40003d0:	4012e940 	call	4012e94 <sem_release>
 40003d4:	00001606 	br	4000430 <auto_code+0x104>
        	}
        	//Manual Mode
        	else if (manual_flag == 1 )
 40003d8:	d0a33b03 	ldbu	r2,-29460(gp)
 40003dc:	10803fcc 	andi	r2,r2,255
 40003e0:	10800058 	cmpnei	r2,r2,1
 40003e4:	1000111e 	bne	r2,zero,400042c <auto_code+0x100>
        	{
        		//Hand mode pump is a dead-man-switch
        		if(key_flag1 == 1)
 40003e8:	d0a33a43 	ldbu	r2,-29463(gp)
 40003ec:	10803fcc 	andi	r2,r2,255
 40003f0:	10800058 	cmpnei	r2,r2,1
 40003f4:	1000071e 	bne	r2,zero,4000414 <auto_code+0xe8>
        		{
        			sem_take(sem_id_2);
 40003f8:	01000084 	movi	r4,2
 40003fc:	4012dd00 	call	4012dd0 <sem_take>
        			pump_flag = 1;
 4000400:	00800044 	movi	r2,1
 4000404:	d0a33b45 	stb	r2,-29459(gp)
        			sem_release(sem_id_2);
 4000408:	01000084 	movi	r4,2
 400040c:	4012e940 	call	4012e94 <sem_release>
 4000410:	00000706 	br	4000430 <auto_code+0x104>
        		}
        		else
        		{
        			sem_take(sem_id_2);
 4000414:	01000084 	movi	r4,2
 4000418:	4012dd00 	call	4012dd0 <sem_take>
        			pump_flag = 0;
 400041c:	d0233b45 	stb	zero,-29459(gp)
        			sem_release(sem_id_2);
 4000420:	01000084 	movi	r4,2
 4000424:	4012e940 	call	4012e94 <sem_release>
 4000428:	00000106 	br	4000430 <auto_code+0x104>
        		}
        	}
        	else pump_flag = 0;
 400042c:	d0233b45 	stb	zero,-29459(gp)
        	//Subtract water level
        	sem_take(sem_id_2);
 4000430:	01000084 	movi	r4,2
 4000434:	4012dd00 	call	4012dd0 <sem_take>
        	if(pump_flag == 1)
 4000438:	d0a33b43 	ldbu	r2,-29459(gp)
 400043c:	10803fcc 	andi	r2,r2,255
 4000440:	10800058 	cmpnei	r2,r2,1
 4000444:	1000121e 	bne	r2,zero,4000490 <auto_code+0x164>
        	{
        		if( arduino_digital_read(8))
 4000448:	01000204 	movi	r4,8
 400044c:	400e9b00 	call	400e9b0 <arduino_digital_read>
 4000450:	10803fcc 	andi	r2,r2,255
 4000454:	10000b26 	beq	r2,zero,4000484 <auto_code+0x158>
        			{
        				sem_take(sem_id_1);
 4000458:	01000044 	movi	r4,1
 400045c:	4012dd00 	call	4012dd0 <sem_take>
        				water_flow++;
 4000460:	d0a33d17 	ldw	r2,-29452(gp)
 4000464:	10800044 	addi	r2,r2,1
 4000468:	d0a33d15 	stw	r2,-29452(gp)
        				tank_level = tank_level - water_flow;
 400046c:	d0a00003 	ldbu	r2,-32768(gp)
 4000470:	d0e33d17 	ldw	r3,-29452(gp)
 4000474:	10c5c83a 	sub	r2,r2,r3
 4000478:	d0a00005 	stb	r2,-32768(gp)
        				sem_release(sem_id_1);
 400047c:	01000044 	movi	r4,1
 4000480:	4012e940 	call	4012e94 <sem_release>
        			}
        		water_flow = 0;
 4000484:	d0233d15 	stw	zero,-29452(gp)
        		level_new = tank_level;
 4000488:	d0a00003 	ldbu	r2,-32768(gp)
 400048c:	d0a00045 	stb	r2,-32767(gp)
        	}
        	sem_release(sem_id_2);
 4000490:	01000084 	movi	r4,2
 4000494:	4012e940 	call	4012e94 <sem_release>

       // printf("auto %d ", water_flow);
        }
    }
 4000498:	003fb006 	br	400035c <__ram_exceptions_end+0xfbf780c0>

0400049c <digital_in_code>:

#include "functions_greenhouse.h"
#include "sierra_includes.h"

void digital_in_code(void)
{
 400049c:	defffc04 	addi	sp,sp,-16
 40004a0:	dfc00315 	stw	ra,12(sp)
 40004a4:	df000215 	stw	fp,8(sp)
 40004a8:	df000204 	addi	fp,sp,8
	task_periodic_start_union test;
   // printf("digital_in,Prio 1\n ");
    init_period_time(15); // 1 seconds period time
 40004ac:	010003c4 	movi	r4,15
 40004b0:	40136ec0 	call	40136ec <init_period_time>
    arduino_pin_mode(6, 1);
 40004b4:	01400044 	movi	r5,1
 40004b8:	01000184 	movi	r4,6
 40004bc:	400e8b00 	call	400e8b0 <arduino_pin_mode>

    while(1) // Loop forever
    {
       	test = wait_for_next_period(); //every 1 second
 40004c0:	401375c0 	call	401375c <wait_for_next_period>
 40004c4:	e0bfff15 	stw	r2,-4(fp)
        	if((test.periodic_start_integer & 0x1) != 0)
 40004c8:	e0bfff17 	ldw	r2,-4(fp)
 40004cc:	1080004c 	andi	r2,r2,1
 40004d0:	10000326 	beq	r2,zero,40004e0 <digital_in_code+0x44>
        	{
        		printf("deadline miss, plot_acc");
 40004d4:	01010074 	movhi	r4,1025
 40004d8:	2115cf04 	addi	r4,r4,22332
 40004dc:	400116c0 	call	400116c <printf>
        	}
        //switch between manual and auto mode
        sem_take(sem_id_2);
 40004e0:	01000084 	movi	r4,2
 40004e4:	4012dd00 	call	4012dd0 <sem_take>
        key_flag = key_down_up(2);
 40004e8:	01000084 	movi	r4,2
 40004ec:	401294c0 	call	401294c <key_down_up>
 40004f0:	d0a33a05 	stb	r2,-29464(gp)
        sem_release(sem_id_2);
 40004f4:	01000084 	movi	r4,2
 40004f8:	4012e940 	call	4012e94 <sem_release>
		sem_take(sem_id_2);
 40004fc:	01000084 	movi	r4,2
 4000500:	4012dd00 	call	4012dd0 <sem_take>
		key_flag1 = key_down_up(3);
 4000504:	010000c4 	movi	r4,3
 4000508:	401294c0 	call	401294c <key_down_up>
 400050c:	d0a33a45 	stb	r2,-29463(gp)
		sem_release(sem_id_2);
 4000510:	01000084 	movi	r4,2
 4000514:	4012e940 	call	4012e94 <sem_release>
        if(key_flag == 1)
 4000518:	d0a33a03 	ldbu	r2,-29464(gp)
 400051c:	10803fcc 	andi	r2,r2,255
 4000520:	10800058 	cmpnei	r2,r2,1
 4000524:	1000081e 	bne	r2,zero,4000548 <digital_in_code+0xac>
        {
        	sem_take(sem_id_2);
 4000528:	01000084 	movi	r4,2
 400052c:	4012dd00 	call	4012dd0 <sem_take>
        	manual_flag = !manual_flag;
 4000530:	d0a33b03 	ldbu	r2,-29460(gp)
 4000534:	10803fcc 	andi	r2,r2,255
 4000538:	1005003a 	cmpeq	r2,r2,zero
 400053c:	d0a33b05 	stb	r2,-29460(gp)
        	sem_release(sem_id_2);
 4000540:	01000084 	movi	r4,2
 4000544:	4012e940 	call	4012e94 <sem_release>
        }
        sem_take(sem_id_2);
 4000548:	01000084 	movi	r4,2
 400054c:	4012dd00 	call	4012dd0 <sem_take>
        reset_flag = key_down_up(9);
 4000550:	01000244 	movi	r4,9
 4000554:	401294c0 	call	401294c <key_down_up>
 4000558:	d0a33ac5 	stb	r2,-29461(gp)
        sem_release(sem_id_2);
 400055c:	01000084 	movi	r4,2
 4000560:	4012e940 	call	4012e94 <sem_release>
		sem_take(sem_id_2);
 4000564:	01000084 	movi	r4,2
 4000568:	4012dd00 	call	4012dd0 <sem_take>
		arduino_digital_write(6, pump_flag);
 400056c:	d0a33b43 	ldbu	r2,-29459(gp)
 4000570:	10803fcc 	andi	r2,r2,255
 4000574:	100b883a 	mov	r5,r2
 4000578:	01000184 	movi	r4,6
 400057c:	400e9300 	call	400e930 <arduino_digital_write>
		sem_release(sem_id_2);
 4000580:	01000084 	movi	r4,2
 4000584:	4012e940 	call	4012e94 <sem_release>
    	const alt_u8 key_mask = IORD_ALTERA_AVALON_PIO_DATA(PIO_BUTTONS_IN_BASE);
 4000588:	00820274 	movhi	r2,2057
 400058c:	1085d804 	addi	r2,r2,5984
 4000590:	10800037 	ldwio	r2,0(r2)
 4000594:	e0bffe05 	stb	r2,-8(fp)
    	const alt_u8 key0_in = key_mask & 0x1;
 4000598:	e0bffe03 	ldbu	r2,-8(fp)
 400059c:	1080004c 	andi	r2,r2,1
 40005a0:	e0bffe45 	stb	r2,-7(fp)
    	if(key0_in == 0 && key0_in != key_flag2)
 40005a4:	e0bffe43 	ldbu	r2,-7(fp)
 40005a8:	10000c1e 	bne	r2,zero,40005dc <digital_in_code+0x140>
 40005ac:	d0a33a83 	ldbu	r2,-29462(gp)
 40005b0:	e0fffe43 	ldbu	r3,-7(fp)
 40005b4:	10803fcc 	andi	r2,r2,255
 40005b8:	18800826 	beq	r3,r2,40005dc <digital_in_code+0x140>
    	{
    		//key0 pressed call print_frame
    		clear_screen(Col_Black);
 40005bc:	0009883a 	mov	r4,zero
 40005c0:	40119080 	call	4011908 <clear_screen>
    		sem_take(sem_id_2);
 40005c4:	01000084 	movi	r4,2
 40005c8:	4012dd00 	call	4012dd0 <sem_take>
    		welcome_flag = 1;
 40005cc:	00800044 	movi	r2,1
 40005d0:	d0a33b85 	stb	r2,-29458(gp)
    		sem_release(sem_id_2);
 40005d4:	01000084 	movi	r4,2
 40005d8:	4012e940 	call	4012e94 <sem_release>
    	}
    	key_flag2 = key0_in;
 40005dc:	e0bffe43 	ldbu	r2,-7(fp)
 40005e0:	d0a33a85 	stb	r2,-29462(gp)

    	//printf("digital_in %d ", welcome_flag);
    }
 40005e4:	003fb606 	br	40004c0 <__ram_exceptions_end+0xfbf78224>

040005e8 <error_code>:

#include "functions_greenhouse.h"
#include "sierra_includes.h"

void error_code(void)
{
 40005e8:	defffc04 	addi	sp,sp,-16
 40005ec:	dfc00315 	stw	ra,12(sp)
 40005f0:	df000215 	stw	fp,8(sp)
 40005f4:	df000204 	addi	fp,sp,8
	task_periodic_start_union test;
   // printf("digital_in,Prio 1\n ");
    init_period_time(50); // 1 seconds period time
 40005f8:	01000c84 	movi	r4,50
 40005fc:	40136ec0 	call	40136ec <init_period_time>

    while(1) // Loop forever
    {
       	test = wait_for_next_period(); //every 1 second
 4000600:	401375c0 	call	401375c <wait_for_next_period>
 4000604:	e0bfff15 	stw	r2,-4(fp)
        	if((test.periodic_start_integer & 0x1) != 0)
 4000608:	e0bfff17 	ldw	r2,-4(fp)
 400060c:	1080004c 	andi	r2,r2,1
 4000610:	10000326 	beq	r2,zero,4000620 <error_code+0x38>
        	{
        		printf("deadline miss, plot_acc");
 4000614:	01010074 	movhi	r4,1025
 4000618:	2115d504 	addi	r4,r4,22356
 400061c:	400116c0 	call	400116c <printf>
        	}

       error_handler(reset_flag, &pump_flag, &tank_level, &error_flag1, &manual_flag);
 4000620:	d0a33ac3 	ldbu	r2,-29461(gp)
 4000624:	10c03fcc 	andi	r3,r2,255
 4000628:	d0a33b04 	addi	r2,gp,-29460
 400062c:	d8800015 	stw	r2,0(sp)
 4000630:	d1e33bc4 	addi	r7,gp,-29457
 4000634:	d1a00004 	addi	r6,gp,-32768
 4000638:	d1633b44 	addi	r5,gp,-29459
 400063c:	1809883a 	mov	r4,r3
 4000640:	4000b780 	call	4000b78 <error_handler>
       if(reset_flag == 1)
 4000644:	d0a33ac3 	ldbu	r2,-29461(gp)
 4000648:	10803fcc 	andi	r2,r2,255
 400064c:	10800058 	cmpnei	r2,r2,1
 4000650:	103feb1e 	bne	r2,zero,4000600 <__ram_exceptions_end+0xfbf78364>
       {
    	   sem_take(sem_id_1);
 4000654:	01000044 	movi	r4,1
 4000658:	4012dd00 	call	4012dd0 <sem_take>
    	   level_new = 100;
 400065c:	00801904 	movi	r2,100
 4000660:	d0a00045 	stb	r2,-32767(gp)
    	   level_old = 100;
 4000664:	00801904 	movi	r2,100
 4000668:	d0a00085 	stb	r2,-32766(gp)
    	   sem_release(sem_id_1);
 400066c:	01000044 	movi	r4,1
 4000670:	4012e940 	call	4012e94 <sem_release>
       }

    	//printf("error_code");
    }
 4000674:	003fe206 	br	4000600 <__ram_exceptions_end+0xfbf78364>

04000678 <hmi>:
/****************
 *
 *
 ***************/
void hmi(alt_u8 welcome_flag,alt_u8 mode, alt_u8 level, alt_u8 level_old, alt_u8 level_new, alt_u32 light, alt_u32 humidity)
{
 4000678:	defff304 	addi	sp,sp,-52
 400067c:	dfc00c15 	stw	ra,48(sp)
 4000680:	df000b15 	stw	fp,44(sp)
 4000684:	df000b04 	addi	fp,sp,44
 4000688:	2011883a 	mov	r8,r4
 400068c:	3009883a 	mov	r4,r6
 4000690:	3807883a 	mov	r3,r7
 4000694:	e0800217 	ldw	r2,8(fp)
 4000698:	e23ffb05 	stb	r8,-20(fp)
 400069c:	e17ffc05 	stb	r5,-16(fp)
 40006a0:	e13ffd05 	stb	r4,-12(fp)
 40006a4:	e0fffe05 	stb	r3,-8(fp)
 40006a8:	e0bfff05 	stb	r2,-4(fp)
	if(welcome_flag == 1)
 40006ac:	e0bffb03 	ldbu	r2,-20(fp)
 40006b0:	10800058 	cmpnei	r2,r2,1
 40006b4:	1000d91e 	bne	r2,zero,4000a1c <hmi+0x3a4>
	{
		//frame
		draw_hline(0, 120, 320, Col_White);
 40006b8:	01c001c4 	movi	r7,7
 40006bc:	01805004 	movi	r6,320
 40006c0:	01401e04 	movi	r5,120
 40006c4:	0009883a 	mov	r4,zero
 40006c8:	401192c0 	call	401192c <draw_hline>
		draw_vline(160,0,240, Col_White);
 40006cc:	01c001c4 	movi	r7,7
 40006d0:	01803c04 	movi	r6,240
 40006d4:	000b883a 	mov	r5,zero
 40006d8:	01002804 	movi	r4,160
 40006dc:	40119a40 	call	40119a4 <draw_vline>
		//tank
		tty_print(100, 80,"Level:", Col_White, Col_Black);
 40006e0:	d8000015 	stw	zero,0(sp)
 40006e4:	01c001c4 	movi	r7,7
 40006e8:	01810074 	movhi	r6,1025
 40006ec:	3195db04 	addi	r6,r6,22380
 40006f0:	01401404 	movi	r5,80
 40006f4:	01001904 	movi	r4,100
 40006f8:	401266c0 	call	401266c <tty_print>
		sem_take(sem_id_1);
 40006fc:	01000044 	movi	r4,1
 4000700:	4012dd00 	call	4012dd0 <sem_take>
		int_print(100, 100, level,3, Col_White, Col_Black);
 4000704:	e0fffd03 	ldbu	r3,-12(fp)
 4000708:	d8000115 	stw	zero,4(sp)
 400070c:	008001c4 	movi	r2,7
 4000710:	d8800015 	stw	r2,0(sp)
 4000714:	01c000c4 	movi	r7,3
 4000718:	180d883a 	mov	r6,r3
 400071c:	01401904 	movi	r5,100
 4000720:	01001904 	movi	r4,100
 4000724:	40126f80 	call	40126f8 <int_print>
		sem_release(sem_id_1);
 4000728:	01000044 	movi	r4,1
 400072c:	4012e940 	call	4012e94 <sem_release>
		draw_vline(60,5, 100, Col_White);
 4000730:	01c001c4 	movi	r7,7
 4000734:	01801904 	movi	r6,100
 4000738:	01400144 	movi	r5,5
 400073c:	01000f04 	movi	r4,60
 4000740:	40119a40 	call	40119a4 <draw_vline>
		draw_hline(60,105, 26, Col_White);
 4000744:	01c001c4 	movi	r7,7
 4000748:	01800684 	movi	r6,26
 400074c:	01401a44 	movi	r5,105
 4000750:	01000f04 	movi	r4,60
 4000754:	401192c0 	call	401192c <draw_hline>
		draw_vline(85,5, 100, Col_White);
 4000758:	01c001c4 	movi	r7,7
 400075c:	01801904 	movi	r6,100
 4000760:	01400144 	movi	r5,5
 4000764:	01001544 	movi	r4,85
 4000768:	40119a40 	call	40119a4 <draw_vline>
		if(level_new == level_old)
 400076c:	e0ffff03 	ldbu	r3,-4(fp)
 4000770:	e0bffe03 	ldbu	r2,-8(fp)
 4000774:	1880221e 	bne	r3,r2,4000800 <hmi+0x188>
		{
			//fill tank
			for(size_t i = 61; i < 85; i ++)
 4000778:	00800f44 	movi	r2,61
 400077c:	e0bff715 	stw	r2,-36(fp)
 4000780:	00001b06 	br	40007f0 <hmi+0x178>
			{
				for(size_t j = 105-level_new; j < 105; j ++)
 4000784:	e0bfff03 	ldbu	r2,-4(fp)
 4000788:	00c01a44 	movi	r3,105
 400078c:	1885c83a 	sub	r2,r3,r2
 4000790:	e0bff815 	stw	r2,-32(fp)
 4000794:	00001006 	br	40007d8 <hmi+0x160>
				{
					write_pixel(i, j, Col_Blue);
 4000798:	01405004 	movi	r5,320
 400079c:	e13ff817 	ldw	r4,-32(fp)
 40007a0:	40011140 	call	4001114 <__mulsi3>
 40007a4:	1007883a 	mov	r3,r2
 40007a8:	e0bff717 	ldw	r2,-36(fp)
 40007ac:	1885883a 	add	r2,r3,r2
 40007b0:	1085883a 	add	r2,r2,r2
 40007b4:	1085883a 	add	r2,r2,r2
 40007b8:	1007883a 	mov	r3,r2
 40007bc:	00820034 	movhi	r2,2048
 40007c0:	1885883a 	add	r2,r3,r2
 40007c4:	00c00044 	movi	r3,1
 40007c8:	10c00035 	stwio	r3,0(r2)
		if(level_new == level_old)
		{
			//fill tank
			for(size_t i = 61; i < 85; i ++)
			{
				for(size_t j = 105-level_new; j < 105; j ++)
 40007cc:	e0bff817 	ldw	r2,-32(fp)
 40007d0:	10800044 	addi	r2,r2,1
 40007d4:	e0bff815 	stw	r2,-32(fp)
 40007d8:	e0bff817 	ldw	r2,-32(fp)
 40007dc:	10801a70 	cmpltui	r2,r2,105
 40007e0:	103fed1e 	bne	r2,zero,4000798 <__ram_exceptions_end+0xfbf784fc>
		draw_hline(60,105, 26, Col_White);
		draw_vline(85,5, 100, Col_White);
		if(level_new == level_old)
		{
			//fill tank
			for(size_t i = 61; i < 85; i ++)
 40007e4:	e0bff717 	ldw	r2,-36(fp)
 40007e8:	10800044 	addi	r2,r2,1
 40007ec:	e0bff715 	stw	r2,-36(fp)
 40007f0:	e0bff717 	ldw	r2,-36(fp)
 40007f4:	10801570 	cmpltui	r2,r2,85
 40007f8:	103fe21e 	bne	r2,zero,4000784 <__ram_exceptions_end+0xfbf784e8>
 40007fc:	00002206 	br	4000888 <hmi+0x210>
				}
			}
		}
		else
		//empty tank
		for(size_t k = 61; k < 85; k++)
 4000800:	00800f44 	movi	r2,61
 4000804:	e0bff915 	stw	r2,-28(fp)
 4000808:	00001c06 	br	400087c <hmi+0x204>
		{
			for(size_t l = 5; l<105-level_new; l++)
 400080c:	00800144 	movi	r2,5
 4000810:	e0bffa15 	stw	r2,-24(fp)
 4000814:	00001006 	br	4000858 <hmi+0x1e0>
			{
				write_pixel(k, l,Col_Black);
 4000818:	01405004 	movi	r5,320
 400081c:	e13ffa17 	ldw	r4,-24(fp)
 4000820:	40011140 	call	4001114 <__mulsi3>
 4000824:	1007883a 	mov	r3,r2
 4000828:	e0bff917 	ldw	r2,-28(fp)
 400082c:	1885883a 	add	r2,r3,r2
 4000830:	1085883a 	add	r2,r2,r2
 4000834:	1085883a 	add	r2,r2,r2
 4000838:	1007883a 	mov	r3,r2
 400083c:	00820034 	movhi	r2,2048
 4000840:	1885883a 	add	r2,r3,r2
 4000844:	0007883a 	mov	r3,zero
 4000848:	10c00035 	stwio	r3,0(r2)
		}
		else
		//empty tank
		for(size_t k = 61; k < 85; k++)
		{
			for(size_t l = 5; l<105-level_new; l++)
 400084c:	e0bffa17 	ldw	r2,-24(fp)
 4000850:	10800044 	addi	r2,r2,1
 4000854:	e0bffa15 	stw	r2,-24(fp)
 4000858:	e0bfff03 	ldbu	r2,-4(fp)
 400085c:	00c01a44 	movi	r3,105
 4000860:	1885c83a 	sub	r2,r3,r2
 4000864:	1007883a 	mov	r3,r2
 4000868:	e0bffa17 	ldw	r2,-24(fp)
 400086c:	10ffea36 	bltu	r2,r3,4000818 <__ram_exceptions_end+0xfbf7857c>
				}
			}
		}
		else
		//empty tank
		for(size_t k = 61; k < 85; k++)
 4000870:	e0bff917 	ldw	r2,-28(fp)
 4000874:	10800044 	addi	r2,r2,1
 4000878:	e0bff915 	stw	r2,-28(fp)
 400087c:	e0bff917 	ldw	r2,-28(fp)
 4000880:	10801570 	cmpltui	r2,r2,85
 4000884:	103fe11e 	bne	r2,zero,400080c <__ram_exceptions_end+0xfbf78570>
			for(size_t l = 5; l<105-level_new; l++)
			{
				write_pixel(k, l,Col_Black);
			}
		}
		tty_print(170, 10,"Sensor Values", Col_White, Col_Black);
 4000888:	d8000015 	stw	zero,0(sp)
 400088c:	01c001c4 	movi	r7,7
 4000890:	01810074 	movhi	r6,1025
 4000894:	3195dd04 	addi	r6,r6,22388
 4000898:	01400284 	movi	r5,10
 400089c:	01002a84 	movi	r4,170
 40008a0:	401266c0 	call	401266c <tty_print>
		tty_print(170, 40,"Light:", Col_White, Col_Black);
 40008a4:	d8000015 	stw	zero,0(sp)
 40008a8:	01c001c4 	movi	r7,7
 40008ac:	01810074 	movhi	r6,1025
 40008b0:	3195e104 	addi	r6,r6,22404
 40008b4:	01400a04 	movi	r5,40
 40008b8:	01002a84 	movi	r4,170
 40008bc:	401266c0 	call	401266c <tty_print>
		tty_print(170, 60,"Soil:", Col_White, Col_Black);
 40008c0:	d8000015 	stw	zero,0(sp)
 40008c4:	01c001c4 	movi	r7,7
 40008c8:	01810074 	movhi	r6,1025
 40008cc:	3195e304 	addi	r6,r6,22412
 40008d0:	01400f04 	movi	r5,60
 40008d4:	01002a84 	movi	r4,170
 40008d8:	401266c0 	call	401266c <tty_print>
		//tty_print(170, 80,"Last watering:", Col_White, Col_Black);
		sem_take(sem_id_1);
 40008dc:	01000044 	movi	r4,1
 40008e0:	4012dd00 	call	4012dd0 <sem_take>
		int_print(250, 40, light,3,Col_White, Col_Black);
 40008e4:	e0c00317 	ldw	r3,12(fp)
 40008e8:	d8000115 	stw	zero,4(sp)
 40008ec:	008001c4 	movi	r2,7
 40008f0:	d8800015 	stw	r2,0(sp)
 40008f4:	01c000c4 	movi	r7,3
 40008f8:	180d883a 	mov	r6,r3
 40008fc:	01400a04 	movi	r5,40
 4000900:	01003e84 	movi	r4,250
 4000904:	40126f80 	call	40126f8 <int_print>
		int_print(250, 60, humidity,3,Col_White, Col_Black);
 4000908:	e0c00417 	ldw	r3,16(fp)
 400090c:	d8000115 	stw	zero,4(sp)
 4000910:	008001c4 	movi	r2,7
 4000914:	d8800015 	stw	r2,0(sp)
 4000918:	01c000c4 	movi	r7,3
 400091c:	180d883a 	mov	r6,r3
 4000920:	01400f04 	movi	r5,60
 4000924:	01003e84 	movi	r4,250
 4000928:	40126f80 	call	40126f8 <int_print>
		sem_release(sem_id_1);
 400092c:	01000044 	movi	r4,1
 4000930:	4012e940 	call	4012e94 <sem_release>
		tty_print(20, 130,"Mode", Col_White, Col_Black);
 4000934:	d8000015 	stw	zero,0(sp)
 4000938:	01c001c4 	movi	r7,7
 400093c:	01810074 	movhi	r6,1025
 4000940:	3195e504 	addi	r6,r6,22420
 4000944:	01402084 	movi	r5,130
 4000948:	01000504 	movi	r4,20
 400094c:	401266c0 	call	401266c <tty_print>
		tty_print(20, 220,"Auto", Col_White, Col_Black);
 4000950:	d8000015 	stw	zero,0(sp)
 4000954:	01c001c4 	movi	r7,7
 4000958:	01810074 	movhi	r6,1025
 400095c:	3195e704 	addi	r6,r6,22428
 4000960:	01403704 	movi	r5,220
 4000964:	01000504 	movi	r4,20
 4000968:	401266c0 	call	401266c <tty_print>
		tty_print(100, 220, "Hand", Col_White,Col_Black);
 400096c:	d8000015 	stw	zero,0(sp)
 4000970:	01c001c4 	movi	r7,7
 4000974:	01810074 	movhi	r6,1025
 4000978:	3195e904 	addi	r6,r6,22436
 400097c:	01403704 	movi	r5,220
 4000980:	01001904 	movi	r4,100
 4000984:	401266c0 	call	401266c <tty_print>
		sem_take(sem_id_2);
 4000988:	01000084 	movi	r4,2
 400098c:	4012dd00 	call	4012dd0 <sem_take>
		if(mode == 1)
 4000990:	e0bffc03 	ldbu	r2,-16(fp)
 4000994:	10800058 	cmpnei	r2,r2,1
 4000998:	10000b1e 	bne	r2,zero,40009c8 <hmi+0x350>
		{
			draw_filled_circle(38, 200, 12,Col_White);
 400099c:	01c001c4 	movi	r7,7
 40009a0:	01800304 	movi	r6,12
 40009a4:	01403204 	movi	r5,200
 40009a8:	01000984 	movi	r4,38
 40009ac:	4011ff40 	call	4011ff4 <draw_filled_circle>
			draw_filled_circle(118, 200, 12,Col_Red);
 40009b0:	01c00104 	movi	r7,4
 40009b4:	01800304 	movi	r6,12
 40009b8:	01403204 	movi	r5,200
 40009bc:	01001d84 	movi	r4,118
 40009c0:	4011ff40 	call	4011ff4 <draw_filled_circle>
 40009c4:	00000c06 	br	40009f8 <hmi+0x380>
		}
		else if (mode == 0)
 40009c8:	e0bffc03 	ldbu	r2,-16(fp)
 40009cc:	10000a1e 	bne	r2,zero,40009f8 <hmi+0x380>
		{
			draw_filled_circle(38, 200, 12,Col_Red);
 40009d0:	01c00104 	movi	r7,4
 40009d4:	01800304 	movi	r6,12
 40009d8:	01403204 	movi	r5,200
 40009dc:	01000984 	movi	r4,38
 40009e0:	4011ff40 	call	4011ff4 <draw_filled_circle>
			draw_filled_circle(118, 200, 12,Col_White);
 40009e4:	01c001c4 	movi	r7,7
 40009e8:	01800304 	movi	r6,12
 40009ec:	01403204 	movi	r5,200
 40009f0:	01001d84 	movi	r4,118
 40009f4:	4011ff40 	call	4011ff4 <draw_filled_circle>

		}
		tty_print(170, 130,"ErrorLog", Col_White, Col_Black);
 40009f8:	d8000015 	stw	zero,0(sp)
 40009fc:	01c001c4 	movi	r7,7
 4000a00:	01810074 	movhi	r6,1025
 4000a04:	3195eb04 	addi	r6,r6,22444
 4000a08:	01402084 	movi	r5,130
 4000a0c:	01002a84 	movi	r4,170
 4000a10:	401266c0 	call	401266c <tty_print>
		sem_release(sem_id_2);
 4000a14:	01000084 	movi	r4,2
 4000a18:	4012e940 	call	4012e94 <sem_release>
	}
}
 4000a1c:	0001883a 	nop
 4000a20:	e037883a 	mov	sp,fp
 4000a24:	dfc00117 	ldw	ra,4(sp)
 4000a28:	df000017 	ldw	fp,0(sp)
 4000a2c:	dec00204 	addi	sp,sp,8
 4000a30:	f800283a 	ret

04000a34 <analog_map>:
 *
 * return type
 * 	alt_u32 mapped analog value
 **********************************************/
alt_u32 analog_map(alt_u32 raw_data, alt_u32 in_min, alt_u32 in_max, alt_u32 out_min, alt_u32 out_max)
{
 4000a34:	defffa04 	addi	sp,sp,-24
 4000a38:	dfc00515 	stw	ra,20(sp)
 4000a3c:	df000415 	stw	fp,16(sp)
 4000a40:	df000404 	addi	fp,sp,16
 4000a44:	e13ffc15 	stw	r4,-16(fp)
 4000a48:	e17ffd15 	stw	r5,-12(fp)
 4000a4c:	e1bffe15 	stw	r6,-8(fp)
 4000a50:	e1ffff15 	stw	r7,-4(fp)
	return (raw_data - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 4000a54:	e0fffc17 	ldw	r3,-16(fp)
 4000a58:	e0bffd17 	ldw	r2,-12(fp)
 4000a5c:	1889c83a 	sub	r4,r3,r2
 4000a60:	e0c00217 	ldw	r3,8(fp)
 4000a64:	e0bfff17 	ldw	r2,-4(fp)
 4000a68:	1885c83a 	sub	r2,r3,r2
 4000a6c:	100b883a 	mov	r5,r2
 4000a70:	40011140 	call	4001114 <__mulsi3>
 4000a74:	1009883a 	mov	r4,r2
 4000a78:	e0fffe17 	ldw	r3,-8(fp)
 4000a7c:	e0bffd17 	ldw	r2,-12(fp)
 4000a80:	1885c83a 	sub	r2,r3,r2
 4000a84:	100b883a 	mov	r5,r2
 4000a88:	40010580 	call	4001058 <__udivsi3>
 4000a8c:	1007883a 	mov	r3,r2
 4000a90:	e0bfff17 	ldw	r2,-4(fp)
 4000a94:	1885883a 	add	r2,r3,r2
}
 4000a98:	e037883a 	mov	sp,fp
 4000a9c:	dfc00117 	ldw	ra,4(sp)
 4000aa0:	df000017 	ldw	fp,0(sp)
 4000aa4:	dec00204 	addi	sp,sp,8
 4000aa8:	f800283a 	ret

04000aac <analog_value>:
/****************
 *
 *
 ***************/
alt_u32 analog_value(alt_u8 channel)
{
 4000aac:	defffa04 	addi	sp,sp,-24
 4000ab0:	dfc00515 	stw	ra,20(sp)
 4000ab4:	df000415 	stw	fp,16(sp)
 4000ab8:	df000404 	addi	fp,sp,16
 4000abc:	2005883a 	mov	r2,r4
 4000ac0:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 analog_in;
	alt_u32 mapped_out;
	analog_in = arduino_analog_read(channel);
 4000ac4:	e0bfff03 	ldbu	r2,-4(fp)
 4000ac8:	1009883a 	mov	r4,r2
 4000acc:	400ea5c0 	call	400ea5c <arduino_analog_read>
 4000ad0:	e0bffd15 	stw	r2,-12(fp)
	//map to percent
	mapped_out = analog_map(analog_in,0,2765,0,100);
 4000ad4:	00801904 	movi	r2,100
 4000ad8:	d8800015 	stw	r2,0(sp)
 4000adc:	000f883a 	mov	r7,zero
 4000ae0:	0182b344 	movi	r6,2765
 4000ae4:	000b883a 	mov	r5,zero
 4000ae8:	e13ffd17 	ldw	r4,-12(fp)
 4000aec:	4000a340 	call	4000a34 <analog_map>
 4000af0:	e0bffe15 	stw	r2,-8(fp)
	return mapped_out;
 4000af4:	e0bffe17 	ldw	r2,-8(fp)
}
 4000af8:	e037883a 	mov	sp,fp
 4000afc:	dfc00117 	ldw	ra,4(sp)
 4000b00:	df000017 	ldw	fp,0(sp)
 4000b04:	dec00204 	addi	sp,sp,8
 4000b08:	f800283a 	ret

04000b0c <full_auto>:
/**********************************************
 *
 *
 **********************************************/
alt_u8 full_auto(alt_u32 light, alt_u32 humidity)
{
 4000b0c:	defffb04 	addi	sp,sp,-20
 4000b10:	dfc00415 	stw	ra,16(sp)
 4000b14:	df000315 	stw	fp,12(sp)
 4000b18:	df000304 	addi	fp,sp,12
 4000b1c:	e13ffe15 	stw	r4,-8(fp)
 4000b20:	e17fff15 	stw	r5,-4(fp)
	alt_u8 output = 0;
 4000b24:	e03ffd05 	stb	zero,-12(fp)
	sem_take(sem_id_1);
 4000b28:	01000044 	movi	r4,1
 4000b2c:	4012dd00 	call	4012dd0 <sem_take>
	if(light < light_threshold && humidity > humidity_threshold )
 4000b30:	e0bffe17 	ldw	r2,-8(fp)
 4000b34:	10800668 	cmpgeui	r2,r2,25
 4000b38:	1000061e 	bne	r2,zero,4000b54 <full_auto+0x48>
 4000b3c:	e0bfff17 	ldw	r2,-4(fp)
 4000b40:	108010b0 	cmpltui	r2,r2,66
 4000b44:	1000031e 	bne	r2,zero,4000b54 <full_auto+0x48>
	{
		output = 1;
 4000b48:	00800044 	movi	r2,1
 4000b4c:	e0bffd05 	stb	r2,-12(fp)
 4000b50:	00000106 	br	4000b58 <full_auto+0x4c>
	}
	else output = 0;
 4000b54:	e03ffd05 	stb	zero,-12(fp)
	sem_release(sem_id_1);
 4000b58:	01000044 	movi	r4,1
 4000b5c:	4012e940 	call	4012e94 <sem_release>
	return output;
 4000b60:	e0bffd03 	ldbu	r2,-12(fp)
}
 4000b64:	e037883a 	mov	sp,fp
 4000b68:	dfc00117 	ldw	ra,4(sp)
 4000b6c:	df000017 	ldw	fp,0(sp)
 4000b70:	dec00204 	addi	sp,sp,8
 4000b74:	f800283a 	ret

04000b78 <error_handler>:
/****************
 *
 *
 ***************/
void error_handler(alt_u8 reset, alt_u8 * pump, alt_u8 *level, alt_u8 *error_flag1,alt_u8 *mode)
{
 4000b78:	defff704 	addi	sp,sp,-36
 4000b7c:	dfc00815 	stw	ra,32(sp)
 4000b80:	df000715 	stw	fp,28(sp)
 4000b84:	df000704 	addi	fp,sp,28
 4000b88:	2005883a 	mov	r2,r4
 4000b8c:	e17ffd15 	stw	r5,-12(fp)
 4000b90:	e1bffe15 	stw	r6,-8(fp)
 4000b94:	e1ffff15 	stw	r7,-4(fp)
 4000b98:	e0bffc05 	stb	r2,-16(fp)
	//Error1 empty tank
	if(*level <= error_level)
 4000b9c:	e0bffe17 	ldw	r2,-8(fp)
 4000ba0:	10800003 	ldbu	r2,0(r2)
 4000ba4:	10803fcc 	andi	r2,r2,255
 4000ba8:	10801828 	cmpgeui	r2,r2,96
 4000bac:	1000301e 	bne	r2,zero,4000c70 <error_handler+0xf8>
	{
		sem_take(sem_id_2);
 4000bb0:	01000084 	movi	r4,2
 4000bb4:	4012dd00 	call	4012dd0 <sem_take>
		*error_flag1 = 1;
 4000bb8:	e0bfff17 	ldw	r2,-4(fp)
 4000bbc:	00c00044 	movi	r3,1
 4000bc0:	10c00005 	stb	r3,0(r2)
		sem_release(sem_id_2);
 4000bc4:	01000084 	movi	r4,2
 4000bc8:	4012e940 	call	4012e94 <sem_release>
		tty_print(170, 150,"Fill Tank", Col_Red, Col_Black);
 4000bcc:	d8000015 	stw	zero,0(sp)
 4000bd0:	01c00104 	movi	r7,4
 4000bd4:	01810074 	movhi	r6,1025
 4000bd8:	3195ee04 	addi	r6,r6,22456
 4000bdc:	01402584 	movi	r5,150
 4000be0:	01002a84 	movi	r4,170
 4000be4:	401266c0 	call	401266c <tty_print>
		tty_print(170, 170,"Press PB_4", Col_Red, Col_Black);
 4000be8:	d8000015 	stw	zero,0(sp)
 4000bec:	01c00104 	movi	r7,4
 4000bf0:	01810074 	movhi	r6,1025
 4000bf4:	3195f104 	addi	r6,r6,22468
 4000bf8:	01402a84 	movi	r5,170
 4000bfc:	01002a84 	movi	r4,170
 4000c00:	401266c0 	call	401266c <tty_print>
		tty_print(170, 190,"to confirm", Col_Red, Col_Black);
 4000c04:	d8000015 	stw	zero,0(sp)
 4000c08:	01c00104 	movi	r7,4
 4000c0c:	01810074 	movhi	r6,1025
 4000c10:	3195f404 	addi	r6,r6,22480
 4000c14:	01402f84 	movi	r5,190
 4000c18:	01002a84 	movi	r4,170
 4000c1c:	401266c0 	call	401266c <tty_print>
		sem_take(sem_id_2);
 4000c20:	01000084 	movi	r4,2
 4000c24:	4012dd00 	call	4012dd0 <sem_take>
		*mode = 1;
 4000c28:	e0800217 	ldw	r2,8(fp)
 4000c2c:	00c00044 	movi	r3,1
 4000c30:	10c00005 	stb	r3,0(r2)
		*pump = 0;
 4000c34:	e0bffd17 	ldw	r2,-12(fp)
 4000c38:	10000005 	stb	zero,0(r2)
		sem_release(sem_id_2);
 4000c3c:	01000084 	movi	r4,2
 4000c40:	4012e940 	call	4012e94 <sem_release>
		if(reset == 1)
 4000c44:	e0bffc03 	ldbu	r2,-16(fp)
 4000c48:	10800058 	cmpnei	r2,r2,1
 4000c4c:	1000321e 	bne	r2,zero,4000d18 <error_handler+0x1a0>
		{
			sem_take(sem_id_1);
 4000c50:	01000044 	movi	r4,1
 4000c54:	4012dd00 	call	4012dd0 <sem_take>
			*level = 100;
 4000c58:	e0bffe17 	ldw	r2,-8(fp)
 4000c5c:	00c01904 	movi	r3,100
 4000c60:	10c00005 	stb	r3,0(r2)
			sem_release(sem_id_1);
 4000c64:	01000044 	movi	r4,1
 4000c68:	4012e940 	call	4012e94 <sem_release>
			{
				write_pixel(i, j,Col_Black);
			}
		}
	}
}
 4000c6c:	00002a06 	br	4000d18 <error_handler+0x1a0>
			sem_take(sem_id_1);
			*level = 100;
			sem_release(sem_id_1);
		}
	}
	else if(*level == 100)
 4000c70:	e0bffe17 	ldw	r2,-8(fp)
 4000c74:	10800003 	ldbu	r2,0(r2)
 4000c78:	10803fcc 	andi	r2,r2,255
 4000c7c:	10801918 	cmpnei	r2,r2,100
 4000c80:	1000251e 	bne	r2,zero,4000d18 <error_handler+0x1a0>
	{
		sem_take(sem_id_2);
 4000c84:	01000084 	movi	r4,2
 4000c88:	4012dd00 	call	4012dd0 <sem_take>
		*error_flag1 = 0;
 4000c8c:	e0bfff17 	ldw	r2,-4(fp)
 4000c90:	10000005 	stb	zero,0(r2)
		sem_release(sem_id_2);
 4000c94:	01000084 	movi	r4,2
 4000c98:	4012e940 	call	4012e94 <sem_release>
		//erase message
		for(size_t i = 170; i <= 300; i++)
 4000c9c:	00802a84 	movi	r2,170
 4000ca0:	e0bffa15 	stw	r2,-24(fp)
 4000ca4:	00001906 	br	4000d0c <error_handler+0x194>
		{
			for(size_t j = 150; j <= 200; j++)
 4000ca8:	00802584 	movi	r2,150
 4000cac:	e0bffb15 	stw	r2,-20(fp)
 4000cb0:	00001006 	br	4000cf4 <error_handler+0x17c>
			{
				write_pixel(i, j,Col_Black);
 4000cb4:	01405004 	movi	r5,320
 4000cb8:	e13ffb17 	ldw	r4,-20(fp)
 4000cbc:	40011140 	call	4001114 <__mulsi3>
 4000cc0:	1007883a 	mov	r3,r2
 4000cc4:	e0bffa17 	ldw	r2,-24(fp)
 4000cc8:	1885883a 	add	r2,r3,r2
 4000ccc:	1085883a 	add	r2,r2,r2
 4000cd0:	1085883a 	add	r2,r2,r2
 4000cd4:	1007883a 	mov	r3,r2
 4000cd8:	00820034 	movhi	r2,2048
 4000cdc:	1885883a 	add	r2,r3,r2
 4000ce0:	0007883a 	mov	r3,zero
 4000ce4:	10c00035 	stwio	r3,0(r2)
		*error_flag1 = 0;
		sem_release(sem_id_2);
		//erase message
		for(size_t i = 170; i <= 300; i++)
		{
			for(size_t j = 150; j <= 200; j++)
 4000ce8:	e0bffb17 	ldw	r2,-20(fp)
 4000cec:	10800044 	addi	r2,r2,1
 4000cf0:	e0bffb15 	stw	r2,-20(fp)
 4000cf4:	e0bffb17 	ldw	r2,-20(fp)
 4000cf8:	10803270 	cmpltui	r2,r2,201
 4000cfc:	103fed1e 	bne	r2,zero,4000cb4 <__ram_exceptions_end+0xfbf78a18>
	{
		sem_take(sem_id_2);
		*error_flag1 = 0;
		sem_release(sem_id_2);
		//erase message
		for(size_t i = 170; i <= 300; i++)
 4000d00:	e0bffa17 	ldw	r2,-24(fp)
 4000d04:	10800044 	addi	r2,r2,1
 4000d08:	e0bffa15 	stw	r2,-24(fp)
 4000d0c:	e0bffa17 	ldw	r2,-24(fp)
 4000d10:	10804b70 	cmpltui	r2,r2,301
 4000d14:	103fe41e 	bne	r2,zero,4000ca8 <__ram_exceptions_end+0xfbf78a0c>
			{
				write_pixel(i, j,Col_Black);
			}
		}
	}
}
 4000d18:	0001883a 	nop
 4000d1c:	e037883a 	mov	sp,fp
 4000d20:	dfc00117 	ldw	ra,4(sp)
 4000d24:	df000017 	ldw	fp,0(sp)
 4000d28:	dec00204 	addi	sp,sp,8
 4000d2c:	f800283a 	ret

04000d30 <hmi_code>:
alt_u8 level_old = 100;
alt_u32 water_flow = 0;
alt_u32 light, humidity = 0; //analog 1 light sensor, analog 2 humidity sensor

void hmi_code(void)
{
 4000d30:	defffa04 	addi	sp,sp,-24
 4000d34:	dfc00515 	stw	ra,20(sp)
 4000d38:	df000415 	stw	fp,16(sp)
 4000d3c:	df000404 	addi	fp,sp,16
	task_periodic_start_union test;
    //printf("hmi,Prio 1\n ");
    init_period_time(75); // 2 seconds period time
 4000d40:	010012c4 	movi	r4,75
 4000d44:	40136ec0 	call	40136ec <init_period_time>

    while(1) // Loop forever
    {
       	test = wait_for_next_period(); //every 1 second
 4000d48:	401375c0 	call	401375c <wait_for_next_period>
 4000d4c:	e0bfff15 	stw	r2,-4(fp)
        	if((test.periodic_start_integer & 0x1) != 0)
 4000d50:	e0bfff17 	ldw	r2,-4(fp)
 4000d54:	1080004c 	andi	r2,r2,1
 4000d58:	10000326 	beq	r2,zero,4000d68 <hmi_code+0x38>
        	{
        		printf("deadline miss, plot_acc");
 4000d5c:	01010074 	movhi	r4,1025
 4000d60:	2115f704 	addi	r4,r4,22492
 4000d64:	400116c0 	call	400116c <printf>
        	}
        hmi(welcome_flag,manual_flag, tank_level, level_old, level_new, humidity, light);
 4000d68:	d0a33b83 	ldbu	r2,-29458(gp)
 4000d6c:	12003fcc 	andi	r8,r2,255
 4000d70:	d0a33b03 	ldbu	r2,-29460(gp)
 4000d74:	11403fcc 	andi	r5,r2,255
 4000d78:	d0a00003 	ldbu	r2,-32768(gp)
 4000d7c:	11803fcc 	andi	r6,r2,255
 4000d80:	d0a00083 	ldbu	r2,-32766(gp)
 4000d84:	11c03fcc 	andi	r7,r2,255
 4000d88:	d0a00043 	ldbu	r2,-32767(gp)
 4000d8c:	10803fcc 	andi	r2,r2,255
 4000d90:	d0e33e17 	ldw	r3,-29448(gp)
 4000d94:	d1233f17 	ldw	r4,-29444(gp)
 4000d98:	d9000215 	stw	r4,8(sp)
 4000d9c:	d8c00115 	stw	r3,4(sp)
 4000da0:	d8800015 	stw	r2,0(sp)
 4000da4:	4009883a 	mov	r4,r8
 4000da8:	40006780 	call	4000678 <hmi>
    	//printf("HMI\n");
    }
 4000dac:	003fe606 	br	4000d48 <__ram_exceptions_end+0xfbf78aac>

04000db0 <idle_code>:
 */

#include "sierra_includes.h"

void idle_code(void)
{
 4000db0:	defffe04 	addi	sp,sp,-8
 4000db4:	df000115 	stw	fp,4(sp)
 4000db8:	df000104 	addi	fp,sp,4
    /* Never blocked. Idle shall only be in running or ready state, lowest priority and taskid 0 */
	//printf("IDLE,Prio 0\n");

  while(1) // Loop forever!
  {
	for(size_t i=0; i<10000; i++);
 4000dbc:	e03fff15 	stw	zero,-4(fp)
 4000dc0:	00000306 	br	4000dd0 <idle_code+0x20>
 4000dc4:	e0bfff17 	ldw	r2,-4(fp)
 4000dc8:	10800044 	addi	r2,r2,1
 4000dcc:	e0bfff15 	stw	r2,-4(fp)
 4000dd0:	e0bfff17 	ldw	r2,-4(fp)
 4000dd4:	1089c430 	cmpltui	r2,r2,10000
 4000dd8:	103ffa1e 	bne	r2,zero,4000dc4 <__ram_exceptions_end+0xfbf78b28>
  //  printf(".");
  }
 4000ddc:	003ff706 	br	4000dbc <__ram_exceptions_end+0xfbf78b20>

04000de0 <main>:
#include "functions_greenhouse.h"
#include "sierra_includes.h"


int main()
{
 4000de0:	defffc04 	addi	sp,sp,-16
 4000de4:	dfc00315 	stw	ra,12(sp)
 4000de8:	df000215 	stw	fp,8(sp)
 4000dec:	df000204 	addi	fp,sp,8
	Sierra_Initiation_HW_and_SW();
 4000df0:	4012aa00 	call	4012aa0 <Sierra_Initiation_HW_and_SW>
	// HW Version
	printf("  Sierra HW version = %d\n", sierra_HW_version());
 4000df4:	4012a040 	call	4012a04 <sierra_HW_version>
 4000df8:	100b883a 	mov	r5,r2
 4000dfc:	01010074 	movhi	r4,1025
 4000e00:	2115fd04 	addi	r4,r4,22516
 4000e04:	400116c0 	call	400116c <printf>
	printf("  Sierra SW driver version = %d\n", sierra_SW_driver_version());
 4000e08:	40129d40 	call	40129d4 <sierra_SW_driver_version>
 4000e0c:	100b883a 	mov	r5,r2
 4000e10:	01010074 	movhi	r4,1025
 4000e14:	21160404 	addi	r4,r4,22544
 4000e18:	400116c0 	call	400116c <printf>
	//analog input init
	arduino_analog_init(MODULAR_ADC_0_SEQUENCER_CSR_BASE,MODULAR_ADC_0_SAMPLE_STORE_CSR_BASE);
 4000e1c:	01420274 	movhi	r5,2057
 4000e20:	29450004 	addi	r5,r5,5120
 4000e24:	01020274 	movhi	r4,2057
 4000e28:	2105e804 	addi	r4,r4,6048
 4000e2c:	400e9ec0 	call	400e9ec <arduino_analog_init>
	//clear screen at startup
	clear_screen(Col_Black);
 4000e30:	0009883a 	mov	r4,zero
 4000e34:	40119080 	call	4011908 <clear_screen>
	vga_init();
 4000e38:	40128400 	call	4012840 <vga_init>
	* Initialize time base register.
	* This example     : 50 MHz system-clock
	* Wanted tick time : 20 ms (50Hz)
	* Formula gives    : 20 ms x 50 MHx / 1000 => 1000(dec)
	* ******************************************************************/
	set_timebase(1000);
 4000e3c:	0100fa04 	movi	r4,1000
 4000e40:	4012a6c0 	call	4012a6c <set_timebase>
    //create task
	task_create(idle, 0, READY_TASK_STATE, idle_code, idle_stack, stack_size);
 4000e44:	0080fa04 	movi	r2,1000
 4000e48:	d8800115 	stw	r2,4(sp)
 4000e4c:	00810074 	movhi	r2,1025
 4000e50:	109e7404 	addi	r2,r2,31184
 4000e54:	d8800015 	stw	r2,0(sp)
 4000e58:	01c10034 	movhi	r7,1024
 4000e5c:	39c36c04 	addi	r7,r7,3504
 4000e60:	01800044 	movi	r6,1
 4000e64:	000b883a 	mov	r5,zero
 4000e68:	0009883a 	mov	r4,zero
 4000e6c:	40131a00 	call	40131a0 <task_create>
	task_create(hmi_task, 1, READY_TASK_STATE, hmi_code, hmi_stack, stack_size);
 4000e70:	0080fa04 	movi	r2,1000
 4000e74:	d8800115 	stw	r2,4(sp)
 4000e78:	008100b4 	movhi	r2,1026
 4000e7c:	10a06804 	addi	r2,r2,-32352
 4000e80:	d8800015 	stw	r2,0(sp)
 4000e84:	01c10034 	movhi	r7,1024
 4000e88:	39c34c04 	addi	r7,r7,3376
 4000e8c:	01800044 	movi	r6,1
 4000e90:	01400044 	movi	r5,1
 4000e94:	01000044 	movi	r4,1
 4000e98:	40131a00 	call	40131a0 <task_create>
	task_create(analog_task, 4, READY_TASK_STATE, analog_code, analog_stack, stack_size);
 4000e9c:	0080fa04 	movi	r2,1000
 4000ea0:	d8800115 	stw	r2,4(sp)
 4000ea4:	008100b4 	movhi	r2,1026
 4000ea8:	10a35604 	addi	r2,r2,-29352
 4000eac:	d8800015 	stw	r2,0(sp)
 4000eb0:	01c10034 	movhi	r7,1024
 4000eb4:	39c0ae04 	addi	r7,r7,696
 4000eb8:	01800044 	movi	r6,1
 4000ebc:	01400104 	movi	r5,4
 4000ec0:	01000084 	movi	r4,2
 4000ec4:	40131a00 	call	40131a0 <task_create>
	task_create(digital_in_task, 5, READY_TASK_STATE, digital_in_code, digital_in_stack, stack_size);
 4000ec8:	0080fa04 	movi	r2,1000
 4000ecc:	d8800115 	stw	r2,4(sp)
 4000ed0:	008100b4 	movhi	r2,1026
 4000ed4:	10a16204 	addi	r2,r2,-31352
 4000ed8:	d8800015 	stw	r2,0(sp)
 4000edc:	01c10034 	movhi	r7,1024
 4000ee0:	39c12704 	addi	r7,r7,1180
 4000ee4:	01800044 	movi	r6,1
 4000ee8:	01400144 	movi	r5,5
 4000eec:	010000c4 	movi	r4,3
 4000ef0:	40131a00 	call	40131a0 <task_create>
	task_create(auto_task, 9, READY_TASK_STATE, auto_code, auto_stack, stack_size);
 4000ef4:	0080fa04 	movi	r2,1000
 4000ef8:	d8800115 	stw	r2,4(sp)
 4000efc:	00810074 	movhi	r2,1025
 4000f00:	109f6e04 	addi	r2,r2,32184
 4000f04:	d8800015 	stw	r2,0(sp)
 4000f08:	01c10034 	movhi	r7,1024
 4000f0c:	39c0cb04 	addi	r7,r7,812
 4000f10:	01800044 	movi	r6,1
 4000f14:	01400244 	movi	r5,9
 4000f18:	01000104 	movi	r4,4
 4000f1c:	40131a00 	call	40131a0 <task_create>
	task_create(error_task, 2, READY_TASK_STATE, error_code, error_stack, stack_size);
 4000f20:	0080fa04 	movi	r2,1000
 4000f24:	d8800115 	stw	r2,4(sp)
 4000f28:	008100b4 	movhi	r2,1026
 4000f2c:	10a25c04 	addi	r2,r2,-30352
 4000f30:	d8800015 	stw	r2,0(sp)
 4000f34:	01c10034 	movhi	r7,1024
 4000f38:	39c17a04 	addi	r7,r7,1512
 4000f3c:	01800044 	movi	r6,1
 4000f40:	01400084 	movi	r5,2
 4000f44:	01000144 	movi	r4,5
 4000f48:	40131a00 	call	40131a0 <task_create>
	tsw_on();
 4000f4c:	4012c180 	call	4012c18 <tsw_on>

	while(1)
	{
	    // ERROR!!
	    printf ("* ERROR! SYSTEM FAILED *\n ");
 4000f50:	01010074 	movhi	r4,1025
 4000f54:	21160d04 	addi	r4,r4,22580
 4000f58:	400116c0 	call	400116c <printf>
	}
 4000f5c:	003ffc06 	br	4000f50 <__ram_exceptions_end+0xfbf78cb4>

04000f60 <__divsi3>:
 4000f60:	20001b16 	blt	r4,zero,4000fd0 <__divsi3+0x70>
 4000f64:	000f883a 	mov	r7,zero
 4000f68:	28001616 	blt	r5,zero,4000fc4 <__divsi3+0x64>
 4000f6c:	200d883a 	mov	r6,r4
 4000f70:	29001a2e 	bgeu	r5,r4,4000fdc <__divsi3+0x7c>
 4000f74:	00800804 	movi	r2,32
 4000f78:	00c00044 	movi	r3,1
 4000f7c:	00000106 	br	4000f84 <__divsi3+0x24>
 4000f80:	10000d26 	beq	r2,zero,4000fb8 <__divsi3+0x58>
 4000f84:	294b883a 	add	r5,r5,r5
 4000f88:	10bfffc4 	addi	r2,r2,-1
 4000f8c:	18c7883a 	add	r3,r3,r3
 4000f90:	293ffb36 	bltu	r5,r4,4000f80 <__ram_exceptions_end+0xfbf78ce4>
 4000f94:	0005883a 	mov	r2,zero
 4000f98:	18000726 	beq	r3,zero,4000fb8 <__divsi3+0x58>
 4000f9c:	0005883a 	mov	r2,zero
 4000fa0:	31400236 	bltu	r6,r5,4000fac <__divsi3+0x4c>
 4000fa4:	314dc83a 	sub	r6,r6,r5
 4000fa8:	10c4b03a 	or	r2,r2,r3
 4000fac:	1806d07a 	srli	r3,r3,1
 4000fb0:	280ad07a 	srli	r5,r5,1
 4000fb4:	183ffa1e 	bne	r3,zero,4000fa0 <__ram_exceptions_end+0xfbf78d04>
 4000fb8:	38000126 	beq	r7,zero,4000fc0 <__divsi3+0x60>
 4000fbc:	0085c83a 	sub	r2,zero,r2
 4000fc0:	f800283a 	ret
 4000fc4:	014bc83a 	sub	r5,zero,r5
 4000fc8:	39c0005c 	xori	r7,r7,1
 4000fcc:	003fe706 	br	4000f6c <__ram_exceptions_end+0xfbf78cd0>
 4000fd0:	0109c83a 	sub	r4,zero,r4
 4000fd4:	01c00044 	movi	r7,1
 4000fd8:	003fe306 	br	4000f68 <__ram_exceptions_end+0xfbf78ccc>
 4000fdc:	00c00044 	movi	r3,1
 4000fe0:	003fee06 	br	4000f9c <__ram_exceptions_end+0xfbf78d00>

04000fe4 <__modsi3>:
 4000fe4:	20001716 	blt	r4,zero,4001044 <__modsi3+0x60>
 4000fe8:	000f883a 	mov	r7,zero
 4000fec:	2005883a 	mov	r2,r4
 4000ff0:	28001216 	blt	r5,zero,400103c <__modsi3+0x58>
 4000ff4:	2900162e 	bgeu	r5,r4,4001050 <__modsi3+0x6c>
 4000ff8:	01800804 	movi	r6,32
 4000ffc:	00c00044 	movi	r3,1
 4001000:	00000106 	br	4001008 <__modsi3+0x24>
 4001004:	30000a26 	beq	r6,zero,4001030 <__modsi3+0x4c>
 4001008:	294b883a 	add	r5,r5,r5
 400100c:	31bfffc4 	addi	r6,r6,-1
 4001010:	18c7883a 	add	r3,r3,r3
 4001014:	293ffb36 	bltu	r5,r4,4001004 <__ram_exceptions_end+0xfbf78d68>
 4001018:	18000526 	beq	r3,zero,4001030 <__modsi3+0x4c>
 400101c:	1806d07a 	srli	r3,r3,1
 4001020:	11400136 	bltu	r2,r5,4001028 <__modsi3+0x44>
 4001024:	1145c83a 	sub	r2,r2,r5
 4001028:	280ad07a 	srli	r5,r5,1
 400102c:	183ffb1e 	bne	r3,zero,400101c <__ram_exceptions_end+0xfbf78d80>
 4001030:	38000126 	beq	r7,zero,4001038 <__modsi3+0x54>
 4001034:	0085c83a 	sub	r2,zero,r2
 4001038:	f800283a 	ret
 400103c:	014bc83a 	sub	r5,zero,r5
 4001040:	003fec06 	br	4000ff4 <__ram_exceptions_end+0xfbf78d58>
 4001044:	0109c83a 	sub	r4,zero,r4
 4001048:	01c00044 	movi	r7,1
 400104c:	003fe706 	br	4000fec <__ram_exceptions_end+0xfbf78d50>
 4001050:	00c00044 	movi	r3,1
 4001054:	003ff106 	br	400101c <__ram_exceptions_end+0xfbf78d80>

04001058 <__udivsi3>:
 4001058:	200d883a 	mov	r6,r4
 400105c:	2900152e 	bgeu	r5,r4,40010b4 <__udivsi3+0x5c>
 4001060:	28001416 	blt	r5,zero,40010b4 <__udivsi3+0x5c>
 4001064:	00800804 	movi	r2,32
 4001068:	00c00044 	movi	r3,1
 400106c:	00000206 	br	4001078 <__udivsi3+0x20>
 4001070:	10000e26 	beq	r2,zero,40010ac <__udivsi3+0x54>
 4001074:	28000516 	blt	r5,zero,400108c <__udivsi3+0x34>
 4001078:	294b883a 	add	r5,r5,r5
 400107c:	10bfffc4 	addi	r2,r2,-1
 4001080:	18c7883a 	add	r3,r3,r3
 4001084:	293ffa36 	bltu	r5,r4,4001070 <__ram_exceptions_end+0xfbf78dd4>
 4001088:	18000826 	beq	r3,zero,40010ac <__udivsi3+0x54>
 400108c:	0005883a 	mov	r2,zero
 4001090:	31400236 	bltu	r6,r5,400109c <__udivsi3+0x44>
 4001094:	314dc83a 	sub	r6,r6,r5
 4001098:	10c4b03a 	or	r2,r2,r3
 400109c:	1806d07a 	srli	r3,r3,1
 40010a0:	280ad07a 	srli	r5,r5,1
 40010a4:	183ffa1e 	bne	r3,zero,4001090 <__ram_exceptions_end+0xfbf78df4>
 40010a8:	f800283a 	ret
 40010ac:	0005883a 	mov	r2,zero
 40010b0:	f800283a 	ret
 40010b4:	00c00044 	movi	r3,1
 40010b8:	003ff406 	br	400108c <__ram_exceptions_end+0xfbf78df0>

040010bc <__umodsi3>:
 40010bc:	2005883a 	mov	r2,r4
 40010c0:	2900122e 	bgeu	r5,r4,400110c <__umodsi3+0x50>
 40010c4:	28001116 	blt	r5,zero,400110c <__umodsi3+0x50>
 40010c8:	01800804 	movi	r6,32
 40010cc:	00c00044 	movi	r3,1
 40010d0:	00000206 	br	40010dc <__umodsi3+0x20>
 40010d4:	30000c26 	beq	r6,zero,4001108 <__umodsi3+0x4c>
 40010d8:	28000516 	blt	r5,zero,40010f0 <__umodsi3+0x34>
 40010dc:	294b883a 	add	r5,r5,r5
 40010e0:	31bfffc4 	addi	r6,r6,-1
 40010e4:	18c7883a 	add	r3,r3,r3
 40010e8:	293ffa36 	bltu	r5,r4,40010d4 <__ram_exceptions_end+0xfbf78e38>
 40010ec:	18000626 	beq	r3,zero,4001108 <__umodsi3+0x4c>
 40010f0:	1806d07a 	srli	r3,r3,1
 40010f4:	11400136 	bltu	r2,r5,40010fc <__umodsi3+0x40>
 40010f8:	1145c83a 	sub	r2,r2,r5
 40010fc:	280ad07a 	srli	r5,r5,1
 4001100:	183ffb1e 	bne	r3,zero,40010f0 <__ram_exceptions_end+0xfbf78e54>
 4001104:	f800283a 	ret
 4001108:	f800283a 	ret
 400110c:	00c00044 	movi	r3,1
 4001110:	003ff706 	br	40010f0 <__ram_exceptions_end+0xfbf78e54>

04001114 <__mulsi3>:
 4001114:	0005883a 	mov	r2,zero
 4001118:	20000726 	beq	r4,zero,4001138 <__mulsi3+0x24>
 400111c:	20c0004c 	andi	r3,r4,1
 4001120:	2008d07a 	srli	r4,r4,1
 4001124:	18000126 	beq	r3,zero,400112c <__mulsi3+0x18>
 4001128:	1145883a 	add	r2,r2,r5
 400112c:	294b883a 	add	r5,r5,r5
 4001130:	203ffa1e 	bne	r4,zero,400111c <__ram_exceptions_end+0xfbf78e80>
 4001134:	f800283a 	ret
 4001138:	f800283a 	ret

0400113c <_printf_r>:
 400113c:	defffd04 	addi	sp,sp,-12
 4001140:	2805883a 	mov	r2,r5
 4001144:	dfc00015 	stw	ra,0(sp)
 4001148:	d9800115 	stw	r6,4(sp)
 400114c:	d9c00215 	stw	r7,8(sp)
 4001150:	21400217 	ldw	r5,8(r4)
 4001154:	d9c00104 	addi	r7,sp,4
 4001158:	100d883a 	mov	r6,r2
 400115c:	40011a80 	call	40011a8 <___vfprintf_internal_r>
 4001160:	dfc00017 	ldw	ra,0(sp)
 4001164:	dec00304 	addi	sp,sp,12
 4001168:	f800283a 	ret

0400116c <printf>:
 400116c:	defffc04 	addi	sp,sp,-16
 4001170:	dfc00015 	stw	ra,0(sp)
 4001174:	d9400115 	stw	r5,4(sp)
 4001178:	d9800215 	stw	r6,8(sp)
 400117c:	d9c00315 	stw	r7,12(sp)
 4001180:	00810074 	movhi	r2,1025
 4001184:	109b1804 	addi	r2,r2,27744
 4001188:	10800017 	ldw	r2,0(r2)
 400118c:	200b883a 	mov	r5,r4
 4001190:	d9800104 	addi	r6,sp,4
 4001194:	11000217 	ldw	r4,8(r2)
 4001198:	40034840 	call	4003484 <__vfprintf_internal>
 400119c:	dfc00017 	ldw	ra,0(sp)
 40011a0:	dec00404 	addi	sp,sp,16
 40011a4:	f800283a 	ret

040011a8 <___vfprintf_internal_r>:
 40011a8:	deffb804 	addi	sp,sp,-288
 40011ac:	dfc04715 	stw	ra,284(sp)
 40011b0:	ddc04515 	stw	r23,276(sp)
 40011b4:	dd404315 	stw	r21,268(sp)
 40011b8:	d9002d15 	stw	r4,180(sp)
 40011bc:	282f883a 	mov	r23,r5
 40011c0:	302b883a 	mov	r21,r6
 40011c4:	d9c02e15 	stw	r7,184(sp)
 40011c8:	df004615 	stw	fp,280(sp)
 40011cc:	dd804415 	stw	r22,272(sp)
 40011d0:	dd004215 	stw	r20,264(sp)
 40011d4:	dcc04115 	stw	r19,260(sp)
 40011d8:	dc804015 	stw	r18,256(sp)
 40011dc:	dc403f15 	stw	r17,252(sp)
 40011e0:	dc003e15 	stw	r16,248(sp)
 40011e4:	4005c200 	call	4005c20 <_localeconv_r>
 40011e8:	10800017 	ldw	r2,0(r2)
 40011ec:	1009883a 	mov	r4,r2
 40011f0:	d8803415 	stw	r2,208(sp)
 40011f4:	4007d040 	call	4007d04 <strlen>
 40011f8:	d8803715 	stw	r2,220(sp)
 40011fc:	d8802d17 	ldw	r2,180(sp)
 4001200:	10000226 	beq	r2,zero,400120c <___vfprintf_internal_r+0x64>
 4001204:	10800e17 	ldw	r2,56(r2)
 4001208:	1000fb26 	beq	r2,zero,40015f8 <___vfprintf_internal_r+0x450>
 400120c:	b880030b 	ldhu	r2,12(r23)
 4001210:	10c8000c 	andi	r3,r2,8192
 4001214:	1800061e 	bne	r3,zero,4001230 <___vfprintf_internal_r+0x88>
 4001218:	b9001917 	ldw	r4,100(r23)
 400121c:	00f7ffc4 	movi	r3,-8193
 4001220:	10880014 	ori	r2,r2,8192
 4001224:	20c6703a 	and	r3,r4,r3
 4001228:	b880030d 	sth	r2,12(r23)
 400122c:	b8c01915 	stw	r3,100(r23)
 4001230:	10c0020c 	andi	r3,r2,8
 4001234:	1800c326 	beq	r3,zero,4001544 <___vfprintf_internal_r+0x39c>
 4001238:	b8c00417 	ldw	r3,16(r23)
 400123c:	1800c126 	beq	r3,zero,4001544 <___vfprintf_internal_r+0x39c>
 4001240:	1080068c 	andi	r2,r2,26
 4001244:	00c00284 	movi	r3,10
 4001248:	10c0c626 	beq	r2,r3,4001564 <___vfprintf_internal_r+0x3bc>
 400124c:	d8c00404 	addi	r3,sp,16
 4001250:	05010074 	movhi	r20,1025
 4001254:	d9001e04 	addi	r4,sp,120
 4001258:	a51623c4 	addi	r20,r20,22671
 400125c:	d8c01e15 	stw	r3,120(sp)
 4001260:	d8002015 	stw	zero,128(sp)
 4001264:	d8001f15 	stw	zero,124(sp)
 4001268:	d8003315 	stw	zero,204(sp)
 400126c:	d8003615 	stw	zero,216(sp)
 4001270:	d8003815 	stw	zero,224(sp)
 4001274:	1811883a 	mov	r8,r3
 4001278:	d8003915 	stw	zero,228(sp)
 400127c:	d8003a15 	stw	zero,232(sp)
 4001280:	d8002f15 	stw	zero,188(sp)
 4001284:	d9002815 	stw	r4,160(sp)
 4001288:	a8800007 	ldb	r2,0(r21)
 400128c:	10028b26 	beq	r2,zero,4001cbc <___vfprintf_internal_r+0xb14>
 4001290:	00c00944 	movi	r3,37
 4001294:	a823883a 	mov	r17,r21
 4001298:	10c0021e 	bne	r2,r3,40012a4 <___vfprintf_internal_r+0xfc>
 400129c:	00001406 	br	40012f0 <___vfprintf_internal_r+0x148>
 40012a0:	10c00326 	beq	r2,r3,40012b0 <___vfprintf_internal_r+0x108>
 40012a4:	8c400044 	addi	r17,r17,1
 40012a8:	88800007 	ldb	r2,0(r17)
 40012ac:	103ffc1e 	bne	r2,zero,40012a0 <__ram_exceptions_end+0xfbf79004>
 40012b0:	8d61c83a 	sub	r16,r17,r21
 40012b4:	80000e26 	beq	r16,zero,40012f0 <___vfprintf_internal_r+0x148>
 40012b8:	d8c02017 	ldw	r3,128(sp)
 40012bc:	d8801f17 	ldw	r2,124(sp)
 40012c0:	45400015 	stw	r21,0(r8)
 40012c4:	1c07883a 	add	r3,r3,r16
 40012c8:	10800044 	addi	r2,r2,1
 40012cc:	d8c02015 	stw	r3,128(sp)
 40012d0:	44000115 	stw	r16,4(r8)
 40012d4:	d8801f15 	stw	r2,124(sp)
 40012d8:	00c001c4 	movi	r3,7
 40012dc:	1880a916 	blt	r3,r2,4001584 <___vfprintf_internal_r+0x3dc>
 40012e0:	42000204 	addi	r8,r8,8
 40012e4:	d9402f17 	ldw	r5,188(sp)
 40012e8:	2c0b883a 	add	r5,r5,r16
 40012ec:	d9402f15 	stw	r5,188(sp)
 40012f0:	88800007 	ldb	r2,0(r17)
 40012f4:	1000aa26 	beq	r2,zero,40015a0 <___vfprintf_internal_r+0x3f8>
 40012f8:	8d400044 	addi	r21,r17,1
 40012fc:	8c400047 	ldb	r17,1(r17)
 4001300:	0021883a 	mov	r16,zero
 4001304:	00bfffc4 	movi	r2,-1
 4001308:	0025883a 	mov	r18,zero
 400130c:	dc002905 	stb	r16,164(sp)
 4001310:	d8002785 	stb	zero,158(sp)
 4001314:	d8002b05 	stb	zero,172(sp)
 4001318:	d8802a15 	stw	r2,168(sp)
 400131c:	d8003115 	stw	zero,196(sp)
 4001320:	04c01604 	movi	r19,88
 4001324:	05800244 	movi	r22,9
 4001328:	9021883a 	mov	r16,r18
 400132c:	4039883a 	mov	fp,r8
 4001330:	ad400044 	addi	r21,r21,1
 4001334:	88bff804 	addi	r2,r17,-32
 4001338:	98833236 	bltu	r19,r2,4002004 <___vfprintf_internal_r+0xe5c>
 400133c:	100490ba 	slli	r2,r2,2
 4001340:	00c10034 	movhi	r3,1024
 4001344:	18c4d504 	addi	r3,r3,4948
 4001348:	10c5883a 	add	r2,r2,r3
 400134c:	10800017 	ldw	r2,0(r2)
 4001350:	1000683a 	jmp	r2
 4001354:	04001efc 	xorhi	r16,zero,123
 4001358:	04002004 	movi	r16,128
 400135c:	04002004 	movi	r16,128
 4001360:	04001f1c 	xori	r16,zero,124
 4001364:	04002004 	movi	r16,128
 4001368:	04002004 	movi	r16,128
 400136c:	04002004 	movi	r16,128
 4001370:	04002004 	movi	r16,128
 4001374:	04002004 	movi	r16,128
 4001378:	04002004 	movi	r16,128
 400137c:	04001604 	movi	r16,88
 4001380:	04001e0c 	andi	r16,zero,120
 4001384:	04002004 	movi	r16,128
 4001388:	040014c8 	cmpgei	r16,zero,83
 400138c:	04001628 	cmpgeui	r16,zero,88
 4001390:	04002004 	movi	r16,128
 4001394:	04001678 	rdprs	r16,zero,89
 4001398:	04001684 	movi	r16,90
 400139c:	04001684 	movi	r16,90
 40013a0:	04001684 	movi	r16,90
 40013a4:	04001684 	movi	r16,90
 40013a8:	04001684 	movi	r16,90
 40013ac:	04001684 	movi	r16,90
 40013b0:	04001684 	movi	r16,90
 40013b4:	04001684 	movi	r16,90
 40013b8:	04001684 	movi	r16,90
 40013bc:	04002004 	movi	r16,128
 40013c0:	04002004 	movi	r16,128
 40013c4:	04002004 	movi	r16,128
 40013c8:	04002004 	movi	r16,128
 40013cc:	04002004 	movi	r16,128
 40013d0:	04002004 	movi	r16,128
 40013d4:	04002004 	movi	r16,128
 40013d8:	04002004 	movi	r16,128
 40013dc:	04002004 	movi	r16,128
 40013e0:	04002004 	movi	r16,128
 40013e4:	040016c0 	call	40016c <alt_exception_trap+0x40016c>
 40013e8:	04001788 	cmpgei	r16,zero,94
 40013ec:	04002004 	movi	r16,128
 40013f0:	04001788 	cmpgei	r16,zero,94
 40013f4:	04002004 	movi	r16,128
 40013f8:	04002004 	movi	r16,128
 40013fc:	04002004 	movi	r16,128
 4001400:	04002004 	movi	r16,128
 4001404:	04001834 	movhi	r16,96
 4001408:	04002004 	movi	r16,128
 400140c:	04002004 	movi	r16,128
 4001410:	04001840 	call	400184 <alt_exception_trap+0x400184>
 4001414:	04002004 	movi	r16,128
 4001418:	04002004 	movi	r16,128
 400141c:	04002004 	movi	r16,128
 4001420:	04002004 	movi	r16,128
 4001424:	04002004 	movi	r16,128
 4001428:	04001cc4 	movi	r16,115
 400142c:	04002004 	movi	r16,128
 4001430:	04002004 	movi	r16,128
 4001434:	04001d30 	cmpltui	r16,zero,116
 4001438:	04002004 	movi	r16,128
 400143c:	04002004 	movi	r16,128
 4001440:	04002004 	movi	r16,128
 4001444:	04002004 	movi	r16,128
 4001448:	04002004 	movi	r16,128
 400144c:	04002004 	movi	r16,128
 4001450:	04002004 	movi	r16,128
 4001454:	04002004 	movi	r16,128
 4001458:	04002004 	movi	r16,128
 400145c:	04002004 	movi	r16,128
 4001460:	04001fa8 	cmpgeui	r16,zero,126
 4001464:	04001f28 	cmpgeui	r16,zero,124
 4001468:	04001788 	cmpgei	r16,zero,94
 400146c:	04001788 	cmpgei	r16,zero,94
 4001470:	04001788 	cmpgei	r16,zero,94
 4001474:	04001f48 	cmpgei	r16,zero,125
 4001478:	04001f28 	cmpgeui	r16,zero,124
 400147c:	04002004 	movi	r16,128
 4001480:	04002004 	movi	r16,128
 4001484:	04001f54 	movui	r16,125
 4001488:	04002004 	movi	r16,128
 400148c:	04001f68 	cmpgeui	r16,zero,125
 4001490:	04001dec 	andhi	r16,zero,119
 4001494:	040014d4 	movui	r16,83
 4001498:	04001e24 	muli	r16,zero,120
 400149c:	04002004 	movi	r16,128
 40014a0:	04001e30 	cmpltui	r16,zero,120
 40014a4:	04002004 	movi	r16,128
 40014a8:	04001e94 	movui	r16,122
 40014ac:	04002004 	movi	r16,128
 40014b0:	04002004 	movi	r16,128
 40014b4:	04001eb4 	movhi	r16,122
 40014b8:	d8c03117 	ldw	r3,196(sp)
 40014bc:	d8802e15 	stw	r2,184(sp)
 40014c0:	00c7c83a 	sub	r3,zero,r3
 40014c4:	d8c03115 	stw	r3,196(sp)
 40014c8:	84000114 	ori	r16,r16,4
 40014cc:	ac400007 	ldb	r17,0(r21)
 40014d0:	003f9706 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 40014d4:	00800c04 	movi	r2,48
 40014d8:	d8802705 	stb	r2,156(sp)
 40014dc:	00801e04 	movi	r2,120
 40014e0:	d8802745 	stb	r2,157(sp)
 40014e4:	d9002a17 	ldw	r4,168(sp)
 40014e8:	d8802e17 	ldw	r2,184(sp)
 40014ec:	d8002785 	stb	zero,158(sp)
 40014f0:	e011883a 	mov	r8,fp
 40014f4:	10c00104 	addi	r3,r2,4
 40014f8:	14c00017 	ldw	r19,0(r2)
 40014fc:	002d883a 	mov	r22,zero
 4001500:	80800094 	ori	r2,r16,2
 4001504:	2002ca16 	blt	r4,zero,4002030 <___vfprintf_internal_r+0xe88>
 4001508:	00bfdfc4 	movi	r2,-129
 400150c:	80a4703a 	and	r18,r16,r2
 4001510:	d8c02e15 	stw	r3,184(sp)
 4001514:	94800094 	ori	r18,r18,2
 4001518:	9802b41e 	bne	r19,zero,4001fec <___vfprintf_internal_r+0xe44>
 400151c:	01410074 	movhi	r5,1025
 4001520:	29561d04 	addi	r5,r5,22644
 4001524:	d9403915 	stw	r5,228(sp)
 4001528:	04401e04 	movi	r17,120
 400152c:	d8802a17 	ldw	r2,168(sp)
 4001530:	0039883a 	mov	fp,zero
 4001534:	1001fa26 	beq	r2,zero,4001d20 <___vfprintf_internal_r+0xb78>
 4001538:	0027883a 	mov	r19,zero
 400153c:	002d883a 	mov	r22,zero
 4001540:	00021906 	br	4001da8 <___vfprintf_internal_r+0xc00>
 4001544:	d9002d17 	ldw	r4,180(sp)
 4001548:	b80b883a 	mov	r5,r23
 400154c:	400355c0 	call	400355c <__swsetup_r>
 4001550:	1005dc1e 	bne	r2,zero,4002cc4 <___vfprintf_internal_r+0x1b1c>
 4001554:	b880030b 	ldhu	r2,12(r23)
 4001558:	00c00284 	movi	r3,10
 400155c:	1080068c 	andi	r2,r2,26
 4001560:	10ff3a1e 	bne	r2,r3,400124c <__ram_exceptions_end+0xfbf78fb0>
 4001564:	b880038f 	ldh	r2,14(r23)
 4001568:	103f3816 	blt	r2,zero,400124c <__ram_exceptions_end+0xfbf78fb0>
 400156c:	d9c02e17 	ldw	r7,184(sp)
 4001570:	d9002d17 	ldw	r4,180(sp)
 4001574:	a80d883a 	mov	r6,r21
 4001578:	b80b883a 	mov	r5,r23
 400157c:	40034a00 	call	40034a0 <__sbprintf>
 4001580:	00001106 	br	40015c8 <___vfprintf_internal_r+0x420>
 4001584:	d9002d17 	ldw	r4,180(sp)
 4001588:	d9801e04 	addi	r6,sp,120
 400158c:	b80b883a 	mov	r5,r23
 4001590:	4007e980 	call	4007e98 <__sprint_r>
 4001594:	1000081e 	bne	r2,zero,40015b8 <___vfprintf_internal_r+0x410>
 4001598:	da000404 	addi	r8,sp,16
 400159c:	003f5106 	br	40012e4 <__ram_exceptions_end+0xfbf79048>
 40015a0:	d8802017 	ldw	r2,128(sp)
 40015a4:	10000426 	beq	r2,zero,40015b8 <___vfprintf_internal_r+0x410>
 40015a8:	d9002d17 	ldw	r4,180(sp)
 40015ac:	d9801e04 	addi	r6,sp,120
 40015b0:	b80b883a 	mov	r5,r23
 40015b4:	4007e980 	call	4007e98 <__sprint_r>
 40015b8:	b880030b 	ldhu	r2,12(r23)
 40015bc:	1080100c 	andi	r2,r2,64
 40015c0:	1005c01e 	bne	r2,zero,4002cc4 <___vfprintf_internal_r+0x1b1c>
 40015c4:	d8802f17 	ldw	r2,188(sp)
 40015c8:	dfc04717 	ldw	ra,284(sp)
 40015cc:	df004617 	ldw	fp,280(sp)
 40015d0:	ddc04517 	ldw	r23,276(sp)
 40015d4:	dd804417 	ldw	r22,272(sp)
 40015d8:	dd404317 	ldw	r21,268(sp)
 40015dc:	dd004217 	ldw	r20,264(sp)
 40015e0:	dcc04117 	ldw	r19,260(sp)
 40015e4:	dc804017 	ldw	r18,256(sp)
 40015e8:	dc403f17 	ldw	r17,252(sp)
 40015ec:	dc003e17 	ldw	r16,248(sp)
 40015f0:	dec04804 	addi	sp,sp,288
 40015f4:	f800283a 	ret
 40015f8:	d9002d17 	ldw	r4,180(sp)
 40015fc:	40055680 	call	4005568 <__sinit>
 4001600:	003f0206 	br	400120c <__ram_exceptions_end+0xfbf78f70>
 4001604:	d9002e17 	ldw	r4,184(sp)
 4001608:	d9402e17 	ldw	r5,184(sp)
 400160c:	21000017 	ldw	r4,0(r4)
 4001610:	28800104 	addi	r2,r5,4
 4001614:	d9003115 	stw	r4,196(sp)
 4001618:	203fa716 	blt	r4,zero,40014b8 <__ram_exceptions_end+0xfbf7921c>
 400161c:	d8802e15 	stw	r2,184(sp)
 4001620:	ac400007 	ldb	r17,0(r21)
 4001624:	003f4206 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 4001628:	ac400007 	ldb	r17,0(r21)
 400162c:	01000a84 	movi	r4,42
 4001630:	a8c00044 	addi	r3,r21,1
 4001634:	89075826 	beq	r17,r4,4003398 <___vfprintf_internal_r+0x21f0>
 4001638:	8cbff404 	addi	r18,r17,-48
 400163c:	b486ae36 	bltu	r22,r18,40030f8 <___vfprintf_internal_r+0x1f50>
 4001640:	0009883a 	mov	r4,zero
 4001644:	1823883a 	mov	r17,r3
 4001648:	01400284 	movi	r5,10
 400164c:	40011140 	call	4001114 <__mulsi3>
 4001650:	88c00007 	ldb	r3,0(r17)
 4001654:	1489883a 	add	r4,r2,r18
 4001658:	8d400044 	addi	r21,r17,1
 400165c:	1cbff404 	addi	r18,r3,-48
 4001660:	a823883a 	mov	r17,r21
 4001664:	b4bff82e 	bgeu	r22,r18,4001648 <__ram_exceptions_end+0xfbf793ac>
 4001668:	1823883a 	mov	r17,r3
 400166c:	2005f616 	blt	r4,zero,4002e48 <___vfprintf_internal_r+0x1ca0>
 4001670:	d9002a15 	stw	r4,168(sp)
 4001674:	003f2f06 	br	4001334 <__ram_exceptions_end+0xfbf79098>
 4001678:	84002014 	ori	r16,r16,128
 400167c:	ac400007 	ldb	r17,0(r21)
 4001680:	003f2b06 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 4001684:	8cbff404 	addi	r18,r17,-48
 4001688:	d8003115 	stw	zero,196(sp)
 400168c:	0009883a 	mov	r4,zero
 4001690:	a823883a 	mov	r17,r21
 4001694:	01400284 	movi	r5,10
 4001698:	40011140 	call	4001114 <__mulsi3>
 400169c:	88c00007 	ldb	r3,0(r17)
 40016a0:	9089883a 	add	r4,r18,r2
 40016a4:	ad400044 	addi	r21,r21,1
 40016a8:	1cbff404 	addi	r18,r3,-48
 40016ac:	a823883a 	mov	r17,r21
 40016b0:	b4bff82e 	bgeu	r22,r18,4001694 <__ram_exceptions_end+0xfbf793f8>
 40016b4:	1823883a 	mov	r17,r3
 40016b8:	d9003115 	stw	r4,196(sp)
 40016bc:	003f1d06 	br	4001334 <__ram_exceptions_end+0xfbf79098>
 40016c0:	8025883a 	mov	r18,r16
 40016c4:	dc002903 	ldbu	r16,164(sp)
 40016c8:	e011883a 	mov	r8,fp
 40016cc:	84003fcc 	andi	r16,r16,255
 40016d0:	8007531e 	bne	r16,zero,4003420 <___vfprintf_internal_r+0x2278>
 40016d4:	94800414 	ori	r18,r18,16
 40016d8:	9080080c 	andi	r2,r18,32
 40016dc:	1003a326 	beq	r2,zero,400256c <___vfprintf_internal_r+0x13c4>
 40016e0:	d9002e17 	ldw	r4,184(sp)
 40016e4:	20800117 	ldw	r2,4(r4)
 40016e8:	24c00017 	ldw	r19,0(r4)
 40016ec:	21000204 	addi	r4,r4,8
 40016f0:	d9002e15 	stw	r4,184(sp)
 40016f4:	102d883a 	mov	r22,r2
 40016f8:	10047316 	blt	r2,zero,40028c8 <___vfprintf_internal_r+0x1720>
 40016fc:	d9002a17 	ldw	r4,168(sp)
 4001700:	df002783 	ldbu	fp,158(sp)
 4001704:	2003e416 	blt	r4,zero,4002698 <___vfprintf_internal_r+0x14f0>
 4001708:	00ffdfc4 	movi	r3,-129
 400170c:	9d84b03a 	or	r2,r19,r22
 4001710:	90e4703a 	and	r18,r18,r3
 4001714:	10018026 	beq	r2,zero,4001d18 <___vfprintf_internal_r+0xb70>
 4001718:	b003ab26 	beq	r22,zero,40025c8 <___vfprintf_internal_r+0x1420>
 400171c:	dc402915 	stw	r17,164(sp)
 4001720:	dc001e04 	addi	r16,sp,120
 4001724:	b023883a 	mov	r17,r22
 4001728:	402d883a 	mov	r22,r8
 400172c:	9809883a 	mov	r4,r19
 4001730:	880b883a 	mov	r5,r17
 4001734:	01800284 	movi	r6,10
 4001738:	000f883a 	mov	r7,zero
 400173c:	400af640 	call	400af64 <__umoddi3>
 4001740:	10800c04 	addi	r2,r2,48
 4001744:	843fffc4 	addi	r16,r16,-1
 4001748:	9809883a 	mov	r4,r19
 400174c:	880b883a 	mov	r5,r17
 4001750:	80800005 	stb	r2,0(r16)
 4001754:	01800284 	movi	r6,10
 4001758:	000f883a 	mov	r7,zero
 400175c:	400a9680 	call	400a968 <__udivdi3>
 4001760:	1027883a 	mov	r19,r2
 4001764:	10c4b03a 	or	r2,r2,r3
 4001768:	1823883a 	mov	r17,r3
 400176c:	103fef1e 	bne	r2,zero,400172c <__ram_exceptions_end+0xfbf79490>
 4001770:	d8c02817 	ldw	r3,160(sp)
 4001774:	dc402917 	ldw	r17,164(sp)
 4001778:	b011883a 	mov	r8,r22
 400177c:	1c07c83a 	sub	r3,r3,r16
 4001780:	d8c02b15 	stw	r3,172(sp)
 4001784:	00005f06 	br	4001904 <___vfprintf_internal_r+0x75c>
 4001788:	8025883a 	mov	r18,r16
 400178c:	dc002903 	ldbu	r16,164(sp)
 4001790:	e011883a 	mov	r8,fp
 4001794:	84003fcc 	andi	r16,r16,255
 4001798:	80071e1e 	bne	r16,zero,4003414 <___vfprintf_internal_r+0x226c>
 400179c:	9080020c 	andi	r2,r18,8
 40017a0:	1004af26 	beq	r2,zero,4002a60 <___vfprintf_internal_r+0x18b8>
 40017a4:	d9002e17 	ldw	r4,184(sp)
 40017a8:	d9402e17 	ldw	r5,184(sp)
 40017ac:	d8802e17 	ldw	r2,184(sp)
 40017b0:	21000017 	ldw	r4,0(r4)
 40017b4:	29400117 	ldw	r5,4(r5)
 40017b8:	10800204 	addi	r2,r2,8
 40017bc:	d9003615 	stw	r4,216(sp)
 40017c0:	d9403815 	stw	r5,224(sp)
 40017c4:	d8802e15 	stw	r2,184(sp)
 40017c8:	d9003617 	ldw	r4,216(sp)
 40017cc:	d9403817 	ldw	r5,224(sp)
 40017d0:	da003d15 	stw	r8,244(sp)
 40017d4:	04000044 	movi	r16,1
 40017d8:	4007a240 	call	4007a24 <__fpclassifyd>
 40017dc:	da003d17 	ldw	r8,244(sp)
 40017e0:	1404441e 	bne	r2,r16,40028f4 <___vfprintf_internal_r+0x174c>
 40017e4:	d9003617 	ldw	r4,216(sp)
 40017e8:	d9403817 	ldw	r5,224(sp)
 40017ec:	000d883a 	mov	r6,zero
 40017f0:	000f883a 	mov	r7,zero
 40017f4:	400c9080 	call	400c908 <__ledf2>
 40017f8:	da003d17 	ldw	r8,244(sp)
 40017fc:	1005e316 	blt	r2,zero,4002f8c <___vfprintf_internal_r+0x1de4>
 4001800:	df002783 	ldbu	fp,158(sp)
 4001804:	008011c4 	movi	r2,71
 4001808:	1445580e 	bge	r2,r17,4002d6c <___vfprintf_internal_r+0x1bc4>
 400180c:	04010074 	movhi	r16,1025
 4001810:	84161504 	addi	r16,r16,22612
 4001814:	00c000c4 	movi	r3,3
 4001818:	00bfdfc4 	movi	r2,-129
 400181c:	d8c02915 	stw	r3,164(sp)
 4001820:	90a4703a 	and	r18,r18,r2
 4001824:	d8c02b15 	stw	r3,172(sp)
 4001828:	d8002a15 	stw	zero,168(sp)
 400182c:	d8003215 	stw	zero,200(sp)
 4001830:	00003a06 	br	400191c <___vfprintf_internal_r+0x774>
 4001834:	84000214 	ori	r16,r16,8
 4001838:	ac400007 	ldb	r17,0(r21)
 400183c:	003ebc06 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 4001840:	8025883a 	mov	r18,r16
 4001844:	dc002903 	ldbu	r16,164(sp)
 4001848:	e011883a 	mov	r8,fp
 400184c:	84003fcc 	andi	r16,r16,255
 4001850:	8007001e 	bne	r16,zero,4003454 <___vfprintf_internal_r+0x22ac>
 4001854:	94800414 	ori	r18,r18,16
 4001858:	9080080c 	andi	r2,r18,32
 400185c:	1002fa26 	beq	r2,zero,4002448 <___vfprintf_internal_r+0x12a0>
 4001860:	d9002e17 	ldw	r4,184(sp)
 4001864:	d9402a17 	ldw	r5,168(sp)
 4001868:	d8002785 	stb	zero,158(sp)
 400186c:	20800204 	addi	r2,r4,8
 4001870:	24c00017 	ldw	r19,0(r4)
 4001874:	25800117 	ldw	r22,4(r4)
 4001878:	2804b116 	blt	r5,zero,4002b40 <___vfprintf_internal_r+0x1998>
 400187c:	013fdfc4 	movi	r4,-129
 4001880:	9d86b03a 	or	r3,r19,r22
 4001884:	d8802e15 	stw	r2,184(sp)
 4001888:	9124703a 	and	r18,r18,r4
 400188c:	1802fb1e 	bne	r3,zero,400247c <___vfprintf_internal_r+0x12d4>
 4001890:	d8c02a17 	ldw	r3,168(sp)
 4001894:	0039883a 	mov	fp,zero
 4001898:	1805e526 	beq	r3,zero,4003030 <___vfprintf_internal_r+0x1e88>
 400189c:	0027883a 	mov	r19,zero
 40018a0:	002d883a 	mov	r22,zero
 40018a4:	dc001e04 	addi	r16,sp,120
 40018a8:	9806d0fa 	srli	r3,r19,3
 40018ac:	b008977a 	slli	r4,r22,29
 40018b0:	b02cd0fa 	srli	r22,r22,3
 40018b4:	9cc001cc 	andi	r19,r19,7
 40018b8:	98800c04 	addi	r2,r19,48
 40018bc:	843fffc4 	addi	r16,r16,-1
 40018c0:	20e6b03a 	or	r19,r4,r3
 40018c4:	80800005 	stb	r2,0(r16)
 40018c8:	9d86b03a 	or	r3,r19,r22
 40018cc:	183ff61e 	bne	r3,zero,40018a8 <__ram_exceptions_end+0xfbf7960c>
 40018d0:	90c0004c 	andi	r3,r18,1
 40018d4:	18014126 	beq	r3,zero,4001ddc <___vfprintf_internal_r+0xc34>
 40018d8:	10803fcc 	andi	r2,r2,255
 40018dc:	1080201c 	xori	r2,r2,128
 40018e0:	10bfe004 	addi	r2,r2,-128
 40018e4:	00c00c04 	movi	r3,48
 40018e8:	10c13c26 	beq	r2,r3,4001ddc <___vfprintf_internal_r+0xc34>
 40018ec:	80ffffc5 	stb	r3,-1(r16)
 40018f0:	d8c02817 	ldw	r3,160(sp)
 40018f4:	80bfffc4 	addi	r2,r16,-1
 40018f8:	1021883a 	mov	r16,r2
 40018fc:	1887c83a 	sub	r3,r3,r2
 4001900:	d8c02b15 	stw	r3,172(sp)
 4001904:	d8802b17 	ldw	r2,172(sp)
 4001908:	d9002a17 	ldw	r4,168(sp)
 400190c:	1100010e 	bge	r2,r4,4001914 <___vfprintf_internal_r+0x76c>
 4001910:	2005883a 	mov	r2,r4
 4001914:	d8802915 	stw	r2,164(sp)
 4001918:	d8003215 	stw	zero,200(sp)
 400191c:	e7003fcc 	andi	fp,fp,255
 4001920:	e700201c 	xori	fp,fp,128
 4001924:	e73fe004 	addi	fp,fp,-128
 4001928:	e0000326 	beq	fp,zero,4001938 <___vfprintf_internal_r+0x790>
 400192c:	d8c02917 	ldw	r3,164(sp)
 4001930:	18c00044 	addi	r3,r3,1
 4001934:	d8c02915 	stw	r3,164(sp)
 4001938:	90c0008c 	andi	r3,r18,2
 400193c:	d8c02c15 	stw	r3,176(sp)
 4001940:	18000326 	beq	r3,zero,4001950 <___vfprintf_internal_r+0x7a8>
 4001944:	d8c02917 	ldw	r3,164(sp)
 4001948:	18c00084 	addi	r3,r3,2
 400194c:	d8c02915 	stw	r3,164(sp)
 4001950:	90c0210c 	andi	r3,r18,132
 4001954:	d8c03015 	stw	r3,192(sp)
 4001958:	1801c51e 	bne	r3,zero,4002070 <___vfprintf_internal_r+0xec8>
 400195c:	d9003117 	ldw	r4,196(sp)
 4001960:	d8c02917 	ldw	r3,164(sp)
 4001964:	20e7c83a 	sub	r19,r4,r3
 4001968:	04c1c10e 	bge	zero,r19,4002070 <___vfprintf_internal_r+0xec8>
 400196c:	02400404 	movi	r9,16
 4001970:	d8c02017 	ldw	r3,128(sp)
 4001974:	d8801f17 	ldw	r2,124(sp)
 4001978:	4cc52f0e 	bge	r9,r19,4002e38 <___vfprintf_internal_r+0x1c90>
 400197c:	01410074 	movhi	r5,1025
 4001980:	295627c4 	addi	r5,r5,22687
 4001984:	dc403b15 	stw	r17,236(sp)
 4001988:	d9403515 	stw	r5,212(sp)
 400198c:	9823883a 	mov	r17,r19
 4001990:	482d883a 	mov	r22,r9
 4001994:	9027883a 	mov	r19,r18
 4001998:	070001c4 	movi	fp,7
 400199c:	8025883a 	mov	r18,r16
 40019a0:	dc002d17 	ldw	r16,180(sp)
 40019a4:	00000306 	br	40019b4 <___vfprintf_internal_r+0x80c>
 40019a8:	8c7ffc04 	addi	r17,r17,-16
 40019ac:	42000204 	addi	r8,r8,8
 40019b0:	b440130e 	bge	r22,r17,4001a00 <___vfprintf_internal_r+0x858>
 40019b4:	01010074 	movhi	r4,1025
 40019b8:	18c00404 	addi	r3,r3,16
 40019bc:	10800044 	addi	r2,r2,1
 40019c0:	211627c4 	addi	r4,r4,22687
 40019c4:	41000015 	stw	r4,0(r8)
 40019c8:	45800115 	stw	r22,4(r8)
 40019cc:	d8c02015 	stw	r3,128(sp)
 40019d0:	d8801f15 	stw	r2,124(sp)
 40019d4:	e0bff40e 	bge	fp,r2,40019a8 <__ram_exceptions_end+0xfbf7970c>
 40019d8:	d9801e04 	addi	r6,sp,120
 40019dc:	b80b883a 	mov	r5,r23
 40019e0:	8009883a 	mov	r4,r16
 40019e4:	4007e980 	call	4007e98 <__sprint_r>
 40019e8:	103ef31e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 40019ec:	8c7ffc04 	addi	r17,r17,-16
 40019f0:	d8c02017 	ldw	r3,128(sp)
 40019f4:	d8801f17 	ldw	r2,124(sp)
 40019f8:	da000404 	addi	r8,sp,16
 40019fc:	b47fed16 	blt	r22,r17,40019b4 <__ram_exceptions_end+0xfbf79718>
 4001a00:	9021883a 	mov	r16,r18
 4001a04:	9825883a 	mov	r18,r19
 4001a08:	8827883a 	mov	r19,r17
 4001a0c:	dc403b17 	ldw	r17,236(sp)
 4001a10:	d9403517 	ldw	r5,212(sp)
 4001a14:	98c7883a 	add	r3,r19,r3
 4001a18:	10800044 	addi	r2,r2,1
 4001a1c:	41400015 	stw	r5,0(r8)
 4001a20:	44c00115 	stw	r19,4(r8)
 4001a24:	d8c02015 	stw	r3,128(sp)
 4001a28:	d8801f15 	stw	r2,124(sp)
 4001a2c:	010001c4 	movi	r4,7
 4001a30:	2082c516 	blt	r4,r2,4002548 <___vfprintf_internal_r+0x13a0>
 4001a34:	df002787 	ldb	fp,158(sp)
 4001a38:	42000204 	addi	r8,r8,8
 4001a3c:	e0000c26 	beq	fp,zero,4001a70 <___vfprintf_internal_r+0x8c8>
 4001a40:	d8801f17 	ldw	r2,124(sp)
 4001a44:	d9002784 	addi	r4,sp,158
 4001a48:	18c00044 	addi	r3,r3,1
 4001a4c:	10800044 	addi	r2,r2,1
 4001a50:	41000015 	stw	r4,0(r8)
 4001a54:	01000044 	movi	r4,1
 4001a58:	41000115 	stw	r4,4(r8)
 4001a5c:	d8c02015 	stw	r3,128(sp)
 4001a60:	d8801f15 	stw	r2,124(sp)
 4001a64:	010001c4 	movi	r4,7
 4001a68:	20825e16 	blt	r4,r2,40023e4 <___vfprintf_internal_r+0x123c>
 4001a6c:	42000204 	addi	r8,r8,8
 4001a70:	d8802c17 	ldw	r2,176(sp)
 4001a74:	10000c26 	beq	r2,zero,4001aa8 <___vfprintf_internal_r+0x900>
 4001a78:	d8801f17 	ldw	r2,124(sp)
 4001a7c:	d9002704 	addi	r4,sp,156
 4001a80:	18c00084 	addi	r3,r3,2
 4001a84:	10800044 	addi	r2,r2,1
 4001a88:	41000015 	stw	r4,0(r8)
 4001a8c:	01000084 	movi	r4,2
 4001a90:	41000115 	stw	r4,4(r8)
 4001a94:	d8c02015 	stw	r3,128(sp)
 4001a98:	d8801f15 	stw	r2,124(sp)
 4001a9c:	010001c4 	movi	r4,7
 4001aa0:	20825816 	blt	r4,r2,4002404 <___vfprintf_internal_r+0x125c>
 4001aa4:	42000204 	addi	r8,r8,8
 4001aa8:	d9003017 	ldw	r4,192(sp)
 4001aac:	00802004 	movi	r2,128
 4001ab0:	2081bb26 	beq	r4,r2,40021a0 <___vfprintf_internal_r+0xff8>
 4001ab4:	d9402a17 	ldw	r5,168(sp)
 4001ab8:	d8802b17 	ldw	r2,172(sp)
 4001abc:	28adc83a 	sub	r22,r5,r2
 4001ac0:	0580310e 	bge	zero,r22,4001b88 <___vfprintf_internal_r+0x9e0>
 4001ac4:	07000404 	movi	fp,16
 4001ac8:	d8801f17 	ldw	r2,124(sp)
 4001acc:	e584360e 	bge	fp,r22,4002ba8 <___vfprintf_internal_r+0x1a00>
 4001ad0:	01410074 	movhi	r5,1025
 4001ad4:	295623c4 	addi	r5,r5,22671
 4001ad8:	dc402a15 	stw	r17,168(sp)
 4001adc:	d9402c15 	stw	r5,176(sp)
 4001ae0:	b023883a 	mov	r17,r22
 4001ae4:	04c001c4 	movi	r19,7
 4001ae8:	a82d883a 	mov	r22,r21
 4001aec:	902b883a 	mov	r21,r18
 4001af0:	8025883a 	mov	r18,r16
 4001af4:	dc002d17 	ldw	r16,180(sp)
 4001af8:	00000306 	br	4001b08 <___vfprintf_internal_r+0x960>
 4001afc:	8c7ffc04 	addi	r17,r17,-16
 4001b00:	42000204 	addi	r8,r8,8
 4001b04:	e440110e 	bge	fp,r17,4001b4c <___vfprintf_internal_r+0x9a4>
 4001b08:	18c00404 	addi	r3,r3,16
 4001b0c:	10800044 	addi	r2,r2,1
 4001b10:	45000015 	stw	r20,0(r8)
 4001b14:	47000115 	stw	fp,4(r8)
 4001b18:	d8c02015 	stw	r3,128(sp)
 4001b1c:	d8801f15 	stw	r2,124(sp)
 4001b20:	98bff60e 	bge	r19,r2,4001afc <__ram_exceptions_end+0xfbf79860>
 4001b24:	d9801e04 	addi	r6,sp,120
 4001b28:	b80b883a 	mov	r5,r23
 4001b2c:	8009883a 	mov	r4,r16
 4001b30:	4007e980 	call	4007e98 <__sprint_r>
 4001b34:	103ea01e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4001b38:	8c7ffc04 	addi	r17,r17,-16
 4001b3c:	d8c02017 	ldw	r3,128(sp)
 4001b40:	d8801f17 	ldw	r2,124(sp)
 4001b44:	da000404 	addi	r8,sp,16
 4001b48:	e47fef16 	blt	fp,r17,4001b08 <__ram_exceptions_end+0xfbf7986c>
 4001b4c:	9021883a 	mov	r16,r18
 4001b50:	a825883a 	mov	r18,r21
 4001b54:	b02b883a 	mov	r21,r22
 4001b58:	882d883a 	mov	r22,r17
 4001b5c:	dc402a17 	ldw	r17,168(sp)
 4001b60:	d9002c17 	ldw	r4,176(sp)
 4001b64:	1d87883a 	add	r3,r3,r22
 4001b68:	10800044 	addi	r2,r2,1
 4001b6c:	41000015 	stw	r4,0(r8)
 4001b70:	45800115 	stw	r22,4(r8)
 4001b74:	d8c02015 	stw	r3,128(sp)
 4001b78:	d8801f15 	stw	r2,124(sp)
 4001b7c:	010001c4 	movi	r4,7
 4001b80:	20821016 	blt	r4,r2,40023c4 <___vfprintf_internal_r+0x121c>
 4001b84:	42000204 	addi	r8,r8,8
 4001b88:	9080400c 	andi	r2,r18,256
 4001b8c:	10013a1e 	bne	r2,zero,4002078 <___vfprintf_internal_r+0xed0>
 4001b90:	d9402b17 	ldw	r5,172(sp)
 4001b94:	d8801f17 	ldw	r2,124(sp)
 4001b98:	44000015 	stw	r16,0(r8)
 4001b9c:	1947883a 	add	r3,r3,r5
 4001ba0:	10800044 	addi	r2,r2,1
 4001ba4:	41400115 	stw	r5,4(r8)
 4001ba8:	d8c02015 	stw	r3,128(sp)
 4001bac:	d8801f15 	stw	r2,124(sp)
 4001bb0:	010001c4 	movi	r4,7
 4001bb4:	2081f516 	blt	r4,r2,400238c <___vfprintf_internal_r+0x11e4>
 4001bb8:	42000204 	addi	r8,r8,8
 4001bbc:	9480010c 	andi	r18,r18,4
 4001bc0:	90003226 	beq	r18,zero,4001c8c <___vfprintf_internal_r+0xae4>
 4001bc4:	d9403117 	ldw	r5,196(sp)
 4001bc8:	d8802917 	ldw	r2,164(sp)
 4001bcc:	28a1c83a 	sub	r16,r5,r2
 4001bd0:	04002e0e 	bge	zero,r16,4001c8c <___vfprintf_internal_r+0xae4>
 4001bd4:	04400404 	movi	r17,16
 4001bd8:	d8801f17 	ldw	r2,124(sp)
 4001bdc:	8c04c40e 	bge	r17,r16,4002ef0 <___vfprintf_internal_r+0x1d48>
 4001be0:	01410074 	movhi	r5,1025
 4001be4:	295627c4 	addi	r5,r5,22687
 4001be8:	d9403515 	stw	r5,212(sp)
 4001bec:	048001c4 	movi	r18,7
 4001bf0:	dcc02d17 	ldw	r19,180(sp)
 4001bf4:	00000306 	br	4001c04 <___vfprintf_internal_r+0xa5c>
 4001bf8:	843ffc04 	addi	r16,r16,-16
 4001bfc:	42000204 	addi	r8,r8,8
 4001c00:	8c00130e 	bge	r17,r16,4001c50 <___vfprintf_internal_r+0xaa8>
 4001c04:	01010074 	movhi	r4,1025
 4001c08:	18c00404 	addi	r3,r3,16
 4001c0c:	10800044 	addi	r2,r2,1
 4001c10:	211627c4 	addi	r4,r4,22687
 4001c14:	41000015 	stw	r4,0(r8)
 4001c18:	44400115 	stw	r17,4(r8)
 4001c1c:	d8c02015 	stw	r3,128(sp)
 4001c20:	d8801f15 	stw	r2,124(sp)
 4001c24:	90bff40e 	bge	r18,r2,4001bf8 <__ram_exceptions_end+0xfbf7995c>
 4001c28:	d9801e04 	addi	r6,sp,120
 4001c2c:	b80b883a 	mov	r5,r23
 4001c30:	9809883a 	mov	r4,r19
 4001c34:	4007e980 	call	4007e98 <__sprint_r>
 4001c38:	103e5f1e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4001c3c:	843ffc04 	addi	r16,r16,-16
 4001c40:	d8c02017 	ldw	r3,128(sp)
 4001c44:	d8801f17 	ldw	r2,124(sp)
 4001c48:	da000404 	addi	r8,sp,16
 4001c4c:	8c3fed16 	blt	r17,r16,4001c04 <__ram_exceptions_end+0xfbf79968>
 4001c50:	d9403517 	ldw	r5,212(sp)
 4001c54:	1c07883a 	add	r3,r3,r16
 4001c58:	10800044 	addi	r2,r2,1
 4001c5c:	41400015 	stw	r5,0(r8)
 4001c60:	44000115 	stw	r16,4(r8)
 4001c64:	d8c02015 	stw	r3,128(sp)
 4001c68:	d8801f15 	stw	r2,124(sp)
 4001c6c:	010001c4 	movi	r4,7
 4001c70:	2080060e 	bge	r4,r2,4001c8c <___vfprintf_internal_r+0xae4>
 4001c74:	d9002d17 	ldw	r4,180(sp)
 4001c78:	d9801e04 	addi	r6,sp,120
 4001c7c:	b80b883a 	mov	r5,r23
 4001c80:	4007e980 	call	4007e98 <__sprint_r>
 4001c84:	103e4c1e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4001c88:	d8c02017 	ldw	r3,128(sp)
 4001c8c:	d8803117 	ldw	r2,196(sp)
 4001c90:	d9002917 	ldw	r4,164(sp)
 4001c94:	1100010e 	bge	r2,r4,4001c9c <___vfprintf_internal_r+0xaf4>
 4001c98:	2005883a 	mov	r2,r4
 4001c9c:	d9402f17 	ldw	r5,188(sp)
 4001ca0:	288b883a 	add	r5,r5,r2
 4001ca4:	d9402f15 	stw	r5,188(sp)
 4001ca8:	1801c01e 	bne	r3,zero,40023ac <___vfprintf_internal_r+0x1204>
 4001cac:	a8800007 	ldb	r2,0(r21)
 4001cb0:	d8001f15 	stw	zero,124(sp)
 4001cb4:	da000404 	addi	r8,sp,16
 4001cb8:	103d751e 	bne	r2,zero,4001290 <__ram_exceptions_end+0xfbf78ff4>
 4001cbc:	a823883a 	mov	r17,r21
 4001cc0:	003d8b06 	br	40012f0 <__ram_exceptions_end+0xfbf79054>
 4001cc4:	8025883a 	mov	r18,r16
 4001cc8:	dc002903 	ldbu	r16,164(sp)
 4001ccc:	e011883a 	mov	r8,fp
 4001cd0:	84003fcc 	andi	r16,r16,255
 4001cd4:	8005e51e 	bne	r16,zero,400346c <___vfprintf_internal_r+0x22c4>
 4001cd8:	94800414 	ori	r18,r18,16
 4001cdc:	9080080c 	andi	r2,r18,32
 4001ce0:	10022b26 	beq	r2,zero,4002590 <___vfprintf_internal_r+0x13e8>
 4001ce4:	d9002e17 	ldw	r4,184(sp)
 4001ce8:	d9402a17 	ldw	r5,168(sp)
 4001cec:	d8002785 	stb	zero,158(sp)
 4001cf0:	20c00204 	addi	r3,r4,8
 4001cf4:	24c00017 	ldw	r19,0(r4)
 4001cf8:	25800117 	ldw	r22,4(r4)
 4001cfc:	28042e16 	blt	r5,zero,4002db8 <___vfprintf_internal_r+0x1c10>
 4001d00:	013fdfc4 	movi	r4,-129
 4001d04:	9d84b03a 	or	r2,r19,r22
 4001d08:	d8c02e15 	stw	r3,184(sp)
 4001d0c:	9124703a 	and	r18,r18,r4
 4001d10:	0039883a 	mov	fp,zero
 4001d14:	103e801e 	bne	r2,zero,4001718 <__ram_exceptions_end+0xfbf7947c>
 4001d18:	d9002a17 	ldw	r4,168(sp)
 4001d1c:	2002e01e 	bne	r4,zero,40028a0 <___vfprintf_internal_r+0x16f8>
 4001d20:	d8002a15 	stw	zero,168(sp)
 4001d24:	d8002b15 	stw	zero,172(sp)
 4001d28:	dc001e04 	addi	r16,sp,120
 4001d2c:	003ef506 	br	4001904 <__ram_exceptions_end+0xfbf79668>
 4001d30:	8025883a 	mov	r18,r16
 4001d34:	dc002903 	ldbu	r16,164(sp)
 4001d38:	e011883a 	mov	r8,fp
 4001d3c:	84003fcc 	andi	r16,r16,255
 4001d40:	8005ba1e 	bne	r16,zero,400342c <___vfprintf_internal_r+0x2284>
 4001d44:	01010074 	movhi	r4,1025
 4001d48:	21161804 	addi	r4,r4,22624
 4001d4c:	d9003915 	stw	r4,228(sp)
 4001d50:	9080080c 	andi	r2,r18,32
 4001d54:	10006126 	beq	r2,zero,4001edc <___vfprintf_internal_r+0xd34>
 4001d58:	d9402e17 	ldw	r5,184(sp)
 4001d5c:	2cc00017 	ldw	r19,0(r5)
 4001d60:	2d800117 	ldw	r22,4(r5)
 4001d64:	29400204 	addi	r5,r5,8
 4001d68:	d9402e15 	stw	r5,184(sp)
 4001d6c:	9080004c 	andi	r2,r18,1
 4001d70:	1001ac26 	beq	r2,zero,4002424 <___vfprintf_internal_r+0x127c>
 4001d74:	9d84b03a 	or	r2,r19,r22
 4001d78:	10038526 	beq	r2,zero,4002b90 <___vfprintf_internal_r+0x19e8>
 4001d7c:	d8c02a17 	ldw	r3,168(sp)
 4001d80:	00800c04 	movi	r2,48
 4001d84:	d8802705 	stb	r2,156(sp)
 4001d88:	dc402745 	stb	r17,157(sp)
 4001d8c:	d8002785 	stb	zero,158(sp)
 4001d90:	90800094 	ori	r2,r18,2
 4001d94:	18047916 	blt	r3,zero,4002f7c <___vfprintf_internal_r+0x1dd4>
 4001d98:	00bfdfc4 	movi	r2,-129
 4001d9c:	90a4703a 	and	r18,r18,r2
 4001da0:	94800094 	ori	r18,r18,2
 4001da4:	0039883a 	mov	fp,zero
 4001da8:	d9003917 	ldw	r4,228(sp)
 4001dac:	dc001e04 	addi	r16,sp,120
 4001db0:	988003cc 	andi	r2,r19,15
 4001db4:	b006973a 	slli	r3,r22,28
 4001db8:	2085883a 	add	r2,r4,r2
 4001dbc:	9826d13a 	srli	r19,r19,4
 4001dc0:	10800003 	ldbu	r2,0(r2)
 4001dc4:	b02cd13a 	srli	r22,r22,4
 4001dc8:	843fffc4 	addi	r16,r16,-1
 4001dcc:	1ce6b03a 	or	r19,r3,r19
 4001dd0:	80800005 	stb	r2,0(r16)
 4001dd4:	9d84b03a 	or	r2,r19,r22
 4001dd8:	103ff51e 	bne	r2,zero,4001db0 <__ram_exceptions_end+0xfbf79b14>
 4001ddc:	d8c02817 	ldw	r3,160(sp)
 4001de0:	1c07c83a 	sub	r3,r3,r16
 4001de4:	d8c02b15 	stw	r3,172(sp)
 4001de8:	003ec606 	br	4001904 <__ram_exceptions_end+0xfbf79668>
 4001dec:	8025883a 	mov	r18,r16
 4001df0:	dc002903 	ldbu	r16,164(sp)
 4001df4:	e011883a 	mov	r8,fp
 4001df8:	84003fcc 	andi	r16,r16,255
 4001dfc:	803e9626 	beq	r16,zero,4001858 <__ram_exceptions_end+0xfbf795bc>
 4001e00:	d8c02b03 	ldbu	r3,172(sp)
 4001e04:	d8c02785 	stb	r3,158(sp)
 4001e08:	003e9306 	br	4001858 <__ram_exceptions_end+0xfbf795bc>
 4001e0c:	00c00044 	movi	r3,1
 4001e10:	d8c02905 	stb	r3,164(sp)
 4001e14:	00c00ac4 	movi	r3,43
 4001e18:	d8c02b05 	stb	r3,172(sp)
 4001e1c:	ac400007 	ldb	r17,0(r21)
 4001e20:	003d4306 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 4001e24:	84000814 	ori	r16,r16,32
 4001e28:	ac400007 	ldb	r17,0(r21)
 4001e2c:	003d4006 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 4001e30:	d8802e17 	ldw	r2,184(sp)
 4001e34:	8025883a 	mov	r18,r16
 4001e38:	d8002785 	stb	zero,158(sp)
 4001e3c:	14000017 	ldw	r16,0(r2)
 4001e40:	e011883a 	mov	r8,fp
 4001e44:	14c00104 	addi	r19,r2,4
 4001e48:	80042d26 	beq	r16,zero,4002f00 <___vfprintf_internal_r+0x1d58>
 4001e4c:	d8c02a17 	ldw	r3,168(sp)
 4001e50:	1803e416 	blt	r3,zero,4002de4 <___vfprintf_internal_r+0x1c3c>
 4001e54:	180d883a 	mov	r6,r3
 4001e58:	000b883a 	mov	r5,zero
 4001e5c:	8009883a 	mov	r4,r16
 4001e60:	df003d15 	stw	fp,244(sp)
 4001e64:	40066180 	call	4006618 <memchr>
 4001e68:	da003d17 	ldw	r8,244(sp)
 4001e6c:	10046826 	beq	r2,zero,4003010 <___vfprintf_internal_r+0x1e68>
 4001e70:	1405c83a 	sub	r2,r2,r16
 4001e74:	d8802b15 	stw	r2,172(sp)
 4001e78:	1003e016 	blt	r2,zero,4002dfc <___vfprintf_internal_r+0x1c54>
 4001e7c:	df002783 	ldbu	fp,158(sp)
 4001e80:	d8802915 	stw	r2,164(sp)
 4001e84:	dcc02e15 	stw	r19,184(sp)
 4001e88:	d8002a15 	stw	zero,168(sp)
 4001e8c:	d8003215 	stw	zero,200(sp)
 4001e90:	003ea206 	br	400191c <__ram_exceptions_end+0xfbf79680>
 4001e94:	8025883a 	mov	r18,r16
 4001e98:	dc002903 	ldbu	r16,164(sp)
 4001e9c:	e011883a 	mov	r8,fp
 4001ea0:	84003fcc 	andi	r16,r16,255
 4001ea4:	803f8d26 	beq	r16,zero,4001cdc <__ram_exceptions_end+0xfbf79a40>
 4001ea8:	d8c02b03 	ldbu	r3,172(sp)
 4001eac:	d8c02785 	stb	r3,158(sp)
 4001eb0:	003f8a06 	br	4001cdc <__ram_exceptions_end+0xfbf79a40>
 4001eb4:	8025883a 	mov	r18,r16
 4001eb8:	dc002903 	ldbu	r16,164(sp)
 4001ebc:	e011883a 	mov	r8,fp
 4001ec0:	84003fcc 	andi	r16,r16,255
 4001ec4:	8005661e 	bne	r16,zero,4003460 <___vfprintf_internal_r+0x22b8>
 4001ec8:	01010074 	movhi	r4,1025
 4001ecc:	21161d04 	addi	r4,r4,22644
 4001ed0:	d9003915 	stw	r4,228(sp)
 4001ed4:	9080080c 	andi	r2,r18,32
 4001ed8:	103f9f1e 	bne	r2,zero,4001d58 <__ram_exceptions_end+0xfbf79abc>
 4001edc:	9080040c 	andi	r2,r18,16
 4001ee0:	1002eb26 	beq	r2,zero,4002a90 <___vfprintf_internal_r+0x18e8>
 4001ee4:	d8802e17 	ldw	r2,184(sp)
 4001ee8:	002d883a 	mov	r22,zero
 4001eec:	14c00017 	ldw	r19,0(r2)
 4001ef0:	10800104 	addi	r2,r2,4
 4001ef4:	d8802e15 	stw	r2,184(sp)
 4001ef8:	003f9c06 	br	4001d6c <__ram_exceptions_end+0xfbf79ad0>
 4001efc:	d8802b07 	ldb	r2,172(sp)
 4001f00:	1002e11e 	bne	r2,zero,4002a88 <___vfprintf_internal_r+0x18e0>
 4001f04:	00c00044 	movi	r3,1
 4001f08:	d8c02905 	stb	r3,164(sp)
 4001f0c:	00c00804 	movi	r3,32
 4001f10:	d8c02b05 	stb	r3,172(sp)
 4001f14:	ac400007 	ldb	r17,0(r21)
 4001f18:	003d0506 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 4001f1c:	84000054 	ori	r16,r16,1
 4001f20:	ac400007 	ldb	r17,0(r21)
 4001f24:	003d0206 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 4001f28:	8025883a 	mov	r18,r16
 4001f2c:	dc002903 	ldbu	r16,164(sp)
 4001f30:	e011883a 	mov	r8,fp
 4001f34:	84003fcc 	andi	r16,r16,255
 4001f38:	803de726 	beq	r16,zero,40016d8 <__ram_exceptions_end+0xfbf7943c>
 4001f3c:	d8c02b03 	ldbu	r3,172(sp)
 4001f40:	d8c02785 	stb	r3,158(sp)
 4001f44:	003de406 	br	40016d8 <__ram_exceptions_end+0xfbf7943c>
 4001f48:	84001014 	ori	r16,r16,64
 4001f4c:	ac400007 	ldb	r17,0(r21)
 4001f50:	003cf706 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 4001f54:	ac400007 	ldb	r17,0(r21)
 4001f58:	00801b04 	movi	r2,108
 4001f5c:	88838f26 	beq	r17,r2,4002d9c <___vfprintf_internal_r+0x1bf4>
 4001f60:	84000414 	ori	r16,r16,16
 4001f64:	003cf206 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 4001f68:	8025883a 	mov	r18,r16
 4001f6c:	dc002903 	ldbu	r16,164(sp)
 4001f70:	e011883a 	mov	r8,fp
 4001f74:	84003fcc 	andi	r16,r16,255
 4001f78:	80053f1e 	bne	r16,zero,4003478 <___vfprintf_internal_r+0x22d0>
 4001f7c:	9080080c 	andi	r2,r18,32
 4001f80:	1002d226 	beq	r2,zero,4002acc <___vfprintf_internal_r+0x1924>
 4001f84:	d9002e17 	ldw	r4,184(sp)
 4001f88:	d9402f17 	ldw	r5,188(sp)
 4001f8c:	20800017 	ldw	r2,0(r4)
 4001f90:	2807d7fa 	srai	r3,r5,31
 4001f94:	21000104 	addi	r4,r4,4
 4001f98:	d9002e15 	stw	r4,184(sp)
 4001f9c:	11400015 	stw	r5,0(r2)
 4001fa0:	10c00115 	stw	r3,4(r2)
 4001fa4:	003cb806 	br	4001288 <__ram_exceptions_end+0xfbf78fec>
 4001fa8:	d8c02e17 	ldw	r3,184(sp)
 4001fac:	d9002e17 	ldw	r4,184(sp)
 4001fb0:	8025883a 	mov	r18,r16
 4001fb4:	18800017 	ldw	r2,0(r3)
 4001fb8:	21000104 	addi	r4,r4,4
 4001fbc:	00c00044 	movi	r3,1
 4001fc0:	e011883a 	mov	r8,fp
 4001fc4:	d8c02915 	stw	r3,164(sp)
 4001fc8:	d8002785 	stb	zero,158(sp)
 4001fcc:	d8801405 	stb	r2,80(sp)
 4001fd0:	d9002e15 	stw	r4,184(sp)
 4001fd4:	d8c02b15 	stw	r3,172(sp)
 4001fd8:	d8002a15 	stw	zero,168(sp)
 4001fdc:	d8003215 	stw	zero,200(sp)
 4001fe0:	dc001404 	addi	r16,sp,80
 4001fe4:	0039883a 	mov	fp,zero
 4001fe8:	003e5306 	br	4001938 <__ram_exceptions_end+0xfbf7969c>
 4001fec:	01010074 	movhi	r4,1025
 4001ff0:	21161d04 	addi	r4,r4,22644
 4001ff4:	0039883a 	mov	fp,zero
 4001ff8:	d9003915 	stw	r4,228(sp)
 4001ffc:	04401e04 	movi	r17,120
 4002000:	003f6906 	br	4001da8 <__ram_exceptions_end+0xfbf79b0c>
 4002004:	8025883a 	mov	r18,r16
 4002008:	dc002903 	ldbu	r16,164(sp)
 400200c:	e011883a 	mov	r8,fp
 4002010:	84003fcc 	andi	r16,r16,255
 4002014:	8005081e 	bne	r16,zero,4003438 <___vfprintf_internal_r+0x2290>
 4002018:	883d6126 	beq	r17,zero,40015a0 <__ram_exceptions_end+0xfbf79304>
 400201c:	00c00044 	movi	r3,1
 4002020:	d8c02915 	stw	r3,164(sp)
 4002024:	dc401405 	stb	r17,80(sp)
 4002028:	d8002785 	stb	zero,158(sp)
 400202c:	003fe906 	br	4001fd4 <__ram_exceptions_end+0xfbf79d38>
 4002030:	01410074 	movhi	r5,1025
 4002034:	29561d04 	addi	r5,r5,22644
 4002038:	d9403915 	stw	r5,228(sp)
 400203c:	d8c02e15 	stw	r3,184(sp)
 4002040:	1025883a 	mov	r18,r2
 4002044:	04401e04 	movi	r17,120
 4002048:	9d84b03a 	or	r2,r19,r22
 400204c:	1000fc1e 	bne	r2,zero,4002440 <___vfprintf_internal_r+0x1298>
 4002050:	0039883a 	mov	fp,zero
 4002054:	00800084 	movi	r2,2
 4002058:	10803fcc 	andi	r2,r2,255
 400205c:	00c00044 	movi	r3,1
 4002060:	10c20f26 	beq	r2,r3,40028a0 <___vfprintf_internal_r+0x16f8>
 4002064:	00c00084 	movi	r3,2
 4002068:	10fd3326 	beq	r2,r3,4001538 <__ram_exceptions_end+0xfbf7929c>
 400206c:	003e0b06 	br	400189c <__ram_exceptions_end+0xfbf79600>
 4002070:	d8c02017 	ldw	r3,128(sp)
 4002074:	003e7106 	br	4001a3c <__ram_exceptions_end+0xfbf797a0>
 4002078:	00801944 	movi	r2,101
 400207c:	14407e0e 	bge	r2,r17,4002278 <___vfprintf_internal_r+0x10d0>
 4002080:	d9003617 	ldw	r4,216(sp)
 4002084:	d9403817 	ldw	r5,224(sp)
 4002088:	000d883a 	mov	r6,zero
 400208c:	000f883a 	mov	r7,zero
 4002090:	d8c03c15 	stw	r3,240(sp)
 4002094:	da003d15 	stw	r8,244(sp)
 4002098:	400c7a40 	call	400c7a4 <__eqdf2>
 400209c:	d8c03c17 	ldw	r3,240(sp)
 40020a0:	da003d17 	ldw	r8,244(sp)
 40020a4:	1000f71e 	bne	r2,zero,4002484 <___vfprintf_internal_r+0x12dc>
 40020a8:	d8801f17 	ldw	r2,124(sp)
 40020ac:	01010074 	movhi	r4,1025
 40020b0:	21171a04 	addi	r4,r4,23656
 40020b4:	18c00044 	addi	r3,r3,1
 40020b8:	10800044 	addi	r2,r2,1
 40020bc:	41000015 	stw	r4,0(r8)
 40020c0:	01000044 	movi	r4,1
 40020c4:	41000115 	stw	r4,4(r8)
 40020c8:	d8c02015 	stw	r3,128(sp)
 40020cc:	d8801f15 	stw	r2,124(sp)
 40020d0:	010001c4 	movi	r4,7
 40020d4:	2082b816 	blt	r4,r2,4002bb8 <___vfprintf_internal_r+0x1a10>
 40020d8:	42000204 	addi	r8,r8,8
 40020dc:	d8802617 	ldw	r2,152(sp)
 40020e0:	d9403317 	ldw	r5,204(sp)
 40020e4:	11400216 	blt	r2,r5,40020f0 <___vfprintf_internal_r+0xf48>
 40020e8:	9080004c 	andi	r2,r18,1
 40020ec:	103eb326 	beq	r2,zero,4001bbc <__ram_exceptions_end+0xfbf79920>
 40020f0:	d8803717 	ldw	r2,220(sp)
 40020f4:	d9003417 	ldw	r4,208(sp)
 40020f8:	d9403717 	ldw	r5,220(sp)
 40020fc:	1887883a 	add	r3,r3,r2
 4002100:	d8801f17 	ldw	r2,124(sp)
 4002104:	41000015 	stw	r4,0(r8)
 4002108:	41400115 	stw	r5,4(r8)
 400210c:	10800044 	addi	r2,r2,1
 4002110:	d8c02015 	stw	r3,128(sp)
 4002114:	d8801f15 	stw	r2,124(sp)
 4002118:	010001c4 	movi	r4,7
 400211c:	20832916 	blt	r4,r2,4002dc4 <___vfprintf_internal_r+0x1c1c>
 4002120:	42000204 	addi	r8,r8,8
 4002124:	d8803317 	ldw	r2,204(sp)
 4002128:	143fffc4 	addi	r16,r2,-1
 400212c:	043ea30e 	bge	zero,r16,4001bbc <__ram_exceptions_end+0xfbf79920>
 4002130:	04400404 	movi	r17,16
 4002134:	d8801f17 	ldw	r2,124(sp)
 4002138:	8c00880e 	bge	r17,r16,400235c <___vfprintf_internal_r+0x11b4>
 400213c:	01410074 	movhi	r5,1025
 4002140:	295623c4 	addi	r5,r5,22671
 4002144:	d9402c15 	stw	r5,176(sp)
 4002148:	058001c4 	movi	r22,7
 400214c:	dcc02d17 	ldw	r19,180(sp)
 4002150:	00000306 	br	4002160 <___vfprintf_internal_r+0xfb8>
 4002154:	42000204 	addi	r8,r8,8
 4002158:	843ffc04 	addi	r16,r16,-16
 400215c:	8c00820e 	bge	r17,r16,4002368 <___vfprintf_internal_r+0x11c0>
 4002160:	18c00404 	addi	r3,r3,16
 4002164:	10800044 	addi	r2,r2,1
 4002168:	45000015 	stw	r20,0(r8)
 400216c:	44400115 	stw	r17,4(r8)
 4002170:	d8c02015 	stw	r3,128(sp)
 4002174:	d8801f15 	stw	r2,124(sp)
 4002178:	b0bff60e 	bge	r22,r2,4002154 <__ram_exceptions_end+0xfbf79eb8>
 400217c:	d9801e04 	addi	r6,sp,120
 4002180:	b80b883a 	mov	r5,r23
 4002184:	9809883a 	mov	r4,r19
 4002188:	4007e980 	call	4007e98 <__sprint_r>
 400218c:	103d0a1e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002190:	d8c02017 	ldw	r3,128(sp)
 4002194:	d8801f17 	ldw	r2,124(sp)
 4002198:	da000404 	addi	r8,sp,16
 400219c:	003fee06 	br	4002158 <__ram_exceptions_end+0xfbf79ebc>
 40021a0:	d9403117 	ldw	r5,196(sp)
 40021a4:	d8802917 	ldw	r2,164(sp)
 40021a8:	28adc83a 	sub	r22,r5,r2
 40021ac:	05be410e 	bge	zero,r22,4001ab4 <__ram_exceptions_end+0xfbf79818>
 40021b0:	07000404 	movi	fp,16
 40021b4:	d8801f17 	ldw	r2,124(sp)
 40021b8:	e5838f0e 	bge	fp,r22,4002ff8 <___vfprintf_internal_r+0x1e50>
 40021bc:	01410074 	movhi	r5,1025
 40021c0:	295623c4 	addi	r5,r5,22671
 40021c4:	dc403015 	stw	r17,192(sp)
 40021c8:	d9402c15 	stw	r5,176(sp)
 40021cc:	b023883a 	mov	r17,r22
 40021d0:	04c001c4 	movi	r19,7
 40021d4:	a82d883a 	mov	r22,r21
 40021d8:	902b883a 	mov	r21,r18
 40021dc:	8025883a 	mov	r18,r16
 40021e0:	dc002d17 	ldw	r16,180(sp)
 40021e4:	00000306 	br	40021f4 <___vfprintf_internal_r+0x104c>
 40021e8:	8c7ffc04 	addi	r17,r17,-16
 40021ec:	42000204 	addi	r8,r8,8
 40021f0:	e440110e 	bge	fp,r17,4002238 <___vfprintf_internal_r+0x1090>
 40021f4:	18c00404 	addi	r3,r3,16
 40021f8:	10800044 	addi	r2,r2,1
 40021fc:	45000015 	stw	r20,0(r8)
 4002200:	47000115 	stw	fp,4(r8)
 4002204:	d8c02015 	stw	r3,128(sp)
 4002208:	d8801f15 	stw	r2,124(sp)
 400220c:	98bff60e 	bge	r19,r2,40021e8 <__ram_exceptions_end+0xfbf79f4c>
 4002210:	d9801e04 	addi	r6,sp,120
 4002214:	b80b883a 	mov	r5,r23
 4002218:	8009883a 	mov	r4,r16
 400221c:	4007e980 	call	4007e98 <__sprint_r>
 4002220:	103ce51e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002224:	8c7ffc04 	addi	r17,r17,-16
 4002228:	d8c02017 	ldw	r3,128(sp)
 400222c:	d8801f17 	ldw	r2,124(sp)
 4002230:	da000404 	addi	r8,sp,16
 4002234:	e47fef16 	blt	fp,r17,40021f4 <__ram_exceptions_end+0xfbf79f58>
 4002238:	9021883a 	mov	r16,r18
 400223c:	a825883a 	mov	r18,r21
 4002240:	b02b883a 	mov	r21,r22
 4002244:	882d883a 	mov	r22,r17
 4002248:	dc403017 	ldw	r17,192(sp)
 400224c:	d9002c17 	ldw	r4,176(sp)
 4002250:	1d87883a 	add	r3,r3,r22
 4002254:	10800044 	addi	r2,r2,1
 4002258:	41000015 	stw	r4,0(r8)
 400225c:	45800115 	stw	r22,4(r8)
 4002260:	d8c02015 	stw	r3,128(sp)
 4002264:	d8801f15 	stw	r2,124(sp)
 4002268:	010001c4 	movi	r4,7
 400226c:	20818e16 	blt	r4,r2,40028a8 <___vfprintf_internal_r+0x1700>
 4002270:	42000204 	addi	r8,r8,8
 4002274:	003e0f06 	br	4001ab4 <__ram_exceptions_end+0xfbf79818>
 4002278:	d9403317 	ldw	r5,204(sp)
 400227c:	00800044 	movi	r2,1
 4002280:	18c00044 	addi	r3,r3,1
 4002284:	1141530e 	bge	r2,r5,40027d4 <___vfprintf_internal_r+0x162c>
 4002288:	dc401f17 	ldw	r17,124(sp)
 400228c:	00800044 	movi	r2,1
 4002290:	40800115 	stw	r2,4(r8)
 4002294:	8c400044 	addi	r17,r17,1
 4002298:	44000015 	stw	r16,0(r8)
 400229c:	d8c02015 	stw	r3,128(sp)
 40022a0:	dc401f15 	stw	r17,124(sp)
 40022a4:	008001c4 	movi	r2,7
 40022a8:	14416b16 	blt	r2,r17,4002858 <___vfprintf_internal_r+0x16b0>
 40022ac:	42000204 	addi	r8,r8,8
 40022b0:	d8803717 	ldw	r2,220(sp)
 40022b4:	d9003417 	ldw	r4,208(sp)
 40022b8:	8c400044 	addi	r17,r17,1
 40022bc:	10c7883a 	add	r3,r2,r3
 40022c0:	40800115 	stw	r2,4(r8)
 40022c4:	41000015 	stw	r4,0(r8)
 40022c8:	d8c02015 	stw	r3,128(sp)
 40022cc:	dc401f15 	stw	r17,124(sp)
 40022d0:	008001c4 	movi	r2,7
 40022d4:	14416916 	blt	r2,r17,400287c <___vfprintf_internal_r+0x16d4>
 40022d8:	45800204 	addi	r22,r8,8
 40022dc:	d9003617 	ldw	r4,216(sp)
 40022e0:	d9403817 	ldw	r5,224(sp)
 40022e4:	000d883a 	mov	r6,zero
 40022e8:	000f883a 	mov	r7,zero
 40022ec:	d8c03c15 	stw	r3,240(sp)
 40022f0:	400c7a40 	call	400c7a4 <__eqdf2>
 40022f4:	d8c03c17 	ldw	r3,240(sp)
 40022f8:	1000bc26 	beq	r2,zero,40025ec <___vfprintf_internal_r+0x1444>
 40022fc:	d9403317 	ldw	r5,204(sp)
 4002300:	84000044 	addi	r16,r16,1
 4002304:	8c400044 	addi	r17,r17,1
 4002308:	28bfffc4 	addi	r2,r5,-1
 400230c:	1887883a 	add	r3,r3,r2
 4002310:	b0800115 	stw	r2,4(r22)
 4002314:	b4000015 	stw	r16,0(r22)
 4002318:	d8c02015 	stw	r3,128(sp)
 400231c:	dc401f15 	stw	r17,124(sp)
 4002320:	008001c4 	movi	r2,7
 4002324:	14414316 	blt	r2,r17,4002834 <___vfprintf_internal_r+0x168c>
 4002328:	b5800204 	addi	r22,r22,8
 400232c:	d9003a17 	ldw	r4,232(sp)
 4002330:	df0022c4 	addi	fp,sp,139
 4002334:	8c400044 	addi	r17,r17,1
 4002338:	20c7883a 	add	r3,r4,r3
 400233c:	b7000015 	stw	fp,0(r22)
 4002340:	b1000115 	stw	r4,4(r22)
 4002344:	d8c02015 	stw	r3,128(sp)
 4002348:	dc401f15 	stw	r17,124(sp)
 400234c:	008001c4 	movi	r2,7
 4002350:	14400e16 	blt	r2,r17,400238c <___vfprintf_internal_r+0x11e4>
 4002354:	b2000204 	addi	r8,r22,8
 4002358:	003e1806 	br	4001bbc <__ram_exceptions_end+0xfbf79920>
 400235c:	01010074 	movhi	r4,1025
 4002360:	211623c4 	addi	r4,r4,22671
 4002364:	d9002c15 	stw	r4,176(sp)
 4002368:	d9002c17 	ldw	r4,176(sp)
 400236c:	1c07883a 	add	r3,r3,r16
 4002370:	44000115 	stw	r16,4(r8)
 4002374:	41000015 	stw	r4,0(r8)
 4002378:	10800044 	addi	r2,r2,1
 400237c:	d8c02015 	stw	r3,128(sp)
 4002380:	d8801f15 	stw	r2,124(sp)
 4002384:	010001c4 	movi	r4,7
 4002388:	20be0b0e 	bge	r4,r2,4001bb8 <__ram_exceptions_end+0xfbf7991c>
 400238c:	d9002d17 	ldw	r4,180(sp)
 4002390:	d9801e04 	addi	r6,sp,120
 4002394:	b80b883a 	mov	r5,r23
 4002398:	4007e980 	call	4007e98 <__sprint_r>
 400239c:	103c861e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 40023a0:	d8c02017 	ldw	r3,128(sp)
 40023a4:	da000404 	addi	r8,sp,16
 40023a8:	003e0406 	br	4001bbc <__ram_exceptions_end+0xfbf79920>
 40023ac:	d9002d17 	ldw	r4,180(sp)
 40023b0:	d9801e04 	addi	r6,sp,120
 40023b4:	b80b883a 	mov	r5,r23
 40023b8:	4007e980 	call	4007e98 <__sprint_r>
 40023bc:	103e3b26 	beq	r2,zero,4001cac <__ram_exceptions_end+0xfbf79a10>
 40023c0:	003c7d06 	br	40015b8 <__ram_exceptions_end+0xfbf7931c>
 40023c4:	d9002d17 	ldw	r4,180(sp)
 40023c8:	d9801e04 	addi	r6,sp,120
 40023cc:	b80b883a 	mov	r5,r23
 40023d0:	4007e980 	call	4007e98 <__sprint_r>
 40023d4:	103c781e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 40023d8:	d8c02017 	ldw	r3,128(sp)
 40023dc:	da000404 	addi	r8,sp,16
 40023e0:	003de906 	br	4001b88 <__ram_exceptions_end+0xfbf798ec>
 40023e4:	d9002d17 	ldw	r4,180(sp)
 40023e8:	d9801e04 	addi	r6,sp,120
 40023ec:	b80b883a 	mov	r5,r23
 40023f0:	4007e980 	call	4007e98 <__sprint_r>
 40023f4:	103c701e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 40023f8:	d8c02017 	ldw	r3,128(sp)
 40023fc:	da000404 	addi	r8,sp,16
 4002400:	003d9b06 	br	4001a70 <__ram_exceptions_end+0xfbf797d4>
 4002404:	d9002d17 	ldw	r4,180(sp)
 4002408:	d9801e04 	addi	r6,sp,120
 400240c:	b80b883a 	mov	r5,r23
 4002410:	4007e980 	call	4007e98 <__sprint_r>
 4002414:	103c681e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002418:	d8c02017 	ldw	r3,128(sp)
 400241c:	da000404 	addi	r8,sp,16
 4002420:	003da106 	br	4001aa8 <__ram_exceptions_end+0xfbf7980c>
 4002424:	d9402a17 	ldw	r5,168(sp)
 4002428:	d8002785 	stb	zero,158(sp)
 400242c:	283f0616 	blt	r5,zero,4002048 <__ram_exceptions_end+0xfbf79dac>
 4002430:	00ffdfc4 	movi	r3,-129
 4002434:	9d84b03a 	or	r2,r19,r22
 4002438:	90e4703a 	and	r18,r18,r3
 400243c:	103c3b26 	beq	r2,zero,400152c <__ram_exceptions_end+0xfbf79290>
 4002440:	0039883a 	mov	fp,zero
 4002444:	003e5806 	br	4001da8 <__ram_exceptions_end+0xfbf79b0c>
 4002448:	9080040c 	andi	r2,r18,16
 400244c:	1001b326 	beq	r2,zero,4002b1c <___vfprintf_internal_r+0x1974>
 4002450:	d8c02e17 	ldw	r3,184(sp)
 4002454:	d9002a17 	ldw	r4,168(sp)
 4002458:	d8002785 	stb	zero,158(sp)
 400245c:	18800104 	addi	r2,r3,4
 4002460:	1cc00017 	ldw	r19,0(r3)
 4002464:	002d883a 	mov	r22,zero
 4002468:	2001b516 	blt	r4,zero,4002b40 <___vfprintf_internal_r+0x1998>
 400246c:	00ffdfc4 	movi	r3,-129
 4002470:	d8802e15 	stw	r2,184(sp)
 4002474:	90e4703a 	and	r18,r18,r3
 4002478:	983d0526 	beq	r19,zero,4001890 <__ram_exceptions_end+0xfbf795f4>
 400247c:	0039883a 	mov	fp,zero
 4002480:	003d0806 	br	40018a4 <__ram_exceptions_end+0xfbf79608>
 4002484:	dc402617 	ldw	r17,152(sp)
 4002488:	0441d30e 	bge	zero,r17,4002bd8 <___vfprintf_internal_r+0x1a30>
 400248c:	dc403217 	ldw	r17,200(sp)
 4002490:	d8803317 	ldw	r2,204(sp)
 4002494:	1440010e 	bge	r2,r17,400249c <___vfprintf_internal_r+0x12f4>
 4002498:	1023883a 	mov	r17,r2
 400249c:	04400a0e 	bge	zero,r17,40024c8 <___vfprintf_internal_r+0x1320>
 40024a0:	d8801f17 	ldw	r2,124(sp)
 40024a4:	1c47883a 	add	r3,r3,r17
 40024a8:	44000015 	stw	r16,0(r8)
 40024ac:	10800044 	addi	r2,r2,1
 40024b0:	44400115 	stw	r17,4(r8)
 40024b4:	d8c02015 	stw	r3,128(sp)
 40024b8:	d8801f15 	stw	r2,124(sp)
 40024bc:	010001c4 	movi	r4,7
 40024c0:	20826516 	blt	r4,r2,4002e58 <___vfprintf_internal_r+0x1cb0>
 40024c4:	42000204 	addi	r8,r8,8
 40024c8:	88026116 	blt	r17,zero,4002e50 <___vfprintf_internal_r+0x1ca8>
 40024cc:	d9003217 	ldw	r4,200(sp)
 40024d0:	2463c83a 	sub	r17,r4,r17
 40024d4:	04407b0e 	bge	zero,r17,40026c4 <___vfprintf_internal_r+0x151c>
 40024d8:	05800404 	movi	r22,16
 40024dc:	d8801f17 	ldw	r2,124(sp)
 40024e0:	b4419d0e 	bge	r22,r17,4002b58 <___vfprintf_internal_r+0x19b0>
 40024e4:	01010074 	movhi	r4,1025
 40024e8:	211623c4 	addi	r4,r4,22671
 40024ec:	d9002c15 	stw	r4,176(sp)
 40024f0:	070001c4 	movi	fp,7
 40024f4:	dcc02d17 	ldw	r19,180(sp)
 40024f8:	00000306 	br	4002508 <___vfprintf_internal_r+0x1360>
 40024fc:	42000204 	addi	r8,r8,8
 4002500:	8c7ffc04 	addi	r17,r17,-16
 4002504:	b441970e 	bge	r22,r17,4002b64 <___vfprintf_internal_r+0x19bc>
 4002508:	18c00404 	addi	r3,r3,16
 400250c:	10800044 	addi	r2,r2,1
 4002510:	45000015 	stw	r20,0(r8)
 4002514:	45800115 	stw	r22,4(r8)
 4002518:	d8c02015 	stw	r3,128(sp)
 400251c:	d8801f15 	stw	r2,124(sp)
 4002520:	e0bff60e 	bge	fp,r2,40024fc <__ram_exceptions_end+0xfbf7a260>
 4002524:	d9801e04 	addi	r6,sp,120
 4002528:	b80b883a 	mov	r5,r23
 400252c:	9809883a 	mov	r4,r19
 4002530:	4007e980 	call	4007e98 <__sprint_r>
 4002534:	103c201e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002538:	d8c02017 	ldw	r3,128(sp)
 400253c:	d8801f17 	ldw	r2,124(sp)
 4002540:	da000404 	addi	r8,sp,16
 4002544:	003fee06 	br	4002500 <__ram_exceptions_end+0xfbf7a264>
 4002548:	d9002d17 	ldw	r4,180(sp)
 400254c:	d9801e04 	addi	r6,sp,120
 4002550:	b80b883a 	mov	r5,r23
 4002554:	4007e980 	call	4007e98 <__sprint_r>
 4002558:	103c171e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 400255c:	d8c02017 	ldw	r3,128(sp)
 4002560:	df002787 	ldb	fp,158(sp)
 4002564:	da000404 	addi	r8,sp,16
 4002568:	003d3406 	br	4001a3c <__ram_exceptions_end+0xfbf797a0>
 400256c:	9080040c 	andi	r2,r18,16
 4002570:	10016126 	beq	r2,zero,4002af8 <___vfprintf_internal_r+0x1950>
 4002574:	d9402e17 	ldw	r5,184(sp)
 4002578:	2cc00017 	ldw	r19,0(r5)
 400257c:	29400104 	addi	r5,r5,4
 4002580:	d9402e15 	stw	r5,184(sp)
 4002584:	982dd7fa 	srai	r22,r19,31
 4002588:	b005883a 	mov	r2,r22
 400258c:	003c5a06 	br	40016f8 <__ram_exceptions_end+0xfbf7945c>
 4002590:	9080040c 	andi	r2,r18,16
 4002594:	10003526 	beq	r2,zero,400266c <___vfprintf_internal_r+0x14c4>
 4002598:	d8c02e17 	ldw	r3,184(sp)
 400259c:	d9002a17 	ldw	r4,168(sp)
 40025a0:	d8002785 	stb	zero,158(sp)
 40025a4:	18800104 	addi	r2,r3,4
 40025a8:	1cc00017 	ldw	r19,0(r3)
 40025ac:	002d883a 	mov	r22,zero
 40025b0:	20003716 	blt	r4,zero,4002690 <___vfprintf_internal_r+0x14e8>
 40025b4:	00ffdfc4 	movi	r3,-129
 40025b8:	d8802e15 	stw	r2,184(sp)
 40025bc:	90e4703a 	and	r18,r18,r3
 40025c0:	0039883a 	mov	fp,zero
 40025c4:	983dd426 	beq	r19,zero,4001d18 <__ram_exceptions_end+0xfbf79a7c>
 40025c8:	00800244 	movi	r2,9
 40025cc:	14fc5336 	bltu	r2,r19,400171c <__ram_exceptions_end+0xfbf79480>
 40025d0:	d8c02817 	ldw	r3,160(sp)
 40025d4:	dc001dc4 	addi	r16,sp,119
 40025d8:	9cc00c04 	addi	r19,r19,48
 40025dc:	1c07c83a 	sub	r3,r3,r16
 40025e0:	dcc01dc5 	stb	r19,119(sp)
 40025e4:	d8c02b15 	stw	r3,172(sp)
 40025e8:	003cc606 	br	4001904 <__ram_exceptions_end+0xfbf79668>
 40025ec:	d8803317 	ldw	r2,204(sp)
 40025f0:	143fffc4 	addi	r16,r2,-1
 40025f4:	043f4d0e 	bge	zero,r16,400232c <__ram_exceptions_end+0xfbf7a090>
 40025f8:	07000404 	movi	fp,16
 40025fc:	e400810e 	bge	fp,r16,4002804 <___vfprintf_internal_r+0x165c>
 4002600:	01410074 	movhi	r5,1025
 4002604:	295623c4 	addi	r5,r5,22671
 4002608:	d9402c15 	stw	r5,176(sp)
 400260c:	01c001c4 	movi	r7,7
 4002610:	dcc02d17 	ldw	r19,180(sp)
 4002614:	00000306 	br	4002624 <___vfprintf_internal_r+0x147c>
 4002618:	b5800204 	addi	r22,r22,8
 400261c:	843ffc04 	addi	r16,r16,-16
 4002620:	e4007b0e 	bge	fp,r16,4002810 <___vfprintf_internal_r+0x1668>
 4002624:	18c00404 	addi	r3,r3,16
 4002628:	8c400044 	addi	r17,r17,1
 400262c:	b5000015 	stw	r20,0(r22)
 4002630:	b7000115 	stw	fp,4(r22)
 4002634:	d8c02015 	stw	r3,128(sp)
 4002638:	dc401f15 	stw	r17,124(sp)
 400263c:	3c7ff60e 	bge	r7,r17,4002618 <__ram_exceptions_end+0xfbf7a37c>
 4002640:	d9801e04 	addi	r6,sp,120
 4002644:	b80b883a 	mov	r5,r23
 4002648:	9809883a 	mov	r4,r19
 400264c:	d9c03c15 	stw	r7,240(sp)
 4002650:	4007e980 	call	4007e98 <__sprint_r>
 4002654:	d9c03c17 	ldw	r7,240(sp)
 4002658:	103bd71e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 400265c:	d8c02017 	ldw	r3,128(sp)
 4002660:	dc401f17 	ldw	r17,124(sp)
 4002664:	dd800404 	addi	r22,sp,16
 4002668:	003fec06 	br	400261c <__ram_exceptions_end+0xfbf7a380>
 400266c:	9080100c 	andi	r2,r18,64
 4002670:	d8002785 	stb	zero,158(sp)
 4002674:	10010e26 	beq	r2,zero,4002ab0 <___vfprintf_internal_r+0x1908>
 4002678:	d9402e17 	ldw	r5,184(sp)
 400267c:	d8c02a17 	ldw	r3,168(sp)
 4002680:	002d883a 	mov	r22,zero
 4002684:	28800104 	addi	r2,r5,4
 4002688:	2cc0000b 	ldhu	r19,0(r5)
 400268c:	183fc90e 	bge	r3,zero,40025b4 <__ram_exceptions_end+0xfbf7a318>
 4002690:	d8802e15 	stw	r2,184(sp)
 4002694:	0039883a 	mov	fp,zero
 4002698:	9d84b03a 	or	r2,r19,r22
 400269c:	103c1e1e 	bne	r2,zero,4001718 <__ram_exceptions_end+0xfbf7947c>
 40026a0:	00800044 	movi	r2,1
 40026a4:	003e6c06 	br	4002058 <__ram_exceptions_end+0xfbf79dbc>
 40026a8:	d9002d17 	ldw	r4,180(sp)
 40026ac:	d9801e04 	addi	r6,sp,120
 40026b0:	b80b883a 	mov	r5,r23
 40026b4:	4007e980 	call	4007e98 <__sprint_r>
 40026b8:	103bbf1e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 40026bc:	d8c02017 	ldw	r3,128(sp)
 40026c0:	da000404 	addi	r8,sp,16
 40026c4:	d9003217 	ldw	r4,200(sp)
 40026c8:	d8802617 	ldw	r2,152(sp)
 40026cc:	d9403317 	ldw	r5,204(sp)
 40026d0:	8123883a 	add	r17,r16,r4
 40026d4:	11400216 	blt	r2,r5,40026e0 <___vfprintf_internal_r+0x1538>
 40026d8:	9100004c 	andi	r4,r18,1
 40026dc:	20000d26 	beq	r4,zero,4002714 <___vfprintf_internal_r+0x156c>
 40026e0:	d9003717 	ldw	r4,220(sp)
 40026e4:	d9403417 	ldw	r5,208(sp)
 40026e8:	1907883a 	add	r3,r3,r4
 40026ec:	d9001f17 	ldw	r4,124(sp)
 40026f0:	41400015 	stw	r5,0(r8)
 40026f4:	d9403717 	ldw	r5,220(sp)
 40026f8:	21000044 	addi	r4,r4,1
 40026fc:	d8c02015 	stw	r3,128(sp)
 4002700:	41400115 	stw	r5,4(r8)
 4002704:	d9001f15 	stw	r4,124(sp)
 4002708:	014001c4 	movi	r5,7
 400270c:	2901e816 	blt	r5,r4,4002eb0 <___vfprintf_internal_r+0x1d08>
 4002710:	42000204 	addi	r8,r8,8
 4002714:	d9003317 	ldw	r4,204(sp)
 4002718:	8121883a 	add	r16,r16,r4
 400271c:	2085c83a 	sub	r2,r4,r2
 4002720:	8461c83a 	sub	r16,r16,r17
 4002724:	1400010e 	bge	r2,r16,400272c <___vfprintf_internal_r+0x1584>
 4002728:	1021883a 	mov	r16,r2
 400272c:	04000a0e 	bge	zero,r16,4002758 <___vfprintf_internal_r+0x15b0>
 4002730:	d9001f17 	ldw	r4,124(sp)
 4002734:	1c07883a 	add	r3,r3,r16
 4002738:	44400015 	stw	r17,0(r8)
 400273c:	21000044 	addi	r4,r4,1
 4002740:	44000115 	stw	r16,4(r8)
 4002744:	d8c02015 	stw	r3,128(sp)
 4002748:	d9001f15 	stw	r4,124(sp)
 400274c:	014001c4 	movi	r5,7
 4002750:	2901fb16 	blt	r5,r4,4002f40 <___vfprintf_internal_r+0x1d98>
 4002754:	42000204 	addi	r8,r8,8
 4002758:	8001f716 	blt	r16,zero,4002f38 <___vfprintf_internal_r+0x1d90>
 400275c:	1421c83a 	sub	r16,r2,r16
 4002760:	043d160e 	bge	zero,r16,4001bbc <__ram_exceptions_end+0xfbf79920>
 4002764:	04400404 	movi	r17,16
 4002768:	d8801f17 	ldw	r2,124(sp)
 400276c:	8c3efb0e 	bge	r17,r16,400235c <__ram_exceptions_end+0xfbf7a0c0>
 4002770:	01410074 	movhi	r5,1025
 4002774:	295623c4 	addi	r5,r5,22671
 4002778:	d9402c15 	stw	r5,176(sp)
 400277c:	058001c4 	movi	r22,7
 4002780:	dcc02d17 	ldw	r19,180(sp)
 4002784:	00000306 	br	4002794 <___vfprintf_internal_r+0x15ec>
 4002788:	42000204 	addi	r8,r8,8
 400278c:	843ffc04 	addi	r16,r16,-16
 4002790:	8c3ef50e 	bge	r17,r16,4002368 <__ram_exceptions_end+0xfbf7a0cc>
 4002794:	18c00404 	addi	r3,r3,16
 4002798:	10800044 	addi	r2,r2,1
 400279c:	45000015 	stw	r20,0(r8)
 40027a0:	44400115 	stw	r17,4(r8)
 40027a4:	d8c02015 	stw	r3,128(sp)
 40027a8:	d8801f15 	stw	r2,124(sp)
 40027ac:	b0bff60e 	bge	r22,r2,4002788 <__ram_exceptions_end+0xfbf7a4ec>
 40027b0:	d9801e04 	addi	r6,sp,120
 40027b4:	b80b883a 	mov	r5,r23
 40027b8:	9809883a 	mov	r4,r19
 40027bc:	4007e980 	call	4007e98 <__sprint_r>
 40027c0:	103b7d1e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 40027c4:	d8c02017 	ldw	r3,128(sp)
 40027c8:	d8801f17 	ldw	r2,124(sp)
 40027cc:	da000404 	addi	r8,sp,16
 40027d0:	003fee06 	br	400278c <__ram_exceptions_end+0xfbf7a4f0>
 40027d4:	9088703a 	and	r4,r18,r2
 40027d8:	203eab1e 	bne	r4,zero,4002288 <__ram_exceptions_end+0xfbf79fec>
 40027dc:	dc401f17 	ldw	r17,124(sp)
 40027e0:	40800115 	stw	r2,4(r8)
 40027e4:	44000015 	stw	r16,0(r8)
 40027e8:	8c400044 	addi	r17,r17,1
 40027ec:	d8c02015 	stw	r3,128(sp)
 40027f0:	dc401f15 	stw	r17,124(sp)
 40027f4:	008001c4 	movi	r2,7
 40027f8:	14400e16 	blt	r2,r17,4002834 <___vfprintf_internal_r+0x168c>
 40027fc:	45800204 	addi	r22,r8,8
 4002800:	003eca06 	br	400232c <__ram_exceptions_end+0xfbf7a090>
 4002804:	01010074 	movhi	r4,1025
 4002808:	211623c4 	addi	r4,r4,22671
 400280c:	d9002c15 	stw	r4,176(sp)
 4002810:	d8802c17 	ldw	r2,176(sp)
 4002814:	1c07883a 	add	r3,r3,r16
 4002818:	8c400044 	addi	r17,r17,1
 400281c:	b0800015 	stw	r2,0(r22)
 4002820:	b4000115 	stw	r16,4(r22)
 4002824:	d8c02015 	stw	r3,128(sp)
 4002828:	dc401f15 	stw	r17,124(sp)
 400282c:	008001c4 	movi	r2,7
 4002830:	147ebd0e 	bge	r2,r17,4002328 <__ram_exceptions_end+0xfbf7a08c>
 4002834:	d9002d17 	ldw	r4,180(sp)
 4002838:	d9801e04 	addi	r6,sp,120
 400283c:	b80b883a 	mov	r5,r23
 4002840:	4007e980 	call	4007e98 <__sprint_r>
 4002844:	103b5c1e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002848:	d8c02017 	ldw	r3,128(sp)
 400284c:	dc401f17 	ldw	r17,124(sp)
 4002850:	dd800404 	addi	r22,sp,16
 4002854:	003eb506 	br	400232c <__ram_exceptions_end+0xfbf7a090>
 4002858:	d9002d17 	ldw	r4,180(sp)
 400285c:	d9801e04 	addi	r6,sp,120
 4002860:	b80b883a 	mov	r5,r23
 4002864:	4007e980 	call	4007e98 <__sprint_r>
 4002868:	103b531e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 400286c:	d8c02017 	ldw	r3,128(sp)
 4002870:	dc401f17 	ldw	r17,124(sp)
 4002874:	da000404 	addi	r8,sp,16
 4002878:	003e8d06 	br	40022b0 <__ram_exceptions_end+0xfbf7a014>
 400287c:	d9002d17 	ldw	r4,180(sp)
 4002880:	d9801e04 	addi	r6,sp,120
 4002884:	b80b883a 	mov	r5,r23
 4002888:	4007e980 	call	4007e98 <__sprint_r>
 400288c:	103b4a1e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002890:	d8c02017 	ldw	r3,128(sp)
 4002894:	dc401f17 	ldw	r17,124(sp)
 4002898:	dd800404 	addi	r22,sp,16
 400289c:	003e8f06 	br	40022dc <__ram_exceptions_end+0xfbf7a040>
 40028a0:	0027883a 	mov	r19,zero
 40028a4:	003f4a06 	br	40025d0 <__ram_exceptions_end+0xfbf7a334>
 40028a8:	d9002d17 	ldw	r4,180(sp)
 40028ac:	d9801e04 	addi	r6,sp,120
 40028b0:	b80b883a 	mov	r5,r23
 40028b4:	4007e980 	call	4007e98 <__sprint_r>
 40028b8:	103b3f1e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 40028bc:	d8c02017 	ldw	r3,128(sp)
 40028c0:	da000404 	addi	r8,sp,16
 40028c4:	003c7b06 	br	4001ab4 <__ram_exceptions_end+0xfbf79818>
 40028c8:	d9402a17 	ldw	r5,168(sp)
 40028cc:	04e7c83a 	sub	r19,zero,r19
 40028d0:	07000b44 	movi	fp,45
 40028d4:	9804c03a 	cmpne	r2,r19,zero
 40028d8:	05adc83a 	sub	r22,zero,r22
 40028dc:	df002785 	stb	fp,158(sp)
 40028e0:	b0adc83a 	sub	r22,r22,r2
 40028e4:	28017b16 	blt	r5,zero,4002ed4 <___vfprintf_internal_r+0x1d2c>
 40028e8:	00bfdfc4 	movi	r2,-129
 40028ec:	90a4703a 	and	r18,r18,r2
 40028f0:	003b8906 	br	4001718 <__ram_exceptions_end+0xfbf7947c>
 40028f4:	d9003617 	ldw	r4,216(sp)
 40028f8:	d9403817 	ldw	r5,224(sp)
 40028fc:	da003d15 	stw	r8,244(sp)
 4002900:	4007a240 	call	4007a24 <__fpclassifyd>
 4002904:	da003d17 	ldw	r8,244(sp)
 4002908:	1000f026 	beq	r2,zero,4002ccc <___vfprintf_internal_r+0x1b24>
 400290c:	d9002a17 	ldw	r4,168(sp)
 4002910:	05bff7c4 	movi	r22,-33
 4002914:	00bfffc4 	movi	r2,-1
 4002918:	8dac703a 	and	r22,r17,r22
 400291c:	20820026 	beq	r4,r2,4003120 <___vfprintf_internal_r+0x1f78>
 4002920:	008011c4 	movi	r2,71
 4002924:	b081f726 	beq	r22,r2,4003104 <___vfprintf_internal_r+0x1f5c>
 4002928:	d9003817 	ldw	r4,224(sp)
 400292c:	90c04014 	ori	r3,r18,256
 4002930:	d8c02c15 	stw	r3,176(sp)
 4002934:	20021516 	blt	r4,zero,400318c <___vfprintf_internal_r+0x1fe4>
 4002938:	dcc03817 	ldw	r19,224(sp)
 400293c:	d8002905 	stb	zero,164(sp)
 4002940:	00801984 	movi	r2,102
 4002944:	8881f926 	beq	r17,r2,400312c <___vfprintf_internal_r+0x1f84>
 4002948:	00801184 	movi	r2,70
 400294c:	88821c26 	beq	r17,r2,40031c0 <___vfprintf_internal_r+0x2018>
 4002950:	00801144 	movi	r2,69
 4002954:	b081ef26 	beq	r22,r2,4003114 <___vfprintf_internal_r+0x1f6c>
 4002958:	d8c02a17 	ldw	r3,168(sp)
 400295c:	d8802104 	addi	r2,sp,132
 4002960:	d8800315 	stw	r2,12(sp)
 4002964:	d9403617 	ldw	r5,216(sp)
 4002968:	d8802504 	addi	r2,sp,148
 400296c:	d9002d17 	ldw	r4,180(sp)
 4002970:	d8800215 	stw	r2,8(sp)
 4002974:	d8802604 	addi	r2,sp,152
 4002978:	d8c00015 	stw	r3,0(sp)
 400297c:	d8800115 	stw	r2,4(sp)
 4002980:	01c00084 	movi	r7,2
 4002984:	980d883a 	mov	r6,r19
 4002988:	d8c03c15 	stw	r3,240(sp)
 400298c:	da003d15 	stw	r8,244(sp)
 4002990:	40038d80 	call	40038d8 <_dtoa_r>
 4002994:	1021883a 	mov	r16,r2
 4002998:	008019c4 	movi	r2,103
 400299c:	d8c03c17 	ldw	r3,240(sp)
 40029a0:	da003d17 	ldw	r8,244(sp)
 40029a4:	88817126 	beq	r17,r2,4002f6c <___vfprintf_internal_r+0x1dc4>
 40029a8:	008011c4 	movi	r2,71
 40029ac:	88829126 	beq	r17,r2,40033f4 <___vfprintf_internal_r+0x224c>
 40029b0:	80f9883a 	add	fp,r16,r3
 40029b4:	d9003617 	ldw	r4,216(sp)
 40029b8:	000d883a 	mov	r6,zero
 40029bc:	000f883a 	mov	r7,zero
 40029c0:	980b883a 	mov	r5,r19
 40029c4:	da003d15 	stw	r8,244(sp)
 40029c8:	400c7a40 	call	400c7a4 <__eqdf2>
 40029cc:	da003d17 	ldw	r8,244(sp)
 40029d0:	10018d26 	beq	r2,zero,4003008 <___vfprintf_internal_r+0x1e60>
 40029d4:	d8802117 	ldw	r2,132(sp)
 40029d8:	1700062e 	bgeu	r2,fp,40029f4 <___vfprintf_internal_r+0x184c>
 40029dc:	01000c04 	movi	r4,48
 40029e0:	10c00044 	addi	r3,r2,1
 40029e4:	d8c02115 	stw	r3,132(sp)
 40029e8:	11000005 	stb	r4,0(r2)
 40029ec:	d8802117 	ldw	r2,132(sp)
 40029f0:	173ffb36 	bltu	r2,fp,40029e0 <__ram_exceptions_end+0xfbf7a744>
 40029f4:	1405c83a 	sub	r2,r2,r16
 40029f8:	d8803315 	stw	r2,204(sp)
 40029fc:	008011c4 	movi	r2,71
 4002a00:	b0817626 	beq	r22,r2,4002fdc <___vfprintf_internal_r+0x1e34>
 4002a04:	00801944 	movi	r2,101
 4002a08:	1442800e 	bge	r2,r17,400340c <___vfprintf_internal_r+0x2264>
 4002a0c:	d8c02617 	ldw	r3,152(sp)
 4002a10:	00801984 	movi	r2,102
 4002a14:	d8c03215 	stw	r3,200(sp)
 4002a18:	8881fe26 	beq	r17,r2,4003214 <___vfprintf_internal_r+0x206c>
 4002a1c:	d8c03217 	ldw	r3,200(sp)
 4002a20:	d9003317 	ldw	r4,204(sp)
 4002a24:	1901dd16 	blt	r3,r4,400319c <___vfprintf_internal_r+0x1ff4>
 4002a28:	9480004c 	andi	r18,r18,1
 4002a2c:	90022b1e 	bne	r18,zero,40032dc <___vfprintf_internal_r+0x2134>
 4002a30:	1805883a 	mov	r2,r3
 4002a34:	18028316 	blt	r3,zero,4003444 <___vfprintf_internal_r+0x229c>
 4002a38:	d8c03217 	ldw	r3,200(sp)
 4002a3c:	044019c4 	movi	r17,103
 4002a40:	d8c02b15 	stw	r3,172(sp)
 4002a44:	df002907 	ldb	fp,164(sp)
 4002a48:	e001531e 	bne	fp,zero,4002f98 <___vfprintf_internal_r+0x1df0>
 4002a4c:	df002783 	ldbu	fp,158(sp)
 4002a50:	d8802915 	stw	r2,164(sp)
 4002a54:	dc802c17 	ldw	r18,176(sp)
 4002a58:	d8002a15 	stw	zero,168(sp)
 4002a5c:	003baf06 	br	400191c <__ram_exceptions_end+0xfbf79680>
 4002a60:	d8c02e17 	ldw	r3,184(sp)
 4002a64:	d9002e17 	ldw	r4,184(sp)
 4002a68:	d9402e17 	ldw	r5,184(sp)
 4002a6c:	18c00017 	ldw	r3,0(r3)
 4002a70:	21000117 	ldw	r4,4(r4)
 4002a74:	29400204 	addi	r5,r5,8
 4002a78:	d8c03615 	stw	r3,216(sp)
 4002a7c:	d9003815 	stw	r4,224(sp)
 4002a80:	d9402e15 	stw	r5,184(sp)
 4002a84:	003b5006 	br	40017c8 <__ram_exceptions_end+0xfbf7952c>
 4002a88:	ac400007 	ldb	r17,0(r21)
 4002a8c:	003a2806 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 4002a90:	9080100c 	andi	r2,r18,64
 4002a94:	1000a826 	beq	r2,zero,4002d38 <___vfprintf_internal_r+0x1b90>
 4002a98:	d8c02e17 	ldw	r3,184(sp)
 4002a9c:	002d883a 	mov	r22,zero
 4002aa0:	1cc0000b 	ldhu	r19,0(r3)
 4002aa4:	18c00104 	addi	r3,r3,4
 4002aa8:	d8c02e15 	stw	r3,184(sp)
 4002aac:	003caf06 	br	4001d6c <__ram_exceptions_end+0xfbf79ad0>
 4002ab0:	d9002e17 	ldw	r4,184(sp)
 4002ab4:	d9402a17 	ldw	r5,168(sp)
 4002ab8:	002d883a 	mov	r22,zero
 4002abc:	20800104 	addi	r2,r4,4
 4002ac0:	24c00017 	ldw	r19,0(r4)
 4002ac4:	283ebb0e 	bge	r5,zero,40025b4 <__ram_exceptions_end+0xfbf7a318>
 4002ac8:	003ef106 	br	4002690 <__ram_exceptions_end+0xfbf7a3f4>
 4002acc:	9080040c 	andi	r2,r18,16
 4002ad0:	1000921e 	bne	r2,zero,4002d1c <___vfprintf_internal_r+0x1b74>
 4002ad4:	9480100c 	andi	r18,r18,64
 4002ad8:	90013926 	beq	r18,zero,4002fc0 <___vfprintf_internal_r+0x1e18>
 4002adc:	d9402e17 	ldw	r5,184(sp)
 4002ae0:	d8c02f17 	ldw	r3,188(sp)
 4002ae4:	28800017 	ldw	r2,0(r5)
 4002ae8:	29400104 	addi	r5,r5,4
 4002aec:	d9402e15 	stw	r5,184(sp)
 4002af0:	10c0000d 	sth	r3,0(r2)
 4002af4:	0039e406 	br	4001288 <__ram_exceptions_end+0xfbf78fec>
 4002af8:	9080100c 	andi	r2,r18,64
 4002afc:	10008026 	beq	r2,zero,4002d00 <___vfprintf_internal_r+0x1b58>
 4002b00:	d8802e17 	ldw	r2,184(sp)
 4002b04:	14c0000f 	ldh	r19,0(r2)
 4002b08:	10800104 	addi	r2,r2,4
 4002b0c:	d8802e15 	stw	r2,184(sp)
 4002b10:	982dd7fa 	srai	r22,r19,31
 4002b14:	b005883a 	mov	r2,r22
 4002b18:	003af706 	br	40016f8 <__ram_exceptions_end+0xfbf7945c>
 4002b1c:	9080100c 	andi	r2,r18,64
 4002b20:	d8002785 	stb	zero,158(sp)
 4002b24:	10008a1e 	bne	r2,zero,4002d50 <___vfprintf_internal_r+0x1ba8>
 4002b28:	d9002e17 	ldw	r4,184(sp)
 4002b2c:	d9402a17 	ldw	r5,168(sp)
 4002b30:	002d883a 	mov	r22,zero
 4002b34:	20800104 	addi	r2,r4,4
 4002b38:	24c00017 	ldw	r19,0(r4)
 4002b3c:	283e4b0e 	bge	r5,zero,400246c <__ram_exceptions_end+0xfbf7a1d0>
 4002b40:	9d86b03a 	or	r3,r19,r22
 4002b44:	d8802e15 	stw	r2,184(sp)
 4002b48:	183e4c1e 	bne	r3,zero,400247c <__ram_exceptions_end+0xfbf7a1e0>
 4002b4c:	0039883a 	mov	fp,zero
 4002b50:	0005883a 	mov	r2,zero
 4002b54:	003d4006 	br	4002058 <__ram_exceptions_end+0xfbf79dbc>
 4002b58:	01410074 	movhi	r5,1025
 4002b5c:	295623c4 	addi	r5,r5,22671
 4002b60:	d9402c15 	stw	r5,176(sp)
 4002b64:	d9402c17 	ldw	r5,176(sp)
 4002b68:	1c47883a 	add	r3,r3,r17
 4002b6c:	10800044 	addi	r2,r2,1
 4002b70:	41400015 	stw	r5,0(r8)
 4002b74:	44400115 	stw	r17,4(r8)
 4002b78:	d8c02015 	stw	r3,128(sp)
 4002b7c:	d8801f15 	stw	r2,124(sp)
 4002b80:	010001c4 	movi	r4,7
 4002b84:	20bec816 	blt	r4,r2,40026a8 <__ram_exceptions_end+0xfbf7a40c>
 4002b88:	42000204 	addi	r8,r8,8
 4002b8c:	003ecd06 	br	40026c4 <__ram_exceptions_end+0xfbf7a428>
 4002b90:	d9002a17 	ldw	r4,168(sp)
 4002b94:	d8002785 	stb	zero,158(sp)
 4002b98:	203d2d16 	blt	r4,zero,4002050 <__ram_exceptions_end+0xfbf79db4>
 4002b9c:	00bfdfc4 	movi	r2,-129
 4002ba0:	90a4703a 	and	r18,r18,r2
 4002ba4:	003a6106 	br	400152c <__ram_exceptions_end+0xfbf79290>
 4002ba8:	01010074 	movhi	r4,1025
 4002bac:	211623c4 	addi	r4,r4,22671
 4002bb0:	d9002c15 	stw	r4,176(sp)
 4002bb4:	003bea06 	br	4001b60 <__ram_exceptions_end+0xfbf798c4>
 4002bb8:	d9002d17 	ldw	r4,180(sp)
 4002bbc:	d9801e04 	addi	r6,sp,120
 4002bc0:	b80b883a 	mov	r5,r23
 4002bc4:	4007e980 	call	4007e98 <__sprint_r>
 4002bc8:	103a7b1e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002bcc:	d8c02017 	ldw	r3,128(sp)
 4002bd0:	da000404 	addi	r8,sp,16
 4002bd4:	003d4106 	br	40020dc <__ram_exceptions_end+0xfbf79e40>
 4002bd8:	d8801f17 	ldw	r2,124(sp)
 4002bdc:	01410074 	movhi	r5,1025
 4002be0:	01000044 	movi	r4,1
 4002be4:	18c00044 	addi	r3,r3,1
 4002be8:	10800044 	addi	r2,r2,1
 4002bec:	29571a04 	addi	r5,r5,23656
 4002bf0:	41000115 	stw	r4,4(r8)
 4002bf4:	41400015 	stw	r5,0(r8)
 4002bf8:	d8c02015 	stw	r3,128(sp)
 4002bfc:	d8801f15 	stw	r2,124(sp)
 4002c00:	010001c4 	movi	r4,7
 4002c04:	20805c16 	blt	r4,r2,4002d78 <___vfprintf_internal_r+0x1bd0>
 4002c08:	42000204 	addi	r8,r8,8
 4002c0c:	8800041e 	bne	r17,zero,4002c20 <___vfprintf_internal_r+0x1a78>
 4002c10:	d8803317 	ldw	r2,204(sp)
 4002c14:	1000021e 	bne	r2,zero,4002c20 <___vfprintf_internal_r+0x1a78>
 4002c18:	9080004c 	andi	r2,r18,1
 4002c1c:	103be726 	beq	r2,zero,4001bbc <__ram_exceptions_end+0xfbf79920>
 4002c20:	d9003717 	ldw	r4,220(sp)
 4002c24:	d8801f17 	ldw	r2,124(sp)
 4002c28:	d9403417 	ldw	r5,208(sp)
 4002c2c:	20c7883a 	add	r3,r4,r3
 4002c30:	10800044 	addi	r2,r2,1
 4002c34:	41000115 	stw	r4,4(r8)
 4002c38:	41400015 	stw	r5,0(r8)
 4002c3c:	d8c02015 	stw	r3,128(sp)
 4002c40:	d8801f15 	stw	r2,124(sp)
 4002c44:	010001c4 	movi	r4,7
 4002c48:	20812116 	blt	r4,r2,40030d0 <___vfprintf_internal_r+0x1f28>
 4002c4c:	42000204 	addi	r8,r8,8
 4002c50:	0463c83a 	sub	r17,zero,r17
 4002c54:	0440730e 	bge	zero,r17,4002e24 <___vfprintf_internal_r+0x1c7c>
 4002c58:	05800404 	movi	r22,16
 4002c5c:	b440860e 	bge	r22,r17,4002e78 <___vfprintf_internal_r+0x1cd0>
 4002c60:	01410074 	movhi	r5,1025
 4002c64:	295623c4 	addi	r5,r5,22671
 4002c68:	d9402c15 	stw	r5,176(sp)
 4002c6c:	070001c4 	movi	fp,7
 4002c70:	dcc02d17 	ldw	r19,180(sp)
 4002c74:	00000306 	br	4002c84 <___vfprintf_internal_r+0x1adc>
 4002c78:	42000204 	addi	r8,r8,8
 4002c7c:	8c7ffc04 	addi	r17,r17,-16
 4002c80:	b440800e 	bge	r22,r17,4002e84 <___vfprintf_internal_r+0x1cdc>
 4002c84:	18c00404 	addi	r3,r3,16
 4002c88:	10800044 	addi	r2,r2,1
 4002c8c:	45000015 	stw	r20,0(r8)
 4002c90:	45800115 	stw	r22,4(r8)
 4002c94:	d8c02015 	stw	r3,128(sp)
 4002c98:	d8801f15 	stw	r2,124(sp)
 4002c9c:	e0bff60e 	bge	fp,r2,4002c78 <__ram_exceptions_end+0xfbf7a9dc>
 4002ca0:	d9801e04 	addi	r6,sp,120
 4002ca4:	b80b883a 	mov	r5,r23
 4002ca8:	9809883a 	mov	r4,r19
 4002cac:	4007e980 	call	4007e98 <__sprint_r>
 4002cb0:	103a411e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002cb4:	d8c02017 	ldw	r3,128(sp)
 4002cb8:	d8801f17 	ldw	r2,124(sp)
 4002cbc:	da000404 	addi	r8,sp,16
 4002cc0:	003fee06 	br	4002c7c <__ram_exceptions_end+0xfbf7a9e0>
 4002cc4:	00bfffc4 	movi	r2,-1
 4002cc8:	003a3f06 	br	40015c8 <__ram_exceptions_end+0xfbf7932c>
 4002ccc:	008011c4 	movi	r2,71
 4002cd0:	1440b816 	blt	r2,r17,4002fb4 <___vfprintf_internal_r+0x1e0c>
 4002cd4:	04010074 	movhi	r16,1025
 4002cd8:	84161604 	addi	r16,r16,22616
 4002cdc:	00c000c4 	movi	r3,3
 4002ce0:	00bfdfc4 	movi	r2,-129
 4002ce4:	d8c02915 	stw	r3,164(sp)
 4002ce8:	90a4703a 	and	r18,r18,r2
 4002cec:	df002783 	ldbu	fp,158(sp)
 4002cf0:	d8c02b15 	stw	r3,172(sp)
 4002cf4:	d8002a15 	stw	zero,168(sp)
 4002cf8:	d8003215 	stw	zero,200(sp)
 4002cfc:	003b0706 	br	400191c <__ram_exceptions_end+0xfbf79680>
 4002d00:	d8c02e17 	ldw	r3,184(sp)
 4002d04:	1cc00017 	ldw	r19,0(r3)
 4002d08:	18c00104 	addi	r3,r3,4
 4002d0c:	d8c02e15 	stw	r3,184(sp)
 4002d10:	982dd7fa 	srai	r22,r19,31
 4002d14:	b005883a 	mov	r2,r22
 4002d18:	003a7706 	br	40016f8 <__ram_exceptions_end+0xfbf7945c>
 4002d1c:	d8c02e17 	ldw	r3,184(sp)
 4002d20:	d9002f17 	ldw	r4,188(sp)
 4002d24:	18800017 	ldw	r2,0(r3)
 4002d28:	18c00104 	addi	r3,r3,4
 4002d2c:	d8c02e15 	stw	r3,184(sp)
 4002d30:	11000015 	stw	r4,0(r2)
 4002d34:	00395406 	br	4001288 <__ram_exceptions_end+0xfbf78fec>
 4002d38:	d9002e17 	ldw	r4,184(sp)
 4002d3c:	002d883a 	mov	r22,zero
 4002d40:	24c00017 	ldw	r19,0(r4)
 4002d44:	21000104 	addi	r4,r4,4
 4002d48:	d9002e15 	stw	r4,184(sp)
 4002d4c:	003c0706 	br	4001d6c <__ram_exceptions_end+0xfbf79ad0>
 4002d50:	d9402e17 	ldw	r5,184(sp)
 4002d54:	d8c02a17 	ldw	r3,168(sp)
 4002d58:	002d883a 	mov	r22,zero
 4002d5c:	28800104 	addi	r2,r5,4
 4002d60:	2cc0000b 	ldhu	r19,0(r5)
 4002d64:	183dc10e 	bge	r3,zero,400246c <__ram_exceptions_end+0xfbf7a1d0>
 4002d68:	003f7506 	br	4002b40 <__ram_exceptions_end+0xfbf7a8a4>
 4002d6c:	04010074 	movhi	r16,1025
 4002d70:	84161404 	addi	r16,r16,22608
 4002d74:	003aa706 	br	4001814 <__ram_exceptions_end+0xfbf79578>
 4002d78:	d9002d17 	ldw	r4,180(sp)
 4002d7c:	d9801e04 	addi	r6,sp,120
 4002d80:	b80b883a 	mov	r5,r23
 4002d84:	4007e980 	call	4007e98 <__sprint_r>
 4002d88:	103a0b1e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002d8c:	dc402617 	ldw	r17,152(sp)
 4002d90:	d8c02017 	ldw	r3,128(sp)
 4002d94:	da000404 	addi	r8,sp,16
 4002d98:	003f9c06 	br	4002c0c <__ram_exceptions_end+0xfbf7a970>
 4002d9c:	ac400043 	ldbu	r17,1(r21)
 4002da0:	84000814 	ori	r16,r16,32
 4002da4:	ad400044 	addi	r21,r21,1
 4002da8:	8c403fcc 	andi	r17,r17,255
 4002dac:	8c40201c 	xori	r17,r17,128
 4002db0:	8c7fe004 	addi	r17,r17,-128
 4002db4:	00395e06 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 4002db8:	d8c02e15 	stw	r3,184(sp)
 4002dbc:	0039883a 	mov	fp,zero
 4002dc0:	003e3506 	br	4002698 <__ram_exceptions_end+0xfbf7a3fc>
 4002dc4:	d9002d17 	ldw	r4,180(sp)
 4002dc8:	d9801e04 	addi	r6,sp,120
 4002dcc:	b80b883a 	mov	r5,r23
 4002dd0:	4007e980 	call	4007e98 <__sprint_r>
 4002dd4:	1039f81e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002dd8:	d8c02017 	ldw	r3,128(sp)
 4002ddc:	da000404 	addi	r8,sp,16
 4002de0:	003cd006 	br	4002124 <__ram_exceptions_end+0xfbf79e88>
 4002de4:	8009883a 	mov	r4,r16
 4002de8:	df003d15 	stw	fp,244(sp)
 4002dec:	4007d040 	call	4007d04 <strlen>
 4002df0:	d8802b15 	stw	r2,172(sp)
 4002df4:	da003d17 	ldw	r8,244(sp)
 4002df8:	103c200e 	bge	r2,zero,4001e7c <__ram_exceptions_end+0xfbf79be0>
 4002dfc:	0005883a 	mov	r2,zero
 4002e00:	003c1e06 	br	4001e7c <__ram_exceptions_end+0xfbf79be0>
 4002e04:	d9002d17 	ldw	r4,180(sp)
 4002e08:	d9801e04 	addi	r6,sp,120
 4002e0c:	b80b883a 	mov	r5,r23
 4002e10:	4007e980 	call	4007e98 <__sprint_r>
 4002e14:	1039e81e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002e18:	d8c02017 	ldw	r3,128(sp)
 4002e1c:	d8801f17 	ldw	r2,124(sp)
 4002e20:	da000404 	addi	r8,sp,16
 4002e24:	d9403317 	ldw	r5,204(sp)
 4002e28:	10800044 	addi	r2,r2,1
 4002e2c:	44000015 	stw	r16,0(r8)
 4002e30:	28c7883a 	add	r3,r5,r3
 4002e34:	003b5b06 	br	4001ba4 <__ram_exceptions_end+0xfbf79908>
 4002e38:	01010074 	movhi	r4,1025
 4002e3c:	211627c4 	addi	r4,r4,22687
 4002e40:	d9003515 	stw	r4,212(sp)
 4002e44:	003af206 	br	4001a10 <__ram_exceptions_end+0xfbf79774>
 4002e48:	013fffc4 	movi	r4,-1
 4002e4c:	003a0806 	br	4001670 <__ram_exceptions_end+0xfbf793d4>
 4002e50:	0023883a 	mov	r17,zero
 4002e54:	003d9d06 	br	40024cc <__ram_exceptions_end+0xfbf7a230>
 4002e58:	d9002d17 	ldw	r4,180(sp)
 4002e5c:	d9801e04 	addi	r6,sp,120
 4002e60:	b80b883a 	mov	r5,r23
 4002e64:	4007e980 	call	4007e98 <__sprint_r>
 4002e68:	1039d31e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002e6c:	d8c02017 	ldw	r3,128(sp)
 4002e70:	da000404 	addi	r8,sp,16
 4002e74:	003d9406 	br	40024c8 <__ram_exceptions_end+0xfbf7a22c>
 4002e78:	01010074 	movhi	r4,1025
 4002e7c:	211623c4 	addi	r4,r4,22671
 4002e80:	d9002c15 	stw	r4,176(sp)
 4002e84:	d9002c17 	ldw	r4,176(sp)
 4002e88:	1c47883a 	add	r3,r3,r17
 4002e8c:	10800044 	addi	r2,r2,1
 4002e90:	41000015 	stw	r4,0(r8)
 4002e94:	44400115 	stw	r17,4(r8)
 4002e98:	d8c02015 	stw	r3,128(sp)
 4002e9c:	d8801f15 	stw	r2,124(sp)
 4002ea0:	010001c4 	movi	r4,7
 4002ea4:	20bfd716 	blt	r4,r2,4002e04 <__ram_exceptions_end+0xfbf7ab68>
 4002ea8:	42000204 	addi	r8,r8,8
 4002eac:	003fdd06 	br	4002e24 <__ram_exceptions_end+0xfbf7ab88>
 4002eb0:	d9002d17 	ldw	r4,180(sp)
 4002eb4:	d9801e04 	addi	r6,sp,120
 4002eb8:	b80b883a 	mov	r5,r23
 4002ebc:	4007e980 	call	4007e98 <__sprint_r>
 4002ec0:	1039bd1e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002ec4:	d8802617 	ldw	r2,152(sp)
 4002ec8:	d8c02017 	ldw	r3,128(sp)
 4002ecc:	da000404 	addi	r8,sp,16
 4002ed0:	003e1006 	br	4002714 <__ram_exceptions_end+0xfbf7a478>
 4002ed4:	00800044 	movi	r2,1
 4002ed8:	10803fcc 	andi	r2,r2,255
 4002edc:	00c00044 	movi	r3,1
 4002ee0:	10fa0d26 	beq	r2,r3,4001718 <__ram_exceptions_end+0xfbf7947c>
 4002ee4:	00c00084 	movi	r3,2
 4002ee8:	10fbaf26 	beq	r2,r3,4001da8 <__ram_exceptions_end+0xfbf79b0c>
 4002eec:	003a6d06 	br	40018a4 <__ram_exceptions_end+0xfbf79608>
 4002ef0:	01010074 	movhi	r4,1025
 4002ef4:	211627c4 	addi	r4,r4,22687
 4002ef8:	d9003515 	stw	r4,212(sp)
 4002efc:	003b5406 	br	4001c50 <__ram_exceptions_end+0xfbf799b4>
 4002f00:	d8802a17 	ldw	r2,168(sp)
 4002f04:	00c00184 	movi	r3,6
 4002f08:	1880012e 	bgeu	r3,r2,4002f10 <___vfprintf_internal_r+0x1d68>
 4002f0c:	1805883a 	mov	r2,r3
 4002f10:	d8802b15 	stw	r2,172(sp)
 4002f14:	1000ef16 	blt	r2,zero,40032d4 <___vfprintf_internal_r+0x212c>
 4002f18:	04010074 	movhi	r16,1025
 4002f1c:	d8802915 	stw	r2,164(sp)
 4002f20:	dcc02e15 	stw	r19,184(sp)
 4002f24:	d8002a15 	stw	zero,168(sp)
 4002f28:	d8003215 	stw	zero,200(sp)
 4002f2c:	84162204 	addi	r16,r16,22664
 4002f30:	0039883a 	mov	fp,zero
 4002f34:	003a8006 	br	4001938 <__ram_exceptions_end+0xfbf7969c>
 4002f38:	0021883a 	mov	r16,zero
 4002f3c:	003e0706 	br	400275c <__ram_exceptions_end+0xfbf7a4c0>
 4002f40:	d9002d17 	ldw	r4,180(sp)
 4002f44:	d9801e04 	addi	r6,sp,120
 4002f48:	b80b883a 	mov	r5,r23
 4002f4c:	4007e980 	call	4007e98 <__sprint_r>
 4002f50:	1039991e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 4002f54:	d8802617 	ldw	r2,152(sp)
 4002f58:	d9403317 	ldw	r5,204(sp)
 4002f5c:	d8c02017 	ldw	r3,128(sp)
 4002f60:	da000404 	addi	r8,sp,16
 4002f64:	2885c83a 	sub	r2,r5,r2
 4002f68:	003dfb06 	br	4002758 <__ram_exceptions_end+0xfbf7a4bc>
 4002f6c:	9080004c 	andi	r2,r18,1
 4002f70:	103e8f1e 	bne	r2,zero,40029b0 <__ram_exceptions_end+0xfbf7a714>
 4002f74:	d8802117 	ldw	r2,132(sp)
 4002f78:	003e9e06 	br	40029f4 <__ram_exceptions_end+0xfbf7a758>
 4002f7c:	1025883a 	mov	r18,r2
 4002f80:	0039883a 	mov	fp,zero
 4002f84:	00800084 	movi	r2,2
 4002f88:	003fd306 	br	4002ed8 <__ram_exceptions_end+0xfbf7ac3c>
 4002f8c:	07000b44 	movi	fp,45
 4002f90:	df002785 	stb	fp,158(sp)
 4002f94:	003a1b06 	br	4001804 <__ram_exceptions_end+0xfbf79568>
 4002f98:	00c00b44 	movi	r3,45
 4002f9c:	d8c02785 	stb	r3,158(sp)
 4002fa0:	d8802915 	stw	r2,164(sp)
 4002fa4:	dc802c17 	ldw	r18,176(sp)
 4002fa8:	d8002a15 	stw	zero,168(sp)
 4002fac:	07000b44 	movi	fp,45
 4002fb0:	003a5e06 	br	400192c <__ram_exceptions_end+0xfbf79690>
 4002fb4:	04010074 	movhi	r16,1025
 4002fb8:	84161704 	addi	r16,r16,22620
 4002fbc:	003f4706 	br	4002cdc <__ram_exceptions_end+0xfbf7aa40>
 4002fc0:	d9002e17 	ldw	r4,184(sp)
 4002fc4:	d9402f17 	ldw	r5,188(sp)
 4002fc8:	20800017 	ldw	r2,0(r4)
 4002fcc:	21000104 	addi	r4,r4,4
 4002fd0:	d9002e15 	stw	r4,184(sp)
 4002fd4:	11400015 	stw	r5,0(r2)
 4002fd8:	0038ab06 	br	4001288 <__ram_exceptions_end+0xfbf78fec>
 4002fdc:	dd802617 	ldw	r22,152(sp)
 4002fe0:	00bfff44 	movi	r2,-3
 4002fe4:	b0801c16 	blt	r22,r2,4003058 <___vfprintf_internal_r+0x1eb0>
 4002fe8:	d9402a17 	ldw	r5,168(sp)
 4002fec:	2d801a16 	blt	r5,r22,4003058 <___vfprintf_internal_r+0x1eb0>
 4002ff0:	dd803215 	stw	r22,200(sp)
 4002ff4:	003e8906 	br	4002a1c <__ram_exceptions_end+0xfbf7a780>
 4002ff8:	01010074 	movhi	r4,1025
 4002ffc:	211623c4 	addi	r4,r4,22671
 4003000:	d9002c15 	stw	r4,176(sp)
 4003004:	003c9106 	br	400224c <__ram_exceptions_end+0xfbf79fb0>
 4003008:	e005883a 	mov	r2,fp
 400300c:	003e7906 	br	40029f4 <__ram_exceptions_end+0xfbf7a758>
 4003010:	d9002a17 	ldw	r4,168(sp)
 4003014:	df002783 	ldbu	fp,158(sp)
 4003018:	dcc02e15 	stw	r19,184(sp)
 400301c:	d9002915 	stw	r4,164(sp)
 4003020:	d9002b15 	stw	r4,172(sp)
 4003024:	d8002a15 	stw	zero,168(sp)
 4003028:	d8003215 	stw	zero,200(sp)
 400302c:	003a3b06 	br	400191c <__ram_exceptions_end+0xfbf79680>
 4003030:	9080004c 	andi	r2,r18,1
 4003034:	0039883a 	mov	fp,zero
 4003038:	10000426 	beq	r2,zero,400304c <___vfprintf_internal_r+0x1ea4>
 400303c:	00800c04 	movi	r2,48
 4003040:	dc001dc4 	addi	r16,sp,119
 4003044:	d8801dc5 	stb	r2,119(sp)
 4003048:	003b6406 	br	4001ddc <__ram_exceptions_end+0xfbf79b40>
 400304c:	d8002b15 	stw	zero,172(sp)
 4003050:	dc001e04 	addi	r16,sp,120
 4003054:	003a2b06 	br	4001904 <__ram_exceptions_end+0xfbf79668>
 4003058:	8c7fff84 	addi	r17,r17,-2
 400305c:	b5bfffc4 	addi	r22,r22,-1
 4003060:	dd802615 	stw	r22,152(sp)
 4003064:	dc4022c5 	stb	r17,139(sp)
 4003068:	b000bf16 	blt	r22,zero,4003368 <___vfprintf_internal_r+0x21c0>
 400306c:	00800ac4 	movi	r2,43
 4003070:	d8802305 	stb	r2,140(sp)
 4003074:	00800244 	movi	r2,9
 4003078:	15807016 	blt	r2,r22,400323c <___vfprintf_internal_r+0x2094>
 400307c:	00800c04 	movi	r2,48
 4003080:	b5800c04 	addi	r22,r22,48
 4003084:	d8802345 	stb	r2,141(sp)
 4003088:	dd802385 	stb	r22,142(sp)
 400308c:	d88023c4 	addi	r2,sp,143
 4003090:	df0022c4 	addi	fp,sp,139
 4003094:	d8c03317 	ldw	r3,204(sp)
 4003098:	1739c83a 	sub	fp,r2,fp
 400309c:	d9003317 	ldw	r4,204(sp)
 40030a0:	e0c7883a 	add	r3,fp,r3
 40030a4:	df003a15 	stw	fp,232(sp)
 40030a8:	d8c02b15 	stw	r3,172(sp)
 40030ac:	00800044 	movi	r2,1
 40030b0:	1100b30e 	bge	r2,r4,4003380 <___vfprintf_internal_r+0x21d8>
 40030b4:	d8c02b17 	ldw	r3,172(sp)
 40030b8:	18c00044 	addi	r3,r3,1
 40030bc:	d8c02b15 	stw	r3,172(sp)
 40030c0:	1805883a 	mov	r2,r3
 40030c4:	1800ac16 	blt	r3,zero,4003378 <___vfprintf_internal_r+0x21d0>
 40030c8:	d8003215 	stw	zero,200(sp)
 40030cc:	003e5d06 	br	4002a44 <__ram_exceptions_end+0xfbf7a7a8>
 40030d0:	d9002d17 	ldw	r4,180(sp)
 40030d4:	d9801e04 	addi	r6,sp,120
 40030d8:	b80b883a 	mov	r5,r23
 40030dc:	4007e980 	call	4007e98 <__sprint_r>
 40030e0:	1039351e 	bne	r2,zero,40015b8 <__ram_exceptions_end+0xfbf7931c>
 40030e4:	dc402617 	ldw	r17,152(sp)
 40030e8:	d8c02017 	ldw	r3,128(sp)
 40030ec:	d8801f17 	ldw	r2,124(sp)
 40030f0:	da000404 	addi	r8,sp,16
 40030f4:	003ed606 	br	4002c50 <__ram_exceptions_end+0xfbf7a9b4>
 40030f8:	182b883a 	mov	r21,r3
 40030fc:	d8002a15 	stw	zero,168(sp)
 4003100:	00388c06 	br	4001334 <__ram_exceptions_end+0xfbf79098>
 4003104:	d8802a17 	ldw	r2,168(sp)
 4003108:	103e071e 	bne	r2,zero,4002928 <__ram_exceptions_end+0xfbf7a68c>
 400310c:	dc002a15 	stw	r16,168(sp)
 4003110:	003e0506 	br	4002928 <__ram_exceptions_end+0xfbf7a68c>
 4003114:	d9002a17 	ldw	r4,168(sp)
 4003118:	20c00044 	addi	r3,r4,1
 400311c:	003e0f06 	br	400295c <__ram_exceptions_end+0xfbf7a6c0>
 4003120:	01400184 	movi	r5,6
 4003124:	d9402a15 	stw	r5,168(sp)
 4003128:	003dff06 	br	4002928 <__ram_exceptions_end+0xfbf7a68c>
 400312c:	d8802104 	addi	r2,sp,132
 4003130:	d8800315 	stw	r2,12(sp)
 4003134:	d8802504 	addi	r2,sp,148
 4003138:	d8800215 	stw	r2,8(sp)
 400313c:	d8802604 	addi	r2,sp,152
 4003140:	d8800115 	stw	r2,4(sp)
 4003144:	d8802a17 	ldw	r2,168(sp)
 4003148:	d9403617 	ldw	r5,216(sp)
 400314c:	d9002d17 	ldw	r4,180(sp)
 4003150:	d8800015 	stw	r2,0(sp)
 4003154:	01c000c4 	movi	r7,3
 4003158:	980d883a 	mov	r6,r19
 400315c:	da003d15 	stw	r8,244(sp)
 4003160:	40038d80 	call	40038d8 <_dtoa_r>
 4003164:	d8c02a17 	ldw	r3,168(sp)
 4003168:	da003d17 	ldw	r8,244(sp)
 400316c:	1021883a 	mov	r16,r2
 4003170:	10f9883a 	add	fp,r2,r3
 4003174:	81000007 	ldb	r4,0(r16)
 4003178:	00800c04 	movi	r2,48
 400317c:	20805e26 	beq	r4,r2,40032f8 <___vfprintf_internal_r+0x2150>
 4003180:	d8c02617 	ldw	r3,152(sp)
 4003184:	e0f9883a 	add	fp,fp,r3
 4003188:	003e0a06 	br	40029b4 <__ram_exceptions_end+0xfbf7a718>
 400318c:	00c00b44 	movi	r3,45
 4003190:	24e0003c 	xorhi	r19,r4,32768
 4003194:	d8c02905 	stb	r3,164(sp)
 4003198:	003de906 	br	4002940 <__ram_exceptions_end+0xfbf7a6a4>
 400319c:	d8c03217 	ldw	r3,200(sp)
 40031a0:	00c07a0e 	bge	zero,r3,400338c <___vfprintf_internal_r+0x21e4>
 40031a4:	00800044 	movi	r2,1
 40031a8:	d9003317 	ldw	r4,204(sp)
 40031ac:	1105883a 	add	r2,r2,r4
 40031b0:	d8802b15 	stw	r2,172(sp)
 40031b4:	10004e16 	blt	r2,zero,40032f0 <___vfprintf_internal_r+0x2148>
 40031b8:	044019c4 	movi	r17,103
 40031bc:	003e2106 	br	4002a44 <__ram_exceptions_end+0xfbf7a7a8>
 40031c0:	d9002a17 	ldw	r4,168(sp)
 40031c4:	d8802104 	addi	r2,sp,132
 40031c8:	d8800315 	stw	r2,12(sp)
 40031cc:	d9000015 	stw	r4,0(sp)
 40031d0:	d8802504 	addi	r2,sp,148
 40031d4:	d9403617 	ldw	r5,216(sp)
 40031d8:	d9002d17 	ldw	r4,180(sp)
 40031dc:	d8800215 	stw	r2,8(sp)
 40031e0:	d8802604 	addi	r2,sp,152
 40031e4:	d8800115 	stw	r2,4(sp)
 40031e8:	01c000c4 	movi	r7,3
 40031ec:	980d883a 	mov	r6,r19
 40031f0:	da003d15 	stw	r8,244(sp)
 40031f4:	40038d80 	call	40038d8 <_dtoa_r>
 40031f8:	d8c02a17 	ldw	r3,168(sp)
 40031fc:	da003d17 	ldw	r8,244(sp)
 4003200:	1021883a 	mov	r16,r2
 4003204:	00801184 	movi	r2,70
 4003208:	80f9883a 	add	fp,r16,r3
 400320c:	88bfd926 	beq	r17,r2,4003174 <__ram_exceptions_end+0xfbf7aed8>
 4003210:	003de806 	br	40029b4 <__ram_exceptions_end+0xfbf7a718>
 4003214:	d9002a17 	ldw	r4,168(sp)
 4003218:	00c04d0e 	bge	zero,r3,4003350 <___vfprintf_internal_r+0x21a8>
 400321c:	2000441e 	bne	r4,zero,4003330 <___vfprintf_internal_r+0x2188>
 4003220:	9480004c 	andi	r18,r18,1
 4003224:	9000421e 	bne	r18,zero,4003330 <___vfprintf_internal_r+0x2188>
 4003228:	1805883a 	mov	r2,r3
 400322c:	18006f16 	blt	r3,zero,40033ec <___vfprintf_internal_r+0x2244>
 4003230:	d8c03217 	ldw	r3,200(sp)
 4003234:	d8c02b15 	stw	r3,172(sp)
 4003238:	003e0206 	br	4002a44 <__ram_exceptions_end+0xfbf7a7a8>
 400323c:	df0022c4 	addi	fp,sp,139
 4003240:	dc002a15 	stw	r16,168(sp)
 4003244:	4027883a 	mov	r19,r8
 4003248:	e021883a 	mov	r16,fp
 400324c:	b009883a 	mov	r4,r22
 4003250:	01400284 	movi	r5,10
 4003254:	4000fe40 	call	4000fe4 <__modsi3>
 4003258:	10800c04 	addi	r2,r2,48
 400325c:	843fffc4 	addi	r16,r16,-1
 4003260:	b009883a 	mov	r4,r22
 4003264:	01400284 	movi	r5,10
 4003268:	80800005 	stb	r2,0(r16)
 400326c:	4000f600 	call	4000f60 <__divsi3>
 4003270:	102d883a 	mov	r22,r2
 4003274:	00800244 	movi	r2,9
 4003278:	15bff416 	blt	r2,r22,400324c <__ram_exceptions_end+0xfbf7afb0>
 400327c:	9811883a 	mov	r8,r19
 4003280:	b0800c04 	addi	r2,r22,48
 4003284:	8027883a 	mov	r19,r16
 4003288:	997fffc4 	addi	r5,r19,-1
 400328c:	98bfffc5 	stb	r2,-1(r19)
 4003290:	dc002a17 	ldw	r16,168(sp)
 4003294:	2f006d2e 	bgeu	r5,fp,400344c <___vfprintf_internal_r+0x22a4>
 4003298:	d9c02384 	addi	r7,sp,142
 400329c:	3ccfc83a 	sub	r7,r7,r19
 40032a0:	d9002344 	addi	r4,sp,141
 40032a4:	e1cf883a 	add	r7,fp,r7
 40032a8:	00000106 	br	40032b0 <___vfprintf_internal_r+0x2108>
 40032ac:	28800003 	ldbu	r2,0(r5)
 40032b0:	20800005 	stb	r2,0(r4)
 40032b4:	21000044 	addi	r4,r4,1
 40032b8:	29400044 	addi	r5,r5,1
 40032bc:	393ffb1e 	bne	r7,r4,40032ac <__ram_exceptions_end+0xfbf7b010>
 40032c0:	d8802304 	addi	r2,sp,140
 40032c4:	14c5c83a 	sub	r2,r2,r19
 40032c8:	d8c02344 	addi	r3,sp,141
 40032cc:	1885883a 	add	r2,r3,r2
 40032d0:	003f7006 	br	4003094 <__ram_exceptions_end+0xfbf7adf8>
 40032d4:	0005883a 	mov	r2,zero
 40032d8:	003f0f06 	br	4002f18 <__ram_exceptions_end+0xfbf7ac7c>
 40032dc:	d8c03217 	ldw	r3,200(sp)
 40032e0:	18c00044 	addi	r3,r3,1
 40032e4:	d8c02b15 	stw	r3,172(sp)
 40032e8:	1805883a 	mov	r2,r3
 40032ec:	183fb20e 	bge	r3,zero,40031b8 <__ram_exceptions_end+0xfbf7af1c>
 40032f0:	0005883a 	mov	r2,zero
 40032f4:	003fb006 	br	40031b8 <__ram_exceptions_end+0xfbf7af1c>
 40032f8:	d9003617 	ldw	r4,216(sp)
 40032fc:	000d883a 	mov	r6,zero
 4003300:	000f883a 	mov	r7,zero
 4003304:	980b883a 	mov	r5,r19
 4003308:	d8c03c15 	stw	r3,240(sp)
 400330c:	da003d15 	stw	r8,244(sp)
 4003310:	400c7a40 	call	400c7a4 <__eqdf2>
 4003314:	d8c03c17 	ldw	r3,240(sp)
 4003318:	da003d17 	ldw	r8,244(sp)
 400331c:	103f9826 	beq	r2,zero,4003180 <__ram_exceptions_end+0xfbf7aee4>
 4003320:	00800044 	movi	r2,1
 4003324:	10c7c83a 	sub	r3,r2,r3
 4003328:	d8c02615 	stw	r3,152(sp)
 400332c:	003f9506 	br	4003184 <__ram_exceptions_end+0xfbf7aee8>
 4003330:	d9002a17 	ldw	r4,168(sp)
 4003334:	d8c03217 	ldw	r3,200(sp)
 4003338:	20800044 	addi	r2,r4,1
 400333c:	1885883a 	add	r2,r3,r2
 4003340:	d8802b15 	stw	r2,172(sp)
 4003344:	103dbf0e 	bge	r2,zero,4002a44 <__ram_exceptions_end+0xfbf7a7a8>
 4003348:	0005883a 	mov	r2,zero
 400334c:	003dbd06 	br	4002a44 <__ram_exceptions_end+0xfbf7a7a8>
 4003350:	2000201e 	bne	r4,zero,40033d4 <___vfprintf_internal_r+0x222c>
 4003354:	9480004c 	andi	r18,r18,1
 4003358:	90001e1e 	bne	r18,zero,40033d4 <___vfprintf_internal_r+0x222c>
 400335c:	00800044 	movi	r2,1
 4003360:	d8802b15 	stw	r2,172(sp)
 4003364:	003db706 	br	4002a44 <__ram_exceptions_end+0xfbf7a7a8>
 4003368:	00800b44 	movi	r2,45
 400336c:	05adc83a 	sub	r22,zero,r22
 4003370:	d8802305 	stb	r2,140(sp)
 4003374:	003f3f06 	br	4003074 <__ram_exceptions_end+0xfbf7add8>
 4003378:	0005883a 	mov	r2,zero
 400337c:	003f5206 	br	40030c8 <__ram_exceptions_end+0xfbf7ae2c>
 4003380:	90a4703a 	and	r18,r18,r2
 4003384:	903f4e26 	beq	r18,zero,40030c0 <__ram_exceptions_end+0xfbf7ae24>
 4003388:	003f4a06 	br	40030b4 <__ram_exceptions_end+0xfbf7ae18>
 400338c:	00800084 	movi	r2,2
 4003390:	10c5c83a 	sub	r2,r2,r3
 4003394:	003f8406 	br	40031a8 <__ram_exceptions_end+0xfbf7af0c>
 4003398:	d9402e17 	ldw	r5,184(sp)
 400339c:	d9002e17 	ldw	r4,184(sp)
 40033a0:	ac400043 	ldbu	r17,1(r21)
 40033a4:	29400017 	ldw	r5,0(r5)
 40033a8:	20800104 	addi	r2,r4,4
 40033ac:	d8802e15 	stw	r2,184(sp)
 40033b0:	d9402a15 	stw	r5,168(sp)
 40033b4:	182b883a 	mov	r21,r3
 40033b8:	283e7b0e 	bge	r5,zero,4002da8 <__ram_exceptions_end+0xfbf7ab0c>
 40033bc:	8c403fcc 	andi	r17,r17,255
 40033c0:	017fffc4 	movi	r5,-1
 40033c4:	8c40201c 	xori	r17,r17,128
 40033c8:	d9402a15 	stw	r5,168(sp)
 40033cc:	8c7fe004 	addi	r17,r17,-128
 40033d0:	0037d706 	br	4001330 <__ram_exceptions_end+0xfbf79094>
 40033d4:	d8c02a17 	ldw	r3,168(sp)
 40033d8:	18c00084 	addi	r3,r3,2
 40033dc:	d8c02b15 	stw	r3,172(sp)
 40033e0:	1805883a 	mov	r2,r3
 40033e4:	183d970e 	bge	r3,zero,4002a44 <__ram_exceptions_end+0xfbf7a7a8>
 40033e8:	003fd706 	br	4003348 <__ram_exceptions_end+0xfbf7b0ac>
 40033ec:	0005883a 	mov	r2,zero
 40033f0:	003f8f06 	br	4003230 <__ram_exceptions_end+0xfbf7af94>
 40033f4:	9080004c 	andi	r2,r18,1
 40033f8:	103f821e 	bne	r2,zero,4003204 <__ram_exceptions_end+0xfbf7af68>
 40033fc:	d8802117 	ldw	r2,132(sp)
 4003400:	1405c83a 	sub	r2,r2,r16
 4003404:	d8803315 	stw	r2,204(sp)
 4003408:	b47ef426 	beq	r22,r17,4002fdc <__ram_exceptions_end+0xfbf7ad40>
 400340c:	dd802617 	ldw	r22,152(sp)
 4003410:	003f1206 	br	400305c <__ram_exceptions_end+0xfbf7adc0>
 4003414:	d8c02b03 	ldbu	r3,172(sp)
 4003418:	d8c02785 	stb	r3,158(sp)
 400341c:	0038df06 	br	400179c <__ram_exceptions_end+0xfbf79500>
 4003420:	d8c02b03 	ldbu	r3,172(sp)
 4003424:	d8c02785 	stb	r3,158(sp)
 4003428:	0038aa06 	br	40016d4 <__ram_exceptions_end+0xfbf79438>
 400342c:	d8c02b03 	ldbu	r3,172(sp)
 4003430:	d8c02785 	stb	r3,158(sp)
 4003434:	003a4306 	br	4001d44 <__ram_exceptions_end+0xfbf79aa8>
 4003438:	d8c02b03 	ldbu	r3,172(sp)
 400343c:	d8c02785 	stb	r3,158(sp)
 4003440:	003af506 	br	4002018 <__ram_exceptions_end+0xfbf79d7c>
 4003444:	0005883a 	mov	r2,zero
 4003448:	003d7b06 	br	4002a38 <__ram_exceptions_end+0xfbf7a79c>
 400344c:	d8802344 	addi	r2,sp,141
 4003450:	003f1006 	br	4003094 <__ram_exceptions_end+0xfbf7adf8>
 4003454:	d8c02b03 	ldbu	r3,172(sp)
 4003458:	d8c02785 	stb	r3,158(sp)
 400345c:	0038fd06 	br	4001854 <__ram_exceptions_end+0xfbf795b8>
 4003460:	d8c02b03 	ldbu	r3,172(sp)
 4003464:	d8c02785 	stb	r3,158(sp)
 4003468:	003a9706 	br	4001ec8 <__ram_exceptions_end+0xfbf79c2c>
 400346c:	d8c02b03 	ldbu	r3,172(sp)
 4003470:	d8c02785 	stb	r3,158(sp)
 4003474:	003a1806 	br	4001cd8 <__ram_exceptions_end+0xfbf79a3c>
 4003478:	d8c02b03 	ldbu	r3,172(sp)
 400347c:	d8c02785 	stb	r3,158(sp)
 4003480:	003abe06 	br	4001f7c <__ram_exceptions_end+0xfbf79ce0>

04003484 <__vfprintf_internal>:
 4003484:	00810074 	movhi	r2,1025
 4003488:	109b1804 	addi	r2,r2,27744
 400348c:	300f883a 	mov	r7,r6
 4003490:	280d883a 	mov	r6,r5
 4003494:	200b883a 	mov	r5,r4
 4003498:	11000017 	ldw	r4,0(r2)
 400349c:	40011a81 	jmpi	40011a8 <___vfprintf_internal_r>

040034a0 <__sbprintf>:
 40034a0:	2880030b 	ldhu	r2,12(r5)
 40034a4:	2ac01917 	ldw	r11,100(r5)
 40034a8:	2a80038b 	ldhu	r10,14(r5)
 40034ac:	2a400717 	ldw	r9,28(r5)
 40034b0:	2a000917 	ldw	r8,36(r5)
 40034b4:	defee204 	addi	sp,sp,-1144
 40034b8:	00c10004 	movi	r3,1024
 40034bc:	dc011a15 	stw	r16,1128(sp)
 40034c0:	10bfff4c 	andi	r2,r2,65533
 40034c4:	2821883a 	mov	r16,r5
 40034c8:	d8cb883a 	add	r5,sp,r3
 40034cc:	dc811c15 	stw	r18,1136(sp)
 40034d0:	dc411b15 	stw	r17,1132(sp)
 40034d4:	dfc11d15 	stw	ra,1140(sp)
 40034d8:	2025883a 	mov	r18,r4
 40034dc:	d881030d 	sth	r2,1036(sp)
 40034e0:	dac11915 	stw	r11,1124(sp)
 40034e4:	da81038d 	sth	r10,1038(sp)
 40034e8:	da410715 	stw	r9,1052(sp)
 40034ec:	da010915 	stw	r8,1060(sp)
 40034f0:	dec10015 	stw	sp,1024(sp)
 40034f4:	dec10415 	stw	sp,1040(sp)
 40034f8:	d8c10215 	stw	r3,1032(sp)
 40034fc:	d8c10515 	stw	r3,1044(sp)
 4003500:	d8010615 	stw	zero,1048(sp)
 4003504:	40011a80 	call	40011a8 <___vfprintf_internal_r>
 4003508:	1023883a 	mov	r17,r2
 400350c:	10000416 	blt	r2,zero,4003520 <__sbprintf+0x80>
 4003510:	d9410004 	addi	r5,sp,1024
 4003514:	9009883a 	mov	r4,r18
 4003518:	400517c0 	call	400517c <_fflush_r>
 400351c:	10000d1e 	bne	r2,zero,4003554 <__sbprintf+0xb4>
 4003520:	d881030b 	ldhu	r2,1036(sp)
 4003524:	1080100c 	andi	r2,r2,64
 4003528:	10000326 	beq	r2,zero,4003538 <__sbprintf+0x98>
 400352c:	8080030b 	ldhu	r2,12(r16)
 4003530:	10801014 	ori	r2,r2,64
 4003534:	8080030d 	sth	r2,12(r16)
 4003538:	8805883a 	mov	r2,r17
 400353c:	dfc11d17 	ldw	ra,1140(sp)
 4003540:	dc811c17 	ldw	r18,1136(sp)
 4003544:	dc411b17 	ldw	r17,1132(sp)
 4003548:	dc011a17 	ldw	r16,1128(sp)
 400354c:	dec11e04 	addi	sp,sp,1144
 4003550:	f800283a 	ret
 4003554:	047fffc4 	movi	r17,-1
 4003558:	003ff106 	br	4003520 <__ram_exceptions_end+0xfbf7b284>

0400355c <__swsetup_r>:
 400355c:	00810074 	movhi	r2,1025
 4003560:	defffd04 	addi	sp,sp,-12
 4003564:	109b1804 	addi	r2,r2,27744
 4003568:	dc400115 	stw	r17,4(sp)
 400356c:	2023883a 	mov	r17,r4
 4003570:	11000017 	ldw	r4,0(r2)
 4003574:	dc000015 	stw	r16,0(sp)
 4003578:	dfc00215 	stw	ra,8(sp)
 400357c:	2821883a 	mov	r16,r5
 4003580:	20000226 	beq	r4,zero,400358c <__swsetup_r+0x30>
 4003584:	20800e17 	ldw	r2,56(r4)
 4003588:	10003126 	beq	r2,zero,4003650 <__swsetup_r+0xf4>
 400358c:	8080030b 	ldhu	r2,12(r16)
 4003590:	10c0020c 	andi	r3,r2,8
 4003594:	1009883a 	mov	r4,r2
 4003598:	18000f26 	beq	r3,zero,40035d8 <__swsetup_r+0x7c>
 400359c:	80c00417 	ldw	r3,16(r16)
 40035a0:	18001526 	beq	r3,zero,40035f8 <__swsetup_r+0x9c>
 40035a4:	1100004c 	andi	r4,r2,1
 40035a8:	20001c1e 	bne	r4,zero,400361c <__swsetup_r+0xc0>
 40035ac:	1080008c 	andi	r2,r2,2
 40035b0:	1000291e 	bne	r2,zero,4003658 <__swsetup_r+0xfc>
 40035b4:	80800517 	ldw	r2,20(r16)
 40035b8:	80800215 	stw	r2,8(r16)
 40035bc:	18001c26 	beq	r3,zero,4003630 <__swsetup_r+0xd4>
 40035c0:	0005883a 	mov	r2,zero
 40035c4:	dfc00217 	ldw	ra,8(sp)
 40035c8:	dc400117 	ldw	r17,4(sp)
 40035cc:	dc000017 	ldw	r16,0(sp)
 40035d0:	dec00304 	addi	sp,sp,12
 40035d4:	f800283a 	ret
 40035d8:	2080040c 	andi	r2,r4,16
 40035dc:	10002e26 	beq	r2,zero,4003698 <__swsetup_r+0x13c>
 40035e0:	2080010c 	andi	r2,r4,4
 40035e4:	10001e1e 	bne	r2,zero,4003660 <__swsetup_r+0x104>
 40035e8:	80c00417 	ldw	r3,16(r16)
 40035ec:	20800214 	ori	r2,r4,8
 40035f0:	8080030d 	sth	r2,12(r16)
 40035f4:	183feb1e 	bne	r3,zero,40035a4 <__ram_exceptions_end+0xfbf7b308>
 40035f8:	1100a00c 	andi	r4,r2,640
 40035fc:	01408004 	movi	r5,512
 4003600:	217fe826 	beq	r4,r5,40035a4 <__ram_exceptions_end+0xfbf7b308>
 4003604:	800b883a 	mov	r5,r16
 4003608:	8809883a 	mov	r4,r17
 400360c:	4005c500 	call	4005c50 <__smakebuf_r>
 4003610:	8080030b 	ldhu	r2,12(r16)
 4003614:	80c00417 	ldw	r3,16(r16)
 4003618:	003fe206 	br	40035a4 <__ram_exceptions_end+0xfbf7b308>
 400361c:	80800517 	ldw	r2,20(r16)
 4003620:	80000215 	stw	zero,8(r16)
 4003624:	0085c83a 	sub	r2,zero,r2
 4003628:	80800615 	stw	r2,24(r16)
 400362c:	183fe41e 	bne	r3,zero,40035c0 <__ram_exceptions_end+0xfbf7b324>
 4003630:	80c0030b 	ldhu	r3,12(r16)
 4003634:	0005883a 	mov	r2,zero
 4003638:	1900200c 	andi	r4,r3,128
 400363c:	203fe126 	beq	r4,zero,40035c4 <__ram_exceptions_end+0xfbf7b328>
 4003640:	18c01014 	ori	r3,r3,64
 4003644:	80c0030d 	sth	r3,12(r16)
 4003648:	00bfffc4 	movi	r2,-1
 400364c:	003fdd06 	br	40035c4 <__ram_exceptions_end+0xfbf7b328>
 4003650:	40055680 	call	4005568 <__sinit>
 4003654:	003fcd06 	br	400358c <__ram_exceptions_end+0xfbf7b2f0>
 4003658:	0005883a 	mov	r2,zero
 400365c:	003fd606 	br	40035b8 <__ram_exceptions_end+0xfbf7b31c>
 4003660:	81400c17 	ldw	r5,48(r16)
 4003664:	28000626 	beq	r5,zero,4003680 <__swsetup_r+0x124>
 4003668:	80801004 	addi	r2,r16,64
 400366c:	28800326 	beq	r5,r2,400367c <__swsetup_r+0x120>
 4003670:	8809883a 	mov	r4,r17
 4003674:	40056dc0 	call	40056dc <_free_r>
 4003678:	8100030b 	ldhu	r4,12(r16)
 400367c:	80000c15 	stw	zero,48(r16)
 4003680:	80c00417 	ldw	r3,16(r16)
 4003684:	00bff6c4 	movi	r2,-37
 4003688:	1108703a 	and	r4,r2,r4
 400368c:	80000115 	stw	zero,4(r16)
 4003690:	80c00015 	stw	r3,0(r16)
 4003694:	003fd506 	br	40035ec <__ram_exceptions_end+0xfbf7b350>
 4003698:	00800244 	movi	r2,9
 400369c:	88800015 	stw	r2,0(r17)
 40036a0:	20801014 	ori	r2,r4,64
 40036a4:	8080030d 	sth	r2,12(r16)
 40036a8:	00bfffc4 	movi	r2,-1
 40036ac:	003fc506 	br	40035c4 <__ram_exceptions_end+0xfbf7b328>

040036b0 <quorem>:
 40036b0:	defff204 	addi	sp,sp,-56
 40036b4:	ddc00b15 	stw	r23,44(sp)
 40036b8:	20800417 	ldw	r2,16(r4)
 40036bc:	2dc00417 	ldw	r23,16(r5)
 40036c0:	dfc00d15 	stw	ra,52(sp)
 40036c4:	df000c15 	stw	fp,48(sp)
 40036c8:	dd800a15 	stw	r22,40(sp)
 40036cc:	dd400915 	stw	r21,36(sp)
 40036d0:	dd000815 	stw	r20,32(sp)
 40036d4:	dcc00715 	stw	r19,28(sp)
 40036d8:	dc800615 	stw	r18,24(sp)
 40036dc:	dc400515 	stw	r17,20(sp)
 40036e0:	dc000415 	stw	r16,16(sp)
 40036e4:	15c07a16 	blt	r2,r23,40038d0 <quorem+0x220>
 40036e8:	bdffffc4 	addi	r23,r23,-1
 40036ec:	bde9883a 	add	r20,r23,r23
 40036f0:	28c00504 	addi	r3,r5,20
 40036f4:	a529883a 	add	r20,r20,r20
 40036f8:	1d39883a 	add	fp,r3,r20
 40036fc:	24c00504 	addi	r19,r4,20
 4003700:	d9400215 	stw	r5,8(sp)
 4003704:	9d29883a 	add	r20,r19,r20
 4003708:	e1400017 	ldw	r5,0(fp)
 400370c:	d9000015 	stw	r4,0(sp)
 4003710:	a1000017 	ldw	r4,0(r20)
 4003714:	29400044 	addi	r5,r5,1
 4003718:	d8c00115 	stw	r3,4(sp)
 400371c:	dd000315 	stw	r20,12(sp)
 4003720:	40010580 	call	4001058 <__udivsi3>
 4003724:	1025883a 	mov	r18,r2
 4003728:	10003026 	beq	r2,zero,40037ec <quorem+0x13c>
 400372c:	dc400117 	ldw	r17,4(sp)
 4003730:	9829883a 	mov	r20,r19
 4003734:	002d883a 	mov	r22,zero
 4003738:	0021883a 	mov	r16,zero
 400373c:	8d400017 	ldw	r21,0(r17)
 4003740:	900b883a 	mov	r5,r18
 4003744:	8c400104 	addi	r17,r17,4
 4003748:	a93fffcc 	andi	r4,r21,65535
 400374c:	40011140 	call	4001114 <__mulsi3>
 4003750:	a808d43a 	srli	r4,r21,16
 4003754:	900b883a 	mov	r5,r18
 4003758:	15ad883a 	add	r22,r2,r22
 400375c:	40011140 	call	4001114 <__mulsi3>
 4003760:	a1000017 	ldw	r4,0(r20)
 4003764:	b00cd43a 	srli	r6,r22,16
 4003768:	b0ffffcc 	andi	r3,r22,65535
 400376c:	217fffcc 	andi	r5,r4,65535
 4003770:	2c21883a 	add	r16,r5,r16
 4003774:	80c7c83a 	sub	r3,r16,r3
 4003778:	2008d43a 	srli	r4,r4,16
 400377c:	1185883a 	add	r2,r2,r6
 4003780:	1821d43a 	srai	r16,r3,16
 4003784:	117fffcc 	andi	r5,r2,65535
 4003788:	2149c83a 	sub	r4,r4,r5
 400378c:	2421883a 	add	r16,r4,r16
 4003790:	8008943a 	slli	r4,r16,16
 4003794:	18ffffcc 	andi	r3,r3,65535
 4003798:	102cd43a 	srli	r22,r2,16
 400379c:	20c8b03a 	or	r4,r4,r3
 40037a0:	a1000015 	stw	r4,0(r20)
 40037a4:	8021d43a 	srai	r16,r16,16
 40037a8:	a5000104 	addi	r20,r20,4
 40037ac:	e47fe32e 	bgeu	fp,r17,400373c <__ram_exceptions_end+0xfbf7b4a0>
 40037b0:	d8c00317 	ldw	r3,12(sp)
 40037b4:	18800017 	ldw	r2,0(r3)
 40037b8:	10000c1e 	bne	r2,zero,40037ec <quorem+0x13c>
 40037bc:	18bfff04 	addi	r2,r3,-4
 40037c0:	9880082e 	bgeu	r19,r2,40037e4 <quorem+0x134>
 40037c4:	18ffff17 	ldw	r3,-4(r3)
 40037c8:	18000326 	beq	r3,zero,40037d8 <quorem+0x128>
 40037cc:	00000506 	br	40037e4 <quorem+0x134>
 40037d0:	10c00017 	ldw	r3,0(r2)
 40037d4:	1800031e 	bne	r3,zero,40037e4 <quorem+0x134>
 40037d8:	10bfff04 	addi	r2,r2,-4
 40037dc:	bdffffc4 	addi	r23,r23,-1
 40037e0:	98bffb36 	bltu	r19,r2,40037d0 <__ram_exceptions_end+0xfbf7b534>
 40037e4:	d8c00017 	ldw	r3,0(sp)
 40037e8:	1dc00415 	stw	r23,16(r3)
 40037ec:	d9400217 	ldw	r5,8(sp)
 40037f0:	d9000017 	ldw	r4,0(sp)
 40037f4:	40072f00 	call	40072f0 <__mcmp>
 40037f8:	10002816 	blt	r2,zero,400389c <quorem+0x1ec>
 40037fc:	dc400117 	ldw	r17,4(sp)
 4003800:	94800044 	addi	r18,r18,1
 4003804:	980d883a 	mov	r6,r19
 4003808:	0007883a 	mov	r3,zero
 400380c:	31000017 	ldw	r4,0(r6)
 4003810:	89400017 	ldw	r5,0(r17)
 4003814:	31800104 	addi	r6,r6,4
 4003818:	20bfffcc 	andi	r2,r4,65535
 400381c:	10c7883a 	add	r3,r2,r3
 4003820:	28bfffcc 	andi	r2,r5,65535
 4003824:	1885c83a 	sub	r2,r3,r2
 4003828:	280ad43a 	srli	r5,r5,16
 400382c:	2008d43a 	srli	r4,r4,16
 4003830:	1007d43a 	srai	r3,r2,16
 4003834:	10bfffcc 	andi	r2,r2,65535
 4003838:	2149c83a 	sub	r4,r4,r5
 400383c:	20c9883a 	add	r4,r4,r3
 4003840:	200a943a 	slli	r5,r4,16
 4003844:	8c400104 	addi	r17,r17,4
 4003848:	2007d43a 	srai	r3,r4,16
 400384c:	2884b03a 	or	r2,r5,r2
 4003850:	30bfff15 	stw	r2,-4(r6)
 4003854:	e47fed2e 	bgeu	fp,r17,400380c <__ram_exceptions_end+0xfbf7b570>
 4003858:	bdc5883a 	add	r2,r23,r23
 400385c:	1085883a 	add	r2,r2,r2
 4003860:	9887883a 	add	r3,r19,r2
 4003864:	18800017 	ldw	r2,0(r3)
 4003868:	10000c1e 	bne	r2,zero,400389c <quorem+0x1ec>
 400386c:	18bfff04 	addi	r2,r3,-4
 4003870:	9880082e 	bgeu	r19,r2,4003894 <quorem+0x1e4>
 4003874:	18ffff17 	ldw	r3,-4(r3)
 4003878:	18000326 	beq	r3,zero,4003888 <quorem+0x1d8>
 400387c:	00000506 	br	4003894 <quorem+0x1e4>
 4003880:	10c00017 	ldw	r3,0(r2)
 4003884:	1800031e 	bne	r3,zero,4003894 <quorem+0x1e4>
 4003888:	10bfff04 	addi	r2,r2,-4
 400388c:	bdffffc4 	addi	r23,r23,-1
 4003890:	98bffb36 	bltu	r19,r2,4003880 <__ram_exceptions_end+0xfbf7b5e4>
 4003894:	d8c00017 	ldw	r3,0(sp)
 4003898:	1dc00415 	stw	r23,16(r3)
 400389c:	9005883a 	mov	r2,r18
 40038a0:	dfc00d17 	ldw	ra,52(sp)
 40038a4:	df000c17 	ldw	fp,48(sp)
 40038a8:	ddc00b17 	ldw	r23,44(sp)
 40038ac:	dd800a17 	ldw	r22,40(sp)
 40038b0:	dd400917 	ldw	r21,36(sp)
 40038b4:	dd000817 	ldw	r20,32(sp)
 40038b8:	dcc00717 	ldw	r19,28(sp)
 40038bc:	dc800617 	ldw	r18,24(sp)
 40038c0:	dc400517 	ldw	r17,20(sp)
 40038c4:	dc000417 	ldw	r16,16(sp)
 40038c8:	dec00e04 	addi	sp,sp,56
 40038cc:	f800283a 	ret
 40038d0:	0005883a 	mov	r2,zero
 40038d4:	003ff206 	br	40038a0 <__ram_exceptions_end+0xfbf7b604>

040038d8 <_dtoa_r>:
 40038d8:	20801017 	ldw	r2,64(r4)
 40038dc:	deffde04 	addi	sp,sp,-136
 40038e0:	df002015 	stw	fp,128(sp)
 40038e4:	dcc01b15 	stw	r19,108(sp)
 40038e8:	dc801a15 	stw	r18,104(sp)
 40038ec:	dc401915 	stw	r17,100(sp)
 40038f0:	dc001815 	stw	r16,96(sp)
 40038f4:	dfc02115 	stw	ra,132(sp)
 40038f8:	ddc01f15 	stw	r23,124(sp)
 40038fc:	dd801e15 	stw	r22,120(sp)
 4003900:	dd401d15 	stw	r21,116(sp)
 4003904:	dd001c15 	stw	r20,112(sp)
 4003908:	d9c00315 	stw	r7,12(sp)
 400390c:	2039883a 	mov	fp,r4
 4003910:	3023883a 	mov	r17,r6
 4003914:	2825883a 	mov	r18,r5
 4003918:	dc002417 	ldw	r16,144(sp)
 400391c:	3027883a 	mov	r19,r6
 4003920:	10000826 	beq	r2,zero,4003944 <_dtoa_r+0x6c>
 4003924:	21801117 	ldw	r6,68(r4)
 4003928:	00c00044 	movi	r3,1
 400392c:	100b883a 	mov	r5,r2
 4003930:	1986983a 	sll	r3,r3,r6
 4003934:	11800115 	stw	r6,4(r2)
 4003938:	10c00215 	stw	r3,8(r2)
 400393c:	4006a140 	call	4006a14 <_Bfree>
 4003940:	e0001015 	stw	zero,64(fp)
 4003944:	88002e16 	blt	r17,zero,4003a00 <_dtoa_r+0x128>
 4003948:	80000015 	stw	zero,0(r16)
 400394c:	889ffc2c 	andhi	r2,r17,32752
 4003950:	00dffc34 	movhi	r3,32752
 4003954:	10c01c26 	beq	r2,r3,40039c8 <_dtoa_r+0xf0>
 4003958:	000d883a 	mov	r6,zero
 400395c:	000f883a 	mov	r7,zero
 4003960:	9009883a 	mov	r4,r18
 4003964:	980b883a 	mov	r5,r19
 4003968:	400c7a40 	call	400c7a4 <__eqdf2>
 400396c:	10002b1e 	bne	r2,zero,4003a1c <_dtoa_r+0x144>
 4003970:	d9c02317 	ldw	r7,140(sp)
 4003974:	00800044 	movi	r2,1
 4003978:	38800015 	stw	r2,0(r7)
 400397c:	d8802517 	ldw	r2,148(sp)
 4003980:	10019e26 	beq	r2,zero,4003ffc <_dtoa_r+0x724>
 4003984:	d8c02517 	ldw	r3,148(sp)
 4003988:	00810074 	movhi	r2,1025
 400398c:	10971a44 	addi	r2,r2,23657
 4003990:	18800015 	stw	r2,0(r3)
 4003994:	10bfffc4 	addi	r2,r2,-1
 4003998:	dfc02117 	ldw	ra,132(sp)
 400399c:	df002017 	ldw	fp,128(sp)
 40039a0:	ddc01f17 	ldw	r23,124(sp)
 40039a4:	dd801e17 	ldw	r22,120(sp)
 40039a8:	dd401d17 	ldw	r21,116(sp)
 40039ac:	dd001c17 	ldw	r20,112(sp)
 40039b0:	dcc01b17 	ldw	r19,108(sp)
 40039b4:	dc801a17 	ldw	r18,104(sp)
 40039b8:	dc401917 	ldw	r17,100(sp)
 40039bc:	dc001817 	ldw	r16,96(sp)
 40039c0:	dec02204 	addi	sp,sp,136
 40039c4:	f800283a 	ret
 40039c8:	d8c02317 	ldw	r3,140(sp)
 40039cc:	0089c3c4 	movi	r2,9999
 40039d0:	18800015 	stw	r2,0(r3)
 40039d4:	90017726 	beq	r18,zero,4003fb4 <_dtoa_r+0x6dc>
 40039d8:	00810074 	movhi	r2,1025
 40039dc:	10962f04 	addi	r2,r2,22716
 40039e0:	d9002517 	ldw	r4,148(sp)
 40039e4:	203fec26 	beq	r4,zero,4003998 <__ram_exceptions_end+0xfbf7b6fc>
 40039e8:	10c000c7 	ldb	r3,3(r2)
 40039ec:	1801781e 	bne	r3,zero,4003fd0 <_dtoa_r+0x6f8>
 40039f0:	10c000c4 	addi	r3,r2,3
 40039f4:	d9802517 	ldw	r6,148(sp)
 40039f8:	30c00015 	stw	r3,0(r6)
 40039fc:	003fe606 	br	4003998 <__ram_exceptions_end+0xfbf7b6fc>
 4003a00:	04e00034 	movhi	r19,32768
 4003a04:	9cffffc4 	addi	r19,r19,-1
 4003a08:	00800044 	movi	r2,1
 4003a0c:	8ce6703a 	and	r19,r17,r19
 4003a10:	80800015 	stw	r2,0(r16)
 4003a14:	9823883a 	mov	r17,r19
 4003a18:	003fcc06 	br	400394c <__ram_exceptions_end+0xfbf7b6b0>
 4003a1c:	d8800204 	addi	r2,sp,8
 4003a20:	d8800015 	stw	r2,0(sp)
 4003a24:	d9c00104 	addi	r7,sp,4
 4003a28:	900b883a 	mov	r5,r18
 4003a2c:	980d883a 	mov	r6,r19
 4003a30:	e009883a 	mov	r4,fp
 4003a34:	8820d53a 	srli	r16,r17,20
 4003a38:	40076bc0 	call	40076bc <__d2b>
 4003a3c:	d8800915 	stw	r2,36(sp)
 4003a40:	8001651e 	bne	r16,zero,4003fd8 <_dtoa_r+0x700>
 4003a44:	dd800217 	ldw	r22,8(sp)
 4003a48:	dc000117 	ldw	r16,4(sp)
 4003a4c:	00800804 	movi	r2,32
 4003a50:	b421883a 	add	r16,r22,r16
 4003a54:	80c10c84 	addi	r3,r16,1074
 4003a58:	10c2d10e 	bge	r2,r3,40045a0 <_dtoa_r+0xcc8>
 4003a5c:	00801004 	movi	r2,64
 4003a60:	81010484 	addi	r4,r16,1042
 4003a64:	10c7c83a 	sub	r3,r2,r3
 4003a68:	9108d83a 	srl	r4,r18,r4
 4003a6c:	88e2983a 	sll	r17,r17,r3
 4003a70:	2448b03a 	or	r4,r4,r17
 4003a74:	400dcc00 	call	400dcc0 <__floatunsidf>
 4003a78:	017f8434 	movhi	r5,65040
 4003a7c:	01800044 	movi	r6,1
 4003a80:	1009883a 	mov	r4,r2
 4003a84:	194b883a 	add	r5,r3,r5
 4003a88:	843fffc4 	addi	r16,r16,-1
 4003a8c:	d9801115 	stw	r6,68(sp)
 4003a90:	000d883a 	mov	r6,zero
 4003a94:	01cffe34 	movhi	r7,16376
 4003a98:	400d2680 	call	400d268 <__subdf3>
 4003a9c:	0198dbf4 	movhi	r6,25455
 4003aa0:	01cff4f4 	movhi	r7,16339
 4003aa4:	3190d844 	addi	r6,r6,17249
 4003aa8:	39e1e9c4 	addi	r7,r7,-30809
 4003aac:	1009883a 	mov	r4,r2
 4003ab0:	180b883a 	mov	r5,r3
 4003ab4:	400c9fc0 	call	400c9fc <__muldf3>
 4003ab8:	01a2d874 	movhi	r6,35681
 4003abc:	01cff1f4 	movhi	r7,16327
 4003ac0:	31b22cc4 	addi	r6,r6,-14157
 4003ac4:	39e28a04 	addi	r7,r7,-30168
 4003ac8:	180b883a 	mov	r5,r3
 4003acc:	1009883a 	mov	r4,r2
 4003ad0:	400b5280 	call	400b528 <__adddf3>
 4003ad4:	8009883a 	mov	r4,r16
 4003ad8:	1029883a 	mov	r20,r2
 4003adc:	1823883a 	mov	r17,r3
 4003ae0:	400dbe40 	call	400dbe4 <__floatsidf>
 4003ae4:	019427f4 	movhi	r6,20639
 4003ae8:	01cff4f4 	movhi	r7,16339
 4003aec:	319e7ec4 	addi	r6,r6,31227
 4003af0:	39d104c4 	addi	r7,r7,17427
 4003af4:	1009883a 	mov	r4,r2
 4003af8:	180b883a 	mov	r5,r3
 4003afc:	400c9fc0 	call	400c9fc <__muldf3>
 4003b00:	100d883a 	mov	r6,r2
 4003b04:	180f883a 	mov	r7,r3
 4003b08:	a009883a 	mov	r4,r20
 4003b0c:	880b883a 	mov	r5,r17
 4003b10:	400b5280 	call	400b528 <__adddf3>
 4003b14:	1009883a 	mov	r4,r2
 4003b18:	180b883a 	mov	r5,r3
 4003b1c:	1029883a 	mov	r20,r2
 4003b20:	1823883a 	mov	r17,r3
 4003b24:	400db640 	call	400db64 <__fixdfsi>
 4003b28:	000d883a 	mov	r6,zero
 4003b2c:	000f883a 	mov	r7,zero
 4003b30:	a009883a 	mov	r4,r20
 4003b34:	880b883a 	mov	r5,r17
 4003b38:	d8800515 	stw	r2,20(sp)
 4003b3c:	400c9080 	call	400c908 <__ledf2>
 4003b40:	10028716 	blt	r2,zero,4004560 <_dtoa_r+0xc88>
 4003b44:	d8c00517 	ldw	r3,20(sp)
 4003b48:	00800584 	movi	r2,22
 4003b4c:	10c27536 	bltu	r2,r3,4004524 <_dtoa_r+0xc4c>
 4003b50:	180490fa 	slli	r2,r3,3
 4003b54:	00c10074 	movhi	r3,1025
 4003b58:	18d64b04 	addi	r3,r3,22828
 4003b5c:	1885883a 	add	r2,r3,r2
 4003b60:	11000017 	ldw	r4,0(r2)
 4003b64:	11400117 	ldw	r5,4(r2)
 4003b68:	900d883a 	mov	r6,r18
 4003b6c:	980f883a 	mov	r7,r19
 4003b70:	400c82c0 	call	400c82c <__gedf2>
 4003b74:	00828d0e 	bge	zero,r2,40045ac <_dtoa_r+0xcd4>
 4003b78:	d9000517 	ldw	r4,20(sp)
 4003b7c:	d8000e15 	stw	zero,56(sp)
 4003b80:	213fffc4 	addi	r4,r4,-1
 4003b84:	d9000515 	stw	r4,20(sp)
 4003b88:	b42dc83a 	sub	r22,r22,r16
 4003b8c:	b5bfffc4 	addi	r22,r22,-1
 4003b90:	b0026f16 	blt	r22,zero,4004550 <_dtoa_r+0xc78>
 4003b94:	d8000815 	stw	zero,32(sp)
 4003b98:	d9c00517 	ldw	r7,20(sp)
 4003b9c:	38026416 	blt	r7,zero,4004530 <_dtoa_r+0xc58>
 4003ba0:	b1ed883a 	add	r22,r22,r7
 4003ba4:	d9c00d15 	stw	r7,52(sp)
 4003ba8:	d8000a15 	stw	zero,40(sp)
 4003bac:	d9800317 	ldw	r6,12(sp)
 4003bb0:	00800244 	movi	r2,9
 4003bb4:	11811436 	bltu	r2,r6,4004008 <_dtoa_r+0x730>
 4003bb8:	00800144 	movi	r2,5
 4003bbc:	1184e10e 	bge	r2,r6,4004f44 <_dtoa_r+0x166c>
 4003bc0:	31bfff04 	addi	r6,r6,-4
 4003bc4:	d9800315 	stw	r6,12(sp)
 4003bc8:	0023883a 	mov	r17,zero
 4003bcc:	d9800317 	ldw	r6,12(sp)
 4003bd0:	008000c4 	movi	r2,3
 4003bd4:	30836726 	beq	r6,r2,4004974 <_dtoa_r+0x109c>
 4003bd8:	1183410e 	bge	r2,r6,40048e0 <_dtoa_r+0x1008>
 4003bdc:	d9c00317 	ldw	r7,12(sp)
 4003be0:	00800104 	movi	r2,4
 4003be4:	38827c26 	beq	r7,r2,40045d8 <_dtoa_r+0xd00>
 4003be8:	00800144 	movi	r2,5
 4003bec:	3884c41e 	bne	r7,r2,4004f00 <_dtoa_r+0x1628>
 4003bf0:	00800044 	movi	r2,1
 4003bf4:	d8800b15 	stw	r2,44(sp)
 4003bf8:	d8c00517 	ldw	r3,20(sp)
 4003bfc:	d9002217 	ldw	r4,136(sp)
 4003c00:	1907883a 	add	r3,r3,r4
 4003c04:	19800044 	addi	r6,r3,1
 4003c08:	d8c00c15 	stw	r3,48(sp)
 4003c0c:	d9800615 	stw	r6,24(sp)
 4003c10:	0183a40e 	bge	zero,r6,4004aa4 <_dtoa_r+0x11cc>
 4003c14:	d9800617 	ldw	r6,24(sp)
 4003c18:	3021883a 	mov	r16,r6
 4003c1c:	e0001115 	stw	zero,68(fp)
 4003c20:	008005c4 	movi	r2,23
 4003c24:	1184c92e 	bgeu	r2,r6,4004f4c <_dtoa_r+0x1674>
 4003c28:	00c00044 	movi	r3,1
 4003c2c:	00800104 	movi	r2,4
 4003c30:	1085883a 	add	r2,r2,r2
 4003c34:	11000504 	addi	r4,r2,20
 4003c38:	180b883a 	mov	r5,r3
 4003c3c:	18c00044 	addi	r3,r3,1
 4003c40:	313ffb2e 	bgeu	r6,r4,4003c30 <__ram_exceptions_end+0xfbf7b994>
 4003c44:	e1401115 	stw	r5,68(fp)
 4003c48:	e009883a 	mov	r4,fp
 4003c4c:	400696c0 	call	400696c <_Balloc>
 4003c50:	d8800715 	stw	r2,28(sp)
 4003c54:	e0801015 	stw	r2,64(fp)
 4003c58:	00800384 	movi	r2,14
 4003c5c:	1400f736 	bltu	r2,r16,400403c <_dtoa_r+0x764>
 4003c60:	8800f626 	beq	r17,zero,400403c <_dtoa_r+0x764>
 4003c64:	d9c00517 	ldw	r7,20(sp)
 4003c68:	01c39a0e 	bge	zero,r7,4004ad4 <_dtoa_r+0x11fc>
 4003c6c:	388003cc 	andi	r2,r7,15
 4003c70:	100490fa 	slli	r2,r2,3
 4003c74:	382bd13a 	srai	r21,r7,4
 4003c78:	00c10074 	movhi	r3,1025
 4003c7c:	18d64b04 	addi	r3,r3,22828
 4003c80:	1885883a 	add	r2,r3,r2
 4003c84:	a8c0040c 	andi	r3,r21,16
 4003c88:	12400017 	ldw	r9,0(r2)
 4003c8c:	12000117 	ldw	r8,4(r2)
 4003c90:	18037926 	beq	r3,zero,4004a78 <_dtoa_r+0x11a0>
 4003c94:	00810074 	movhi	r2,1025
 4003c98:	10964104 	addi	r2,r2,22788
 4003c9c:	11800817 	ldw	r6,32(r2)
 4003ca0:	11c00917 	ldw	r7,36(r2)
 4003ca4:	9009883a 	mov	r4,r18
 4003ca8:	980b883a 	mov	r5,r19
 4003cac:	da001715 	stw	r8,92(sp)
 4003cb0:	da401615 	stw	r9,88(sp)
 4003cb4:	400bdd40 	call	400bdd4 <__divdf3>
 4003cb8:	da001717 	ldw	r8,92(sp)
 4003cbc:	da401617 	ldw	r9,88(sp)
 4003cc0:	ad4003cc 	andi	r21,r21,15
 4003cc4:	040000c4 	movi	r16,3
 4003cc8:	1023883a 	mov	r17,r2
 4003ccc:	1829883a 	mov	r20,r3
 4003cd0:	a8001126 	beq	r21,zero,4003d18 <_dtoa_r+0x440>
 4003cd4:	05c10074 	movhi	r23,1025
 4003cd8:	bdd64104 	addi	r23,r23,22788
 4003cdc:	4805883a 	mov	r2,r9
 4003ce0:	4007883a 	mov	r3,r8
 4003ce4:	a980004c 	andi	r6,r21,1
 4003ce8:	1009883a 	mov	r4,r2
 4003cec:	a82bd07a 	srai	r21,r21,1
 4003cf0:	180b883a 	mov	r5,r3
 4003cf4:	30000426 	beq	r6,zero,4003d08 <_dtoa_r+0x430>
 4003cf8:	b9800017 	ldw	r6,0(r23)
 4003cfc:	b9c00117 	ldw	r7,4(r23)
 4003d00:	84000044 	addi	r16,r16,1
 4003d04:	400c9fc0 	call	400c9fc <__muldf3>
 4003d08:	bdc00204 	addi	r23,r23,8
 4003d0c:	a83ff51e 	bne	r21,zero,4003ce4 <__ram_exceptions_end+0xfbf7ba48>
 4003d10:	1013883a 	mov	r9,r2
 4003d14:	1811883a 	mov	r8,r3
 4003d18:	480d883a 	mov	r6,r9
 4003d1c:	400f883a 	mov	r7,r8
 4003d20:	8809883a 	mov	r4,r17
 4003d24:	a00b883a 	mov	r5,r20
 4003d28:	400bdd40 	call	400bdd4 <__divdf3>
 4003d2c:	d8800f15 	stw	r2,60(sp)
 4003d30:	d8c01015 	stw	r3,64(sp)
 4003d34:	d8c00e17 	ldw	r3,56(sp)
 4003d38:	18000626 	beq	r3,zero,4003d54 <_dtoa_r+0x47c>
 4003d3c:	d9000f17 	ldw	r4,60(sp)
 4003d40:	d9401017 	ldw	r5,64(sp)
 4003d44:	000d883a 	mov	r6,zero
 4003d48:	01cffc34 	movhi	r7,16368
 4003d4c:	400c9080 	call	400c908 <__ledf2>
 4003d50:	10040b16 	blt	r2,zero,4004d80 <_dtoa_r+0x14a8>
 4003d54:	8009883a 	mov	r4,r16
 4003d58:	400dbe40 	call	400dbe4 <__floatsidf>
 4003d5c:	d9800f17 	ldw	r6,60(sp)
 4003d60:	d9c01017 	ldw	r7,64(sp)
 4003d64:	1009883a 	mov	r4,r2
 4003d68:	180b883a 	mov	r5,r3
 4003d6c:	400c9fc0 	call	400c9fc <__muldf3>
 4003d70:	000d883a 	mov	r6,zero
 4003d74:	01d00734 	movhi	r7,16412
 4003d78:	1009883a 	mov	r4,r2
 4003d7c:	180b883a 	mov	r5,r3
 4003d80:	400b5280 	call	400b528 <__adddf3>
 4003d84:	1021883a 	mov	r16,r2
 4003d88:	d8800617 	ldw	r2,24(sp)
 4003d8c:	047f3034 	movhi	r17,64704
 4003d90:	1c63883a 	add	r17,r3,r17
 4003d94:	10031826 	beq	r2,zero,40049f8 <_dtoa_r+0x1120>
 4003d98:	d8c00517 	ldw	r3,20(sp)
 4003d9c:	db000617 	ldw	r12,24(sp)
 4003da0:	d8c01315 	stw	r3,76(sp)
 4003da4:	d9000b17 	ldw	r4,44(sp)
 4003da8:	20038f26 	beq	r4,zero,4004be8 <_dtoa_r+0x1310>
 4003dac:	60bfffc4 	addi	r2,r12,-1
 4003db0:	100490fa 	slli	r2,r2,3
 4003db4:	00c10074 	movhi	r3,1025
 4003db8:	18d64b04 	addi	r3,r3,22828
 4003dbc:	1885883a 	add	r2,r3,r2
 4003dc0:	11800017 	ldw	r6,0(r2)
 4003dc4:	11c00117 	ldw	r7,4(r2)
 4003dc8:	d8800717 	ldw	r2,28(sp)
 4003dcc:	0009883a 	mov	r4,zero
 4003dd0:	014ff834 	movhi	r5,16352
 4003dd4:	db001615 	stw	r12,88(sp)
 4003dd8:	15c00044 	addi	r23,r2,1
 4003ddc:	400bdd40 	call	400bdd4 <__divdf3>
 4003de0:	800d883a 	mov	r6,r16
 4003de4:	880f883a 	mov	r7,r17
 4003de8:	1009883a 	mov	r4,r2
 4003dec:	180b883a 	mov	r5,r3
 4003df0:	400d2680 	call	400d268 <__subdf3>
 4003df4:	d9401017 	ldw	r5,64(sp)
 4003df8:	d9000f17 	ldw	r4,60(sp)
 4003dfc:	102b883a 	mov	r21,r2
 4003e00:	d8c01215 	stw	r3,72(sp)
 4003e04:	400db640 	call	400db64 <__fixdfsi>
 4003e08:	1009883a 	mov	r4,r2
 4003e0c:	1029883a 	mov	r20,r2
 4003e10:	400dbe40 	call	400dbe4 <__floatsidf>
 4003e14:	d9000f17 	ldw	r4,60(sp)
 4003e18:	d9401017 	ldw	r5,64(sp)
 4003e1c:	100d883a 	mov	r6,r2
 4003e20:	180f883a 	mov	r7,r3
 4003e24:	400d2680 	call	400d268 <__subdf3>
 4003e28:	1823883a 	mov	r17,r3
 4003e2c:	d8c00717 	ldw	r3,28(sp)
 4003e30:	d9401217 	ldw	r5,72(sp)
 4003e34:	a2000c04 	addi	r8,r20,48
 4003e38:	1021883a 	mov	r16,r2
 4003e3c:	1a000005 	stb	r8,0(r3)
 4003e40:	800d883a 	mov	r6,r16
 4003e44:	880f883a 	mov	r7,r17
 4003e48:	a809883a 	mov	r4,r21
 4003e4c:	4029883a 	mov	r20,r8
 4003e50:	400c82c0 	call	400c82c <__gedf2>
 4003e54:	00841d16 	blt	zero,r2,4004ecc <_dtoa_r+0x15f4>
 4003e58:	800d883a 	mov	r6,r16
 4003e5c:	880f883a 	mov	r7,r17
 4003e60:	0009883a 	mov	r4,zero
 4003e64:	014ffc34 	movhi	r5,16368
 4003e68:	400d2680 	call	400d268 <__subdf3>
 4003e6c:	d9401217 	ldw	r5,72(sp)
 4003e70:	100d883a 	mov	r6,r2
 4003e74:	180f883a 	mov	r7,r3
 4003e78:	a809883a 	mov	r4,r21
 4003e7c:	400c82c0 	call	400c82c <__gedf2>
 4003e80:	db001617 	ldw	r12,88(sp)
 4003e84:	00840e16 	blt	zero,r2,4004ec0 <_dtoa_r+0x15e8>
 4003e88:	00800044 	movi	r2,1
 4003e8c:	13006b0e 	bge	r2,r12,400403c <_dtoa_r+0x764>
 4003e90:	d9000717 	ldw	r4,28(sp)
 4003e94:	dd800f15 	stw	r22,60(sp)
 4003e98:	dcc01015 	stw	r19,64(sp)
 4003e9c:	2319883a 	add	r12,r4,r12
 4003ea0:	dcc01217 	ldw	r19,72(sp)
 4003ea4:	602d883a 	mov	r22,r12
 4003ea8:	dc801215 	stw	r18,72(sp)
 4003eac:	b825883a 	mov	r18,r23
 4003eb0:	00000906 	br	4003ed8 <_dtoa_r+0x600>
 4003eb4:	400d2680 	call	400d268 <__subdf3>
 4003eb8:	a80d883a 	mov	r6,r21
 4003ebc:	980f883a 	mov	r7,r19
 4003ec0:	1009883a 	mov	r4,r2
 4003ec4:	180b883a 	mov	r5,r3
 4003ec8:	400c9080 	call	400c908 <__ledf2>
 4003ecc:	1003e816 	blt	r2,zero,4004e70 <_dtoa_r+0x1598>
 4003ed0:	b825883a 	mov	r18,r23
 4003ed4:	bd83e926 	beq	r23,r22,4004e7c <_dtoa_r+0x15a4>
 4003ed8:	a809883a 	mov	r4,r21
 4003edc:	980b883a 	mov	r5,r19
 4003ee0:	000d883a 	mov	r6,zero
 4003ee4:	01d00934 	movhi	r7,16420
 4003ee8:	400c9fc0 	call	400c9fc <__muldf3>
 4003eec:	000d883a 	mov	r6,zero
 4003ef0:	01d00934 	movhi	r7,16420
 4003ef4:	8009883a 	mov	r4,r16
 4003ef8:	880b883a 	mov	r5,r17
 4003efc:	102b883a 	mov	r21,r2
 4003f00:	1827883a 	mov	r19,r3
 4003f04:	400c9fc0 	call	400c9fc <__muldf3>
 4003f08:	180b883a 	mov	r5,r3
 4003f0c:	1009883a 	mov	r4,r2
 4003f10:	1821883a 	mov	r16,r3
 4003f14:	1023883a 	mov	r17,r2
 4003f18:	400db640 	call	400db64 <__fixdfsi>
 4003f1c:	1009883a 	mov	r4,r2
 4003f20:	1029883a 	mov	r20,r2
 4003f24:	400dbe40 	call	400dbe4 <__floatsidf>
 4003f28:	8809883a 	mov	r4,r17
 4003f2c:	800b883a 	mov	r5,r16
 4003f30:	100d883a 	mov	r6,r2
 4003f34:	180f883a 	mov	r7,r3
 4003f38:	400d2680 	call	400d268 <__subdf3>
 4003f3c:	a5000c04 	addi	r20,r20,48
 4003f40:	a80d883a 	mov	r6,r21
 4003f44:	980f883a 	mov	r7,r19
 4003f48:	1009883a 	mov	r4,r2
 4003f4c:	180b883a 	mov	r5,r3
 4003f50:	95000005 	stb	r20,0(r18)
 4003f54:	1021883a 	mov	r16,r2
 4003f58:	1823883a 	mov	r17,r3
 4003f5c:	400c9080 	call	400c908 <__ledf2>
 4003f60:	bdc00044 	addi	r23,r23,1
 4003f64:	800d883a 	mov	r6,r16
 4003f68:	880f883a 	mov	r7,r17
 4003f6c:	0009883a 	mov	r4,zero
 4003f70:	014ffc34 	movhi	r5,16368
 4003f74:	103fcf0e 	bge	r2,zero,4003eb4 <__ram_exceptions_end+0xfbf7bc18>
 4003f78:	d8c01317 	ldw	r3,76(sp)
 4003f7c:	d8c00515 	stw	r3,20(sp)
 4003f80:	d9400917 	ldw	r5,36(sp)
 4003f84:	e009883a 	mov	r4,fp
 4003f88:	4006a140 	call	4006a14 <_Bfree>
 4003f8c:	d9000517 	ldw	r4,20(sp)
 4003f90:	d9802317 	ldw	r6,140(sp)
 4003f94:	d9c02517 	ldw	r7,148(sp)
 4003f98:	b8000005 	stb	zero,0(r23)
 4003f9c:	20800044 	addi	r2,r4,1
 4003fa0:	30800015 	stw	r2,0(r6)
 4003fa4:	3802aa26 	beq	r7,zero,4004a50 <_dtoa_r+0x1178>
 4003fa8:	3dc00015 	stw	r23,0(r7)
 4003fac:	d8800717 	ldw	r2,28(sp)
 4003fb0:	003e7906 	br	4003998 <__ram_exceptions_end+0xfbf7b6fc>
 4003fb4:	00800434 	movhi	r2,16
 4003fb8:	10bfffc4 	addi	r2,r2,-1
 4003fbc:	88a2703a 	and	r17,r17,r2
 4003fc0:	883e851e 	bne	r17,zero,40039d8 <__ram_exceptions_end+0xfbf7b73c>
 4003fc4:	00810074 	movhi	r2,1025
 4003fc8:	10962c04 	addi	r2,r2,22704
 4003fcc:	003e8406 	br	40039e0 <__ram_exceptions_end+0xfbf7b744>
 4003fd0:	10c00204 	addi	r3,r2,8
 4003fd4:	003e8706 	br	40039f4 <__ram_exceptions_end+0xfbf7b758>
 4003fd8:	01400434 	movhi	r5,16
 4003fdc:	297fffc4 	addi	r5,r5,-1
 4003fe0:	994a703a 	and	r5,r19,r5
 4003fe4:	9009883a 	mov	r4,r18
 4003fe8:	843f0044 	addi	r16,r16,-1023
 4003fec:	294ffc34 	orhi	r5,r5,16368
 4003ff0:	dd800217 	ldw	r22,8(sp)
 4003ff4:	d8001115 	stw	zero,68(sp)
 4003ff8:	003ea506 	br	4003a90 <__ram_exceptions_end+0xfbf7b7f4>
 4003ffc:	00810074 	movhi	r2,1025
 4004000:	10971a04 	addi	r2,r2,23656
 4004004:	003e6406 	br	4003998 <__ram_exceptions_end+0xfbf7b6fc>
 4004008:	e0001115 	stw	zero,68(fp)
 400400c:	000b883a 	mov	r5,zero
 4004010:	e009883a 	mov	r4,fp
 4004014:	400696c0 	call	400696c <_Balloc>
 4004018:	01bfffc4 	movi	r6,-1
 400401c:	01c00044 	movi	r7,1
 4004020:	d8800715 	stw	r2,28(sp)
 4004024:	d9800c15 	stw	r6,48(sp)
 4004028:	e0801015 	stw	r2,64(fp)
 400402c:	d8000315 	stw	zero,12(sp)
 4004030:	d9c00b15 	stw	r7,44(sp)
 4004034:	d9800615 	stw	r6,24(sp)
 4004038:	d8002215 	stw	zero,136(sp)
 400403c:	d8800117 	ldw	r2,4(sp)
 4004040:	10008916 	blt	r2,zero,4004268 <_dtoa_r+0x990>
 4004044:	d9000517 	ldw	r4,20(sp)
 4004048:	00c00384 	movi	r3,14
 400404c:	19008616 	blt	r3,r4,4004268 <_dtoa_r+0x990>
 4004050:	200490fa 	slli	r2,r4,3
 4004054:	00c10074 	movhi	r3,1025
 4004058:	d9802217 	ldw	r6,136(sp)
 400405c:	18d64b04 	addi	r3,r3,22828
 4004060:	1885883a 	add	r2,r3,r2
 4004064:	14000017 	ldw	r16,0(r2)
 4004068:	14400117 	ldw	r17,4(r2)
 400406c:	30016316 	blt	r6,zero,40045fc <_dtoa_r+0xd24>
 4004070:	800d883a 	mov	r6,r16
 4004074:	880f883a 	mov	r7,r17
 4004078:	9009883a 	mov	r4,r18
 400407c:	980b883a 	mov	r5,r19
 4004080:	400bdd40 	call	400bdd4 <__divdf3>
 4004084:	180b883a 	mov	r5,r3
 4004088:	1009883a 	mov	r4,r2
 400408c:	400db640 	call	400db64 <__fixdfsi>
 4004090:	1009883a 	mov	r4,r2
 4004094:	102b883a 	mov	r21,r2
 4004098:	400dbe40 	call	400dbe4 <__floatsidf>
 400409c:	800d883a 	mov	r6,r16
 40040a0:	880f883a 	mov	r7,r17
 40040a4:	1009883a 	mov	r4,r2
 40040a8:	180b883a 	mov	r5,r3
 40040ac:	400c9fc0 	call	400c9fc <__muldf3>
 40040b0:	100d883a 	mov	r6,r2
 40040b4:	180f883a 	mov	r7,r3
 40040b8:	9009883a 	mov	r4,r18
 40040bc:	980b883a 	mov	r5,r19
 40040c0:	400d2680 	call	400d268 <__subdf3>
 40040c4:	d9c00717 	ldw	r7,28(sp)
 40040c8:	1009883a 	mov	r4,r2
 40040cc:	a8800c04 	addi	r2,r21,48
 40040d0:	38800005 	stb	r2,0(r7)
 40040d4:	3dc00044 	addi	r23,r7,1
 40040d8:	d9c00617 	ldw	r7,24(sp)
 40040dc:	01800044 	movi	r6,1
 40040e0:	180b883a 	mov	r5,r3
 40040e4:	2005883a 	mov	r2,r4
 40040e8:	39803826 	beq	r7,r6,40041cc <_dtoa_r+0x8f4>
 40040ec:	000d883a 	mov	r6,zero
 40040f0:	01d00934 	movhi	r7,16420
 40040f4:	400c9fc0 	call	400c9fc <__muldf3>
 40040f8:	000d883a 	mov	r6,zero
 40040fc:	000f883a 	mov	r7,zero
 4004100:	1009883a 	mov	r4,r2
 4004104:	180b883a 	mov	r5,r3
 4004108:	1025883a 	mov	r18,r2
 400410c:	1827883a 	mov	r19,r3
 4004110:	400c7a40 	call	400c7a4 <__eqdf2>
 4004114:	103f9a26 	beq	r2,zero,4003f80 <__ram_exceptions_end+0xfbf7bce4>
 4004118:	d9c00617 	ldw	r7,24(sp)
 400411c:	d8c00717 	ldw	r3,28(sp)
 4004120:	b829883a 	mov	r20,r23
 4004124:	38bfffc4 	addi	r2,r7,-1
 4004128:	18ad883a 	add	r22,r3,r2
 400412c:	00000a06 	br	4004158 <_dtoa_r+0x880>
 4004130:	400c9fc0 	call	400c9fc <__muldf3>
 4004134:	000d883a 	mov	r6,zero
 4004138:	000f883a 	mov	r7,zero
 400413c:	1009883a 	mov	r4,r2
 4004140:	180b883a 	mov	r5,r3
 4004144:	1025883a 	mov	r18,r2
 4004148:	1827883a 	mov	r19,r3
 400414c:	b829883a 	mov	r20,r23
 4004150:	400c7a40 	call	400c7a4 <__eqdf2>
 4004154:	103f8a26 	beq	r2,zero,4003f80 <__ram_exceptions_end+0xfbf7bce4>
 4004158:	800d883a 	mov	r6,r16
 400415c:	880f883a 	mov	r7,r17
 4004160:	9009883a 	mov	r4,r18
 4004164:	980b883a 	mov	r5,r19
 4004168:	400bdd40 	call	400bdd4 <__divdf3>
 400416c:	180b883a 	mov	r5,r3
 4004170:	1009883a 	mov	r4,r2
 4004174:	400db640 	call	400db64 <__fixdfsi>
 4004178:	1009883a 	mov	r4,r2
 400417c:	102b883a 	mov	r21,r2
 4004180:	400dbe40 	call	400dbe4 <__floatsidf>
 4004184:	800d883a 	mov	r6,r16
 4004188:	880f883a 	mov	r7,r17
 400418c:	1009883a 	mov	r4,r2
 4004190:	180b883a 	mov	r5,r3
 4004194:	400c9fc0 	call	400c9fc <__muldf3>
 4004198:	100d883a 	mov	r6,r2
 400419c:	180f883a 	mov	r7,r3
 40041a0:	9009883a 	mov	r4,r18
 40041a4:	980b883a 	mov	r5,r19
 40041a8:	400d2680 	call	400d268 <__subdf3>
 40041ac:	aa000c04 	addi	r8,r21,48
 40041b0:	a2000005 	stb	r8,0(r20)
 40041b4:	000d883a 	mov	r6,zero
 40041b8:	01d00934 	movhi	r7,16420
 40041bc:	1009883a 	mov	r4,r2
 40041c0:	180b883a 	mov	r5,r3
 40041c4:	a5c00044 	addi	r23,r20,1
 40041c8:	b53fd91e 	bne	r22,r20,4004130 <__ram_exceptions_end+0xfbf7be94>
 40041cc:	100d883a 	mov	r6,r2
 40041d0:	180f883a 	mov	r7,r3
 40041d4:	1009883a 	mov	r4,r2
 40041d8:	180b883a 	mov	r5,r3
 40041dc:	400b5280 	call	400b528 <__adddf3>
 40041e0:	100d883a 	mov	r6,r2
 40041e4:	180f883a 	mov	r7,r3
 40041e8:	8009883a 	mov	r4,r16
 40041ec:	880b883a 	mov	r5,r17
 40041f0:	1027883a 	mov	r19,r2
 40041f4:	1825883a 	mov	r18,r3
 40041f8:	400c9080 	call	400c908 <__ledf2>
 40041fc:	10000816 	blt	r2,zero,4004220 <_dtoa_r+0x948>
 4004200:	980d883a 	mov	r6,r19
 4004204:	900f883a 	mov	r7,r18
 4004208:	8009883a 	mov	r4,r16
 400420c:	880b883a 	mov	r5,r17
 4004210:	400c7a40 	call	400c7a4 <__eqdf2>
 4004214:	103f5a1e 	bne	r2,zero,4003f80 <__ram_exceptions_end+0xfbf7bce4>
 4004218:	ad40004c 	andi	r21,r21,1
 400421c:	a83f5826 	beq	r21,zero,4003f80 <__ram_exceptions_end+0xfbf7bce4>
 4004220:	bd3fffc3 	ldbu	r20,-1(r23)
 4004224:	b8bfffc4 	addi	r2,r23,-1
 4004228:	1007883a 	mov	r3,r2
 400422c:	01400e44 	movi	r5,57
 4004230:	d9800717 	ldw	r6,28(sp)
 4004234:	00000506 	br	400424c <_dtoa_r+0x974>
 4004238:	18ffffc4 	addi	r3,r3,-1
 400423c:	11824726 	beq	r2,r6,4004b5c <_dtoa_r+0x1284>
 4004240:	1d000003 	ldbu	r20,0(r3)
 4004244:	102f883a 	mov	r23,r2
 4004248:	10bfffc4 	addi	r2,r2,-1
 400424c:	a1003fcc 	andi	r4,r20,255
 4004250:	2100201c 	xori	r4,r4,128
 4004254:	213fe004 	addi	r4,r4,-128
 4004258:	217ff726 	beq	r4,r5,4004238 <__ram_exceptions_end+0xfbf7bf9c>
 400425c:	a2000044 	addi	r8,r20,1
 4004260:	12000005 	stb	r8,0(r2)
 4004264:	003f4606 	br	4003f80 <__ram_exceptions_end+0xfbf7bce4>
 4004268:	d9000b17 	ldw	r4,44(sp)
 400426c:	2000c826 	beq	r4,zero,4004590 <_dtoa_r+0xcb8>
 4004270:	d9800317 	ldw	r6,12(sp)
 4004274:	00c00044 	movi	r3,1
 4004278:	1980f90e 	bge	r3,r6,4004660 <_dtoa_r+0xd88>
 400427c:	d8800617 	ldw	r2,24(sp)
 4004280:	d8c00a17 	ldw	r3,40(sp)
 4004284:	157fffc4 	addi	r21,r2,-1
 4004288:	1d41f316 	blt	r3,r21,4004a58 <_dtoa_r+0x1180>
 400428c:	1d6bc83a 	sub	r21,r3,r21
 4004290:	d9c00617 	ldw	r7,24(sp)
 4004294:	3802aa16 	blt	r7,zero,4004d40 <_dtoa_r+0x1468>
 4004298:	dd000817 	ldw	r20,32(sp)
 400429c:	d8800617 	ldw	r2,24(sp)
 40042a0:	d8c00817 	ldw	r3,32(sp)
 40042a4:	01400044 	movi	r5,1
 40042a8:	e009883a 	mov	r4,fp
 40042ac:	1887883a 	add	r3,r3,r2
 40042b0:	d8c00815 	stw	r3,32(sp)
 40042b4:	b0ad883a 	add	r22,r22,r2
 40042b8:	4006da00 	call	4006da0 <__i2b>
 40042bc:	1023883a 	mov	r17,r2
 40042c0:	a0000826 	beq	r20,zero,40042e4 <_dtoa_r+0xa0c>
 40042c4:	0580070e 	bge	zero,r22,40042e4 <_dtoa_r+0xa0c>
 40042c8:	a005883a 	mov	r2,r20
 40042cc:	b500b916 	blt	r22,r20,40045b4 <_dtoa_r+0xcdc>
 40042d0:	d9000817 	ldw	r4,32(sp)
 40042d4:	a0a9c83a 	sub	r20,r20,r2
 40042d8:	b0adc83a 	sub	r22,r22,r2
 40042dc:	2089c83a 	sub	r4,r4,r2
 40042e0:	d9000815 	stw	r4,32(sp)
 40042e4:	d9800a17 	ldw	r6,40(sp)
 40042e8:	0181810e 	bge	zero,r6,40048f0 <_dtoa_r+0x1018>
 40042ec:	d9c00b17 	ldw	r7,44(sp)
 40042f0:	3800b326 	beq	r7,zero,40045c0 <_dtoa_r+0xce8>
 40042f4:	a800b226 	beq	r21,zero,40045c0 <_dtoa_r+0xce8>
 40042f8:	880b883a 	mov	r5,r17
 40042fc:	a80d883a 	mov	r6,r21
 4004300:	e009883a 	mov	r4,fp
 4004304:	40070680 	call	4007068 <__pow5mult>
 4004308:	d9800917 	ldw	r6,36(sp)
 400430c:	100b883a 	mov	r5,r2
 4004310:	e009883a 	mov	r4,fp
 4004314:	1023883a 	mov	r17,r2
 4004318:	4006ddc0 	call	4006ddc <__multiply>
 400431c:	1021883a 	mov	r16,r2
 4004320:	d8800a17 	ldw	r2,40(sp)
 4004324:	d9400917 	ldw	r5,36(sp)
 4004328:	e009883a 	mov	r4,fp
 400432c:	1545c83a 	sub	r2,r2,r21
 4004330:	d8800a15 	stw	r2,40(sp)
 4004334:	4006a140 	call	4006a14 <_Bfree>
 4004338:	d8c00a17 	ldw	r3,40(sp)
 400433c:	18009f1e 	bne	r3,zero,40045bc <_dtoa_r+0xce4>
 4004340:	05c00044 	movi	r23,1
 4004344:	e009883a 	mov	r4,fp
 4004348:	b80b883a 	mov	r5,r23
 400434c:	4006da00 	call	4006da0 <__i2b>
 4004350:	d9000d17 	ldw	r4,52(sp)
 4004354:	102b883a 	mov	r21,r2
 4004358:	2000ce26 	beq	r4,zero,4004694 <_dtoa_r+0xdbc>
 400435c:	200d883a 	mov	r6,r4
 4004360:	100b883a 	mov	r5,r2
 4004364:	e009883a 	mov	r4,fp
 4004368:	40070680 	call	4007068 <__pow5mult>
 400436c:	d9800317 	ldw	r6,12(sp)
 4004370:	102b883a 	mov	r21,r2
 4004374:	b981810e 	bge	r23,r6,400497c <_dtoa_r+0x10a4>
 4004378:	0027883a 	mov	r19,zero
 400437c:	a8800417 	ldw	r2,16(r21)
 4004380:	05c00804 	movi	r23,32
 4004384:	10800104 	addi	r2,r2,4
 4004388:	1085883a 	add	r2,r2,r2
 400438c:	1085883a 	add	r2,r2,r2
 4004390:	a885883a 	add	r2,r21,r2
 4004394:	11000017 	ldw	r4,0(r2)
 4004398:	4006c880 	call	4006c88 <__hi0bits>
 400439c:	b885c83a 	sub	r2,r23,r2
 40043a0:	1585883a 	add	r2,r2,r22
 40043a4:	108007cc 	andi	r2,r2,31
 40043a8:	1000b326 	beq	r2,zero,4004678 <_dtoa_r+0xda0>
 40043ac:	00c00804 	movi	r3,32
 40043b0:	1887c83a 	sub	r3,r3,r2
 40043b4:	01000104 	movi	r4,4
 40043b8:	20c2cd0e 	bge	r4,r3,4004ef0 <_dtoa_r+0x1618>
 40043bc:	00c00704 	movi	r3,28
 40043c0:	1885c83a 	sub	r2,r3,r2
 40043c4:	d8c00817 	ldw	r3,32(sp)
 40043c8:	a0a9883a 	add	r20,r20,r2
 40043cc:	b0ad883a 	add	r22,r22,r2
 40043d0:	1887883a 	add	r3,r3,r2
 40043d4:	d8c00815 	stw	r3,32(sp)
 40043d8:	d9800817 	ldw	r6,32(sp)
 40043dc:	0180040e 	bge	zero,r6,40043f0 <_dtoa_r+0xb18>
 40043e0:	800b883a 	mov	r5,r16
 40043e4:	e009883a 	mov	r4,fp
 40043e8:	40071a80 	call	40071a8 <__lshift>
 40043ec:	1021883a 	mov	r16,r2
 40043f0:	0580050e 	bge	zero,r22,4004408 <_dtoa_r+0xb30>
 40043f4:	a80b883a 	mov	r5,r21
 40043f8:	b00d883a 	mov	r6,r22
 40043fc:	e009883a 	mov	r4,fp
 4004400:	40071a80 	call	40071a8 <__lshift>
 4004404:	102b883a 	mov	r21,r2
 4004408:	d9c00e17 	ldw	r7,56(sp)
 400440c:	3801211e 	bne	r7,zero,4004894 <_dtoa_r+0xfbc>
 4004410:	d9800617 	ldw	r6,24(sp)
 4004414:	0181380e 	bge	zero,r6,40048f8 <_dtoa_r+0x1020>
 4004418:	d8c00b17 	ldw	r3,44(sp)
 400441c:	1800ab1e 	bne	r3,zero,40046cc <_dtoa_r+0xdf4>
 4004420:	dc800717 	ldw	r18,28(sp)
 4004424:	dcc00617 	ldw	r19,24(sp)
 4004428:	9029883a 	mov	r20,r18
 400442c:	00000206 	br	4004438 <_dtoa_r+0xb60>
 4004430:	4006a3c0 	call	4006a3c <__multadd>
 4004434:	1021883a 	mov	r16,r2
 4004438:	a80b883a 	mov	r5,r21
 400443c:	8009883a 	mov	r4,r16
 4004440:	40036b00 	call	40036b0 <quorem>
 4004444:	10800c04 	addi	r2,r2,48
 4004448:	90800005 	stb	r2,0(r18)
 400444c:	94800044 	addi	r18,r18,1
 4004450:	9507c83a 	sub	r3,r18,r20
 4004454:	000f883a 	mov	r7,zero
 4004458:	01800284 	movi	r6,10
 400445c:	800b883a 	mov	r5,r16
 4004460:	e009883a 	mov	r4,fp
 4004464:	1cfff216 	blt	r3,r19,4004430 <__ram_exceptions_end+0xfbf7c194>
 4004468:	1011883a 	mov	r8,r2
 400446c:	d8800617 	ldw	r2,24(sp)
 4004470:	0082370e 	bge	zero,r2,4004d50 <_dtoa_r+0x1478>
 4004474:	d9000717 	ldw	r4,28(sp)
 4004478:	0025883a 	mov	r18,zero
 400447c:	20af883a 	add	r23,r4,r2
 4004480:	01800044 	movi	r6,1
 4004484:	800b883a 	mov	r5,r16
 4004488:	e009883a 	mov	r4,fp
 400448c:	da001715 	stw	r8,92(sp)
 4004490:	40071a80 	call	40071a8 <__lshift>
 4004494:	a80b883a 	mov	r5,r21
 4004498:	1009883a 	mov	r4,r2
 400449c:	d8800915 	stw	r2,36(sp)
 40044a0:	40072f00 	call	40072f0 <__mcmp>
 40044a4:	da001717 	ldw	r8,92(sp)
 40044a8:	0081800e 	bge	zero,r2,4004aac <_dtoa_r+0x11d4>
 40044ac:	b93fffc3 	ldbu	r4,-1(r23)
 40044b0:	b8bfffc4 	addi	r2,r23,-1
 40044b4:	1007883a 	mov	r3,r2
 40044b8:	01800e44 	movi	r6,57
 40044bc:	d9c00717 	ldw	r7,28(sp)
 40044c0:	00000506 	br	40044d8 <_dtoa_r+0xc00>
 40044c4:	18ffffc4 	addi	r3,r3,-1
 40044c8:	11c12326 	beq	r2,r7,4004958 <_dtoa_r+0x1080>
 40044cc:	19000003 	ldbu	r4,0(r3)
 40044d0:	102f883a 	mov	r23,r2
 40044d4:	10bfffc4 	addi	r2,r2,-1
 40044d8:	21403fcc 	andi	r5,r4,255
 40044dc:	2940201c 	xori	r5,r5,128
 40044e0:	297fe004 	addi	r5,r5,-128
 40044e4:	29bff726 	beq	r5,r6,40044c4 <__ram_exceptions_end+0xfbf7c228>
 40044e8:	21000044 	addi	r4,r4,1
 40044ec:	11000005 	stb	r4,0(r2)
 40044f0:	a80b883a 	mov	r5,r21
 40044f4:	e009883a 	mov	r4,fp
 40044f8:	4006a140 	call	4006a14 <_Bfree>
 40044fc:	883ea026 	beq	r17,zero,4003f80 <__ram_exceptions_end+0xfbf7bce4>
 4004500:	90000426 	beq	r18,zero,4004514 <_dtoa_r+0xc3c>
 4004504:	94400326 	beq	r18,r17,4004514 <_dtoa_r+0xc3c>
 4004508:	900b883a 	mov	r5,r18
 400450c:	e009883a 	mov	r4,fp
 4004510:	4006a140 	call	4006a14 <_Bfree>
 4004514:	880b883a 	mov	r5,r17
 4004518:	e009883a 	mov	r4,fp
 400451c:	4006a140 	call	4006a14 <_Bfree>
 4004520:	003e9706 	br	4003f80 <__ram_exceptions_end+0xfbf7bce4>
 4004524:	01800044 	movi	r6,1
 4004528:	d9800e15 	stw	r6,56(sp)
 400452c:	003d9606 	br	4003b88 <__ram_exceptions_end+0xfbf7b8ec>
 4004530:	d8800817 	ldw	r2,32(sp)
 4004534:	d8c00517 	ldw	r3,20(sp)
 4004538:	d8000d15 	stw	zero,52(sp)
 400453c:	10c5c83a 	sub	r2,r2,r3
 4004540:	00c9c83a 	sub	r4,zero,r3
 4004544:	d8800815 	stw	r2,32(sp)
 4004548:	d9000a15 	stw	r4,40(sp)
 400454c:	003d9706 	br	4003bac <__ram_exceptions_end+0xfbf7b910>
 4004550:	05adc83a 	sub	r22,zero,r22
 4004554:	dd800815 	stw	r22,32(sp)
 4004558:	002d883a 	mov	r22,zero
 400455c:	003d8e06 	br	4003b98 <__ram_exceptions_end+0xfbf7b8fc>
 4004560:	d9000517 	ldw	r4,20(sp)
 4004564:	400dbe40 	call	400dbe4 <__floatsidf>
 4004568:	100d883a 	mov	r6,r2
 400456c:	180f883a 	mov	r7,r3
 4004570:	a009883a 	mov	r4,r20
 4004574:	880b883a 	mov	r5,r17
 4004578:	400c7a40 	call	400c7a4 <__eqdf2>
 400457c:	103d7126 	beq	r2,zero,4003b44 <__ram_exceptions_end+0xfbf7b8a8>
 4004580:	d9c00517 	ldw	r7,20(sp)
 4004584:	39ffffc4 	addi	r7,r7,-1
 4004588:	d9c00515 	stw	r7,20(sp)
 400458c:	003d6d06 	br	4003b44 <__ram_exceptions_end+0xfbf7b8a8>
 4004590:	dd400a17 	ldw	r21,40(sp)
 4004594:	dd000817 	ldw	r20,32(sp)
 4004598:	0023883a 	mov	r17,zero
 400459c:	003f4806 	br	40042c0 <__ram_exceptions_end+0xfbf7c024>
 40045a0:	10e3c83a 	sub	r17,r2,r3
 40045a4:	9448983a 	sll	r4,r18,r17
 40045a8:	003d3206 	br	4003a74 <__ram_exceptions_end+0xfbf7b7d8>
 40045ac:	d8000e15 	stw	zero,56(sp)
 40045b0:	003d7506 	br	4003b88 <__ram_exceptions_end+0xfbf7b8ec>
 40045b4:	b005883a 	mov	r2,r22
 40045b8:	003f4506 	br	40042d0 <__ram_exceptions_end+0xfbf7c034>
 40045bc:	dc000915 	stw	r16,36(sp)
 40045c0:	d9800a17 	ldw	r6,40(sp)
 40045c4:	d9400917 	ldw	r5,36(sp)
 40045c8:	e009883a 	mov	r4,fp
 40045cc:	40070680 	call	4007068 <__pow5mult>
 40045d0:	1021883a 	mov	r16,r2
 40045d4:	003f5a06 	br	4004340 <__ram_exceptions_end+0xfbf7c0a4>
 40045d8:	01c00044 	movi	r7,1
 40045dc:	d9c00b15 	stw	r7,44(sp)
 40045e0:	d8802217 	ldw	r2,136(sp)
 40045e4:	0081280e 	bge	zero,r2,4004a88 <_dtoa_r+0x11b0>
 40045e8:	100d883a 	mov	r6,r2
 40045ec:	1021883a 	mov	r16,r2
 40045f0:	d8800c15 	stw	r2,48(sp)
 40045f4:	d8800615 	stw	r2,24(sp)
 40045f8:	003d8806 	br	4003c1c <__ram_exceptions_end+0xfbf7b980>
 40045fc:	d8800617 	ldw	r2,24(sp)
 4004600:	00be9b16 	blt	zero,r2,4004070 <__ram_exceptions_end+0xfbf7bdd4>
 4004604:	10010f1e 	bne	r2,zero,4004a44 <_dtoa_r+0x116c>
 4004608:	880b883a 	mov	r5,r17
 400460c:	000d883a 	mov	r6,zero
 4004610:	01d00534 	movhi	r7,16404
 4004614:	8009883a 	mov	r4,r16
 4004618:	400c9fc0 	call	400c9fc <__muldf3>
 400461c:	900d883a 	mov	r6,r18
 4004620:	980f883a 	mov	r7,r19
 4004624:	1009883a 	mov	r4,r2
 4004628:	180b883a 	mov	r5,r3
 400462c:	400c82c0 	call	400c82c <__gedf2>
 4004630:	002b883a 	mov	r21,zero
 4004634:	0023883a 	mov	r17,zero
 4004638:	1000bf16 	blt	r2,zero,4004938 <_dtoa_r+0x1060>
 400463c:	d9802217 	ldw	r6,136(sp)
 4004640:	ddc00717 	ldw	r23,28(sp)
 4004644:	018c303a 	nor	r6,zero,r6
 4004648:	d9800515 	stw	r6,20(sp)
 400464c:	a80b883a 	mov	r5,r21
 4004650:	e009883a 	mov	r4,fp
 4004654:	4006a140 	call	4006a14 <_Bfree>
 4004658:	883e4926 	beq	r17,zero,4003f80 <__ram_exceptions_end+0xfbf7bce4>
 400465c:	003fad06 	br	4004514 <__ram_exceptions_end+0xfbf7c278>
 4004660:	d9c01117 	ldw	r7,68(sp)
 4004664:	3801bc26 	beq	r7,zero,4004d58 <_dtoa_r+0x1480>
 4004668:	10810cc4 	addi	r2,r2,1075
 400466c:	dd400a17 	ldw	r21,40(sp)
 4004670:	dd000817 	ldw	r20,32(sp)
 4004674:	003f0a06 	br	40042a0 <__ram_exceptions_end+0xfbf7c004>
 4004678:	00800704 	movi	r2,28
 400467c:	d9000817 	ldw	r4,32(sp)
 4004680:	a0a9883a 	add	r20,r20,r2
 4004684:	b0ad883a 	add	r22,r22,r2
 4004688:	2089883a 	add	r4,r4,r2
 400468c:	d9000815 	stw	r4,32(sp)
 4004690:	003f5106 	br	40043d8 <__ram_exceptions_end+0xfbf7c13c>
 4004694:	d8c00317 	ldw	r3,12(sp)
 4004698:	b8c1fc0e 	bge	r23,r3,4004e8c <_dtoa_r+0x15b4>
 400469c:	0027883a 	mov	r19,zero
 40046a0:	b805883a 	mov	r2,r23
 40046a4:	003f3e06 	br	40043a0 <__ram_exceptions_end+0xfbf7c104>
 40046a8:	880b883a 	mov	r5,r17
 40046ac:	e009883a 	mov	r4,fp
 40046b0:	000f883a 	mov	r7,zero
 40046b4:	01800284 	movi	r6,10
 40046b8:	4006a3c0 	call	4006a3c <__multadd>
 40046bc:	d9000c17 	ldw	r4,48(sp)
 40046c0:	1023883a 	mov	r17,r2
 40046c4:	0102040e 	bge	zero,r4,4004ed8 <_dtoa_r+0x1600>
 40046c8:	d9000615 	stw	r4,24(sp)
 40046cc:	0500050e 	bge	zero,r20,40046e4 <_dtoa_r+0xe0c>
 40046d0:	880b883a 	mov	r5,r17
 40046d4:	a00d883a 	mov	r6,r20
 40046d8:	e009883a 	mov	r4,fp
 40046dc:	40071a80 	call	40071a8 <__lshift>
 40046e0:	1023883a 	mov	r17,r2
 40046e4:	9801241e 	bne	r19,zero,4004b78 <_dtoa_r+0x12a0>
 40046e8:	8829883a 	mov	r20,r17
 40046ec:	d9000617 	ldw	r4,24(sp)
 40046f0:	dcc00717 	ldw	r19,28(sp)
 40046f4:	9480004c 	andi	r18,r18,1
 40046f8:	20bfffc4 	addi	r2,r4,-1
 40046fc:	9885883a 	add	r2,r19,r2
 4004700:	d8800415 	stw	r2,16(sp)
 4004704:	dc800615 	stw	r18,24(sp)
 4004708:	a80b883a 	mov	r5,r21
 400470c:	8009883a 	mov	r4,r16
 4004710:	40036b00 	call	40036b0 <quorem>
 4004714:	880b883a 	mov	r5,r17
 4004718:	8009883a 	mov	r4,r16
 400471c:	102f883a 	mov	r23,r2
 4004720:	40072f00 	call	40072f0 <__mcmp>
 4004724:	a80b883a 	mov	r5,r21
 4004728:	a00d883a 	mov	r6,r20
 400472c:	e009883a 	mov	r4,fp
 4004730:	102d883a 	mov	r22,r2
 4004734:	40073500 	call	4007350 <__mdiff>
 4004738:	1007883a 	mov	r3,r2
 400473c:	10800317 	ldw	r2,12(r2)
 4004740:	bc800c04 	addi	r18,r23,48
 4004744:	180b883a 	mov	r5,r3
 4004748:	10004e1e 	bne	r2,zero,4004884 <_dtoa_r+0xfac>
 400474c:	8009883a 	mov	r4,r16
 4004750:	d8c01615 	stw	r3,88(sp)
 4004754:	40072f00 	call	40072f0 <__mcmp>
 4004758:	d8c01617 	ldw	r3,88(sp)
 400475c:	e009883a 	mov	r4,fp
 4004760:	d8801615 	stw	r2,88(sp)
 4004764:	180b883a 	mov	r5,r3
 4004768:	4006a140 	call	4006a14 <_Bfree>
 400476c:	d8801617 	ldw	r2,88(sp)
 4004770:	1000041e 	bne	r2,zero,4004784 <_dtoa_r+0xeac>
 4004774:	d9800317 	ldw	r6,12(sp)
 4004778:	3000021e 	bne	r6,zero,4004784 <_dtoa_r+0xeac>
 400477c:	d8c00617 	ldw	r3,24(sp)
 4004780:	18003726 	beq	r3,zero,4004860 <_dtoa_r+0xf88>
 4004784:	b0002016 	blt	r22,zero,4004808 <_dtoa_r+0xf30>
 4004788:	b000041e 	bne	r22,zero,400479c <_dtoa_r+0xec4>
 400478c:	d9000317 	ldw	r4,12(sp)
 4004790:	2000021e 	bne	r4,zero,400479c <_dtoa_r+0xec4>
 4004794:	d8c00617 	ldw	r3,24(sp)
 4004798:	18001b26 	beq	r3,zero,4004808 <_dtoa_r+0xf30>
 400479c:	00810716 	blt	zero,r2,4004bbc <_dtoa_r+0x12e4>
 40047a0:	d8c00417 	ldw	r3,16(sp)
 40047a4:	9d800044 	addi	r22,r19,1
 40047a8:	9c800005 	stb	r18,0(r19)
 40047ac:	b02f883a 	mov	r23,r22
 40047b0:	98c10626 	beq	r19,r3,4004bcc <_dtoa_r+0x12f4>
 40047b4:	800b883a 	mov	r5,r16
 40047b8:	000f883a 	mov	r7,zero
 40047bc:	01800284 	movi	r6,10
 40047c0:	e009883a 	mov	r4,fp
 40047c4:	4006a3c0 	call	4006a3c <__multadd>
 40047c8:	1021883a 	mov	r16,r2
 40047cc:	000f883a 	mov	r7,zero
 40047d0:	01800284 	movi	r6,10
 40047d4:	880b883a 	mov	r5,r17
 40047d8:	e009883a 	mov	r4,fp
 40047dc:	8d002526 	beq	r17,r20,4004874 <_dtoa_r+0xf9c>
 40047e0:	4006a3c0 	call	4006a3c <__multadd>
 40047e4:	a00b883a 	mov	r5,r20
 40047e8:	000f883a 	mov	r7,zero
 40047ec:	01800284 	movi	r6,10
 40047f0:	e009883a 	mov	r4,fp
 40047f4:	1023883a 	mov	r17,r2
 40047f8:	4006a3c0 	call	4006a3c <__multadd>
 40047fc:	1029883a 	mov	r20,r2
 4004800:	b027883a 	mov	r19,r22
 4004804:	003fc006 	br	4004708 <__ram_exceptions_end+0xfbf7c46c>
 4004808:	9011883a 	mov	r8,r18
 400480c:	00800e0e 	bge	zero,r2,4004848 <_dtoa_r+0xf70>
 4004810:	800b883a 	mov	r5,r16
 4004814:	01800044 	movi	r6,1
 4004818:	e009883a 	mov	r4,fp
 400481c:	da001715 	stw	r8,92(sp)
 4004820:	40071a80 	call	40071a8 <__lshift>
 4004824:	a80b883a 	mov	r5,r21
 4004828:	1009883a 	mov	r4,r2
 400482c:	1021883a 	mov	r16,r2
 4004830:	40072f00 	call	40072f0 <__mcmp>
 4004834:	da001717 	ldw	r8,92(sp)
 4004838:	0081960e 	bge	zero,r2,4004e94 <_dtoa_r+0x15bc>
 400483c:	00800e44 	movi	r2,57
 4004840:	40817026 	beq	r8,r2,4004e04 <_dtoa_r+0x152c>
 4004844:	ba000c44 	addi	r8,r23,49
 4004848:	8825883a 	mov	r18,r17
 400484c:	9dc00044 	addi	r23,r19,1
 4004850:	9a000005 	stb	r8,0(r19)
 4004854:	a023883a 	mov	r17,r20
 4004858:	dc000915 	stw	r16,36(sp)
 400485c:	003f2406 	br	40044f0 <__ram_exceptions_end+0xfbf7c254>
 4004860:	00800e44 	movi	r2,57
 4004864:	9011883a 	mov	r8,r18
 4004868:	90816626 	beq	r18,r2,4004e04 <_dtoa_r+0x152c>
 400486c:	05bff516 	blt	zero,r22,4004844 <__ram_exceptions_end+0xfbf7c5a8>
 4004870:	003ff506 	br	4004848 <__ram_exceptions_end+0xfbf7c5ac>
 4004874:	4006a3c0 	call	4006a3c <__multadd>
 4004878:	1023883a 	mov	r17,r2
 400487c:	1029883a 	mov	r20,r2
 4004880:	003fdf06 	br	4004800 <__ram_exceptions_end+0xfbf7c564>
 4004884:	e009883a 	mov	r4,fp
 4004888:	4006a140 	call	4006a14 <_Bfree>
 400488c:	00800044 	movi	r2,1
 4004890:	003fbc06 	br	4004784 <__ram_exceptions_end+0xfbf7c4e8>
 4004894:	a80b883a 	mov	r5,r21
 4004898:	8009883a 	mov	r4,r16
 400489c:	40072f00 	call	40072f0 <__mcmp>
 40048a0:	103edb0e 	bge	r2,zero,4004410 <__ram_exceptions_end+0xfbf7c174>
 40048a4:	800b883a 	mov	r5,r16
 40048a8:	000f883a 	mov	r7,zero
 40048ac:	01800284 	movi	r6,10
 40048b0:	e009883a 	mov	r4,fp
 40048b4:	4006a3c0 	call	4006a3c <__multadd>
 40048b8:	1021883a 	mov	r16,r2
 40048bc:	d8800517 	ldw	r2,20(sp)
 40048c0:	d8c00b17 	ldw	r3,44(sp)
 40048c4:	10bfffc4 	addi	r2,r2,-1
 40048c8:	d8800515 	stw	r2,20(sp)
 40048cc:	183f761e 	bne	r3,zero,40046a8 <__ram_exceptions_end+0xfbf7c40c>
 40048d0:	d9000c17 	ldw	r4,48(sp)
 40048d4:	0101730e 	bge	zero,r4,4004ea4 <_dtoa_r+0x15cc>
 40048d8:	d9000615 	stw	r4,24(sp)
 40048dc:	003ed006 	br	4004420 <__ram_exceptions_end+0xfbf7c184>
 40048e0:	00800084 	movi	r2,2
 40048e4:	3081861e 	bne	r6,r2,4004f00 <_dtoa_r+0x1628>
 40048e8:	d8000b15 	stw	zero,44(sp)
 40048ec:	003f3c06 	br	40045e0 <__ram_exceptions_end+0xfbf7c344>
 40048f0:	dc000917 	ldw	r16,36(sp)
 40048f4:	003e9206 	br	4004340 <__ram_exceptions_end+0xfbf7c0a4>
 40048f8:	d9c00317 	ldw	r7,12(sp)
 40048fc:	00800084 	movi	r2,2
 4004900:	11fec50e 	bge	r2,r7,4004418 <__ram_exceptions_end+0xfbf7c17c>
 4004904:	d9000617 	ldw	r4,24(sp)
 4004908:	20013c1e 	bne	r4,zero,4004dfc <_dtoa_r+0x1524>
 400490c:	a80b883a 	mov	r5,r21
 4004910:	000f883a 	mov	r7,zero
 4004914:	01800144 	movi	r6,5
 4004918:	e009883a 	mov	r4,fp
 400491c:	4006a3c0 	call	4006a3c <__multadd>
 4004920:	100b883a 	mov	r5,r2
 4004924:	8009883a 	mov	r4,r16
 4004928:	102b883a 	mov	r21,r2
 400492c:	40072f00 	call	40072f0 <__mcmp>
 4004930:	dc000915 	stw	r16,36(sp)
 4004934:	00bf410e 	bge	zero,r2,400463c <__ram_exceptions_end+0xfbf7c3a0>
 4004938:	d9c00717 	ldw	r7,28(sp)
 400493c:	00800c44 	movi	r2,49
 4004940:	38800005 	stb	r2,0(r7)
 4004944:	d8800517 	ldw	r2,20(sp)
 4004948:	3dc00044 	addi	r23,r7,1
 400494c:	10800044 	addi	r2,r2,1
 4004950:	d8800515 	stw	r2,20(sp)
 4004954:	003f3d06 	br	400464c <__ram_exceptions_end+0xfbf7c3b0>
 4004958:	d9800517 	ldw	r6,20(sp)
 400495c:	d9c00717 	ldw	r7,28(sp)
 4004960:	00800c44 	movi	r2,49
 4004964:	31800044 	addi	r6,r6,1
 4004968:	d9800515 	stw	r6,20(sp)
 400496c:	38800005 	stb	r2,0(r7)
 4004970:	003edf06 	br	40044f0 <__ram_exceptions_end+0xfbf7c254>
 4004974:	d8000b15 	stw	zero,44(sp)
 4004978:	003c9f06 	br	4003bf8 <__ram_exceptions_end+0xfbf7b95c>
 400497c:	903e7e1e 	bne	r18,zero,4004378 <__ram_exceptions_end+0xfbf7c0dc>
 4004980:	00800434 	movhi	r2,16
 4004984:	10bfffc4 	addi	r2,r2,-1
 4004988:	9884703a 	and	r2,r19,r2
 400498c:	1000ea1e 	bne	r2,zero,4004d38 <_dtoa_r+0x1460>
 4004990:	9cdffc2c 	andhi	r19,r19,32752
 4004994:	9800e826 	beq	r19,zero,4004d38 <_dtoa_r+0x1460>
 4004998:	d9c00817 	ldw	r7,32(sp)
 400499c:	b5800044 	addi	r22,r22,1
 40049a0:	04c00044 	movi	r19,1
 40049a4:	39c00044 	addi	r7,r7,1
 40049a8:	d9c00815 	stw	r7,32(sp)
 40049ac:	d8800d17 	ldw	r2,52(sp)
 40049b0:	103e721e 	bne	r2,zero,400437c <__ram_exceptions_end+0xfbf7c0e0>
 40049b4:	00800044 	movi	r2,1
 40049b8:	003e7906 	br	40043a0 <__ram_exceptions_end+0xfbf7c104>
 40049bc:	8009883a 	mov	r4,r16
 40049c0:	400dbe40 	call	400dbe4 <__floatsidf>
 40049c4:	d9800f17 	ldw	r6,60(sp)
 40049c8:	d9c01017 	ldw	r7,64(sp)
 40049cc:	1009883a 	mov	r4,r2
 40049d0:	180b883a 	mov	r5,r3
 40049d4:	400c9fc0 	call	400c9fc <__muldf3>
 40049d8:	000d883a 	mov	r6,zero
 40049dc:	01d00734 	movhi	r7,16412
 40049e0:	1009883a 	mov	r4,r2
 40049e4:	180b883a 	mov	r5,r3
 40049e8:	400b5280 	call	400b528 <__adddf3>
 40049ec:	047f3034 	movhi	r17,64704
 40049f0:	1021883a 	mov	r16,r2
 40049f4:	1c63883a 	add	r17,r3,r17
 40049f8:	d9000f17 	ldw	r4,60(sp)
 40049fc:	d9401017 	ldw	r5,64(sp)
 4004a00:	000d883a 	mov	r6,zero
 4004a04:	01d00534 	movhi	r7,16404
 4004a08:	400d2680 	call	400d268 <__subdf3>
 4004a0c:	800d883a 	mov	r6,r16
 4004a10:	880f883a 	mov	r7,r17
 4004a14:	1009883a 	mov	r4,r2
 4004a18:	180b883a 	mov	r5,r3
 4004a1c:	102b883a 	mov	r21,r2
 4004a20:	1829883a 	mov	r20,r3
 4004a24:	400c82c0 	call	400c82c <__gedf2>
 4004a28:	00806c16 	blt	zero,r2,4004bdc <_dtoa_r+0x1304>
 4004a2c:	89e0003c 	xorhi	r7,r17,32768
 4004a30:	800d883a 	mov	r6,r16
 4004a34:	a809883a 	mov	r4,r21
 4004a38:	a00b883a 	mov	r5,r20
 4004a3c:	400c9080 	call	400c908 <__ledf2>
 4004a40:	103d7e0e 	bge	r2,zero,400403c <__ram_exceptions_end+0xfbf7bda0>
 4004a44:	002b883a 	mov	r21,zero
 4004a48:	0023883a 	mov	r17,zero
 4004a4c:	003efb06 	br	400463c <__ram_exceptions_end+0xfbf7c3a0>
 4004a50:	d8800717 	ldw	r2,28(sp)
 4004a54:	003bd006 	br	4003998 <__ram_exceptions_end+0xfbf7b6fc>
 4004a58:	d9000a17 	ldw	r4,40(sp)
 4004a5c:	d9800d17 	ldw	r6,52(sp)
 4004a60:	dd400a15 	stw	r21,40(sp)
 4004a64:	a905c83a 	sub	r2,r21,r4
 4004a68:	308d883a 	add	r6,r6,r2
 4004a6c:	d9800d15 	stw	r6,52(sp)
 4004a70:	002b883a 	mov	r21,zero
 4004a74:	003e0606 	br	4004290 <__ram_exceptions_end+0xfbf7bff4>
 4004a78:	9023883a 	mov	r17,r18
 4004a7c:	9829883a 	mov	r20,r19
 4004a80:	04000084 	movi	r16,2
 4004a84:	003c9206 	br	4003cd0 <__ram_exceptions_end+0xfbf7ba34>
 4004a88:	04000044 	movi	r16,1
 4004a8c:	dc000c15 	stw	r16,48(sp)
 4004a90:	dc000615 	stw	r16,24(sp)
 4004a94:	dc002215 	stw	r16,136(sp)
 4004a98:	e0001115 	stw	zero,68(fp)
 4004a9c:	000b883a 	mov	r5,zero
 4004aa0:	003c6906 	br	4003c48 <__ram_exceptions_end+0xfbf7b9ac>
 4004aa4:	3021883a 	mov	r16,r6
 4004aa8:	003ffb06 	br	4004a98 <__ram_exceptions_end+0xfbf7c7fc>
 4004aac:	1000021e 	bne	r2,zero,4004ab8 <_dtoa_r+0x11e0>
 4004ab0:	4200004c 	andi	r8,r8,1
 4004ab4:	403e7d1e 	bne	r8,zero,40044ac <__ram_exceptions_end+0xfbf7c210>
 4004ab8:	01000c04 	movi	r4,48
 4004abc:	00000106 	br	4004ac4 <_dtoa_r+0x11ec>
 4004ac0:	102f883a 	mov	r23,r2
 4004ac4:	b8bfffc4 	addi	r2,r23,-1
 4004ac8:	10c00007 	ldb	r3,0(r2)
 4004acc:	193ffc26 	beq	r3,r4,4004ac0 <__ram_exceptions_end+0xfbf7c824>
 4004ad0:	003e8706 	br	40044f0 <__ram_exceptions_end+0xfbf7c254>
 4004ad4:	d8800517 	ldw	r2,20(sp)
 4004ad8:	00a3c83a 	sub	r17,zero,r2
 4004adc:	8800a426 	beq	r17,zero,4004d70 <_dtoa_r+0x1498>
 4004ae0:	888003cc 	andi	r2,r17,15
 4004ae4:	100490fa 	slli	r2,r2,3
 4004ae8:	00c10074 	movhi	r3,1025
 4004aec:	18d64b04 	addi	r3,r3,22828
 4004af0:	1885883a 	add	r2,r3,r2
 4004af4:	11800017 	ldw	r6,0(r2)
 4004af8:	11c00117 	ldw	r7,4(r2)
 4004afc:	9009883a 	mov	r4,r18
 4004b00:	980b883a 	mov	r5,r19
 4004b04:	8823d13a 	srai	r17,r17,4
 4004b08:	400c9fc0 	call	400c9fc <__muldf3>
 4004b0c:	d8800f15 	stw	r2,60(sp)
 4004b10:	d8c01015 	stw	r3,64(sp)
 4004b14:	8800e826 	beq	r17,zero,4004eb8 <_dtoa_r+0x15e0>
 4004b18:	05010074 	movhi	r20,1025
 4004b1c:	a5164104 	addi	r20,r20,22788
 4004b20:	04000084 	movi	r16,2
 4004b24:	8980004c 	andi	r6,r17,1
 4004b28:	1009883a 	mov	r4,r2
 4004b2c:	8823d07a 	srai	r17,r17,1
 4004b30:	180b883a 	mov	r5,r3
 4004b34:	30000426 	beq	r6,zero,4004b48 <_dtoa_r+0x1270>
 4004b38:	a1800017 	ldw	r6,0(r20)
 4004b3c:	a1c00117 	ldw	r7,4(r20)
 4004b40:	84000044 	addi	r16,r16,1
 4004b44:	400c9fc0 	call	400c9fc <__muldf3>
 4004b48:	a5000204 	addi	r20,r20,8
 4004b4c:	883ff51e 	bne	r17,zero,4004b24 <__ram_exceptions_end+0xfbf7c888>
 4004b50:	d8800f15 	stw	r2,60(sp)
 4004b54:	d8c01015 	stw	r3,64(sp)
 4004b58:	003c7606 	br	4003d34 <__ram_exceptions_end+0xfbf7ba98>
 4004b5c:	00c00c04 	movi	r3,48
 4004b60:	10c00005 	stb	r3,0(r2)
 4004b64:	d8c00517 	ldw	r3,20(sp)
 4004b68:	bd3fffc3 	ldbu	r20,-1(r23)
 4004b6c:	18c00044 	addi	r3,r3,1
 4004b70:	d8c00515 	stw	r3,20(sp)
 4004b74:	003db906 	br	400425c <__ram_exceptions_end+0xfbf7bfc0>
 4004b78:	89400117 	ldw	r5,4(r17)
 4004b7c:	e009883a 	mov	r4,fp
 4004b80:	400696c0 	call	400696c <_Balloc>
 4004b84:	89800417 	ldw	r6,16(r17)
 4004b88:	89400304 	addi	r5,r17,12
 4004b8c:	11000304 	addi	r4,r2,12
 4004b90:	31800084 	addi	r6,r6,2
 4004b94:	318d883a 	add	r6,r6,r6
 4004b98:	318d883a 	add	r6,r6,r6
 4004b9c:	1027883a 	mov	r19,r2
 4004ba0:	40066fc0 	call	40066fc <memcpy>
 4004ba4:	01800044 	movi	r6,1
 4004ba8:	980b883a 	mov	r5,r19
 4004bac:	e009883a 	mov	r4,fp
 4004bb0:	40071a80 	call	40071a8 <__lshift>
 4004bb4:	1029883a 	mov	r20,r2
 4004bb8:	003ecc06 	br	40046ec <__ram_exceptions_end+0xfbf7c450>
 4004bbc:	00800e44 	movi	r2,57
 4004bc0:	90809026 	beq	r18,r2,4004e04 <_dtoa_r+0x152c>
 4004bc4:	92000044 	addi	r8,r18,1
 4004bc8:	003f1f06 	br	4004848 <__ram_exceptions_end+0xfbf7c5ac>
 4004bcc:	9011883a 	mov	r8,r18
 4004bd0:	8825883a 	mov	r18,r17
 4004bd4:	a023883a 	mov	r17,r20
 4004bd8:	003e2906 	br	4004480 <__ram_exceptions_end+0xfbf7c1e4>
 4004bdc:	002b883a 	mov	r21,zero
 4004be0:	0023883a 	mov	r17,zero
 4004be4:	003f5406 	br	4004938 <__ram_exceptions_end+0xfbf7c69c>
 4004be8:	61bfffc4 	addi	r6,r12,-1
 4004bec:	300490fa 	slli	r2,r6,3
 4004bf0:	00c10074 	movhi	r3,1025
 4004bf4:	18d64b04 	addi	r3,r3,22828
 4004bf8:	1885883a 	add	r2,r3,r2
 4004bfc:	11000017 	ldw	r4,0(r2)
 4004c00:	11400117 	ldw	r5,4(r2)
 4004c04:	d8800717 	ldw	r2,28(sp)
 4004c08:	880f883a 	mov	r7,r17
 4004c0c:	d9801215 	stw	r6,72(sp)
 4004c10:	800d883a 	mov	r6,r16
 4004c14:	db001615 	stw	r12,88(sp)
 4004c18:	15c00044 	addi	r23,r2,1
 4004c1c:	400c9fc0 	call	400c9fc <__muldf3>
 4004c20:	d9401017 	ldw	r5,64(sp)
 4004c24:	d9000f17 	ldw	r4,60(sp)
 4004c28:	d8c01515 	stw	r3,84(sp)
 4004c2c:	d8801415 	stw	r2,80(sp)
 4004c30:	400db640 	call	400db64 <__fixdfsi>
 4004c34:	1009883a 	mov	r4,r2
 4004c38:	1021883a 	mov	r16,r2
 4004c3c:	400dbe40 	call	400dbe4 <__floatsidf>
 4004c40:	d9000f17 	ldw	r4,60(sp)
 4004c44:	d9401017 	ldw	r5,64(sp)
 4004c48:	100d883a 	mov	r6,r2
 4004c4c:	180f883a 	mov	r7,r3
 4004c50:	400d2680 	call	400d268 <__subdf3>
 4004c54:	1829883a 	mov	r20,r3
 4004c58:	d8c00717 	ldw	r3,28(sp)
 4004c5c:	84000c04 	addi	r16,r16,48
 4004c60:	1023883a 	mov	r17,r2
 4004c64:	1c000005 	stb	r16,0(r3)
 4004c68:	db001617 	ldw	r12,88(sp)
 4004c6c:	00800044 	movi	r2,1
 4004c70:	60802226 	beq	r12,r2,4004cfc <_dtoa_r+0x1424>
 4004c74:	d9c00717 	ldw	r7,28(sp)
 4004c78:	8805883a 	mov	r2,r17
 4004c7c:	b82b883a 	mov	r21,r23
 4004c80:	3b19883a 	add	r12,r7,r12
 4004c84:	6023883a 	mov	r17,r12
 4004c88:	a007883a 	mov	r3,r20
 4004c8c:	dc800f15 	stw	r18,60(sp)
 4004c90:	000d883a 	mov	r6,zero
 4004c94:	01d00934 	movhi	r7,16420
 4004c98:	1009883a 	mov	r4,r2
 4004c9c:	180b883a 	mov	r5,r3
 4004ca0:	400c9fc0 	call	400c9fc <__muldf3>
 4004ca4:	180b883a 	mov	r5,r3
 4004ca8:	1009883a 	mov	r4,r2
 4004cac:	1829883a 	mov	r20,r3
 4004cb0:	1025883a 	mov	r18,r2
 4004cb4:	400db640 	call	400db64 <__fixdfsi>
 4004cb8:	1009883a 	mov	r4,r2
 4004cbc:	1021883a 	mov	r16,r2
 4004cc0:	400dbe40 	call	400dbe4 <__floatsidf>
 4004cc4:	100d883a 	mov	r6,r2
 4004cc8:	180f883a 	mov	r7,r3
 4004ccc:	9009883a 	mov	r4,r18
 4004cd0:	a00b883a 	mov	r5,r20
 4004cd4:	84000c04 	addi	r16,r16,48
 4004cd8:	400d2680 	call	400d268 <__subdf3>
 4004cdc:	ad400044 	addi	r21,r21,1
 4004ce0:	ac3fffc5 	stb	r16,-1(r21)
 4004ce4:	ac7fea1e 	bne	r21,r17,4004c90 <__ram_exceptions_end+0xfbf7c9f4>
 4004ce8:	1023883a 	mov	r17,r2
 4004cec:	d8801217 	ldw	r2,72(sp)
 4004cf0:	dc800f17 	ldw	r18,60(sp)
 4004cf4:	1829883a 	mov	r20,r3
 4004cf8:	b8af883a 	add	r23,r23,r2
 4004cfc:	d9001417 	ldw	r4,80(sp)
 4004d00:	d9401517 	ldw	r5,84(sp)
 4004d04:	000d883a 	mov	r6,zero
 4004d08:	01cff834 	movhi	r7,16352
 4004d0c:	400b5280 	call	400b528 <__adddf3>
 4004d10:	880d883a 	mov	r6,r17
 4004d14:	a00f883a 	mov	r7,r20
 4004d18:	1009883a 	mov	r4,r2
 4004d1c:	180b883a 	mov	r5,r3
 4004d20:	400c9080 	call	400c908 <__ledf2>
 4004d24:	10003e0e 	bge	r2,zero,4004e20 <_dtoa_r+0x1548>
 4004d28:	d9001317 	ldw	r4,76(sp)
 4004d2c:	bd3fffc3 	ldbu	r20,-1(r23)
 4004d30:	d9000515 	stw	r4,20(sp)
 4004d34:	003d3b06 	br	4004224 <__ram_exceptions_end+0xfbf7bf88>
 4004d38:	0027883a 	mov	r19,zero
 4004d3c:	003f1b06 	br	40049ac <__ram_exceptions_end+0xfbf7c710>
 4004d40:	d8800817 	ldw	r2,32(sp)
 4004d44:	11e9c83a 	sub	r20,r2,r7
 4004d48:	0005883a 	mov	r2,zero
 4004d4c:	003d5406 	br	40042a0 <__ram_exceptions_end+0xfbf7c004>
 4004d50:	00800044 	movi	r2,1
 4004d54:	003dc706 	br	4004474 <__ram_exceptions_end+0xfbf7c1d8>
 4004d58:	d8c00217 	ldw	r3,8(sp)
 4004d5c:	00800d84 	movi	r2,54
 4004d60:	dd400a17 	ldw	r21,40(sp)
 4004d64:	10c5c83a 	sub	r2,r2,r3
 4004d68:	dd000817 	ldw	r20,32(sp)
 4004d6c:	003d4c06 	br	40042a0 <__ram_exceptions_end+0xfbf7c004>
 4004d70:	dc800f15 	stw	r18,60(sp)
 4004d74:	dcc01015 	stw	r19,64(sp)
 4004d78:	04000084 	movi	r16,2
 4004d7c:	003bed06 	br	4003d34 <__ram_exceptions_end+0xfbf7ba98>
 4004d80:	d9000617 	ldw	r4,24(sp)
 4004d84:	203f0d26 	beq	r4,zero,40049bc <__ram_exceptions_end+0xfbf7c720>
 4004d88:	d9800c17 	ldw	r6,48(sp)
 4004d8c:	01bcab0e 	bge	zero,r6,400403c <__ram_exceptions_end+0xfbf7bda0>
 4004d90:	d9401017 	ldw	r5,64(sp)
 4004d94:	d9000f17 	ldw	r4,60(sp)
 4004d98:	000d883a 	mov	r6,zero
 4004d9c:	01d00934 	movhi	r7,16420
 4004da0:	400c9fc0 	call	400c9fc <__muldf3>
 4004da4:	81000044 	addi	r4,r16,1
 4004da8:	d8800f15 	stw	r2,60(sp)
 4004dac:	d8c01015 	stw	r3,64(sp)
 4004db0:	400dbe40 	call	400dbe4 <__floatsidf>
 4004db4:	d9800f17 	ldw	r6,60(sp)
 4004db8:	d9c01017 	ldw	r7,64(sp)
 4004dbc:	1009883a 	mov	r4,r2
 4004dc0:	180b883a 	mov	r5,r3
 4004dc4:	400c9fc0 	call	400c9fc <__muldf3>
 4004dc8:	01d00734 	movhi	r7,16412
 4004dcc:	000d883a 	mov	r6,zero
 4004dd0:	1009883a 	mov	r4,r2
 4004dd4:	180b883a 	mov	r5,r3
 4004dd8:	400b5280 	call	400b528 <__adddf3>
 4004ddc:	d9c00517 	ldw	r7,20(sp)
 4004de0:	047f3034 	movhi	r17,64704
 4004de4:	1021883a 	mov	r16,r2
 4004de8:	39ffffc4 	addi	r7,r7,-1
 4004dec:	d9c01315 	stw	r7,76(sp)
 4004df0:	1c63883a 	add	r17,r3,r17
 4004df4:	db000c17 	ldw	r12,48(sp)
 4004df8:	003bea06 	br	4003da4 <__ram_exceptions_end+0xfbf7bb08>
 4004dfc:	dc000915 	stw	r16,36(sp)
 4004e00:	003e0e06 	br	400463c <__ram_exceptions_end+0xfbf7c3a0>
 4004e04:	01000e44 	movi	r4,57
 4004e08:	8825883a 	mov	r18,r17
 4004e0c:	9dc00044 	addi	r23,r19,1
 4004e10:	99000005 	stb	r4,0(r19)
 4004e14:	a023883a 	mov	r17,r20
 4004e18:	dc000915 	stw	r16,36(sp)
 4004e1c:	003da406 	br	40044b0 <__ram_exceptions_end+0xfbf7c214>
 4004e20:	d9801417 	ldw	r6,80(sp)
 4004e24:	d9c01517 	ldw	r7,84(sp)
 4004e28:	0009883a 	mov	r4,zero
 4004e2c:	014ff834 	movhi	r5,16352
 4004e30:	400d2680 	call	400d268 <__subdf3>
 4004e34:	880d883a 	mov	r6,r17
 4004e38:	a00f883a 	mov	r7,r20
 4004e3c:	1009883a 	mov	r4,r2
 4004e40:	180b883a 	mov	r5,r3
 4004e44:	400c82c0 	call	400c82c <__gedf2>
 4004e48:	00bc7c0e 	bge	zero,r2,400403c <__ram_exceptions_end+0xfbf7bda0>
 4004e4c:	01000c04 	movi	r4,48
 4004e50:	00000106 	br	4004e58 <_dtoa_r+0x1580>
 4004e54:	102f883a 	mov	r23,r2
 4004e58:	b8bfffc4 	addi	r2,r23,-1
 4004e5c:	10c00007 	ldb	r3,0(r2)
 4004e60:	193ffc26 	beq	r3,r4,4004e54 <__ram_exceptions_end+0xfbf7cbb8>
 4004e64:	d9801317 	ldw	r6,76(sp)
 4004e68:	d9800515 	stw	r6,20(sp)
 4004e6c:	003c4406 	br	4003f80 <__ram_exceptions_end+0xfbf7bce4>
 4004e70:	d9801317 	ldw	r6,76(sp)
 4004e74:	d9800515 	stw	r6,20(sp)
 4004e78:	003cea06 	br	4004224 <__ram_exceptions_end+0xfbf7bf88>
 4004e7c:	dd800f17 	ldw	r22,60(sp)
 4004e80:	dcc01017 	ldw	r19,64(sp)
 4004e84:	dc801217 	ldw	r18,72(sp)
 4004e88:	003c6c06 	br	400403c <__ram_exceptions_end+0xfbf7bda0>
 4004e8c:	903e031e 	bne	r18,zero,400469c <__ram_exceptions_end+0xfbf7c400>
 4004e90:	003ebb06 	br	4004980 <__ram_exceptions_end+0xfbf7c6e4>
 4004e94:	103e6c1e 	bne	r2,zero,4004848 <__ram_exceptions_end+0xfbf7c5ac>
 4004e98:	4080004c 	andi	r2,r8,1
 4004e9c:	103e6a26 	beq	r2,zero,4004848 <__ram_exceptions_end+0xfbf7c5ac>
 4004ea0:	003e6606 	br	400483c <__ram_exceptions_end+0xfbf7c5a0>
 4004ea4:	d8c00317 	ldw	r3,12(sp)
 4004ea8:	00800084 	movi	r2,2
 4004eac:	10c02916 	blt	r2,r3,4004f54 <_dtoa_r+0x167c>
 4004eb0:	d9000c17 	ldw	r4,48(sp)
 4004eb4:	003e8806 	br	40048d8 <__ram_exceptions_end+0xfbf7c63c>
 4004eb8:	04000084 	movi	r16,2
 4004ebc:	003b9d06 	br	4003d34 <__ram_exceptions_end+0xfbf7ba98>
 4004ec0:	d9001317 	ldw	r4,76(sp)
 4004ec4:	d9000515 	stw	r4,20(sp)
 4004ec8:	003cd606 	br	4004224 <__ram_exceptions_end+0xfbf7bf88>
 4004ecc:	d8801317 	ldw	r2,76(sp)
 4004ed0:	d8800515 	stw	r2,20(sp)
 4004ed4:	003c2a06 	br	4003f80 <__ram_exceptions_end+0xfbf7bce4>
 4004ed8:	d9800317 	ldw	r6,12(sp)
 4004edc:	00800084 	movi	r2,2
 4004ee0:	11801516 	blt	r2,r6,4004f38 <_dtoa_r+0x1660>
 4004ee4:	d9c00c17 	ldw	r7,48(sp)
 4004ee8:	d9c00615 	stw	r7,24(sp)
 4004eec:	003df706 	br	40046cc <__ram_exceptions_end+0xfbf7c430>
 4004ef0:	193d3926 	beq	r3,r4,40043d8 <__ram_exceptions_end+0xfbf7c13c>
 4004ef4:	00c00f04 	movi	r3,60
 4004ef8:	1885c83a 	sub	r2,r3,r2
 4004efc:	003ddf06 	br	400467c <__ram_exceptions_end+0xfbf7c3e0>
 4004f00:	e009883a 	mov	r4,fp
 4004f04:	e0001115 	stw	zero,68(fp)
 4004f08:	000b883a 	mov	r5,zero
 4004f0c:	400696c0 	call	400696c <_Balloc>
 4004f10:	d8800715 	stw	r2,28(sp)
 4004f14:	d8c00717 	ldw	r3,28(sp)
 4004f18:	00bfffc4 	movi	r2,-1
 4004f1c:	01000044 	movi	r4,1
 4004f20:	d8800c15 	stw	r2,48(sp)
 4004f24:	e0c01015 	stw	r3,64(fp)
 4004f28:	d9000b15 	stw	r4,44(sp)
 4004f2c:	d8800615 	stw	r2,24(sp)
 4004f30:	d8002215 	stw	zero,136(sp)
 4004f34:	003c4106 	br	400403c <__ram_exceptions_end+0xfbf7bda0>
 4004f38:	d8c00c17 	ldw	r3,48(sp)
 4004f3c:	d8c00615 	stw	r3,24(sp)
 4004f40:	003e7006 	br	4004904 <__ram_exceptions_end+0xfbf7c668>
 4004f44:	04400044 	movi	r17,1
 4004f48:	003b2006 	br	4003bcc <__ram_exceptions_end+0xfbf7b930>
 4004f4c:	000b883a 	mov	r5,zero
 4004f50:	003b3d06 	br	4003c48 <__ram_exceptions_end+0xfbf7b9ac>
 4004f54:	d8800c17 	ldw	r2,48(sp)
 4004f58:	d8800615 	stw	r2,24(sp)
 4004f5c:	003e6906 	br	4004904 <__ram_exceptions_end+0xfbf7c668>

04004f60 <__sflush_r>:
 4004f60:	2880030b 	ldhu	r2,12(r5)
 4004f64:	defffb04 	addi	sp,sp,-20
 4004f68:	dcc00315 	stw	r19,12(sp)
 4004f6c:	dc400115 	stw	r17,4(sp)
 4004f70:	dfc00415 	stw	ra,16(sp)
 4004f74:	dc800215 	stw	r18,8(sp)
 4004f78:	dc000015 	stw	r16,0(sp)
 4004f7c:	10c0020c 	andi	r3,r2,8
 4004f80:	2823883a 	mov	r17,r5
 4004f84:	2027883a 	mov	r19,r4
 4004f88:	1800311e 	bne	r3,zero,4005050 <__sflush_r+0xf0>
 4004f8c:	28c00117 	ldw	r3,4(r5)
 4004f90:	10820014 	ori	r2,r2,2048
 4004f94:	2880030d 	sth	r2,12(r5)
 4004f98:	00c04b0e 	bge	zero,r3,40050c8 <__sflush_r+0x168>
 4004f9c:	8a000a17 	ldw	r8,40(r17)
 4004fa0:	40002326 	beq	r8,zero,4005030 <__sflush_r+0xd0>
 4004fa4:	9c000017 	ldw	r16,0(r19)
 4004fa8:	10c4000c 	andi	r3,r2,4096
 4004fac:	98000015 	stw	zero,0(r19)
 4004fb0:	18004826 	beq	r3,zero,40050d4 <__sflush_r+0x174>
 4004fb4:	89801417 	ldw	r6,80(r17)
 4004fb8:	10c0010c 	andi	r3,r2,4
 4004fbc:	18000626 	beq	r3,zero,4004fd8 <__sflush_r+0x78>
 4004fc0:	88c00117 	ldw	r3,4(r17)
 4004fc4:	88800c17 	ldw	r2,48(r17)
 4004fc8:	30cdc83a 	sub	r6,r6,r3
 4004fcc:	10000226 	beq	r2,zero,4004fd8 <__sflush_r+0x78>
 4004fd0:	88800f17 	ldw	r2,60(r17)
 4004fd4:	308dc83a 	sub	r6,r6,r2
 4004fd8:	89400717 	ldw	r5,28(r17)
 4004fdc:	000f883a 	mov	r7,zero
 4004fe0:	9809883a 	mov	r4,r19
 4004fe4:	403ee83a 	callr	r8
 4004fe8:	00ffffc4 	movi	r3,-1
 4004fec:	10c04426 	beq	r2,r3,4005100 <__sflush_r+0x1a0>
 4004ff0:	88c0030b 	ldhu	r3,12(r17)
 4004ff4:	89000417 	ldw	r4,16(r17)
 4004ff8:	88000115 	stw	zero,4(r17)
 4004ffc:	197dffcc 	andi	r5,r3,63487
 4005000:	8940030d 	sth	r5,12(r17)
 4005004:	89000015 	stw	r4,0(r17)
 4005008:	18c4000c 	andi	r3,r3,4096
 400500c:	18002c1e 	bne	r3,zero,40050c0 <__sflush_r+0x160>
 4005010:	89400c17 	ldw	r5,48(r17)
 4005014:	9c000015 	stw	r16,0(r19)
 4005018:	28000526 	beq	r5,zero,4005030 <__sflush_r+0xd0>
 400501c:	88801004 	addi	r2,r17,64
 4005020:	28800226 	beq	r5,r2,400502c <__sflush_r+0xcc>
 4005024:	9809883a 	mov	r4,r19
 4005028:	40056dc0 	call	40056dc <_free_r>
 400502c:	88000c15 	stw	zero,48(r17)
 4005030:	0005883a 	mov	r2,zero
 4005034:	dfc00417 	ldw	ra,16(sp)
 4005038:	dcc00317 	ldw	r19,12(sp)
 400503c:	dc800217 	ldw	r18,8(sp)
 4005040:	dc400117 	ldw	r17,4(sp)
 4005044:	dc000017 	ldw	r16,0(sp)
 4005048:	dec00504 	addi	sp,sp,20
 400504c:	f800283a 	ret
 4005050:	2c800417 	ldw	r18,16(r5)
 4005054:	903ff626 	beq	r18,zero,4005030 <__ram_exceptions_end+0xfbf7cd94>
 4005058:	2c000017 	ldw	r16,0(r5)
 400505c:	108000cc 	andi	r2,r2,3
 4005060:	2c800015 	stw	r18,0(r5)
 4005064:	84a1c83a 	sub	r16,r16,r18
 4005068:	1000131e 	bne	r2,zero,40050b8 <__sflush_r+0x158>
 400506c:	28800517 	ldw	r2,20(r5)
 4005070:	88800215 	stw	r2,8(r17)
 4005074:	04000316 	blt	zero,r16,4005084 <__sflush_r+0x124>
 4005078:	003fed06 	br	4005030 <__ram_exceptions_end+0xfbf7cd94>
 400507c:	90a5883a 	add	r18,r18,r2
 4005080:	043feb0e 	bge	zero,r16,4005030 <__ram_exceptions_end+0xfbf7cd94>
 4005084:	88800917 	ldw	r2,36(r17)
 4005088:	89400717 	ldw	r5,28(r17)
 400508c:	800f883a 	mov	r7,r16
 4005090:	900d883a 	mov	r6,r18
 4005094:	9809883a 	mov	r4,r19
 4005098:	103ee83a 	callr	r2
 400509c:	80a1c83a 	sub	r16,r16,r2
 40050a0:	00bff616 	blt	zero,r2,400507c <__ram_exceptions_end+0xfbf7cde0>
 40050a4:	88c0030b 	ldhu	r3,12(r17)
 40050a8:	00bfffc4 	movi	r2,-1
 40050ac:	18c01014 	ori	r3,r3,64
 40050b0:	88c0030d 	sth	r3,12(r17)
 40050b4:	003fdf06 	br	4005034 <__ram_exceptions_end+0xfbf7cd98>
 40050b8:	0005883a 	mov	r2,zero
 40050bc:	003fec06 	br	4005070 <__ram_exceptions_end+0xfbf7cdd4>
 40050c0:	88801415 	stw	r2,80(r17)
 40050c4:	003fd206 	br	4005010 <__ram_exceptions_end+0xfbf7cd74>
 40050c8:	28c00f17 	ldw	r3,60(r5)
 40050cc:	00ffb316 	blt	zero,r3,4004f9c <__ram_exceptions_end+0xfbf7cd00>
 40050d0:	003fd706 	br	4005030 <__ram_exceptions_end+0xfbf7cd94>
 40050d4:	89400717 	ldw	r5,28(r17)
 40050d8:	000d883a 	mov	r6,zero
 40050dc:	01c00044 	movi	r7,1
 40050e0:	9809883a 	mov	r4,r19
 40050e4:	403ee83a 	callr	r8
 40050e8:	100d883a 	mov	r6,r2
 40050ec:	00bfffc4 	movi	r2,-1
 40050f0:	30801426 	beq	r6,r2,4005144 <__sflush_r+0x1e4>
 40050f4:	8880030b 	ldhu	r2,12(r17)
 40050f8:	8a000a17 	ldw	r8,40(r17)
 40050fc:	003fae06 	br	4004fb8 <__ram_exceptions_end+0xfbf7cd1c>
 4005100:	98c00017 	ldw	r3,0(r19)
 4005104:	183fba26 	beq	r3,zero,4004ff0 <__ram_exceptions_end+0xfbf7cd54>
 4005108:	01000744 	movi	r4,29
 400510c:	19000626 	beq	r3,r4,4005128 <__sflush_r+0x1c8>
 4005110:	01000584 	movi	r4,22
 4005114:	19000426 	beq	r3,r4,4005128 <__sflush_r+0x1c8>
 4005118:	88c0030b 	ldhu	r3,12(r17)
 400511c:	18c01014 	ori	r3,r3,64
 4005120:	88c0030d 	sth	r3,12(r17)
 4005124:	003fc306 	br	4005034 <__ram_exceptions_end+0xfbf7cd98>
 4005128:	8880030b 	ldhu	r2,12(r17)
 400512c:	88c00417 	ldw	r3,16(r17)
 4005130:	88000115 	stw	zero,4(r17)
 4005134:	10bdffcc 	andi	r2,r2,63487
 4005138:	8880030d 	sth	r2,12(r17)
 400513c:	88c00015 	stw	r3,0(r17)
 4005140:	003fb306 	br	4005010 <__ram_exceptions_end+0xfbf7cd74>
 4005144:	98800017 	ldw	r2,0(r19)
 4005148:	103fea26 	beq	r2,zero,40050f4 <__ram_exceptions_end+0xfbf7ce58>
 400514c:	00c00744 	movi	r3,29
 4005150:	10c00226 	beq	r2,r3,400515c <__sflush_r+0x1fc>
 4005154:	00c00584 	movi	r3,22
 4005158:	10c0031e 	bne	r2,r3,4005168 <__sflush_r+0x208>
 400515c:	9c000015 	stw	r16,0(r19)
 4005160:	0005883a 	mov	r2,zero
 4005164:	003fb306 	br	4005034 <__ram_exceptions_end+0xfbf7cd98>
 4005168:	88c0030b 	ldhu	r3,12(r17)
 400516c:	3005883a 	mov	r2,r6
 4005170:	18c01014 	ori	r3,r3,64
 4005174:	88c0030d 	sth	r3,12(r17)
 4005178:	003fae06 	br	4005034 <__ram_exceptions_end+0xfbf7cd98>

0400517c <_fflush_r>:
 400517c:	defffd04 	addi	sp,sp,-12
 4005180:	dc000115 	stw	r16,4(sp)
 4005184:	dfc00215 	stw	ra,8(sp)
 4005188:	2021883a 	mov	r16,r4
 400518c:	20000226 	beq	r4,zero,4005198 <_fflush_r+0x1c>
 4005190:	20800e17 	ldw	r2,56(r4)
 4005194:	10000c26 	beq	r2,zero,40051c8 <_fflush_r+0x4c>
 4005198:	2880030f 	ldh	r2,12(r5)
 400519c:	1000051e 	bne	r2,zero,40051b4 <_fflush_r+0x38>
 40051a0:	0005883a 	mov	r2,zero
 40051a4:	dfc00217 	ldw	ra,8(sp)
 40051a8:	dc000117 	ldw	r16,4(sp)
 40051ac:	dec00304 	addi	sp,sp,12
 40051b0:	f800283a 	ret
 40051b4:	8009883a 	mov	r4,r16
 40051b8:	dfc00217 	ldw	ra,8(sp)
 40051bc:	dc000117 	ldw	r16,4(sp)
 40051c0:	dec00304 	addi	sp,sp,12
 40051c4:	4004f601 	jmpi	4004f60 <__sflush_r>
 40051c8:	d9400015 	stw	r5,0(sp)
 40051cc:	40055680 	call	4005568 <__sinit>
 40051d0:	d9400017 	ldw	r5,0(sp)
 40051d4:	003ff006 	br	4005198 <__ram_exceptions_end+0xfbf7cefc>

040051d8 <fflush>:
 40051d8:	20000526 	beq	r4,zero,40051f0 <fflush+0x18>
 40051dc:	00810074 	movhi	r2,1025
 40051e0:	109b1804 	addi	r2,r2,27744
 40051e4:	200b883a 	mov	r5,r4
 40051e8:	11000017 	ldw	r4,0(r2)
 40051ec:	400517c1 	jmpi	400517c <_fflush_r>
 40051f0:	00810074 	movhi	r2,1025
 40051f4:	109b1704 	addi	r2,r2,27740
 40051f8:	11000017 	ldw	r4,0(r2)
 40051fc:	01410034 	movhi	r5,1024
 4005200:	29545f04 	addi	r5,r5,20860
 4005204:	4005ab01 	jmpi	4005ab0 <_fwalk_reent>

04005208 <__fp_unlock>:
 4005208:	0005883a 	mov	r2,zero
 400520c:	f800283a 	ret

04005210 <_cleanup_r>:
 4005210:	01410074 	movhi	r5,1025
 4005214:	29658904 	addi	r5,r5,-27100
 4005218:	4005ab01 	jmpi	4005ab0 <_fwalk_reent>

0400521c <__sinit.part.1>:
 400521c:	defff704 	addi	sp,sp,-36
 4005220:	00c10034 	movhi	r3,1024
 4005224:	dfc00815 	stw	ra,32(sp)
 4005228:	ddc00715 	stw	r23,28(sp)
 400522c:	dd800615 	stw	r22,24(sp)
 4005230:	dd400515 	stw	r21,20(sp)
 4005234:	dd000415 	stw	r20,16(sp)
 4005238:	dcc00315 	stw	r19,12(sp)
 400523c:	dc800215 	stw	r18,8(sp)
 4005240:	dc400115 	stw	r17,4(sp)
 4005244:	dc000015 	stw	r16,0(sp)
 4005248:	18d48404 	addi	r3,r3,21008
 400524c:	24000117 	ldw	r16,4(r4)
 4005250:	20c00f15 	stw	r3,60(r4)
 4005254:	2080bb04 	addi	r2,r4,748
 4005258:	00c000c4 	movi	r3,3
 400525c:	20c0b915 	stw	r3,740(r4)
 4005260:	2080ba15 	stw	r2,744(r4)
 4005264:	2000b815 	stw	zero,736(r4)
 4005268:	05c00204 	movi	r23,8
 400526c:	00800104 	movi	r2,4
 4005270:	2025883a 	mov	r18,r4
 4005274:	b80d883a 	mov	r6,r23
 4005278:	81001704 	addi	r4,r16,92
 400527c:	000b883a 	mov	r5,zero
 4005280:	80000015 	stw	zero,0(r16)
 4005284:	80000115 	stw	zero,4(r16)
 4005288:	80000215 	stw	zero,8(r16)
 400528c:	8080030d 	sth	r2,12(r16)
 4005290:	80001915 	stw	zero,100(r16)
 4005294:	8000038d 	sth	zero,14(r16)
 4005298:	80000415 	stw	zero,16(r16)
 400529c:	80000515 	stw	zero,20(r16)
 40052a0:	80000615 	stw	zero,24(r16)
 40052a4:	40068440 	call	4006844 <memset>
 40052a8:	05810034 	movhi	r22,1024
 40052ac:	94400217 	ldw	r17,8(r18)
 40052b0:	05410034 	movhi	r21,1024
 40052b4:	05010034 	movhi	r20,1024
 40052b8:	04c10034 	movhi	r19,1024
 40052bc:	b59ebb04 	addi	r22,r22,31468
 40052c0:	ad5ed204 	addi	r21,r21,31560
 40052c4:	a51ef104 	addi	r20,r20,31684
 40052c8:	9cdf0804 	addi	r19,r19,31776
 40052cc:	85800815 	stw	r22,32(r16)
 40052d0:	85400915 	stw	r21,36(r16)
 40052d4:	85000a15 	stw	r20,40(r16)
 40052d8:	84c00b15 	stw	r19,44(r16)
 40052dc:	84000715 	stw	r16,28(r16)
 40052e0:	00800284 	movi	r2,10
 40052e4:	8880030d 	sth	r2,12(r17)
 40052e8:	00800044 	movi	r2,1
 40052ec:	b80d883a 	mov	r6,r23
 40052f0:	89001704 	addi	r4,r17,92
 40052f4:	000b883a 	mov	r5,zero
 40052f8:	88000015 	stw	zero,0(r17)
 40052fc:	88000115 	stw	zero,4(r17)
 4005300:	88000215 	stw	zero,8(r17)
 4005304:	88001915 	stw	zero,100(r17)
 4005308:	8880038d 	sth	r2,14(r17)
 400530c:	88000415 	stw	zero,16(r17)
 4005310:	88000515 	stw	zero,20(r17)
 4005314:	88000615 	stw	zero,24(r17)
 4005318:	40068440 	call	4006844 <memset>
 400531c:	94000317 	ldw	r16,12(r18)
 4005320:	00800484 	movi	r2,18
 4005324:	8c400715 	stw	r17,28(r17)
 4005328:	8d800815 	stw	r22,32(r17)
 400532c:	8d400915 	stw	r21,36(r17)
 4005330:	8d000a15 	stw	r20,40(r17)
 4005334:	8cc00b15 	stw	r19,44(r17)
 4005338:	8080030d 	sth	r2,12(r16)
 400533c:	00800084 	movi	r2,2
 4005340:	80000015 	stw	zero,0(r16)
 4005344:	80000115 	stw	zero,4(r16)
 4005348:	80000215 	stw	zero,8(r16)
 400534c:	80001915 	stw	zero,100(r16)
 4005350:	8080038d 	sth	r2,14(r16)
 4005354:	80000415 	stw	zero,16(r16)
 4005358:	80000515 	stw	zero,20(r16)
 400535c:	80000615 	stw	zero,24(r16)
 4005360:	b80d883a 	mov	r6,r23
 4005364:	000b883a 	mov	r5,zero
 4005368:	81001704 	addi	r4,r16,92
 400536c:	40068440 	call	4006844 <memset>
 4005370:	00800044 	movi	r2,1
 4005374:	84000715 	stw	r16,28(r16)
 4005378:	85800815 	stw	r22,32(r16)
 400537c:	85400915 	stw	r21,36(r16)
 4005380:	85000a15 	stw	r20,40(r16)
 4005384:	84c00b15 	stw	r19,44(r16)
 4005388:	90800e15 	stw	r2,56(r18)
 400538c:	dfc00817 	ldw	ra,32(sp)
 4005390:	ddc00717 	ldw	r23,28(sp)
 4005394:	dd800617 	ldw	r22,24(sp)
 4005398:	dd400517 	ldw	r21,20(sp)
 400539c:	dd000417 	ldw	r20,16(sp)
 40053a0:	dcc00317 	ldw	r19,12(sp)
 40053a4:	dc800217 	ldw	r18,8(sp)
 40053a8:	dc400117 	ldw	r17,4(sp)
 40053ac:	dc000017 	ldw	r16,0(sp)
 40053b0:	dec00904 	addi	sp,sp,36
 40053b4:	f800283a 	ret

040053b8 <__fp_lock>:
 40053b8:	0005883a 	mov	r2,zero
 40053bc:	f800283a 	ret

040053c0 <__sfmoreglue>:
 40053c0:	defffc04 	addi	sp,sp,-16
 40053c4:	dc800215 	stw	r18,8(sp)
 40053c8:	2825883a 	mov	r18,r5
 40053cc:	dc000015 	stw	r16,0(sp)
 40053d0:	01401a04 	movi	r5,104
 40053d4:	2021883a 	mov	r16,r4
 40053d8:	913fffc4 	addi	r4,r18,-1
 40053dc:	dfc00315 	stw	ra,12(sp)
 40053e0:	dc400115 	stw	r17,4(sp)
 40053e4:	40011140 	call	4001114 <__mulsi3>
 40053e8:	8009883a 	mov	r4,r16
 40053ec:	11401d04 	addi	r5,r2,116
 40053f0:	1023883a 	mov	r17,r2
 40053f4:	4005e0c0 	call	4005e0c <_malloc_r>
 40053f8:	1021883a 	mov	r16,r2
 40053fc:	10000726 	beq	r2,zero,400541c <__sfmoreglue+0x5c>
 4005400:	11000304 	addi	r4,r2,12
 4005404:	10000015 	stw	zero,0(r2)
 4005408:	14800115 	stw	r18,4(r2)
 400540c:	11000215 	stw	r4,8(r2)
 4005410:	89801a04 	addi	r6,r17,104
 4005414:	000b883a 	mov	r5,zero
 4005418:	40068440 	call	4006844 <memset>
 400541c:	8005883a 	mov	r2,r16
 4005420:	dfc00317 	ldw	ra,12(sp)
 4005424:	dc800217 	ldw	r18,8(sp)
 4005428:	dc400117 	ldw	r17,4(sp)
 400542c:	dc000017 	ldw	r16,0(sp)
 4005430:	dec00404 	addi	sp,sp,16
 4005434:	f800283a 	ret

04005438 <__sfp>:
 4005438:	defffb04 	addi	sp,sp,-20
 400543c:	dc000015 	stw	r16,0(sp)
 4005440:	04010074 	movhi	r16,1025
 4005444:	841b1704 	addi	r16,r16,27740
 4005448:	dcc00315 	stw	r19,12(sp)
 400544c:	2027883a 	mov	r19,r4
 4005450:	81000017 	ldw	r4,0(r16)
 4005454:	dfc00415 	stw	ra,16(sp)
 4005458:	dc800215 	stw	r18,8(sp)
 400545c:	20800e17 	ldw	r2,56(r4)
 4005460:	dc400115 	stw	r17,4(sp)
 4005464:	1000021e 	bne	r2,zero,4005470 <__sfp+0x38>
 4005468:	400521c0 	call	400521c <__sinit.part.1>
 400546c:	81000017 	ldw	r4,0(r16)
 4005470:	2480b804 	addi	r18,r4,736
 4005474:	047fffc4 	movi	r17,-1
 4005478:	91000117 	ldw	r4,4(r18)
 400547c:	94000217 	ldw	r16,8(r18)
 4005480:	213fffc4 	addi	r4,r4,-1
 4005484:	20000a16 	blt	r4,zero,40054b0 <__sfp+0x78>
 4005488:	8080030f 	ldh	r2,12(r16)
 400548c:	10000c26 	beq	r2,zero,40054c0 <__sfp+0x88>
 4005490:	80c01d04 	addi	r3,r16,116
 4005494:	00000206 	br	40054a0 <__sfp+0x68>
 4005498:	18bfe60f 	ldh	r2,-104(r3)
 400549c:	10000826 	beq	r2,zero,40054c0 <__sfp+0x88>
 40054a0:	213fffc4 	addi	r4,r4,-1
 40054a4:	1c3ffd04 	addi	r16,r3,-12
 40054a8:	18c01a04 	addi	r3,r3,104
 40054ac:	247ffa1e 	bne	r4,r17,4005498 <__ram_exceptions_end+0xfbf7d1fc>
 40054b0:	90800017 	ldw	r2,0(r18)
 40054b4:	10001d26 	beq	r2,zero,400552c <__sfp+0xf4>
 40054b8:	1025883a 	mov	r18,r2
 40054bc:	003fee06 	br	4005478 <__ram_exceptions_end+0xfbf7d1dc>
 40054c0:	00bfffc4 	movi	r2,-1
 40054c4:	8080038d 	sth	r2,14(r16)
 40054c8:	00800044 	movi	r2,1
 40054cc:	8080030d 	sth	r2,12(r16)
 40054d0:	80001915 	stw	zero,100(r16)
 40054d4:	80000015 	stw	zero,0(r16)
 40054d8:	80000215 	stw	zero,8(r16)
 40054dc:	80000115 	stw	zero,4(r16)
 40054e0:	80000415 	stw	zero,16(r16)
 40054e4:	80000515 	stw	zero,20(r16)
 40054e8:	80000615 	stw	zero,24(r16)
 40054ec:	01800204 	movi	r6,8
 40054f0:	000b883a 	mov	r5,zero
 40054f4:	81001704 	addi	r4,r16,92
 40054f8:	40068440 	call	4006844 <memset>
 40054fc:	8005883a 	mov	r2,r16
 4005500:	80000c15 	stw	zero,48(r16)
 4005504:	80000d15 	stw	zero,52(r16)
 4005508:	80001115 	stw	zero,68(r16)
 400550c:	80001215 	stw	zero,72(r16)
 4005510:	dfc00417 	ldw	ra,16(sp)
 4005514:	dcc00317 	ldw	r19,12(sp)
 4005518:	dc800217 	ldw	r18,8(sp)
 400551c:	dc400117 	ldw	r17,4(sp)
 4005520:	dc000017 	ldw	r16,0(sp)
 4005524:	dec00504 	addi	sp,sp,20
 4005528:	f800283a 	ret
 400552c:	01400104 	movi	r5,4
 4005530:	9809883a 	mov	r4,r19
 4005534:	40053c00 	call	40053c0 <__sfmoreglue>
 4005538:	90800015 	stw	r2,0(r18)
 400553c:	103fde1e 	bne	r2,zero,40054b8 <__ram_exceptions_end+0xfbf7d21c>
 4005540:	00800304 	movi	r2,12
 4005544:	98800015 	stw	r2,0(r19)
 4005548:	0005883a 	mov	r2,zero
 400554c:	003ff006 	br	4005510 <__ram_exceptions_end+0xfbf7d274>

04005550 <_cleanup>:
 4005550:	00810074 	movhi	r2,1025
 4005554:	109b1704 	addi	r2,r2,27740
 4005558:	11000017 	ldw	r4,0(r2)
 400555c:	01410074 	movhi	r5,1025
 4005560:	29658904 	addi	r5,r5,-27100
 4005564:	4005ab01 	jmpi	4005ab0 <_fwalk_reent>

04005568 <__sinit>:
 4005568:	20800e17 	ldw	r2,56(r4)
 400556c:	10000126 	beq	r2,zero,4005574 <__sinit+0xc>
 4005570:	f800283a 	ret
 4005574:	400521c1 	jmpi	400521c <__sinit.part.1>

04005578 <__sfp_lock_acquire>:
 4005578:	f800283a 	ret

0400557c <__sfp_lock_release>:
 400557c:	f800283a 	ret

04005580 <__sinit_lock_acquire>:
 4005580:	f800283a 	ret

04005584 <__sinit_lock_release>:
 4005584:	f800283a 	ret

04005588 <__fp_lock_all>:
 4005588:	00810074 	movhi	r2,1025
 400558c:	109b1804 	addi	r2,r2,27744
 4005590:	11000017 	ldw	r4,0(r2)
 4005594:	01410034 	movhi	r5,1024
 4005598:	2954ee04 	addi	r5,r5,21432
 400559c:	40059ec1 	jmpi	40059ec <_fwalk>

040055a0 <__fp_unlock_all>:
 40055a0:	00810074 	movhi	r2,1025
 40055a4:	109b1804 	addi	r2,r2,27744
 40055a8:	11000017 	ldw	r4,0(r2)
 40055ac:	01410034 	movhi	r5,1024
 40055b0:	29548204 	addi	r5,r5,21000
 40055b4:	40059ec1 	jmpi	40059ec <_fwalk>

040055b8 <_malloc_trim_r>:
 40055b8:	defffb04 	addi	sp,sp,-20
 40055bc:	dcc00315 	stw	r19,12(sp)
 40055c0:	04c10074 	movhi	r19,1025
 40055c4:	dc800215 	stw	r18,8(sp)
 40055c8:	dc400115 	stw	r17,4(sp)
 40055cc:	dc000015 	stw	r16,0(sp)
 40055d0:	dfc00415 	stw	ra,16(sp)
 40055d4:	2821883a 	mov	r16,r5
 40055d8:	9cd92904 	addi	r19,r19,25764
 40055dc:	2025883a 	mov	r18,r4
 40055e0:	400e3580 	call	400e358 <__malloc_lock>
 40055e4:	98800217 	ldw	r2,8(r19)
 40055e8:	14400117 	ldw	r17,4(r2)
 40055ec:	00bfff04 	movi	r2,-4
 40055f0:	88a2703a 	and	r17,r17,r2
 40055f4:	8c21c83a 	sub	r16,r17,r16
 40055f8:	8403fbc4 	addi	r16,r16,4079
 40055fc:	8020d33a 	srli	r16,r16,12
 4005600:	0083ffc4 	movi	r2,4095
 4005604:	843fffc4 	addi	r16,r16,-1
 4005608:	8020933a 	slli	r16,r16,12
 400560c:	1400060e 	bge	r2,r16,4005628 <_malloc_trim_r+0x70>
 4005610:	000b883a 	mov	r5,zero
 4005614:	9009883a 	mov	r4,r18
 4005618:	4007a980 	call	4007a98 <_sbrk_r>
 400561c:	98c00217 	ldw	r3,8(r19)
 4005620:	1c47883a 	add	r3,r3,r17
 4005624:	10c00a26 	beq	r2,r3,4005650 <_malloc_trim_r+0x98>
 4005628:	9009883a 	mov	r4,r18
 400562c:	400e37c0 	call	400e37c <__malloc_unlock>
 4005630:	0005883a 	mov	r2,zero
 4005634:	dfc00417 	ldw	ra,16(sp)
 4005638:	dcc00317 	ldw	r19,12(sp)
 400563c:	dc800217 	ldw	r18,8(sp)
 4005640:	dc400117 	ldw	r17,4(sp)
 4005644:	dc000017 	ldw	r16,0(sp)
 4005648:	dec00504 	addi	sp,sp,20
 400564c:	f800283a 	ret
 4005650:	040bc83a 	sub	r5,zero,r16
 4005654:	9009883a 	mov	r4,r18
 4005658:	4007a980 	call	4007a98 <_sbrk_r>
 400565c:	00ffffc4 	movi	r3,-1
 4005660:	10c00d26 	beq	r2,r3,4005698 <_malloc_trim_r+0xe0>
 4005664:	00c10074 	movhi	r3,1025
 4005668:	18de6a04 	addi	r3,r3,31144
 400566c:	18800017 	ldw	r2,0(r3)
 4005670:	99000217 	ldw	r4,8(r19)
 4005674:	8c23c83a 	sub	r17,r17,r16
 4005678:	8c400054 	ori	r17,r17,1
 400567c:	1421c83a 	sub	r16,r2,r16
 4005680:	24400115 	stw	r17,4(r4)
 4005684:	9009883a 	mov	r4,r18
 4005688:	1c000015 	stw	r16,0(r3)
 400568c:	400e37c0 	call	400e37c <__malloc_unlock>
 4005690:	00800044 	movi	r2,1
 4005694:	003fe706 	br	4005634 <__ram_exceptions_end+0xfbf7d398>
 4005698:	000b883a 	mov	r5,zero
 400569c:	9009883a 	mov	r4,r18
 40056a0:	4007a980 	call	4007a98 <_sbrk_r>
 40056a4:	99000217 	ldw	r4,8(r19)
 40056a8:	014003c4 	movi	r5,15
 40056ac:	1107c83a 	sub	r3,r2,r4
 40056b0:	28ffdd0e 	bge	r5,r3,4005628 <__ram_exceptions_end+0xfbf7d38c>
 40056b4:	01410074 	movhi	r5,1025
 40056b8:	295b1a04 	addi	r5,r5,27752
 40056bc:	29400017 	ldw	r5,0(r5)
 40056c0:	18c00054 	ori	r3,r3,1
 40056c4:	20c00115 	stw	r3,4(r4)
 40056c8:	00c10074 	movhi	r3,1025
 40056cc:	1145c83a 	sub	r2,r2,r5
 40056d0:	18de6a04 	addi	r3,r3,31144
 40056d4:	18800015 	stw	r2,0(r3)
 40056d8:	003fd306 	br	4005628 <__ram_exceptions_end+0xfbf7d38c>

040056dc <_free_r>:
 40056dc:	28004126 	beq	r5,zero,40057e4 <_free_r+0x108>
 40056e0:	defffd04 	addi	sp,sp,-12
 40056e4:	dc400115 	stw	r17,4(sp)
 40056e8:	dc000015 	stw	r16,0(sp)
 40056ec:	2023883a 	mov	r17,r4
 40056f0:	2821883a 	mov	r16,r5
 40056f4:	dfc00215 	stw	ra,8(sp)
 40056f8:	400e3580 	call	400e358 <__malloc_lock>
 40056fc:	81ffff17 	ldw	r7,-4(r16)
 4005700:	00bfff84 	movi	r2,-2
 4005704:	01010074 	movhi	r4,1025
 4005708:	81bffe04 	addi	r6,r16,-8
 400570c:	3884703a 	and	r2,r7,r2
 4005710:	21192904 	addi	r4,r4,25764
 4005714:	308b883a 	add	r5,r6,r2
 4005718:	2a400117 	ldw	r9,4(r5)
 400571c:	22000217 	ldw	r8,8(r4)
 4005720:	00ffff04 	movi	r3,-4
 4005724:	48c6703a 	and	r3,r9,r3
 4005728:	2a005726 	beq	r5,r8,4005888 <_free_r+0x1ac>
 400572c:	28c00115 	stw	r3,4(r5)
 4005730:	39c0004c 	andi	r7,r7,1
 4005734:	3800091e 	bne	r7,zero,400575c <_free_r+0x80>
 4005738:	823ffe17 	ldw	r8,-8(r16)
 400573c:	22400204 	addi	r9,r4,8
 4005740:	320dc83a 	sub	r6,r6,r8
 4005744:	31c00217 	ldw	r7,8(r6)
 4005748:	1205883a 	add	r2,r2,r8
 400574c:	3a406526 	beq	r7,r9,40058e4 <_free_r+0x208>
 4005750:	32000317 	ldw	r8,12(r6)
 4005754:	3a000315 	stw	r8,12(r7)
 4005758:	41c00215 	stw	r7,8(r8)
 400575c:	28cf883a 	add	r7,r5,r3
 4005760:	39c00117 	ldw	r7,4(r7)
 4005764:	39c0004c 	andi	r7,r7,1
 4005768:	38003a26 	beq	r7,zero,4005854 <_free_r+0x178>
 400576c:	10c00054 	ori	r3,r2,1
 4005770:	30c00115 	stw	r3,4(r6)
 4005774:	3087883a 	add	r3,r6,r2
 4005778:	18800015 	stw	r2,0(r3)
 400577c:	00c07fc4 	movi	r3,511
 4005780:	18801936 	bltu	r3,r2,40057e8 <_free_r+0x10c>
 4005784:	1004d0fa 	srli	r2,r2,3
 4005788:	01c00044 	movi	r7,1
 400578c:	21400117 	ldw	r5,4(r4)
 4005790:	10c00044 	addi	r3,r2,1
 4005794:	18c7883a 	add	r3,r3,r3
 4005798:	1005d0ba 	srai	r2,r2,2
 400579c:	18c7883a 	add	r3,r3,r3
 40057a0:	18c7883a 	add	r3,r3,r3
 40057a4:	1907883a 	add	r3,r3,r4
 40057a8:	3884983a 	sll	r2,r7,r2
 40057ac:	19c00017 	ldw	r7,0(r3)
 40057b0:	1a3ffe04 	addi	r8,r3,-8
 40057b4:	1144b03a 	or	r2,r2,r5
 40057b8:	32000315 	stw	r8,12(r6)
 40057bc:	31c00215 	stw	r7,8(r6)
 40057c0:	20800115 	stw	r2,4(r4)
 40057c4:	19800015 	stw	r6,0(r3)
 40057c8:	39800315 	stw	r6,12(r7)
 40057cc:	8809883a 	mov	r4,r17
 40057d0:	dfc00217 	ldw	ra,8(sp)
 40057d4:	dc400117 	ldw	r17,4(sp)
 40057d8:	dc000017 	ldw	r16,0(sp)
 40057dc:	dec00304 	addi	sp,sp,12
 40057e0:	400e37c1 	jmpi	400e37c <__malloc_unlock>
 40057e4:	f800283a 	ret
 40057e8:	100ad27a 	srli	r5,r2,9
 40057ec:	00c00104 	movi	r3,4
 40057f0:	19404a36 	bltu	r3,r5,400591c <_free_r+0x240>
 40057f4:	100ad1ba 	srli	r5,r2,6
 40057f8:	28c00e44 	addi	r3,r5,57
 40057fc:	18c7883a 	add	r3,r3,r3
 4005800:	29400e04 	addi	r5,r5,56
 4005804:	18c7883a 	add	r3,r3,r3
 4005808:	18c7883a 	add	r3,r3,r3
 400580c:	1909883a 	add	r4,r3,r4
 4005810:	20c00017 	ldw	r3,0(r4)
 4005814:	01c10074 	movhi	r7,1025
 4005818:	213ffe04 	addi	r4,r4,-8
 400581c:	39d92904 	addi	r7,r7,25764
 4005820:	20c04426 	beq	r4,r3,4005934 <_free_r+0x258>
 4005824:	01ffff04 	movi	r7,-4
 4005828:	19400117 	ldw	r5,4(r3)
 400582c:	29ca703a 	and	r5,r5,r7
 4005830:	1140022e 	bgeu	r2,r5,400583c <_free_r+0x160>
 4005834:	18c00217 	ldw	r3,8(r3)
 4005838:	20fffb1e 	bne	r4,r3,4005828 <__ram_exceptions_end+0xfbf7d58c>
 400583c:	19000317 	ldw	r4,12(r3)
 4005840:	31000315 	stw	r4,12(r6)
 4005844:	30c00215 	stw	r3,8(r6)
 4005848:	21800215 	stw	r6,8(r4)
 400584c:	19800315 	stw	r6,12(r3)
 4005850:	003fde06 	br	40057cc <__ram_exceptions_end+0xfbf7d530>
 4005854:	29c00217 	ldw	r7,8(r5)
 4005858:	10c5883a 	add	r2,r2,r3
 400585c:	00c10074 	movhi	r3,1025
 4005860:	18d92b04 	addi	r3,r3,25772
 4005864:	38c03b26 	beq	r7,r3,4005954 <_free_r+0x278>
 4005868:	2a000317 	ldw	r8,12(r5)
 400586c:	11400054 	ori	r5,r2,1
 4005870:	3087883a 	add	r3,r6,r2
 4005874:	3a000315 	stw	r8,12(r7)
 4005878:	41c00215 	stw	r7,8(r8)
 400587c:	31400115 	stw	r5,4(r6)
 4005880:	18800015 	stw	r2,0(r3)
 4005884:	003fbd06 	br	400577c <__ram_exceptions_end+0xfbf7d4e0>
 4005888:	39c0004c 	andi	r7,r7,1
 400588c:	10c5883a 	add	r2,r2,r3
 4005890:	3800071e 	bne	r7,zero,40058b0 <_free_r+0x1d4>
 4005894:	81fffe17 	ldw	r7,-8(r16)
 4005898:	31cdc83a 	sub	r6,r6,r7
 400589c:	30c00317 	ldw	r3,12(r6)
 40058a0:	31400217 	ldw	r5,8(r6)
 40058a4:	11c5883a 	add	r2,r2,r7
 40058a8:	28c00315 	stw	r3,12(r5)
 40058ac:	19400215 	stw	r5,8(r3)
 40058b0:	10c00054 	ori	r3,r2,1
 40058b4:	30c00115 	stw	r3,4(r6)
 40058b8:	00c10074 	movhi	r3,1025
 40058bc:	18db1b04 	addi	r3,r3,27756
 40058c0:	18c00017 	ldw	r3,0(r3)
 40058c4:	21800215 	stw	r6,8(r4)
 40058c8:	10ffc036 	bltu	r2,r3,40057cc <__ram_exceptions_end+0xfbf7d530>
 40058cc:	00810074 	movhi	r2,1025
 40058d0:	109e5b04 	addi	r2,r2,31084
 40058d4:	11400017 	ldw	r5,0(r2)
 40058d8:	8809883a 	mov	r4,r17
 40058dc:	40055b80 	call	40055b8 <_malloc_trim_r>
 40058e0:	003fba06 	br	40057cc <__ram_exceptions_end+0xfbf7d530>
 40058e4:	28c9883a 	add	r4,r5,r3
 40058e8:	21000117 	ldw	r4,4(r4)
 40058ec:	2100004c 	andi	r4,r4,1
 40058f0:	2000391e 	bne	r4,zero,40059d8 <_free_r+0x2fc>
 40058f4:	29c00217 	ldw	r7,8(r5)
 40058f8:	29000317 	ldw	r4,12(r5)
 40058fc:	1885883a 	add	r2,r3,r2
 4005900:	10c00054 	ori	r3,r2,1
 4005904:	39000315 	stw	r4,12(r7)
 4005908:	21c00215 	stw	r7,8(r4)
 400590c:	30c00115 	stw	r3,4(r6)
 4005910:	308d883a 	add	r6,r6,r2
 4005914:	30800015 	stw	r2,0(r6)
 4005918:	003fac06 	br	40057cc <__ram_exceptions_end+0xfbf7d530>
 400591c:	00c00504 	movi	r3,20
 4005920:	19401536 	bltu	r3,r5,4005978 <_free_r+0x29c>
 4005924:	28c01704 	addi	r3,r5,92
 4005928:	18c7883a 	add	r3,r3,r3
 400592c:	294016c4 	addi	r5,r5,91
 4005930:	003fb406 	br	4005804 <__ram_exceptions_end+0xfbf7d568>
 4005934:	280bd0ba 	srai	r5,r5,2
 4005938:	00c00044 	movi	r3,1
 400593c:	38800117 	ldw	r2,4(r7)
 4005940:	194a983a 	sll	r5,r3,r5
 4005944:	2007883a 	mov	r3,r4
 4005948:	2884b03a 	or	r2,r5,r2
 400594c:	38800115 	stw	r2,4(r7)
 4005950:	003fbb06 	br	4005840 <__ram_exceptions_end+0xfbf7d5a4>
 4005954:	21800515 	stw	r6,20(r4)
 4005958:	21800415 	stw	r6,16(r4)
 400595c:	10c00054 	ori	r3,r2,1
 4005960:	31c00315 	stw	r7,12(r6)
 4005964:	31c00215 	stw	r7,8(r6)
 4005968:	30c00115 	stw	r3,4(r6)
 400596c:	308d883a 	add	r6,r6,r2
 4005970:	30800015 	stw	r2,0(r6)
 4005974:	003f9506 	br	40057cc <__ram_exceptions_end+0xfbf7d530>
 4005978:	00c01504 	movi	r3,84
 400597c:	19400536 	bltu	r3,r5,4005994 <_free_r+0x2b8>
 4005980:	100ad33a 	srli	r5,r2,12
 4005984:	28c01bc4 	addi	r3,r5,111
 4005988:	18c7883a 	add	r3,r3,r3
 400598c:	29401b84 	addi	r5,r5,110
 4005990:	003f9c06 	br	4005804 <__ram_exceptions_end+0xfbf7d568>
 4005994:	00c05504 	movi	r3,340
 4005998:	19400536 	bltu	r3,r5,40059b0 <_free_r+0x2d4>
 400599c:	100ad3fa 	srli	r5,r2,15
 40059a0:	28c01e04 	addi	r3,r5,120
 40059a4:	18c7883a 	add	r3,r3,r3
 40059a8:	29401dc4 	addi	r5,r5,119
 40059ac:	003f9506 	br	4005804 <__ram_exceptions_end+0xfbf7d568>
 40059b0:	00c15504 	movi	r3,1364
 40059b4:	19400536 	bltu	r3,r5,40059cc <_free_r+0x2f0>
 40059b8:	100ad4ba 	srli	r5,r2,18
 40059bc:	28c01f44 	addi	r3,r5,125
 40059c0:	18c7883a 	add	r3,r3,r3
 40059c4:	29401f04 	addi	r5,r5,124
 40059c8:	003f8e06 	br	4005804 <__ram_exceptions_end+0xfbf7d568>
 40059cc:	00c03f84 	movi	r3,254
 40059d0:	01401f84 	movi	r5,126
 40059d4:	003f8b06 	br	4005804 <__ram_exceptions_end+0xfbf7d568>
 40059d8:	10c00054 	ori	r3,r2,1
 40059dc:	30c00115 	stw	r3,4(r6)
 40059e0:	308d883a 	add	r6,r6,r2
 40059e4:	30800015 	stw	r2,0(r6)
 40059e8:	003f7806 	br	40057cc <__ram_exceptions_end+0xfbf7d530>

040059ec <_fwalk>:
 40059ec:	defff704 	addi	sp,sp,-36
 40059f0:	dd000415 	stw	r20,16(sp)
 40059f4:	dfc00815 	stw	ra,32(sp)
 40059f8:	ddc00715 	stw	r23,28(sp)
 40059fc:	dd800615 	stw	r22,24(sp)
 4005a00:	dd400515 	stw	r21,20(sp)
 4005a04:	dcc00315 	stw	r19,12(sp)
 4005a08:	dc800215 	stw	r18,8(sp)
 4005a0c:	dc400115 	stw	r17,4(sp)
 4005a10:	dc000015 	stw	r16,0(sp)
 4005a14:	2500b804 	addi	r20,r4,736
 4005a18:	a0002326 	beq	r20,zero,4005aa8 <_fwalk+0xbc>
 4005a1c:	282b883a 	mov	r21,r5
 4005a20:	002f883a 	mov	r23,zero
 4005a24:	05800044 	movi	r22,1
 4005a28:	04ffffc4 	movi	r19,-1
 4005a2c:	a4400117 	ldw	r17,4(r20)
 4005a30:	a4800217 	ldw	r18,8(r20)
 4005a34:	8c7fffc4 	addi	r17,r17,-1
 4005a38:	88000d16 	blt	r17,zero,4005a70 <_fwalk+0x84>
 4005a3c:	94000304 	addi	r16,r18,12
 4005a40:	94800384 	addi	r18,r18,14
 4005a44:	8080000b 	ldhu	r2,0(r16)
 4005a48:	8c7fffc4 	addi	r17,r17,-1
 4005a4c:	813ffd04 	addi	r4,r16,-12
 4005a50:	b080042e 	bgeu	r22,r2,4005a64 <_fwalk+0x78>
 4005a54:	9080000f 	ldh	r2,0(r18)
 4005a58:	14c00226 	beq	r2,r19,4005a64 <_fwalk+0x78>
 4005a5c:	a83ee83a 	callr	r21
 4005a60:	b8aeb03a 	or	r23,r23,r2
 4005a64:	84001a04 	addi	r16,r16,104
 4005a68:	94801a04 	addi	r18,r18,104
 4005a6c:	8cfff51e 	bne	r17,r19,4005a44 <__ram_exceptions_end+0xfbf7d7a8>
 4005a70:	a5000017 	ldw	r20,0(r20)
 4005a74:	a03fed1e 	bne	r20,zero,4005a2c <__ram_exceptions_end+0xfbf7d790>
 4005a78:	b805883a 	mov	r2,r23
 4005a7c:	dfc00817 	ldw	ra,32(sp)
 4005a80:	ddc00717 	ldw	r23,28(sp)
 4005a84:	dd800617 	ldw	r22,24(sp)
 4005a88:	dd400517 	ldw	r21,20(sp)
 4005a8c:	dd000417 	ldw	r20,16(sp)
 4005a90:	dcc00317 	ldw	r19,12(sp)
 4005a94:	dc800217 	ldw	r18,8(sp)
 4005a98:	dc400117 	ldw	r17,4(sp)
 4005a9c:	dc000017 	ldw	r16,0(sp)
 4005aa0:	dec00904 	addi	sp,sp,36
 4005aa4:	f800283a 	ret
 4005aa8:	002f883a 	mov	r23,zero
 4005aac:	003ff206 	br	4005a78 <__ram_exceptions_end+0xfbf7d7dc>

04005ab0 <_fwalk_reent>:
 4005ab0:	defff704 	addi	sp,sp,-36
 4005ab4:	dd000415 	stw	r20,16(sp)
 4005ab8:	dfc00815 	stw	ra,32(sp)
 4005abc:	ddc00715 	stw	r23,28(sp)
 4005ac0:	dd800615 	stw	r22,24(sp)
 4005ac4:	dd400515 	stw	r21,20(sp)
 4005ac8:	dcc00315 	stw	r19,12(sp)
 4005acc:	dc800215 	stw	r18,8(sp)
 4005ad0:	dc400115 	stw	r17,4(sp)
 4005ad4:	dc000015 	stw	r16,0(sp)
 4005ad8:	2500b804 	addi	r20,r4,736
 4005adc:	a0002326 	beq	r20,zero,4005b6c <_fwalk_reent+0xbc>
 4005ae0:	282b883a 	mov	r21,r5
 4005ae4:	2027883a 	mov	r19,r4
 4005ae8:	002f883a 	mov	r23,zero
 4005aec:	05800044 	movi	r22,1
 4005af0:	04bfffc4 	movi	r18,-1
 4005af4:	a4400117 	ldw	r17,4(r20)
 4005af8:	a4000217 	ldw	r16,8(r20)
 4005afc:	8c7fffc4 	addi	r17,r17,-1
 4005b00:	88000c16 	blt	r17,zero,4005b34 <_fwalk_reent+0x84>
 4005b04:	84000304 	addi	r16,r16,12
 4005b08:	8080000b 	ldhu	r2,0(r16)
 4005b0c:	8c7fffc4 	addi	r17,r17,-1
 4005b10:	817ffd04 	addi	r5,r16,-12
 4005b14:	b080052e 	bgeu	r22,r2,4005b2c <_fwalk_reent+0x7c>
 4005b18:	8080008f 	ldh	r2,2(r16)
 4005b1c:	9809883a 	mov	r4,r19
 4005b20:	14800226 	beq	r2,r18,4005b2c <_fwalk_reent+0x7c>
 4005b24:	a83ee83a 	callr	r21
 4005b28:	b8aeb03a 	or	r23,r23,r2
 4005b2c:	84001a04 	addi	r16,r16,104
 4005b30:	8cbff51e 	bne	r17,r18,4005b08 <__ram_exceptions_end+0xfbf7d86c>
 4005b34:	a5000017 	ldw	r20,0(r20)
 4005b38:	a03fee1e 	bne	r20,zero,4005af4 <__ram_exceptions_end+0xfbf7d858>
 4005b3c:	b805883a 	mov	r2,r23
 4005b40:	dfc00817 	ldw	ra,32(sp)
 4005b44:	ddc00717 	ldw	r23,28(sp)
 4005b48:	dd800617 	ldw	r22,24(sp)
 4005b4c:	dd400517 	ldw	r21,20(sp)
 4005b50:	dd000417 	ldw	r20,16(sp)
 4005b54:	dcc00317 	ldw	r19,12(sp)
 4005b58:	dc800217 	ldw	r18,8(sp)
 4005b5c:	dc400117 	ldw	r17,4(sp)
 4005b60:	dc000017 	ldw	r16,0(sp)
 4005b64:	dec00904 	addi	sp,sp,36
 4005b68:	f800283a 	ret
 4005b6c:	002f883a 	mov	r23,zero
 4005b70:	003ff206 	br	4005b3c <__ram_exceptions_end+0xfbf7d8a0>

04005b74 <_setlocale_r>:
 4005b74:	30001b26 	beq	r6,zero,4005be4 <_setlocale_r+0x70>
 4005b78:	01410074 	movhi	r5,1025
 4005b7c:	defffe04 	addi	sp,sp,-8
 4005b80:	29563104 	addi	r5,r5,22724
 4005b84:	3009883a 	mov	r4,r6
 4005b88:	dc000015 	stw	r16,0(sp)
 4005b8c:	dfc00115 	stw	ra,4(sp)
 4005b90:	3021883a 	mov	r16,r6
 4005b94:	4007c280 	call	4007c28 <strcmp>
 4005b98:	1000061e 	bne	r2,zero,4005bb4 <_setlocale_r+0x40>
 4005b9c:	00810074 	movhi	r2,1025
 4005ba0:	10963004 	addi	r2,r2,22720
 4005ba4:	dfc00117 	ldw	ra,4(sp)
 4005ba8:	dc000017 	ldw	r16,0(sp)
 4005bac:	dec00204 	addi	sp,sp,8
 4005bb0:	f800283a 	ret
 4005bb4:	01410074 	movhi	r5,1025
 4005bb8:	29563004 	addi	r5,r5,22720
 4005bbc:	8009883a 	mov	r4,r16
 4005bc0:	4007c280 	call	4007c28 <strcmp>
 4005bc4:	103ff526 	beq	r2,zero,4005b9c <__ram_exceptions_end+0xfbf7d900>
 4005bc8:	01410074 	movhi	r5,1025
 4005bcc:	29561c04 	addi	r5,r5,22640
 4005bd0:	8009883a 	mov	r4,r16
 4005bd4:	4007c280 	call	4007c28 <strcmp>
 4005bd8:	103ff026 	beq	r2,zero,4005b9c <__ram_exceptions_end+0xfbf7d900>
 4005bdc:	0005883a 	mov	r2,zero
 4005be0:	003ff006 	br	4005ba4 <__ram_exceptions_end+0xfbf7d908>
 4005be4:	00810074 	movhi	r2,1025
 4005be8:	10963004 	addi	r2,r2,22720
 4005bec:	f800283a 	ret

04005bf0 <__locale_charset>:
 4005bf0:	00810074 	movhi	r2,1025
 4005bf4:	10991304 	addi	r2,r2,25676
 4005bf8:	f800283a 	ret

04005bfc <__locale_mb_cur_max>:
 4005bfc:	00810074 	movhi	r2,1025
 4005c00:	109b1904 	addi	r2,r2,27748
 4005c04:	10800017 	ldw	r2,0(r2)
 4005c08:	f800283a 	ret

04005c0c <__locale_msgcharset>:
 4005c0c:	00810074 	movhi	r2,1025
 4005c10:	10990b04 	addi	r2,r2,25644
 4005c14:	f800283a 	ret

04005c18 <__locale_cjk_lang>:
 4005c18:	0005883a 	mov	r2,zero
 4005c1c:	f800283a 	ret

04005c20 <_localeconv_r>:
 4005c20:	00810074 	movhi	r2,1025
 4005c24:	10991b04 	addi	r2,r2,25708
 4005c28:	f800283a 	ret

04005c2c <setlocale>:
 4005c2c:	00810074 	movhi	r2,1025
 4005c30:	109b1804 	addi	r2,r2,27744
 4005c34:	280d883a 	mov	r6,r5
 4005c38:	200b883a 	mov	r5,r4
 4005c3c:	11000017 	ldw	r4,0(r2)
 4005c40:	4005b741 	jmpi	4005b74 <_setlocale_r>

04005c44 <localeconv>:
 4005c44:	00810074 	movhi	r2,1025
 4005c48:	10991b04 	addi	r2,r2,25708
 4005c4c:	f800283a 	ret

04005c50 <__smakebuf_r>:
 4005c50:	2880030b 	ldhu	r2,12(r5)
 4005c54:	10c0008c 	andi	r3,r2,2
 4005c58:	1800411e 	bne	r3,zero,4005d60 <__smakebuf_r+0x110>
 4005c5c:	deffec04 	addi	sp,sp,-80
 4005c60:	dc000f15 	stw	r16,60(sp)
 4005c64:	2821883a 	mov	r16,r5
 4005c68:	2940038f 	ldh	r5,14(r5)
 4005c6c:	dc401015 	stw	r17,64(sp)
 4005c70:	dfc01315 	stw	ra,76(sp)
 4005c74:	dcc01215 	stw	r19,72(sp)
 4005c78:	dc801115 	stw	r18,68(sp)
 4005c7c:	2023883a 	mov	r17,r4
 4005c80:	28001c16 	blt	r5,zero,4005cf4 <__smakebuf_r+0xa4>
 4005c84:	d80d883a 	mov	r6,sp
 4005c88:	40099300 	call	4009930 <_fstat_r>
 4005c8c:	10001816 	blt	r2,zero,4005cf0 <__smakebuf_r+0xa0>
 4005c90:	d8800117 	ldw	r2,4(sp)
 4005c94:	00e00014 	movui	r3,32768
 4005c98:	10bc000c 	andi	r2,r2,61440
 4005c9c:	14c80020 	cmpeqi	r19,r2,8192
 4005ca0:	10c03726 	beq	r2,r3,4005d80 <__smakebuf_r+0x130>
 4005ca4:	80c0030b 	ldhu	r3,12(r16)
 4005ca8:	18c20014 	ori	r3,r3,2048
 4005cac:	80c0030d 	sth	r3,12(r16)
 4005cb0:	00c80004 	movi	r3,8192
 4005cb4:	10c0521e 	bne	r2,r3,4005e00 <__smakebuf_r+0x1b0>
 4005cb8:	8140038f 	ldh	r5,14(r16)
 4005cbc:	8809883a 	mov	r4,r17
 4005cc0:	4009e540 	call	4009e54 <_isatty_r>
 4005cc4:	10004c26 	beq	r2,zero,4005df8 <__smakebuf_r+0x1a8>
 4005cc8:	8080030b 	ldhu	r2,12(r16)
 4005ccc:	80c010c4 	addi	r3,r16,67
 4005cd0:	80c00015 	stw	r3,0(r16)
 4005cd4:	10800054 	ori	r2,r2,1
 4005cd8:	8080030d 	sth	r2,12(r16)
 4005cdc:	00800044 	movi	r2,1
 4005ce0:	80c00415 	stw	r3,16(r16)
 4005ce4:	80800515 	stw	r2,20(r16)
 4005ce8:	04810004 	movi	r18,1024
 4005cec:	00000706 	br	4005d0c <__smakebuf_r+0xbc>
 4005cf0:	8080030b 	ldhu	r2,12(r16)
 4005cf4:	10c0200c 	andi	r3,r2,128
 4005cf8:	18001f1e 	bne	r3,zero,4005d78 <__smakebuf_r+0x128>
 4005cfc:	04810004 	movi	r18,1024
 4005d00:	10820014 	ori	r2,r2,2048
 4005d04:	8080030d 	sth	r2,12(r16)
 4005d08:	0027883a 	mov	r19,zero
 4005d0c:	900b883a 	mov	r5,r18
 4005d10:	8809883a 	mov	r4,r17
 4005d14:	4005e0c0 	call	4005e0c <_malloc_r>
 4005d18:	10002c26 	beq	r2,zero,4005dcc <__smakebuf_r+0x17c>
 4005d1c:	80c0030b 	ldhu	r3,12(r16)
 4005d20:	01010034 	movhi	r4,1024
 4005d24:	21148404 	addi	r4,r4,21008
 4005d28:	89000f15 	stw	r4,60(r17)
 4005d2c:	18c02014 	ori	r3,r3,128
 4005d30:	80c0030d 	sth	r3,12(r16)
 4005d34:	80800015 	stw	r2,0(r16)
 4005d38:	80800415 	stw	r2,16(r16)
 4005d3c:	84800515 	stw	r18,20(r16)
 4005d40:	98001a1e 	bne	r19,zero,4005dac <__smakebuf_r+0x15c>
 4005d44:	dfc01317 	ldw	ra,76(sp)
 4005d48:	dcc01217 	ldw	r19,72(sp)
 4005d4c:	dc801117 	ldw	r18,68(sp)
 4005d50:	dc401017 	ldw	r17,64(sp)
 4005d54:	dc000f17 	ldw	r16,60(sp)
 4005d58:	dec01404 	addi	sp,sp,80
 4005d5c:	f800283a 	ret
 4005d60:	288010c4 	addi	r2,r5,67
 4005d64:	28800015 	stw	r2,0(r5)
 4005d68:	28800415 	stw	r2,16(r5)
 4005d6c:	00800044 	movi	r2,1
 4005d70:	28800515 	stw	r2,20(r5)
 4005d74:	f800283a 	ret
 4005d78:	04801004 	movi	r18,64
 4005d7c:	003fe006 	br	4005d00 <__ram_exceptions_end+0xfbf7da64>
 4005d80:	81000a17 	ldw	r4,40(r16)
 4005d84:	00c10034 	movhi	r3,1024
 4005d88:	18def104 	addi	r3,r3,31684
 4005d8c:	20ffc51e 	bne	r4,r3,4005ca4 <__ram_exceptions_end+0xfbf7da08>
 4005d90:	8080030b 	ldhu	r2,12(r16)
 4005d94:	04810004 	movi	r18,1024
 4005d98:	84801315 	stw	r18,76(r16)
 4005d9c:	1484b03a 	or	r2,r2,r18
 4005da0:	8080030d 	sth	r2,12(r16)
 4005da4:	0027883a 	mov	r19,zero
 4005da8:	003fd806 	br	4005d0c <__ram_exceptions_end+0xfbf7da70>
 4005dac:	8140038f 	ldh	r5,14(r16)
 4005db0:	8809883a 	mov	r4,r17
 4005db4:	4009e540 	call	4009e54 <_isatty_r>
 4005db8:	103fe226 	beq	r2,zero,4005d44 <__ram_exceptions_end+0xfbf7daa8>
 4005dbc:	8080030b 	ldhu	r2,12(r16)
 4005dc0:	10800054 	ori	r2,r2,1
 4005dc4:	8080030d 	sth	r2,12(r16)
 4005dc8:	003fde06 	br	4005d44 <__ram_exceptions_end+0xfbf7daa8>
 4005dcc:	8080030b 	ldhu	r2,12(r16)
 4005dd0:	10c0800c 	andi	r3,r2,512
 4005dd4:	183fdb1e 	bne	r3,zero,4005d44 <__ram_exceptions_end+0xfbf7daa8>
 4005dd8:	10800094 	ori	r2,r2,2
 4005ddc:	80c010c4 	addi	r3,r16,67
 4005de0:	8080030d 	sth	r2,12(r16)
 4005de4:	00800044 	movi	r2,1
 4005de8:	80c00015 	stw	r3,0(r16)
 4005dec:	80c00415 	stw	r3,16(r16)
 4005df0:	80800515 	stw	r2,20(r16)
 4005df4:	003fd306 	br	4005d44 <__ram_exceptions_end+0xfbf7daa8>
 4005df8:	04810004 	movi	r18,1024
 4005dfc:	003fc306 	br	4005d0c <__ram_exceptions_end+0xfbf7da70>
 4005e00:	0027883a 	mov	r19,zero
 4005e04:	04810004 	movi	r18,1024
 4005e08:	003fc006 	br	4005d0c <__ram_exceptions_end+0xfbf7da70>

04005e0c <_malloc_r>:
 4005e0c:	defff504 	addi	sp,sp,-44
 4005e10:	dc800315 	stw	r18,12(sp)
 4005e14:	dfc00a15 	stw	ra,40(sp)
 4005e18:	df000915 	stw	fp,36(sp)
 4005e1c:	ddc00815 	stw	r23,32(sp)
 4005e20:	dd800715 	stw	r22,28(sp)
 4005e24:	dd400615 	stw	r21,24(sp)
 4005e28:	dd000515 	stw	r20,20(sp)
 4005e2c:	dcc00415 	stw	r19,16(sp)
 4005e30:	dc400215 	stw	r17,8(sp)
 4005e34:	dc000115 	stw	r16,4(sp)
 4005e38:	288002c4 	addi	r2,r5,11
 4005e3c:	00c00584 	movi	r3,22
 4005e40:	2025883a 	mov	r18,r4
 4005e44:	18807f2e 	bgeu	r3,r2,4006044 <_malloc_r+0x238>
 4005e48:	047ffe04 	movi	r17,-8
 4005e4c:	1462703a 	and	r17,r2,r17
 4005e50:	8800a316 	blt	r17,zero,40060e0 <_malloc_r+0x2d4>
 4005e54:	8940a236 	bltu	r17,r5,40060e0 <_malloc_r+0x2d4>
 4005e58:	400e3580 	call	400e358 <__malloc_lock>
 4005e5c:	00807dc4 	movi	r2,503
 4005e60:	1441e92e 	bgeu	r2,r17,4006608 <_malloc_r+0x7fc>
 4005e64:	8804d27a 	srli	r2,r17,9
 4005e68:	1000a126 	beq	r2,zero,40060f0 <_malloc_r+0x2e4>
 4005e6c:	00c00104 	movi	r3,4
 4005e70:	18811e36 	bltu	r3,r2,40062ec <_malloc_r+0x4e0>
 4005e74:	8804d1ba 	srli	r2,r17,6
 4005e78:	12000e44 	addi	r8,r2,57
 4005e7c:	11c00e04 	addi	r7,r2,56
 4005e80:	4209883a 	add	r4,r8,r8
 4005e84:	04c10074 	movhi	r19,1025
 4005e88:	2109883a 	add	r4,r4,r4
 4005e8c:	9cd92904 	addi	r19,r19,25764
 4005e90:	2109883a 	add	r4,r4,r4
 4005e94:	9909883a 	add	r4,r19,r4
 4005e98:	24000117 	ldw	r16,4(r4)
 4005e9c:	213ffe04 	addi	r4,r4,-8
 4005ea0:	24009726 	beq	r4,r16,4006100 <_malloc_r+0x2f4>
 4005ea4:	80800117 	ldw	r2,4(r16)
 4005ea8:	01bfff04 	movi	r6,-4
 4005eac:	014003c4 	movi	r5,15
 4005eb0:	1184703a 	and	r2,r2,r6
 4005eb4:	1447c83a 	sub	r3,r2,r17
 4005eb8:	28c00716 	blt	r5,r3,4005ed8 <_malloc_r+0xcc>
 4005ebc:	1800920e 	bge	r3,zero,4006108 <_malloc_r+0x2fc>
 4005ec0:	84000317 	ldw	r16,12(r16)
 4005ec4:	24008e26 	beq	r4,r16,4006100 <_malloc_r+0x2f4>
 4005ec8:	80800117 	ldw	r2,4(r16)
 4005ecc:	1184703a 	and	r2,r2,r6
 4005ed0:	1447c83a 	sub	r3,r2,r17
 4005ed4:	28fff90e 	bge	r5,r3,4005ebc <__ram_exceptions_end+0xfbf7dc20>
 4005ed8:	3809883a 	mov	r4,r7
 4005edc:	01810074 	movhi	r6,1025
 4005ee0:	9c000417 	ldw	r16,16(r19)
 4005ee4:	31992904 	addi	r6,r6,25764
 4005ee8:	32000204 	addi	r8,r6,8
 4005eec:	82013426 	beq	r16,r8,40063c0 <_malloc_r+0x5b4>
 4005ef0:	80c00117 	ldw	r3,4(r16)
 4005ef4:	00bfff04 	movi	r2,-4
 4005ef8:	188e703a 	and	r7,r3,r2
 4005efc:	3c45c83a 	sub	r2,r7,r17
 4005f00:	00c003c4 	movi	r3,15
 4005f04:	18811f16 	blt	r3,r2,4006384 <_malloc_r+0x578>
 4005f08:	32000515 	stw	r8,20(r6)
 4005f0c:	32000415 	stw	r8,16(r6)
 4005f10:	10007f0e 	bge	r2,zero,4006110 <_malloc_r+0x304>
 4005f14:	00807fc4 	movi	r2,511
 4005f18:	11c0fd36 	bltu	r2,r7,4006310 <_malloc_r+0x504>
 4005f1c:	3806d0fa 	srli	r3,r7,3
 4005f20:	01c00044 	movi	r7,1
 4005f24:	30800117 	ldw	r2,4(r6)
 4005f28:	19400044 	addi	r5,r3,1
 4005f2c:	294b883a 	add	r5,r5,r5
 4005f30:	1807d0ba 	srai	r3,r3,2
 4005f34:	294b883a 	add	r5,r5,r5
 4005f38:	294b883a 	add	r5,r5,r5
 4005f3c:	298b883a 	add	r5,r5,r6
 4005f40:	38c6983a 	sll	r3,r7,r3
 4005f44:	29c00017 	ldw	r7,0(r5)
 4005f48:	2a7ffe04 	addi	r9,r5,-8
 4005f4c:	1886b03a 	or	r3,r3,r2
 4005f50:	82400315 	stw	r9,12(r16)
 4005f54:	81c00215 	stw	r7,8(r16)
 4005f58:	30c00115 	stw	r3,4(r6)
 4005f5c:	2c000015 	stw	r16,0(r5)
 4005f60:	3c000315 	stw	r16,12(r7)
 4005f64:	2005d0ba 	srai	r2,r4,2
 4005f68:	01400044 	movi	r5,1
 4005f6c:	288a983a 	sll	r5,r5,r2
 4005f70:	19406f36 	bltu	r3,r5,4006130 <_malloc_r+0x324>
 4005f74:	28c4703a 	and	r2,r5,r3
 4005f78:	10000a1e 	bne	r2,zero,4005fa4 <_malloc_r+0x198>
 4005f7c:	00bfff04 	movi	r2,-4
 4005f80:	294b883a 	add	r5,r5,r5
 4005f84:	2088703a 	and	r4,r4,r2
 4005f88:	28c4703a 	and	r2,r5,r3
 4005f8c:	21000104 	addi	r4,r4,4
 4005f90:	1000041e 	bne	r2,zero,4005fa4 <_malloc_r+0x198>
 4005f94:	294b883a 	add	r5,r5,r5
 4005f98:	28c4703a 	and	r2,r5,r3
 4005f9c:	21000104 	addi	r4,r4,4
 4005fa0:	103ffc26 	beq	r2,zero,4005f94 <__ram_exceptions_end+0xfbf7dcf8>
 4005fa4:	02bfff04 	movi	r10,-4
 4005fa8:	024003c4 	movi	r9,15
 4005fac:	21800044 	addi	r6,r4,1
 4005fb0:	318d883a 	add	r6,r6,r6
 4005fb4:	318d883a 	add	r6,r6,r6
 4005fb8:	318d883a 	add	r6,r6,r6
 4005fbc:	998d883a 	add	r6,r19,r6
 4005fc0:	333ffe04 	addi	r12,r6,-8
 4005fc4:	2017883a 	mov	r11,r4
 4005fc8:	31800104 	addi	r6,r6,4
 4005fcc:	34000017 	ldw	r16,0(r6)
 4005fd0:	31fffd04 	addi	r7,r6,-12
 4005fd4:	81c0041e 	bne	r16,r7,4005fe8 <_malloc_r+0x1dc>
 4005fd8:	0000fb06 	br	40063c8 <_malloc_r+0x5bc>
 4005fdc:	1801030e 	bge	r3,zero,40063ec <_malloc_r+0x5e0>
 4005fe0:	84000317 	ldw	r16,12(r16)
 4005fe4:	81c0f826 	beq	r16,r7,40063c8 <_malloc_r+0x5bc>
 4005fe8:	80800117 	ldw	r2,4(r16)
 4005fec:	1284703a 	and	r2,r2,r10
 4005ff0:	1447c83a 	sub	r3,r2,r17
 4005ff4:	48fff90e 	bge	r9,r3,4005fdc <__ram_exceptions_end+0xfbf7dd40>
 4005ff8:	80800317 	ldw	r2,12(r16)
 4005ffc:	81000217 	ldw	r4,8(r16)
 4006000:	89400054 	ori	r5,r17,1
 4006004:	81400115 	stw	r5,4(r16)
 4006008:	20800315 	stw	r2,12(r4)
 400600c:	11000215 	stw	r4,8(r2)
 4006010:	8463883a 	add	r17,r16,r17
 4006014:	9c400515 	stw	r17,20(r19)
 4006018:	9c400415 	stw	r17,16(r19)
 400601c:	18800054 	ori	r2,r3,1
 4006020:	88800115 	stw	r2,4(r17)
 4006024:	8a000315 	stw	r8,12(r17)
 4006028:	8a000215 	stw	r8,8(r17)
 400602c:	88e3883a 	add	r17,r17,r3
 4006030:	88c00015 	stw	r3,0(r17)
 4006034:	9009883a 	mov	r4,r18
 4006038:	400e37c0 	call	400e37c <__malloc_unlock>
 400603c:	80800204 	addi	r2,r16,8
 4006040:	00001b06 	br	40060b0 <_malloc_r+0x2a4>
 4006044:	04400404 	movi	r17,16
 4006048:	89402536 	bltu	r17,r5,40060e0 <_malloc_r+0x2d4>
 400604c:	400e3580 	call	400e358 <__malloc_lock>
 4006050:	00800184 	movi	r2,6
 4006054:	01000084 	movi	r4,2
 4006058:	04c10074 	movhi	r19,1025
 400605c:	1085883a 	add	r2,r2,r2
 4006060:	9cd92904 	addi	r19,r19,25764
 4006064:	1085883a 	add	r2,r2,r2
 4006068:	9885883a 	add	r2,r19,r2
 400606c:	14000117 	ldw	r16,4(r2)
 4006070:	10fffe04 	addi	r3,r2,-8
 4006074:	80c0d926 	beq	r16,r3,40063dc <_malloc_r+0x5d0>
 4006078:	80c00117 	ldw	r3,4(r16)
 400607c:	81000317 	ldw	r4,12(r16)
 4006080:	00bfff04 	movi	r2,-4
 4006084:	1884703a 	and	r2,r3,r2
 4006088:	81400217 	ldw	r5,8(r16)
 400608c:	8085883a 	add	r2,r16,r2
 4006090:	10c00117 	ldw	r3,4(r2)
 4006094:	29000315 	stw	r4,12(r5)
 4006098:	21400215 	stw	r5,8(r4)
 400609c:	18c00054 	ori	r3,r3,1
 40060a0:	10c00115 	stw	r3,4(r2)
 40060a4:	9009883a 	mov	r4,r18
 40060a8:	400e37c0 	call	400e37c <__malloc_unlock>
 40060ac:	80800204 	addi	r2,r16,8
 40060b0:	dfc00a17 	ldw	ra,40(sp)
 40060b4:	df000917 	ldw	fp,36(sp)
 40060b8:	ddc00817 	ldw	r23,32(sp)
 40060bc:	dd800717 	ldw	r22,28(sp)
 40060c0:	dd400617 	ldw	r21,24(sp)
 40060c4:	dd000517 	ldw	r20,20(sp)
 40060c8:	dcc00417 	ldw	r19,16(sp)
 40060cc:	dc800317 	ldw	r18,12(sp)
 40060d0:	dc400217 	ldw	r17,8(sp)
 40060d4:	dc000117 	ldw	r16,4(sp)
 40060d8:	dec00b04 	addi	sp,sp,44
 40060dc:	f800283a 	ret
 40060e0:	00800304 	movi	r2,12
 40060e4:	90800015 	stw	r2,0(r18)
 40060e8:	0005883a 	mov	r2,zero
 40060ec:	003ff006 	br	40060b0 <__ram_exceptions_end+0xfbf7de14>
 40060f0:	01002004 	movi	r4,128
 40060f4:	02001004 	movi	r8,64
 40060f8:	01c00fc4 	movi	r7,63
 40060fc:	003f6106 	br	4005e84 <__ram_exceptions_end+0xfbf7dbe8>
 4006100:	4009883a 	mov	r4,r8
 4006104:	003f7506 	br	4005edc <__ram_exceptions_end+0xfbf7dc40>
 4006108:	81000317 	ldw	r4,12(r16)
 400610c:	003fde06 	br	4006088 <__ram_exceptions_end+0xfbf7ddec>
 4006110:	81c5883a 	add	r2,r16,r7
 4006114:	11400117 	ldw	r5,4(r2)
 4006118:	9009883a 	mov	r4,r18
 400611c:	29400054 	ori	r5,r5,1
 4006120:	11400115 	stw	r5,4(r2)
 4006124:	400e37c0 	call	400e37c <__malloc_unlock>
 4006128:	80800204 	addi	r2,r16,8
 400612c:	003fe006 	br	40060b0 <__ram_exceptions_end+0xfbf7de14>
 4006130:	9c000217 	ldw	r16,8(r19)
 4006134:	00bfff04 	movi	r2,-4
 4006138:	85800117 	ldw	r22,4(r16)
 400613c:	b0ac703a 	and	r22,r22,r2
 4006140:	b4400336 	bltu	r22,r17,4006150 <_malloc_r+0x344>
 4006144:	b445c83a 	sub	r2,r22,r17
 4006148:	00c003c4 	movi	r3,15
 400614c:	18805d16 	blt	r3,r2,40062c4 <_malloc_r+0x4b8>
 4006150:	05c10074 	movhi	r23,1025
 4006154:	00810074 	movhi	r2,1025
 4006158:	109e5b04 	addi	r2,r2,31084
 400615c:	bddb1a04 	addi	r23,r23,27752
 4006160:	15400017 	ldw	r21,0(r2)
 4006164:	b8c00017 	ldw	r3,0(r23)
 4006168:	00bfffc4 	movi	r2,-1
 400616c:	858d883a 	add	r6,r16,r22
 4006170:	8d6b883a 	add	r21,r17,r21
 4006174:	1880ea26 	beq	r3,r2,4006520 <_malloc_r+0x714>
 4006178:	ad4403c4 	addi	r21,r21,4111
 400617c:	00bc0004 	movi	r2,-4096
 4006180:	a8aa703a 	and	r21,r21,r2
 4006184:	a80b883a 	mov	r5,r21
 4006188:	9009883a 	mov	r4,r18
 400618c:	d9800015 	stw	r6,0(sp)
 4006190:	4007a980 	call	4007a98 <_sbrk_r>
 4006194:	1029883a 	mov	r20,r2
 4006198:	00bfffc4 	movi	r2,-1
 400619c:	d9800017 	ldw	r6,0(sp)
 40061a0:	a080e826 	beq	r20,r2,4006544 <_malloc_r+0x738>
 40061a4:	a180a636 	bltu	r20,r6,4006440 <_malloc_r+0x634>
 40061a8:	07010074 	movhi	fp,1025
 40061ac:	e71e6a04 	addi	fp,fp,31144
 40061b0:	e0800017 	ldw	r2,0(fp)
 40061b4:	a887883a 	add	r3,r21,r2
 40061b8:	e0c00015 	stw	r3,0(fp)
 40061bc:	3500e626 	beq	r6,r20,4006558 <_malloc_r+0x74c>
 40061c0:	b9000017 	ldw	r4,0(r23)
 40061c4:	00bfffc4 	movi	r2,-1
 40061c8:	2080ee26 	beq	r4,r2,4006584 <_malloc_r+0x778>
 40061cc:	a185c83a 	sub	r2,r20,r6
 40061d0:	10c5883a 	add	r2,r2,r3
 40061d4:	e0800015 	stw	r2,0(fp)
 40061d8:	a0c001cc 	andi	r3,r20,7
 40061dc:	1800bc26 	beq	r3,zero,40064d0 <_malloc_r+0x6c4>
 40061e0:	a0e9c83a 	sub	r20,r20,r3
 40061e4:	00840204 	movi	r2,4104
 40061e8:	a5000204 	addi	r20,r20,8
 40061ec:	10c7c83a 	sub	r3,r2,r3
 40061f0:	a545883a 	add	r2,r20,r21
 40061f4:	1083ffcc 	andi	r2,r2,4095
 40061f8:	18abc83a 	sub	r21,r3,r2
 40061fc:	a80b883a 	mov	r5,r21
 4006200:	9009883a 	mov	r4,r18
 4006204:	4007a980 	call	4007a98 <_sbrk_r>
 4006208:	00ffffc4 	movi	r3,-1
 400620c:	10c0e126 	beq	r2,r3,4006594 <_malloc_r+0x788>
 4006210:	1505c83a 	sub	r2,r2,r20
 4006214:	1545883a 	add	r2,r2,r21
 4006218:	10800054 	ori	r2,r2,1
 400621c:	e0c00017 	ldw	r3,0(fp)
 4006220:	9d000215 	stw	r20,8(r19)
 4006224:	a0800115 	stw	r2,4(r20)
 4006228:	a8c7883a 	add	r3,r21,r3
 400622c:	e0c00015 	stw	r3,0(fp)
 4006230:	84c00e26 	beq	r16,r19,400626c <_malloc_r+0x460>
 4006234:	018003c4 	movi	r6,15
 4006238:	3580a72e 	bgeu	r6,r22,40064d8 <_malloc_r+0x6cc>
 400623c:	81400117 	ldw	r5,4(r16)
 4006240:	013ffe04 	movi	r4,-8
 4006244:	b0bffd04 	addi	r2,r22,-12
 4006248:	1104703a 	and	r2,r2,r4
 400624c:	2900004c 	andi	r4,r5,1
 4006250:	2088b03a 	or	r4,r4,r2
 4006254:	81000115 	stw	r4,4(r16)
 4006258:	01400144 	movi	r5,5
 400625c:	8089883a 	add	r4,r16,r2
 4006260:	21400115 	stw	r5,4(r4)
 4006264:	21400215 	stw	r5,8(r4)
 4006268:	3080cd36 	bltu	r6,r2,40065a0 <_malloc_r+0x794>
 400626c:	00810074 	movhi	r2,1025
 4006270:	109e5a04 	addi	r2,r2,31080
 4006274:	11000017 	ldw	r4,0(r2)
 4006278:	20c0012e 	bgeu	r4,r3,4006280 <_malloc_r+0x474>
 400627c:	10c00015 	stw	r3,0(r2)
 4006280:	00810074 	movhi	r2,1025
 4006284:	109e5904 	addi	r2,r2,31076
 4006288:	11000017 	ldw	r4,0(r2)
 400628c:	9c000217 	ldw	r16,8(r19)
 4006290:	20c0012e 	bgeu	r4,r3,4006298 <_malloc_r+0x48c>
 4006294:	10c00015 	stw	r3,0(r2)
 4006298:	80c00117 	ldw	r3,4(r16)
 400629c:	00bfff04 	movi	r2,-4
 40062a0:	1886703a 	and	r3,r3,r2
 40062a4:	1c45c83a 	sub	r2,r3,r17
 40062a8:	1c400236 	bltu	r3,r17,40062b4 <_malloc_r+0x4a8>
 40062ac:	00c003c4 	movi	r3,15
 40062b0:	18800416 	blt	r3,r2,40062c4 <_malloc_r+0x4b8>
 40062b4:	9009883a 	mov	r4,r18
 40062b8:	400e37c0 	call	400e37c <__malloc_unlock>
 40062bc:	0005883a 	mov	r2,zero
 40062c0:	003f7b06 	br	40060b0 <__ram_exceptions_end+0xfbf7de14>
 40062c4:	88c00054 	ori	r3,r17,1
 40062c8:	80c00115 	stw	r3,4(r16)
 40062cc:	8463883a 	add	r17,r16,r17
 40062d0:	10800054 	ori	r2,r2,1
 40062d4:	9c400215 	stw	r17,8(r19)
 40062d8:	88800115 	stw	r2,4(r17)
 40062dc:	9009883a 	mov	r4,r18
 40062e0:	400e37c0 	call	400e37c <__malloc_unlock>
 40062e4:	80800204 	addi	r2,r16,8
 40062e8:	003f7106 	br	40060b0 <__ram_exceptions_end+0xfbf7de14>
 40062ec:	00c00504 	movi	r3,20
 40062f0:	18804a2e 	bgeu	r3,r2,400641c <_malloc_r+0x610>
 40062f4:	00c01504 	movi	r3,84
 40062f8:	18806e36 	bltu	r3,r2,40064b4 <_malloc_r+0x6a8>
 40062fc:	8804d33a 	srli	r2,r17,12
 4006300:	12001bc4 	addi	r8,r2,111
 4006304:	11c01b84 	addi	r7,r2,110
 4006308:	4209883a 	add	r4,r8,r8
 400630c:	003edd06 	br	4005e84 <__ram_exceptions_end+0xfbf7dbe8>
 4006310:	3804d27a 	srli	r2,r7,9
 4006314:	00c00104 	movi	r3,4
 4006318:	1880442e 	bgeu	r3,r2,400642c <_malloc_r+0x620>
 400631c:	00c00504 	movi	r3,20
 4006320:	18808136 	bltu	r3,r2,4006528 <_malloc_r+0x71c>
 4006324:	11401704 	addi	r5,r2,92
 4006328:	10c016c4 	addi	r3,r2,91
 400632c:	294b883a 	add	r5,r5,r5
 4006330:	294b883a 	add	r5,r5,r5
 4006334:	294b883a 	add	r5,r5,r5
 4006338:	994b883a 	add	r5,r19,r5
 400633c:	28800017 	ldw	r2,0(r5)
 4006340:	01810074 	movhi	r6,1025
 4006344:	297ffe04 	addi	r5,r5,-8
 4006348:	31992904 	addi	r6,r6,25764
 400634c:	28806526 	beq	r5,r2,40064e4 <_malloc_r+0x6d8>
 4006350:	01bfff04 	movi	r6,-4
 4006354:	10c00117 	ldw	r3,4(r2)
 4006358:	1986703a 	and	r3,r3,r6
 400635c:	38c0022e 	bgeu	r7,r3,4006368 <_malloc_r+0x55c>
 4006360:	10800217 	ldw	r2,8(r2)
 4006364:	28bffb1e 	bne	r5,r2,4006354 <__ram_exceptions_end+0xfbf7e0b8>
 4006368:	11400317 	ldw	r5,12(r2)
 400636c:	98c00117 	ldw	r3,4(r19)
 4006370:	81400315 	stw	r5,12(r16)
 4006374:	80800215 	stw	r2,8(r16)
 4006378:	2c000215 	stw	r16,8(r5)
 400637c:	14000315 	stw	r16,12(r2)
 4006380:	003ef806 	br	4005f64 <__ram_exceptions_end+0xfbf7dcc8>
 4006384:	88c00054 	ori	r3,r17,1
 4006388:	80c00115 	stw	r3,4(r16)
 400638c:	8463883a 	add	r17,r16,r17
 4006390:	34400515 	stw	r17,20(r6)
 4006394:	34400415 	stw	r17,16(r6)
 4006398:	10c00054 	ori	r3,r2,1
 400639c:	8a000315 	stw	r8,12(r17)
 40063a0:	8a000215 	stw	r8,8(r17)
 40063a4:	88c00115 	stw	r3,4(r17)
 40063a8:	88a3883a 	add	r17,r17,r2
 40063ac:	88800015 	stw	r2,0(r17)
 40063b0:	9009883a 	mov	r4,r18
 40063b4:	400e37c0 	call	400e37c <__malloc_unlock>
 40063b8:	80800204 	addi	r2,r16,8
 40063bc:	003f3c06 	br	40060b0 <__ram_exceptions_end+0xfbf7de14>
 40063c0:	30c00117 	ldw	r3,4(r6)
 40063c4:	003ee706 	br	4005f64 <__ram_exceptions_end+0xfbf7dcc8>
 40063c8:	5ac00044 	addi	r11,r11,1
 40063cc:	588000cc 	andi	r2,r11,3
 40063d0:	31800204 	addi	r6,r6,8
 40063d4:	103efd1e 	bne	r2,zero,4005fcc <__ram_exceptions_end+0xfbf7dd30>
 40063d8:	00002406 	br	400646c <_malloc_r+0x660>
 40063dc:	14000317 	ldw	r16,12(r2)
 40063e0:	143f251e 	bne	r2,r16,4006078 <__ram_exceptions_end+0xfbf7dddc>
 40063e4:	21000084 	addi	r4,r4,2
 40063e8:	003ebc06 	br	4005edc <__ram_exceptions_end+0xfbf7dc40>
 40063ec:	8085883a 	add	r2,r16,r2
 40063f0:	10c00117 	ldw	r3,4(r2)
 40063f4:	81000317 	ldw	r4,12(r16)
 40063f8:	81400217 	ldw	r5,8(r16)
 40063fc:	18c00054 	ori	r3,r3,1
 4006400:	10c00115 	stw	r3,4(r2)
 4006404:	29000315 	stw	r4,12(r5)
 4006408:	21400215 	stw	r5,8(r4)
 400640c:	9009883a 	mov	r4,r18
 4006410:	400e37c0 	call	400e37c <__malloc_unlock>
 4006414:	80800204 	addi	r2,r16,8
 4006418:	003f2506 	br	40060b0 <__ram_exceptions_end+0xfbf7de14>
 400641c:	12001704 	addi	r8,r2,92
 4006420:	11c016c4 	addi	r7,r2,91
 4006424:	4209883a 	add	r4,r8,r8
 4006428:	003e9606 	br	4005e84 <__ram_exceptions_end+0xfbf7dbe8>
 400642c:	3804d1ba 	srli	r2,r7,6
 4006430:	11400e44 	addi	r5,r2,57
 4006434:	10c00e04 	addi	r3,r2,56
 4006438:	294b883a 	add	r5,r5,r5
 400643c:	003fbc06 	br	4006330 <__ram_exceptions_end+0xfbf7e094>
 4006440:	84ff5926 	beq	r16,r19,40061a8 <__ram_exceptions_end+0xfbf7df0c>
 4006444:	00810074 	movhi	r2,1025
 4006448:	10992904 	addi	r2,r2,25764
 400644c:	14000217 	ldw	r16,8(r2)
 4006450:	00bfff04 	movi	r2,-4
 4006454:	80c00117 	ldw	r3,4(r16)
 4006458:	1886703a 	and	r3,r3,r2
 400645c:	003f9106 	br	40062a4 <__ram_exceptions_end+0xfbf7e008>
 4006460:	60800217 	ldw	r2,8(r12)
 4006464:	213fffc4 	addi	r4,r4,-1
 4006468:	1300651e 	bne	r2,r12,4006600 <_malloc_r+0x7f4>
 400646c:	208000cc 	andi	r2,r4,3
 4006470:	633ffe04 	addi	r12,r12,-8
 4006474:	103ffa1e 	bne	r2,zero,4006460 <__ram_exceptions_end+0xfbf7e1c4>
 4006478:	98800117 	ldw	r2,4(r19)
 400647c:	0146303a 	nor	r3,zero,r5
 4006480:	1884703a 	and	r2,r3,r2
 4006484:	98800115 	stw	r2,4(r19)
 4006488:	294b883a 	add	r5,r5,r5
 400648c:	117f2836 	bltu	r2,r5,4006130 <__ram_exceptions_end+0xfbf7de94>
 4006490:	283f2726 	beq	r5,zero,4006130 <__ram_exceptions_end+0xfbf7de94>
 4006494:	2886703a 	and	r3,r5,r2
 4006498:	5809883a 	mov	r4,r11
 400649c:	183ec31e 	bne	r3,zero,4005fac <__ram_exceptions_end+0xfbf7dd10>
 40064a0:	294b883a 	add	r5,r5,r5
 40064a4:	2886703a 	and	r3,r5,r2
 40064a8:	21000104 	addi	r4,r4,4
 40064ac:	183ffc26 	beq	r3,zero,40064a0 <__ram_exceptions_end+0xfbf7e204>
 40064b0:	003ebe06 	br	4005fac <__ram_exceptions_end+0xfbf7dd10>
 40064b4:	00c05504 	movi	r3,340
 40064b8:	18801236 	bltu	r3,r2,4006504 <_malloc_r+0x6f8>
 40064bc:	8804d3fa 	srli	r2,r17,15
 40064c0:	12001e04 	addi	r8,r2,120
 40064c4:	11c01dc4 	addi	r7,r2,119
 40064c8:	4209883a 	add	r4,r8,r8
 40064cc:	003e6d06 	br	4005e84 <__ram_exceptions_end+0xfbf7dbe8>
 40064d0:	00c40004 	movi	r3,4096
 40064d4:	003f4606 	br	40061f0 <__ram_exceptions_end+0xfbf7df54>
 40064d8:	00800044 	movi	r2,1
 40064dc:	a0800115 	stw	r2,4(r20)
 40064e0:	003f7406 	br	40062b4 <__ram_exceptions_end+0xfbf7e018>
 40064e4:	1805d0ba 	srai	r2,r3,2
 40064e8:	01c00044 	movi	r7,1
 40064ec:	30c00117 	ldw	r3,4(r6)
 40064f0:	388e983a 	sll	r7,r7,r2
 40064f4:	2805883a 	mov	r2,r5
 40064f8:	38c6b03a 	or	r3,r7,r3
 40064fc:	30c00115 	stw	r3,4(r6)
 4006500:	003f9b06 	br	4006370 <__ram_exceptions_end+0xfbf7e0d4>
 4006504:	00c15504 	movi	r3,1364
 4006508:	18801a36 	bltu	r3,r2,4006574 <_malloc_r+0x768>
 400650c:	8804d4ba 	srli	r2,r17,18
 4006510:	12001f44 	addi	r8,r2,125
 4006514:	11c01f04 	addi	r7,r2,124
 4006518:	4209883a 	add	r4,r8,r8
 400651c:	003e5906 	br	4005e84 <__ram_exceptions_end+0xfbf7dbe8>
 4006520:	ad400404 	addi	r21,r21,16
 4006524:	003f1706 	br	4006184 <__ram_exceptions_end+0xfbf7dee8>
 4006528:	00c01504 	movi	r3,84
 400652c:	18802336 	bltu	r3,r2,40065bc <_malloc_r+0x7b0>
 4006530:	3804d33a 	srli	r2,r7,12
 4006534:	11401bc4 	addi	r5,r2,111
 4006538:	10c01b84 	addi	r3,r2,110
 400653c:	294b883a 	add	r5,r5,r5
 4006540:	003f7b06 	br	4006330 <__ram_exceptions_end+0xfbf7e094>
 4006544:	9c000217 	ldw	r16,8(r19)
 4006548:	00bfff04 	movi	r2,-4
 400654c:	80c00117 	ldw	r3,4(r16)
 4006550:	1886703a 	and	r3,r3,r2
 4006554:	003f5306 	br	40062a4 <__ram_exceptions_end+0xfbf7e008>
 4006558:	3083ffcc 	andi	r2,r6,4095
 400655c:	103f181e 	bne	r2,zero,40061c0 <__ram_exceptions_end+0xfbf7df24>
 4006560:	99000217 	ldw	r4,8(r19)
 4006564:	b545883a 	add	r2,r22,r21
 4006568:	10800054 	ori	r2,r2,1
 400656c:	20800115 	stw	r2,4(r4)
 4006570:	003f3e06 	br	400626c <__ram_exceptions_end+0xfbf7dfd0>
 4006574:	01003f84 	movi	r4,254
 4006578:	02001fc4 	movi	r8,127
 400657c:	01c01f84 	movi	r7,126
 4006580:	003e4006 	br	4005e84 <__ram_exceptions_end+0xfbf7dbe8>
 4006584:	00810074 	movhi	r2,1025
 4006588:	109b1a04 	addi	r2,r2,27752
 400658c:	15000015 	stw	r20,0(r2)
 4006590:	003f1106 	br	40061d8 <__ram_exceptions_end+0xfbf7df3c>
 4006594:	00800044 	movi	r2,1
 4006598:	002b883a 	mov	r21,zero
 400659c:	003f1f06 	br	400621c <__ram_exceptions_end+0xfbf7df80>
 40065a0:	81400204 	addi	r5,r16,8
 40065a4:	9009883a 	mov	r4,r18
 40065a8:	40056dc0 	call	40056dc <_free_r>
 40065ac:	00810074 	movhi	r2,1025
 40065b0:	109e6a04 	addi	r2,r2,31144
 40065b4:	10c00017 	ldw	r3,0(r2)
 40065b8:	003f2c06 	br	400626c <__ram_exceptions_end+0xfbf7dfd0>
 40065bc:	00c05504 	movi	r3,340
 40065c0:	18800536 	bltu	r3,r2,40065d8 <_malloc_r+0x7cc>
 40065c4:	3804d3fa 	srli	r2,r7,15
 40065c8:	11401e04 	addi	r5,r2,120
 40065cc:	10c01dc4 	addi	r3,r2,119
 40065d0:	294b883a 	add	r5,r5,r5
 40065d4:	003f5606 	br	4006330 <__ram_exceptions_end+0xfbf7e094>
 40065d8:	00c15504 	movi	r3,1364
 40065dc:	18800536 	bltu	r3,r2,40065f4 <_malloc_r+0x7e8>
 40065e0:	3804d4ba 	srli	r2,r7,18
 40065e4:	11401f44 	addi	r5,r2,125
 40065e8:	10c01f04 	addi	r3,r2,124
 40065ec:	294b883a 	add	r5,r5,r5
 40065f0:	003f4f06 	br	4006330 <__ram_exceptions_end+0xfbf7e094>
 40065f4:	01403f84 	movi	r5,254
 40065f8:	00c01f84 	movi	r3,126
 40065fc:	003f4c06 	br	4006330 <__ram_exceptions_end+0xfbf7e094>
 4006600:	98800117 	ldw	r2,4(r19)
 4006604:	003fa006 	br	4006488 <__ram_exceptions_end+0xfbf7e1ec>
 4006608:	8808d0fa 	srli	r4,r17,3
 400660c:	20800044 	addi	r2,r4,1
 4006610:	1085883a 	add	r2,r2,r2
 4006614:	003e9006 	br	4006058 <__ram_exceptions_end+0xfbf7ddbc>

04006618 <memchr>:
 4006618:	208000cc 	andi	r2,r4,3
 400661c:	280f883a 	mov	r7,r5
 4006620:	10003426 	beq	r2,zero,40066f4 <memchr+0xdc>
 4006624:	30bfffc4 	addi	r2,r6,-1
 4006628:	30001a26 	beq	r6,zero,4006694 <memchr+0x7c>
 400662c:	20c00003 	ldbu	r3,0(r4)
 4006630:	29803fcc 	andi	r6,r5,255
 4006634:	30c0051e 	bne	r6,r3,400664c <memchr+0x34>
 4006638:	00001806 	br	400669c <memchr+0x84>
 400663c:	10001526 	beq	r2,zero,4006694 <memchr+0x7c>
 4006640:	20c00003 	ldbu	r3,0(r4)
 4006644:	10bfffc4 	addi	r2,r2,-1
 4006648:	30c01426 	beq	r6,r3,400669c <memchr+0x84>
 400664c:	21000044 	addi	r4,r4,1
 4006650:	20c000cc 	andi	r3,r4,3
 4006654:	183ff91e 	bne	r3,zero,400663c <__ram_exceptions_end+0xfbf7e3a0>
 4006658:	020000c4 	movi	r8,3
 400665c:	40801136 	bltu	r8,r2,40066a4 <memchr+0x8c>
 4006660:	10000c26 	beq	r2,zero,4006694 <memchr+0x7c>
 4006664:	20c00003 	ldbu	r3,0(r4)
 4006668:	29403fcc 	andi	r5,r5,255
 400666c:	28c00b26 	beq	r5,r3,400669c <memchr+0x84>
 4006670:	20c00044 	addi	r3,r4,1
 4006674:	39803fcc 	andi	r6,r7,255
 4006678:	2089883a 	add	r4,r4,r2
 400667c:	00000306 	br	400668c <memchr+0x74>
 4006680:	18c00044 	addi	r3,r3,1
 4006684:	197fffc3 	ldbu	r5,-1(r3)
 4006688:	31400526 	beq	r6,r5,40066a0 <memchr+0x88>
 400668c:	1805883a 	mov	r2,r3
 4006690:	20fffb1e 	bne	r4,r3,4006680 <__ram_exceptions_end+0xfbf7e3e4>
 4006694:	0005883a 	mov	r2,zero
 4006698:	f800283a 	ret
 400669c:	2005883a 	mov	r2,r4
 40066a0:	f800283a 	ret
 40066a4:	28c03fcc 	andi	r3,r5,255
 40066a8:	1812923a 	slli	r9,r3,8
 40066ac:	02ffbff4 	movhi	r11,65279
 40066b0:	02a02074 	movhi	r10,32897
 40066b4:	48d2b03a 	or	r9,r9,r3
 40066b8:	4806943a 	slli	r3,r9,16
 40066bc:	5affbfc4 	addi	r11,r11,-257
 40066c0:	52a02004 	addi	r10,r10,-32640
 40066c4:	48d2b03a 	or	r9,r9,r3
 40066c8:	20c00017 	ldw	r3,0(r4)
 40066cc:	48c6f03a 	xor	r3,r9,r3
 40066d0:	1acd883a 	add	r6,r3,r11
 40066d4:	00c6303a 	nor	r3,zero,r3
 40066d8:	30c6703a 	and	r3,r6,r3
 40066dc:	1a86703a 	and	r3,r3,r10
 40066e0:	183fe01e 	bne	r3,zero,4006664 <__ram_exceptions_end+0xfbf7e3c8>
 40066e4:	10bfff04 	addi	r2,r2,-4
 40066e8:	21000104 	addi	r4,r4,4
 40066ec:	40bff636 	bltu	r8,r2,40066c8 <__ram_exceptions_end+0xfbf7e42c>
 40066f0:	003fdb06 	br	4006660 <__ram_exceptions_end+0xfbf7e3c4>
 40066f4:	3005883a 	mov	r2,r6
 40066f8:	003fd706 	br	4006658 <__ram_exceptions_end+0xfbf7e3bc>

040066fc <memcpy>:
 40066fc:	defffd04 	addi	sp,sp,-12
 4006700:	dfc00215 	stw	ra,8(sp)
 4006704:	dc400115 	stw	r17,4(sp)
 4006708:	dc000015 	stw	r16,0(sp)
 400670c:	00c003c4 	movi	r3,15
 4006710:	2005883a 	mov	r2,r4
 4006714:	1980452e 	bgeu	r3,r6,400682c <memcpy+0x130>
 4006718:	2906b03a 	or	r3,r5,r4
 400671c:	18c000cc 	andi	r3,r3,3
 4006720:	1800441e 	bne	r3,zero,4006834 <memcpy+0x138>
 4006724:	347ffc04 	addi	r17,r6,-16
 4006728:	8822d13a 	srli	r17,r17,4
 400672c:	28c00104 	addi	r3,r5,4
 4006730:	23400104 	addi	r13,r4,4
 4006734:	8820913a 	slli	r16,r17,4
 4006738:	2b000204 	addi	r12,r5,8
 400673c:	22c00204 	addi	r11,r4,8
 4006740:	84000504 	addi	r16,r16,20
 4006744:	2a800304 	addi	r10,r5,12
 4006748:	22400304 	addi	r9,r4,12
 400674c:	2c21883a 	add	r16,r5,r16
 4006750:	2811883a 	mov	r8,r5
 4006754:	200f883a 	mov	r7,r4
 4006758:	41000017 	ldw	r4,0(r8)
 400675c:	1fc00017 	ldw	ra,0(r3)
 4006760:	63c00017 	ldw	r15,0(r12)
 4006764:	39000015 	stw	r4,0(r7)
 4006768:	53800017 	ldw	r14,0(r10)
 400676c:	6fc00015 	stw	ra,0(r13)
 4006770:	5bc00015 	stw	r15,0(r11)
 4006774:	4b800015 	stw	r14,0(r9)
 4006778:	18c00404 	addi	r3,r3,16
 400677c:	39c00404 	addi	r7,r7,16
 4006780:	42000404 	addi	r8,r8,16
 4006784:	6b400404 	addi	r13,r13,16
 4006788:	63000404 	addi	r12,r12,16
 400678c:	5ac00404 	addi	r11,r11,16
 4006790:	52800404 	addi	r10,r10,16
 4006794:	4a400404 	addi	r9,r9,16
 4006798:	1c3fef1e 	bne	r3,r16,4006758 <__ram_exceptions_end+0xfbf7e4bc>
 400679c:	89c00044 	addi	r7,r17,1
 40067a0:	380e913a 	slli	r7,r7,4
 40067a4:	310003cc 	andi	r4,r6,15
 40067a8:	02c000c4 	movi	r11,3
 40067ac:	11c7883a 	add	r3,r2,r7
 40067b0:	29cb883a 	add	r5,r5,r7
 40067b4:	5900212e 	bgeu	r11,r4,400683c <memcpy+0x140>
 40067b8:	1813883a 	mov	r9,r3
 40067bc:	2811883a 	mov	r8,r5
 40067c0:	200f883a 	mov	r7,r4
 40067c4:	42800017 	ldw	r10,0(r8)
 40067c8:	4a400104 	addi	r9,r9,4
 40067cc:	39ffff04 	addi	r7,r7,-4
 40067d0:	4abfff15 	stw	r10,-4(r9)
 40067d4:	42000104 	addi	r8,r8,4
 40067d8:	59fffa36 	bltu	r11,r7,40067c4 <__ram_exceptions_end+0xfbf7e528>
 40067dc:	213fff04 	addi	r4,r4,-4
 40067e0:	2008d0ba 	srli	r4,r4,2
 40067e4:	318000cc 	andi	r6,r6,3
 40067e8:	21000044 	addi	r4,r4,1
 40067ec:	2109883a 	add	r4,r4,r4
 40067f0:	2109883a 	add	r4,r4,r4
 40067f4:	1907883a 	add	r3,r3,r4
 40067f8:	290b883a 	add	r5,r5,r4
 40067fc:	30000626 	beq	r6,zero,4006818 <memcpy+0x11c>
 4006800:	198d883a 	add	r6,r3,r6
 4006804:	29c00003 	ldbu	r7,0(r5)
 4006808:	18c00044 	addi	r3,r3,1
 400680c:	29400044 	addi	r5,r5,1
 4006810:	19ffffc5 	stb	r7,-1(r3)
 4006814:	19bffb1e 	bne	r3,r6,4006804 <__ram_exceptions_end+0xfbf7e568>
 4006818:	dfc00217 	ldw	ra,8(sp)
 400681c:	dc400117 	ldw	r17,4(sp)
 4006820:	dc000017 	ldw	r16,0(sp)
 4006824:	dec00304 	addi	sp,sp,12
 4006828:	f800283a 	ret
 400682c:	2007883a 	mov	r3,r4
 4006830:	003ff206 	br	40067fc <__ram_exceptions_end+0xfbf7e560>
 4006834:	2007883a 	mov	r3,r4
 4006838:	003ff106 	br	4006800 <__ram_exceptions_end+0xfbf7e564>
 400683c:	200d883a 	mov	r6,r4
 4006840:	003fee06 	br	40067fc <__ram_exceptions_end+0xfbf7e560>

04006844 <memset>:
 4006844:	20c000cc 	andi	r3,r4,3
 4006848:	2005883a 	mov	r2,r4
 400684c:	18004426 	beq	r3,zero,4006960 <memset+0x11c>
 4006850:	31ffffc4 	addi	r7,r6,-1
 4006854:	30004026 	beq	r6,zero,4006958 <memset+0x114>
 4006858:	2813883a 	mov	r9,r5
 400685c:	200d883a 	mov	r6,r4
 4006860:	2007883a 	mov	r3,r4
 4006864:	00000406 	br	4006878 <memset+0x34>
 4006868:	3a3fffc4 	addi	r8,r7,-1
 400686c:	31800044 	addi	r6,r6,1
 4006870:	38003926 	beq	r7,zero,4006958 <memset+0x114>
 4006874:	400f883a 	mov	r7,r8
 4006878:	18c00044 	addi	r3,r3,1
 400687c:	32400005 	stb	r9,0(r6)
 4006880:	1a0000cc 	andi	r8,r3,3
 4006884:	403ff81e 	bne	r8,zero,4006868 <__ram_exceptions_end+0xfbf7e5cc>
 4006888:	010000c4 	movi	r4,3
 400688c:	21c02d2e 	bgeu	r4,r7,4006944 <memset+0x100>
 4006890:	29003fcc 	andi	r4,r5,255
 4006894:	200c923a 	slli	r6,r4,8
 4006898:	3108b03a 	or	r4,r6,r4
 400689c:	200c943a 	slli	r6,r4,16
 40068a0:	218cb03a 	or	r6,r4,r6
 40068a4:	010003c4 	movi	r4,15
 40068a8:	21c0182e 	bgeu	r4,r7,400690c <memset+0xc8>
 40068ac:	3b3ffc04 	addi	r12,r7,-16
 40068b0:	6018d13a 	srli	r12,r12,4
 40068b4:	1a000104 	addi	r8,r3,4
 40068b8:	1ac00204 	addi	r11,r3,8
 40068bc:	6008913a 	slli	r4,r12,4
 40068c0:	1a800304 	addi	r10,r3,12
 40068c4:	1813883a 	mov	r9,r3
 40068c8:	21000504 	addi	r4,r4,20
 40068cc:	1909883a 	add	r4,r3,r4
 40068d0:	49800015 	stw	r6,0(r9)
 40068d4:	41800015 	stw	r6,0(r8)
 40068d8:	59800015 	stw	r6,0(r11)
 40068dc:	51800015 	stw	r6,0(r10)
 40068e0:	42000404 	addi	r8,r8,16
 40068e4:	4a400404 	addi	r9,r9,16
 40068e8:	5ac00404 	addi	r11,r11,16
 40068ec:	52800404 	addi	r10,r10,16
 40068f0:	413ff71e 	bne	r8,r4,40068d0 <__ram_exceptions_end+0xfbf7e634>
 40068f4:	63000044 	addi	r12,r12,1
 40068f8:	6018913a 	slli	r12,r12,4
 40068fc:	39c003cc 	andi	r7,r7,15
 4006900:	010000c4 	movi	r4,3
 4006904:	1b07883a 	add	r3,r3,r12
 4006908:	21c00e2e 	bgeu	r4,r7,4006944 <memset+0x100>
 400690c:	1813883a 	mov	r9,r3
 4006910:	3811883a 	mov	r8,r7
 4006914:	010000c4 	movi	r4,3
 4006918:	49800015 	stw	r6,0(r9)
 400691c:	423fff04 	addi	r8,r8,-4
 4006920:	4a400104 	addi	r9,r9,4
 4006924:	223ffc36 	bltu	r4,r8,4006918 <__ram_exceptions_end+0xfbf7e67c>
 4006928:	393fff04 	addi	r4,r7,-4
 400692c:	2008d0ba 	srli	r4,r4,2
 4006930:	39c000cc 	andi	r7,r7,3
 4006934:	21000044 	addi	r4,r4,1
 4006938:	2109883a 	add	r4,r4,r4
 400693c:	2109883a 	add	r4,r4,r4
 4006940:	1907883a 	add	r3,r3,r4
 4006944:	38000526 	beq	r7,zero,400695c <memset+0x118>
 4006948:	19cf883a 	add	r7,r3,r7
 400694c:	19400005 	stb	r5,0(r3)
 4006950:	18c00044 	addi	r3,r3,1
 4006954:	38fffd1e 	bne	r7,r3,400694c <__ram_exceptions_end+0xfbf7e6b0>
 4006958:	f800283a 	ret
 400695c:	f800283a 	ret
 4006960:	2007883a 	mov	r3,r4
 4006964:	300f883a 	mov	r7,r6
 4006968:	003fc706 	br	4006888 <__ram_exceptions_end+0xfbf7e5ec>

0400696c <_Balloc>:
 400696c:	20801317 	ldw	r2,76(r4)
 4006970:	defffc04 	addi	sp,sp,-16
 4006974:	dc400115 	stw	r17,4(sp)
 4006978:	dc000015 	stw	r16,0(sp)
 400697c:	dfc00315 	stw	ra,12(sp)
 4006980:	dc800215 	stw	r18,8(sp)
 4006984:	2023883a 	mov	r17,r4
 4006988:	2821883a 	mov	r16,r5
 400698c:	10000f26 	beq	r2,zero,40069cc <_Balloc+0x60>
 4006990:	8407883a 	add	r3,r16,r16
 4006994:	18c7883a 	add	r3,r3,r3
 4006998:	10c7883a 	add	r3,r2,r3
 400699c:	18800017 	ldw	r2,0(r3)
 40069a0:	10001126 	beq	r2,zero,40069e8 <_Balloc+0x7c>
 40069a4:	11000017 	ldw	r4,0(r2)
 40069a8:	19000015 	stw	r4,0(r3)
 40069ac:	10000415 	stw	zero,16(r2)
 40069b0:	10000315 	stw	zero,12(r2)
 40069b4:	dfc00317 	ldw	ra,12(sp)
 40069b8:	dc800217 	ldw	r18,8(sp)
 40069bc:	dc400117 	ldw	r17,4(sp)
 40069c0:	dc000017 	ldw	r16,0(sp)
 40069c4:	dec00404 	addi	sp,sp,16
 40069c8:	f800283a 	ret
 40069cc:	01800844 	movi	r6,33
 40069d0:	01400104 	movi	r5,4
 40069d4:	40095480 	call	4009548 <_calloc_r>
 40069d8:	88801315 	stw	r2,76(r17)
 40069dc:	103fec1e 	bne	r2,zero,4006990 <__ram_exceptions_end+0xfbf7e6f4>
 40069e0:	0005883a 	mov	r2,zero
 40069e4:	003ff306 	br	40069b4 <__ram_exceptions_end+0xfbf7e718>
 40069e8:	01400044 	movi	r5,1
 40069ec:	2c24983a 	sll	r18,r5,r16
 40069f0:	8809883a 	mov	r4,r17
 40069f4:	91800144 	addi	r6,r18,5
 40069f8:	318d883a 	add	r6,r6,r6
 40069fc:	318d883a 	add	r6,r6,r6
 4006a00:	40095480 	call	4009548 <_calloc_r>
 4006a04:	103ff626 	beq	r2,zero,40069e0 <__ram_exceptions_end+0xfbf7e744>
 4006a08:	14000115 	stw	r16,4(r2)
 4006a0c:	14800215 	stw	r18,8(r2)
 4006a10:	003fe606 	br	40069ac <__ram_exceptions_end+0xfbf7e710>

04006a14 <_Bfree>:
 4006a14:	28000826 	beq	r5,zero,4006a38 <_Bfree+0x24>
 4006a18:	28c00117 	ldw	r3,4(r5)
 4006a1c:	20801317 	ldw	r2,76(r4)
 4006a20:	18c7883a 	add	r3,r3,r3
 4006a24:	18c7883a 	add	r3,r3,r3
 4006a28:	10c5883a 	add	r2,r2,r3
 4006a2c:	10c00017 	ldw	r3,0(r2)
 4006a30:	28c00015 	stw	r3,0(r5)
 4006a34:	11400015 	stw	r5,0(r2)
 4006a38:	f800283a 	ret

04006a3c <__multadd>:
 4006a3c:	defff704 	addi	sp,sp,-36
 4006a40:	dc800215 	stw	r18,8(sp)
 4006a44:	2c800417 	ldw	r18,16(r5)
 4006a48:	dd800615 	stw	r22,24(sp)
 4006a4c:	dd400515 	stw	r21,20(sp)
 4006a50:	dd000415 	stw	r20,16(sp)
 4006a54:	dcc00315 	stw	r19,12(sp)
 4006a58:	dc400115 	stw	r17,4(sp)
 4006a5c:	dc000015 	stw	r16,0(sp)
 4006a60:	dfc00815 	stw	ra,32(sp)
 4006a64:	ddc00715 	stw	r23,28(sp)
 4006a68:	2827883a 	mov	r19,r5
 4006a6c:	2029883a 	mov	r20,r4
 4006a70:	3023883a 	mov	r17,r6
 4006a74:	3821883a 	mov	r16,r7
 4006a78:	2d400504 	addi	r21,r5,20
 4006a7c:	002d883a 	mov	r22,zero
 4006a80:	adc00017 	ldw	r23,0(r21)
 4006a84:	880b883a 	mov	r5,r17
 4006a88:	ad400104 	addi	r21,r21,4
 4006a8c:	b93fffcc 	andi	r4,r23,65535
 4006a90:	40011140 	call	4001114 <__mulsi3>
 4006a94:	b808d43a 	srli	r4,r23,16
 4006a98:	880b883a 	mov	r5,r17
 4006a9c:	1421883a 	add	r16,r2,r16
 4006aa0:	40011140 	call	4001114 <__mulsi3>
 4006aa4:	800ed43a 	srli	r7,r16,16
 4006aa8:	80ffffcc 	andi	r3,r16,65535
 4006aac:	b5800044 	addi	r22,r22,1
 4006ab0:	11c5883a 	add	r2,r2,r7
 4006ab4:	100e943a 	slli	r7,r2,16
 4006ab8:	1020d43a 	srli	r16,r2,16
 4006abc:	38c7883a 	add	r3,r7,r3
 4006ac0:	a8ffff15 	stw	r3,-4(r21)
 4006ac4:	b4bfee16 	blt	r22,r18,4006a80 <__ram_exceptions_end+0xfbf7e7e4>
 4006ac8:	80000926 	beq	r16,zero,4006af0 <__multadd+0xb4>
 4006acc:	98800217 	ldw	r2,8(r19)
 4006ad0:	9080130e 	bge	r18,r2,4006b20 <__multadd+0xe4>
 4006ad4:	90800144 	addi	r2,r18,5
 4006ad8:	1085883a 	add	r2,r2,r2
 4006adc:	1085883a 	add	r2,r2,r2
 4006ae0:	9885883a 	add	r2,r19,r2
 4006ae4:	14000015 	stw	r16,0(r2)
 4006ae8:	94800044 	addi	r18,r18,1
 4006aec:	9c800415 	stw	r18,16(r19)
 4006af0:	9805883a 	mov	r2,r19
 4006af4:	dfc00817 	ldw	ra,32(sp)
 4006af8:	ddc00717 	ldw	r23,28(sp)
 4006afc:	dd800617 	ldw	r22,24(sp)
 4006b00:	dd400517 	ldw	r21,20(sp)
 4006b04:	dd000417 	ldw	r20,16(sp)
 4006b08:	dcc00317 	ldw	r19,12(sp)
 4006b0c:	dc800217 	ldw	r18,8(sp)
 4006b10:	dc400117 	ldw	r17,4(sp)
 4006b14:	dc000017 	ldw	r16,0(sp)
 4006b18:	dec00904 	addi	sp,sp,36
 4006b1c:	f800283a 	ret
 4006b20:	99400117 	ldw	r5,4(r19)
 4006b24:	a009883a 	mov	r4,r20
 4006b28:	29400044 	addi	r5,r5,1
 4006b2c:	400696c0 	call	400696c <_Balloc>
 4006b30:	99800417 	ldw	r6,16(r19)
 4006b34:	99400304 	addi	r5,r19,12
 4006b38:	11000304 	addi	r4,r2,12
 4006b3c:	31800084 	addi	r6,r6,2
 4006b40:	318d883a 	add	r6,r6,r6
 4006b44:	318d883a 	add	r6,r6,r6
 4006b48:	1023883a 	mov	r17,r2
 4006b4c:	40066fc0 	call	40066fc <memcpy>
 4006b50:	98000a26 	beq	r19,zero,4006b7c <__multadd+0x140>
 4006b54:	98c00117 	ldw	r3,4(r19)
 4006b58:	a0801317 	ldw	r2,76(r20)
 4006b5c:	18c7883a 	add	r3,r3,r3
 4006b60:	18c7883a 	add	r3,r3,r3
 4006b64:	10c5883a 	add	r2,r2,r3
 4006b68:	10c00017 	ldw	r3,0(r2)
 4006b6c:	98c00015 	stw	r3,0(r19)
 4006b70:	14c00015 	stw	r19,0(r2)
 4006b74:	8827883a 	mov	r19,r17
 4006b78:	003fd606 	br	4006ad4 <__ram_exceptions_end+0xfbf7e838>
 4006b7c:	8827883a 	mov	r19,r17
 4006b80:	003fd406 	br	4006ad4 <__ram_exceptions_end+0xfbf7e838>

04006b84 <__s2b>:
 4006b84:	defff904 	addi	sp,sp,-28
 4006b88:	dc400115 	stw	r17,4(sp)
 4006b8c:	dc000015 	stw	r16,0(sp)
 4006b90:	2023883a 	mov	r17,r4
 4006b94:	2821883a 	mov	r16,r5
 4006b98:	39000204 	addi	r4,r7,8
 4006b9c:	01400244 	movi	r5,9
 4006ba0:	dcc00315 	stw	r19,12(sp)
 4006ba4:	dc800215 	stw	r18,8(sp)
 4006ba8:	dfc00615 	stw	ra,24(sp)
 4006bac:	dd400515 	stw	r21,20(sp)
 4006bb0:	dd000415 	stw	r20,16(sp)
 4006bb4:	3825883a 	mov	r18,r7
 4006bb8:	3027883a 	mov	r19,r6
 4006bbc:	4000f600 	call	4000f60 <__divsi3>
 4006bc0:	00c00044 	movi	r3,1
 4006bc4:	000b883a 	mov	r5,zero
 4006bc8:	1880030e 	bge	r3,r2,4006bd8 <__s2b+0x54>
 4006bcc:	18c7883a 	add	r3,r3,r3
 4006bd0:	29400044 	addi	r5,r5,1
 4006bd4:	18bffd16 	blt	r3,r2,4006bcc <__ram_exceptions_end+0xfbf7e930>
 4006bd8:	8809883a 	mov	r4,r17
 4006bdc:	400696c0 	call	400696c <_Balloc>
 4006be0:	d8c00717 	ldw	r3,28(sp)
 4006be4:	10c00515 	stw	r3,20(r2)
 4006be8:	00c00044 	movi	r3,1
 4006bec:	10c00415 	stw	r3,16(r2)
 4006bf0:	00c00244 	movi	r3,9
 4006bf4:	1cc0210e 	bge	r3,r19,4006c7c <__s2b+0xf8>
 4006bf8:	80eb883a 	add	r21,r16,r3
 4006bfc:	a829883a 	mov	r20,r21
 4006c00:	84e1883a 	add	r16,r16,r19
 4006c04:	a1c00007 	ldb	r7,0(r20)
 4006c08:	01800284 	movi	r6,10
 4006c0c:	a5000044 	addi	r20,r20,1
 4006c10:	100b883a 	mov	r5,r2
 4006c14:	39fff404 	addi	r7,r7,-48
 4006c18:	8809883a 	mov	r4,r17
 4006c1c:	4006a3c0 	call	4006a3c <__multadd>
 4006c20:	a43ff81e 	bne	r20,r16,4006c04 <__ram_exceptions_end+0xfbf7e968>
 4006c24:	ace1883a 	add	r16,r21,r19
 4006c28:	843ffe04 	addi	r16,r16,-8
 4006c2c:	9c800a0e 	bge	r19,r18,4006c58 <__s2b+0xd4>
 4006c30:	94e5c83a 	sub	r18,r18,r19
 4006c34:	84a5883a 	add	r18,r16,r18
 4006c38:	81c00007 	ldb	r7,0(r16)
 4006c3c:	01800284 	movi	r6,10
 4006c40:	84000044 	addi	r16,r16,1
 4006c44:	100b883a 	mov	r5,r2
 4006c48:	39fff404 	addi	r7,r7,-48
 4006c4c:	8809883a 	mov	r4,r17
 4006c50:	4006a3c0 	call	4006a3c <__multadd>
 4006c54:	84bff81e 	bne	r16,r18,4006c38 <__ram_exceptions_end+0xfbf7e99c>
 4006c58:	dfc00617 	ldw	ra,24(sp)
 4006c5c:	dd400517 	ldw	r21,20(sp)
 4006c60:	dd000417 	ldw	r20,16(sp)
 4006c64:	dcc00317 	ldw	r19,12(sp)
 4006c68:	dc800217 	ldw	r18,8(sp)
 4006c6c:	dc400117 	ldw	r17,4(sp)
 4006c70:	dc000017 	ldw	r16,0(sp)
 4006c74:	dec00704 	addi	sp,sp,28
 4006c78:	f800283a 	ret
 4006c7c:	84000284 	addi	r16,r16,10
 4006c80:	1827883a 	mov	r19,r3
 4006c84:	003fe906 	br	4006c2c <__ram_exceptions_end+0xfbf7e990>

04006c88 <__hi0bits>:
 4006c88:	20bfffec 	andhi	r2,r4,65535
 4006c8c:	1000141e 	bne	r2,zero,4006ce0 <__hi0bits+0x58>
 4006c90:	2008943a 	slli	r4,r4,16
 4006c94:	00800404 	movi	r2,16
 4006c98:	20ffc02c 	andhi	r3,r4,65280
 4006c9c:	1800021e 	bne	r3,zero,4006ca8 <__hi0bits+0x20>
 4006ca0:	2008923a 	slli	r4,r4,8
 4006ca4:	10800204 	addi	r2,r2,8
 4006ca8:	20fc002c 	andhi	r3,r4,61440
 4006cac:	1800021e 	bne	r3,zero,4006cb8 <__hi0bits+0x30>
 4006cb0:	2008913a 	slli	r4,r4,4
 4006cb4:	10800104 	addi	r2,r2,4
 4006cb8:	20f0002c 	andhi	r3,r4,49152
 4006cbc:	1800031e 	bne	r3,zero,4006ccc <__hi0bits+0x44>
 4006cc0:	2109883a 	add	r4,r4,r4
 4006cc4:	10800084 	addi	r2,r2,2
 4006cc8:	2109883a 	add	r4,r4,r4
 4006ccc:	20000316 	blt	r4,zero,4006cdc <__hi0bits+0x54>
 4006cd0:	2110002c 	andhi	r4,r4,16384
 4006cd4:	2000041e 	bne	r4,zero,4006ce8 <__hi0bits+0x60>
 4006cd8:	00800804 	movi	r2,32
 4006cdc:	f800283a 	ret
 4006ce0:	0005883a 	mov	r2,zero
 4006ce4:	003fec06 	br	4006c98 <__ram_exceptions_end+0xfbf7e9fc>
 4006ce8:	10800044 	addi	r2,r2,1
 4006cec:	f800283a 	ret

04006cf0 <__lo0bits>:
 4006cf0:	20c00017 	ldw	r3,0(r4)
 4006cf4:	188001cc 	andi	r2,r3,7
 4006cf8:	10000826 	beq	r2,zero,4006d1c <__lo0bits+0x2c>
 4006cfc:	1880004c 	andi	r2,r3,1
 4006d00:	1000211e 	bne	r2,zero,4006d88 <__lo0bits+0x98>
 4006d04:	1880008c 	andi	r2,r3,2
 4006d08:	1000211e 	bne	r2,zero,4006d90 <__lo0bits+0xa0>
 4006d0c:	1806d0ba 	srli	r3,r3,2
 4006d10:	00800084 	movi	r2,2
 4006d14:	20c00015 	stw	r3,0(r4)
 4006d18:	f800283a 	ret
 4006d1c:	18bfffcc 	andi	r2,r3,65535
 4006d20:	10001326 	beq	r2,zero,4006d70 <__lo0bits+0x80>
 4006d24:	0005883a 	mov	r2,zero
 4006d28:	19403fcc 	andi	r5,r3,255
 4006d2c:	2800021e 	bne	r5,zero,4006d38 <__lo0bits+0x48>
 4006d30:	1806d23a 	srli	r3,r3,8
 4006d34:	10800204 	addi	r2,r2,8
 4006d38:	194003cc 	andi	r5,r3,15
 4006d3c:	2800021e 	bne	r5,zero,4006d48 <__lo0bits+0x58>
 4006d40:	1806d13a 	srli	r3,r3,4
 4006d44:	10800104 	addi	r2,r2,4
 4006d48:	194000cc 	andi	r5,r3,3
 4006d4c:	2800021e 	bne	r5,zero,4006d58 <__lo0bits+0x68>
 4006d50:	1806d0ba 	srli	r3,r3,2
 4006d54:	10800084 	addi	r2,r2,2
 4006d58:	1940004c 	andi	r5,r3,1
 4006d5c:	2800081e 	bne	r5,zero,4006d80 <__lo0bits+0x90>
 4006d60:	1806d07a 	srli	r3,r3,1
 4006d64:	1800051e 	bne	r3,zero,4006d7c <__lo0bits+0x8c>
 4006d68:	00800804 	movi	r2,32
 4006d6c:	f800283a 	ret
 4006d70:	1806d43a 	srli	r3,r3,16
 4006d74:	00800404 	movi	r2,16
 4006d78:	003feb06 	br	4006d28 <__ram_exceptions_end+0xfbf7ea8c>
 4006d7c:	10800044 	addi	r2,r2,1
 4006d80:	20c00015 	stw	r3,0(r4)
 4006d84:	f800283a 	ret
 4006d88:	0005883a 	mov	r2,zero
 4006d8c:	f800283a 	ret
 4006d90:	1806d07a 	srli	r3,r3,1
 4006d94:	00800044 	movi	r2,1
 4006d98:	20c00015 	stw	r3,0(r4)
 4006d9c:	f800283a 	ret

04006da0 <__i2b>:
 4006da0:	defffd04 	addi	sp,sp,-12
 4006da4:	dc000015 	stw	r16,0(sp)
 4006da8:	04000044 	movi	r16,1
 4006dac:	dc400115 	stw	r17,4(sp)
 4006db0:	2823883a 	mov	r17,r5
 4006db4:	800b883a 	mov	r5,r16
 4006db8:	dfc00215 	stw	ra,8(sp)
 4006dbc:	400696c0 	call	400696c <_Balloc>
 4006dc0:	14400515 	stw	r17,20(r2)
 4006dc4:	14000415 	stw	r16,16(r2)
 4006dc8:	dfc00217 	ldw	ra,8(sp)
 4006dcc:	dc400117 	ldw	r17,4(sp)
 4006dd0:	dc000017 	ldw	r16,0(sp)
 4006dd4:	dec00304 	addi	sp,sp,12
 4006dd8:	f800283a 	ret

04006ddc <__multiply>:
 4006ddc:	deffef04 	addi	sp,sp,-68
 4006de0:	dc400815 	stw	r17,32(sp)
 4006de4:	dc000715 	stw	r16,28(sp)
 4006de8:	34400417 	ldw	r17,16(r6)
 4006dec:	2c000417 	ldw	r16,16(r5)
 4006df0:	dd800d15 	stw	r22,52(sp)
 4006df4:	dc800915 	stw	r18,36(sp)
 4006df8:	dfc01015 	stw	ra,64(sp)
 4006dfc:	df000f15 	stw	fp,60(sp)
 4006e00:	ddc00e15 	stw	r23,56(sp)
 4006e04:	dd400c15 	stw	r21,48(sp)
 4006e08:	dd000b15 	stw	r20,44(sp)
 4006e0c:	dcc00a15 	stw	r19,40(sp)
 4006e10:	2825883a 	mov	r18,r5
 4006e14:	302d883a 	mov	r22,r6
 4006e18:	8440050e 	bge	r16,r17,4006e30 <__multiply+0x54>
 4006e1c:	8007883a 	mov	r3,r16
 4006e20:	3025883a 	mov	r18,r6
 4006e24:	8821883a 	mov	r16,r17
 4006e28:	282d883a 	mov	r22,r5
 4006e2c:	1823883a 	mov	r17,r3
 4006e30:	90800217 	ldw	r2,8(r18)
 4006e34:	8447883a 	add	r3,r16,r17
 4006e38:	d8c00215 	stw	r3,8(sp)
 4006e3c:	91400117 	ldw	r5,4(r18)
 4006e40:	10c0010e 	bge	r2,r3,4006e48 <__multiply+0x6c>
 4006e44:	29400044 	addi	r5,r5,1
 4006e48:	400696c0 	call	400696c <_Balloc>
 4006e4c:	d8c00217 	ldw	r3,8(sp)
 4006e50:	d8800615 	stw	r2,24(sp)
 4006e54:	18eb883a 	add	r21,r3,r3
 4006e58:	ad6b883a 	add	r21,r21,r21
 4006e5c:	10c00504 	addi	r3,r2,20
 4006e60:	1d6b883a 	add	r21,r3,r21
 4006e64:	d8c00115 	stw	r3,4(sp)
 4006e68:	dd400315 	stw	r21,12(sp)
 4006e6c:	1805883a 	mov	r2,r3
 4006e70:	1d40042e 	bgeu	r3,r21,4006e84 <__multiply+0xa8>
 4006e74:	d8c00317 	ldw	r3,12(sp)
 4006e78:	10000015 	stw	zero,0(r2)
 4006e7c:	10800104 	addi	r2,r2,4
 4006e80:	10fffc36 	bltu	r2,r3,4006e74 <__ram_exceptions_end+0xfbf7ebd8>
 4006e84:	8c63883a 	add	r17,r17,r17
 4006e88:	b5800504 	addi	r22,r22,20
 4006e8c:	8c63883a 	add	r17,r17,r17
 4006e90:	94800504 	addi	r18,r18,20
 4006e94:	8421883a 	add	r16,r16,r16
 4006e98:	b463883a 	add	r17,r22,r17
 4006e9c:	8421883a 	add	r16,r16,r16
 4006ea0:	dd800015 	stw	r22,0(sp)
 4006ea4:	dc800415 	stw	r18,16(sp)
 4006ea8:	dc400515 	stw	r17,20(sp)
 4006eac:	9429883a 	add	r20,r18,r16
 4006eb0:	b4404f2e 	bgeu	r22,r17,4006ff0 <__multiply+0x214>
 4006eb4:	d8c00017 	ldw	r3,0(sp)
 4006eb8:	1c800017 	ldw	r18,0(r3)
 4006ebc:	947fffcc 	andi	r17,r18,65535
 4006ec0:	88001e26 	beq	r17,zero,4006f3c <__multiply+0x160>
 4006ec4:	dd800117 	ldw	r22,4(sp)
 4006ec8:	dd400417 	ldw	r21,16(sp)
 4006ecc:	0027883a 	mov	r19,zero
 4006ed0:	ac800017 	ldw	r18,0(r21)
 4006ed4:	b4000017 	ldw	r16,0(r22)
 4006ed8:	880b883a 	mov	r5,r17
 4006edc:	913fffcc 	andi	r4,r18,65535
 4006ee0:	40011140 	call	4001114 <__mulsi3>
 4006ee4:	9008d43a 	srli	r4,r18,16
 4006ee8:	84bfffcc 	andi	r18,r16,65535
 4006eec:	1485883a 	add	r2,r2,r18
 4006ef0:	14e5883a 	add	r18,r2,r19
 4006ef4:	8020d43a 	srli	r16,r16,16
 4006ef8:	9026d43a 	srli	r19,r18,16
 4006efc:	880b883a 	mov	r5,r17
 4006f00:	40011140 	call	4001114 <__mulsi3>
 4006f04:	1405883a 	add	r2,r2,r16
 4006f08:	14e1883a 	add	r16,r2,r19
 4006f0c:	90ffffcc 	andi	r3,r18,65535
 4006f10:	8024943a 	slli	r18,r16,16
 4006f14:	ad400104 	addi	r21,r21,4
 4006f18:	b005883a 	mov	r2,r22
 4006f1c:	90c6b03a 	or	r3,r18,r3
 4006f20:	b0c00015 	stw	r3,0(r22)
 4006f24:	8026d43a 	srli	r19,r16,16
 4006f28:	b5800104 	addi	r22,r22,4
 4006f2c:	ad3fe836 	bltu	r21,r20,4006ed0 <__ram_exceptions_end+0xfbf7ec34>
 4006f30:	d8c00017 	ldw	r3,0(sp)
 4006f34:	14c00115 	stw	r19,4(r2)
 4006f38:	1c800017 	ldw	r18,0(r3)
 4006f3c:	9024d43a 	srli	r18,r18,16
 4006f40:	90002226 	beq	r18,zero,4006fcc <__multiply+0x1f0>
 4006f44:	d8c00117 	ldw	r3,4(sp)
 4006f48:	dd800417 	ldw	r22,16(sp)
 4006f4c:	002f883a 	mov	r23,zero
 4006f50:	1f000017 	ldw	fp,0(r3)
 4006f54:	1823883a 	mov	r17,r3
 4006f58:	182b883a 	mov	r21,r3
 4006f5c:	e021883a 	mov	r16,fp
 4006f60:	00000106 	br	4006f68 <__multiply+0x18c>
 4006f64:	982b883a 	mov	r21,r19
 4006f68:	b100000b 	ldhu	r4,0(r22)
 4006f6c:	8020d43a 	srli	r16,r16,16
 4006f70:	900b883a 	mov	r5,r18
 4006f74:	40011140 	call	4001114 <__mulsi3>
 4006f78:	1405883a 	add	r2,r2,r16
 4006f7c:	15ef883a 	add	r23,r2,r23
 4006f80:	b804943a 	slli	r2,r23,16
 4006f84:	e0ffffcc 	andi	r3,fp,65535
 4006f88:	8c400104 	addi	r17,r17,4
 4006f8c:	10c6b03a 	or	r3,r2,r3
 4006f90:	88ffff15 	stw	r3,-4(r17)
 4006f94:	b5800104 	addi	r22,r22,4
 4006f98:	b13fff17 	ldw	r4,-4(r22)
 4006f9c:	acc00104 	addi	r19,r21,4
 4006fa0:	900b883a 	mov	r5,r18
 4006fa4:	2008d43a 	srli	r4,r4,16
 4006fa8:	9c000017 	ldw	r16,0(r19)
 4006fac:	40011140 	call	4001114 <__mulsi3>
 4006fb0:	b806d43a 	srli	r3,r23,16
 4006fb4:	813fffcc 	andi	r4,r16,65535
 4006fb8:	1105883a 	add	r2,r2,r4
 4006fbc:	10f9883a 	add	fp,r2,r3
 4006fc0:	e02ed43a 	srli	r23,fp,16
 4006fc4:	b53fe736 	bltu	r22,r20,4006f64 <__ram_exceptions_end+0xfbf7ecc8>
 4006fc8:	af000115 	stw	fp,4(r21)
 4006fcc:	d8c00017 	ldw	r3,0(sp)
 4006fd0:	d9000517 	ldw	r4,20(sp)
 4006fd4:	18c00104 	addi	r3,r3,4
 4006fd8:	d8c00015 	stw	r3,0(sp)
 4006fdc:	d8c00117 	ldw	r3,4(sp)
 4006fe0:	18c00104 	addi	r3,r3,4
 4006fe4:	d8c00115 	stw	r3,4(sp)
 4006fe8:	d8c00017 	ldw	r3,0(sp)
 4006fec:	193fb136 	bltu	r3,r4,4006eb4 <__ram_exceptions_end+0xfbf7ec18>
 4006ff0:	d8c00217 	ldw	r3,8(sp)
 4006ff4:	00c00c0e 	bge	zero,r3,4007028 <__multiply+0x24c>
 4006ff8:	d8c00317 	ldw	r3,12(sp)
 4006ffc:	18bfff17 	ldw	r2,-4(r3)
 4007000:	1d7fff04 	addi	r21,r3,-4
 4007004:	10000326 	beq	r2,zero,4007014 <__multiply+0x238>
 4007008:	00000706 	br	4007028 <__multiply+0x24c>
 400700c:	a8800017 	ldw	r2,0(r21)
 4007010:	1000051e 	bne	r2,zero,4007028 <__multiply+0x24c>
 4007014:	d8c00217 	ldw	r3,8(sp)
 4007018:	ad7fff04 	addi	r21,r21,-4
 400701c:	18ffffc4 	addi	r3,r3,-1
 4007020:	d8c00215 	stw	r3,8(sp)
 4007024:	183ff91e 	bne	r3,zero,400700c <__ram_exceptions_end+0xfbf7ed70>
 4007028:	d8c00617 	ldw	r3,24(sp)
 400702c:	d9000217 	ldw	r4,8(sp)
 4007030:	1805883a 	mov	r2,r3
 4007034:	19000415 	stw	r4,16(r3)
 4007038:	dfc01017 	ldw	ra,64(sp)
 400703c:	df000f17 	ldw	fp,60(sp)
 4007040:	ddc00e17 	ldw	r23,56(sp)
 4007044:	dd800d17 	ldw	r22,52(sp)
 4007048:	dd400c17 	ldw	r21,48(sp)
 400704c:	dd000b17 	ldw	r20,44(sp)
 4007050:	dcc00a17 	ldw	r19,40(sp)
 4007054:	dc800917 	ldw	r18,36(sp)
 4007058:	dc400817 	ldw	r17,32(sp)
 400705c:	dc000717 	ldw	r16,28(sp)
 4007060:	dec01104 	addi	sp,sp,68
 4007064:	f800283a 	ret

04007068 <__pow5mult>:
 4007068:	defffa04 	addi	sp,sp,-24
 400706c:	dcc00315 	stw	r19,12(sp)
 4007070:	dc000015 	stw	r16,0(sp)
 4007074:	dfc00515 	stw	ra,20(sp)
 4007078:	dd000415 	stw	r20,16(sp)
 400707c:	dc800215 	stw	r18,8(sp)
 4007080:	dc400115 	stw	r17,4(sp)
 4007084:	308000cc 	andi	r2,r6,3
 4007088:	3021883a 	mov	r16,r6
 400708c:	2027883a 	mov	r19,r4
 4007090:	10002f1e 	bne	r2,zero,4007150 <__pow5mult+0xe8>
 4007094:	2825883a 	mov	r18,r5
 4007098:	8021d0ba 	srai	r16,r16,2
 400709c:	80001a26 	beq	r16,zero,4007108 <__pow5mult+0xa0>
 40070a0:	9c401217 	ldw	r17,72(r19)
 40070a4:	8800061e 	bne	r17,zero,40070c0 <__pow5mult+0x58>
 40070a8:	00003406 	br	400717c <__pow5mult+0x114>
 40070ac:	8021d07a 	srai	r16,r16,1
 40070b0:	80001526 	beq	r16,zero,4007108 <__pow5mult+0xa0>
 40070b4:	88800017 	ldw	r2,0(r17)
 40070b8:	10001c26 	beq	r2,zero,400712c <__pow5mult+0xc4>
 40070bc:	1023883a 	mov	r17,r2
 40070c0:	8080004c 	andi	r2,r16,1
 40070c4:	103ff926 	beq	r2,zero,40070ac <__ram_exceptions_end+0xfbf7ee10>
 40070c8:	880d883a 	mov	r6,r17
 40070cc:	900b883a 	mov	r5,r18
 40070d0:	9809883a 	mov	r4,r19
 40070d4:	4006ddc0 	call	4006ddc <__multiply>
 40070d8:	90001b26 	beq	r18,zero,4007148 <__pow5mult+0xe0>
 40070dc:	91000117 	ldw	r4,4(r18)
 40070e0:	98c01317 	ldw	r3,76(r19)
 40070e4:	8021d07a 	srai	r16,r16,1
 40070e8:	2109883a 	add	r4,r4,r4
 40070ec:	2109883a 	add	r4,r4,r4
 40070f0:	1907883a 	add	r3,r3,r4
 40070f4:	19000017 	ldw	r4,0(r3)
 40070f8:	91000015 	stw	r4,0(r18)
 40070fc:	1c800015 	stw	r18,0(r3)
 4007100:	1025883a 	mov	r18,r2
 4007104:	803feb1e 	bne	r16,zero,40070b4 <__ram_exceptions_end+0xfbf7ee18>
 4007108:	9005883a 	mov	r2,r18
 400710c:	dfc00517 	ldw	ra,20(sp)
 4007110:	dd000417 	ldw	r20,16(sp)
 4007114:	dcc00317 	ldw	r19,12(sp)
 4007118:	dc800217 	ldw	r18,8(sp)
 400711c:	dc400117 	ldw	r17,4(sp)
 4007120:	dc000017 	ldw	r16,0(sp)
 4007124:	dec00604 	addi	sp,sp,24
 4007128:	f800283a 	ret
 400712c:	880d883a 	mov	r6,r17
 4007130:	880b883a 	mov	r5,r17
 4007134:	9809883a 	mov	r4,r19
 4007138:	4006ddc0 	call	4006ddc <__multiply>
 400713c:	88800015 	stw	r2,0(r17)
 4007140:	10000015 	stw	zero,0(r2)
 4007144:	003fdd06 	br	40070bc <__ram_exceptions_end+0xfbf7ee20>
 4007148:	1025883a 	mov	r18,r2
 400714c:	003fd706 	br	40070ac <__ram_exceptions_end+0xfbf7ee10>
 4007150:	10bfffc4 	addi	r2,r2,-1
 4007154:	1085883a 	add	r2,r2,r2
 4007158:	00c10074 	movhi	r3,1025
 400715c:	18d63404 	addi	r3,r3,22736
 4007160:	1085883a 	add	r2,r2,r2
 4007164:	1885883a 	add	r2,r3,r2
 4007168:	11800017 	ldw	r6,0(r2)
 400716c:	000f883a 	mov	r7,zero
 4007170:	4006a3c0 	call	4006a3c <__multadd>
 4007174:	1025883a 	mov	r18,r2
 4007178:	003fc706 	br	4007098 <__ram_exceptions_end+0xfbf7edfc>
 400717c:	05000044 	movi	r20,1
 4007180:	a00b883a 	mov	r5,r20
 4007184:	9809883a 	mov	r4,r19
 4007188:	400696c0 	call	400696c <_Balloc>
 400718c:	1023883a 	mov	r17,r2
 4007190:	00809c44 	movi	r2,625
 4007194:	88800515 	stw	r2,20(r17)
 4007198:	8d000415 	stw	r20,16(r17)
 400719c:	9c401215 	stw	r17,72(r19)
 40071a0:	88000015 	stw	zero,0(r17)
 40071a4:	003fc606 	br	40070c0 <__ram_exceptions_end+0xfbf7ee24>

040071a8 <__lshift>:
 40071a8:	defff904 	addi	sp,sp,-28
 40071ac:	dd400515 	stw	r21,20(sp)
 40071b0:	dcc00315 	stw	r19,12(sp)
 40071b4:	302bd17a 	srai	r21,r6,5
 40071b8:	2cc00417 	ldw	r19,16(r5)
 40071bc:	28800217 	ldw	r2,8(r5)
 40071c0:	dd000415 	stw	r20,16(sp)
 40071c4:	ace7883a 	add	r19,r21,r19
 40071c8:	dc800215 	stw	r18,8(sp)
 40071cc:	dc400115 	stw	r17,4(sp)
 40071d0:	dc000015 	stw	r16,0(sp)
 40071d4:	dfc00615 	stw	ra,24(sp)
 40071d8:	9c000044 	addi	r16,r19,1
 40071dc:	2823883a 	mov	r17,r5
 40071e0:	3029883a 	mov	r20,r6
 40071e4:	2025883a 	mov	r18,r4
 40071e8:	29400117 	ldw	r5,4(r5)
 40071ec:	1400030e 	bge	r2,r16,40071fc <__lshift+0x54>
 40071f0:	1085883a 	add	r2,r2,r2
 40071f4:	29400044 	addi	r5,r5,1
 40071f8:	143ffd16 	blt	r2,r16,40071f0 <__ram_exceptions_end+0xfbf7ef54>
 40071fc:	9009883a 	mov	r4,r18
 4007200:	400696c0 	call	400696c <_Balloc>
 4007204:	10c00504 	addi	r3,r2,20
 4007208:	0540070e 	bge	zero,r21,4007228 <__lshift+0x80>
 400720c:	ad6b883a 	add	r21,r21,r21
 4007210:	ad6b883a 	add	r21,r21,r21
 4007214:	1809883a 	mov	r4,r3
 4007218:	1d47883a 	add	r3,r3,r21
 400721c:	20000015 	stw	zero,0(r4)
 4007220:	21000104 	addi	r4,r4,4
 4007224:	193ffd1e 	bne	r3,r4,400721c <__ram_exceptions_end+0xfbf7ef80>
 4007228:	8a000417 	ldw	r8,16(r17)
 400722c:	89000504 	addi	r4,r17,20
 4007230:	a18007cc 	andi	r6,r20,31
 4007234:	4211883a 	add	r8,r8,r8
 4007238:	4211883a 	add	r8,r8,r8
 400723c:	2211883a 	add	r8,r4,r8
 4007240:	30002326 	beq	r6,zero,40072d0 <__lshift+0x128>
 4007244:	02400804 	movi	r9,32
 4007248:	4993c83a 	sub	r9,r9,r6
 400724c:	000b883a 	mov	r5,zero
 4007250:	21c00017 	ldw	r7,0(r4)
 4007254:	1815883a 	mov	r10,r3
 4007258:	18c00104 	addi	r3,r3,4
 400725c:	398e983a 	sll	r7,r7,r6
 4007260:	21000104 	addi	r4,r4,4
 4007264:	394ab03a 	or	r5,r7,r5
 4007268:	197fff15 	stw	r5,-4(r3)
 400726c:	217fff17 	ldw	r5,-4(r4)
 4007270:	2a4ad83a 	srl	r5,r5,r9
 4007274:	223ff636 	bltu	r4,r8,4007250 <__ram_exceptions_end+0xfbf7efb4>
 4007278:	51400115 	stw	r5,4(r10)
 400727c:	28001a1e 	bne	r5,zero,40072e8 <__lshift+0x140>
 4007280:	843fffc4 	addi	r16,r16,-1
 4007284:	14000415 	stw	r16,16(r2)
 4007288:	88000826 	beq	r17,zero,40072ac <__lshift+0x104>
 400728c:	89000117 	ldw	r4,4(r17)
 4007290:	90c01317 	ldw	r3,76(r18)
 4007294:	2109883a 	add	r4,r4,r4
 4007298:	2109883a 	add	r4,r4,r4
 400729c:	1907883a 	add	r3,r3,r4
 40072a0:	19000017 	ldw	r4,0(r3)
 40072a4:	89000015 	stw	r4,0(r17)
 40072a8:	1c400015 	stw	r17,0(r3)
 40072ac:	dfc00617 	ldw	ra,24(sp)
 40072b0:	dd400517 	ldw	r21,20(sp)
 40072b4:	dd000417 	ldw	r20,16(sp)
 40072b8:	dcc00317 	ldw	r19,12(sp)
 40072bc:	dc800217 	ldw	r18,8(sp)
 40072c0:	dc400117 	ldw	r17,4(sp)
 40072c4:	dc000017 	ldw	r16,0(sp)
 40072c8:	dec00704 	addi	sp,sp,28
 40072cc:	f800283a 	ret
 40072d0:	21400017 	ldw	r5,0(r4)
 40072d4:	18c00104 	addi	r3,r3,4
 40072d8:	21000104 	addi	r4,r4,4
 40072dc:	197fff15 	stw	r5,-4(r3)
 40072e0:	223ffb36 	bltu	r4,r8,40072d0 <__ram_exceptions_end+0xfbf7f034>
 40072e4:	003fe606 	br	4007280 <__ram_exceptions_end+0xfbf7efe4>
 40072e8:	9c000084 	addi	r16,r19,2
 40072ec:	003fe406 	br	4007280 <__ram_exceptions_end+0xfbf7efe4>

040072f0 <__mcmp>:
 40072f0:	20800417 	ldw	r2,16(r4)
 40072f4:	28c00417 	ldw	r3,16(r5)
 40072f8:	10c5c83a 	sub	r2,r2,r3
 40072fc:	1000111e 	bne	r2,zero,4007344 <__mcmp+0x54>
 4007300:	18c7883a 	add	r3,r3,r3
 4007304:	18c7883a 	add	r3,r3,r3
 4007308:	21000504 	addi	r4,r4,20
 400730c:	29400504 	addi	r5,r5,20
 4007310:	20c5883a 	add	r2,r4,r3
 4007314:	28cb883a 	add	r5,r5,r3
 4007318:	00000106 	br	4007320 <__mcmp+0x30>
 400731c:	20800a2e 	bgeu	r4,r2,4007348 <__mcmp+0x58>
 4007320:	10bfff04 	addi	r2,r2,-4
 4007324:	297fff04 	addi	r5,r5,-4
 4007328:	11800017 	ldw	r6,0(r2)
 400732c:	28c00017 	ldw	r3,0(r5)
 4007330:	30fffa26 	beq	r6,r3,400731c <__ram_exceptions_end+0xfbf7f080>
 4007334:	30c00236 	bltu	r6,r3,4007340 <__mcmp+0x50>
 4007338:	00800044 	movi	r2,1
 400733c:	f800283a 	ret
 4007340:	00bfffc4 	movi	r2,-1
 4007344:	f800283a 	ret
 4007348:	0005883a 	mov	r2,zero
 400734c:	f800283a 	ret

04007350 <__mdiff>:
 4007350:	28c00417 	ldw	r3,16(r5)
 4007354:	30800417 	ldw	r2,16(r6)
 4007358:	defffa04 	addi	sp,sp,-24
 400735c:	dcc00315 	stw	r19,12(sp)
 4007360:	dc800215 	stw	r18,8(sp)
 4007364:	dfc00515 	stw	ra,20(sp)
 4007368:	dd000415 	stw	r20,16(sp)
 400736c:	dc400115 	stw	r17,4(sp)
 4007370:	dc000015 	stw	r16,0(sp)
 4007374:	1887c83a 	sub	r3,r3,r2
 4007378:	2825883a 	mov	r18,r5
 400737c:	3027883a 	mov	r19,r6
 4007380:	1800141e 	bne	r3,zero,40073d4 <__mdiff+0x84>
 4007384:	1085883a 	add	r2,r2,r2
 4007388:	1085883a 	add	r2,r2,r2
 400738c:	2a000504 	addi	r8,r5,20
 4007390:	34000504 	addi	r16,r6,20
 4007394:	4087883a 	add	r3,r8,r2
 4007398:	8085883a 	add	r2,r16,r2
 400739c:	00000106 	br	40073a4 <__mdiff+0x54>
 40073a0:	40c0592e 	bgeu	r8,r3,4007508 <__mdiff+0x1b8>
 40073a4:	18ffff04 	addi	r3,r3,-4
 40073a8:	10bfff04 	addi	r2,r2,-4
 40073ac:	19c00017 	ldw	r7,0(r3)
 40073b0:	11400017 	ldw	r5,0(r2)
 40073b4:	397ffa26 	beq	r7,r5,40073a0 <__ram_exceptions_end+0xfbf7f104>
 40073b8:	3940592e 	bgeu	r7,r5,4007520 <__mdiff+0x1d0>
 40073bc:	9005883a 	mov	r2,r18
 40073c0:	4023883a 	mov	r17,r8
 40073c4:	9825883a 	mov	r18,r19
 40073c8:	05000044 	movi	r20,1
 40073cc:	1027883a 	mov	r19,r2
 40073d0:	00000406 	br	40073e4 <__mdiff+0x94>
 40073d4:	18005616 	blt	r3,zero,4007530 <__mdiff+0x1e0>
 40073d8:	34400504 	addi	r17,r6,20
 40073dc:	2c000504 	addi	r16,r5,20
 40073e0:	0029883a 	mov	r20,zero
 40073e4:	91400117 	ldw	r5,4(r18)
 40073e8:	400696c0 	call	400696c <_Balloc>
 40073ec:	92400417 	ldw	r9,16(r18)
 40073f0:	9b000417 	ldw	r12,16(r19)
 40073f4:	12c00504 	addi	r11,r2,20
 40073f8:	4a51883a 	add	r8,r9,r9
 40073fc:	6319883a 	add	r12,r12,r12
 4007400:	4211883a 	add	r8,r8,r8
 4007404:	6319883a 	add	r12,r12,r12
 4007408:	15000315 	stw	r20,12(r2)
 400740c:	8211883a 	add	r8,r16,r8
 4007410:	8b19883a 	add	r12,r17,r12
 4007414:	0007883a 	mov	r3,zero
 4007418:	81400017 	ldw	r5,0(r16)
 400741c:	89c00017 	ldw	r7,0(r17)
 4007420:	59800104 	addi	r6,r11,4
 4007424:	293fffcc 	andi	r4,r5,65535
 4007428:	20c7883a 	add	r3,r4,r3
 400742c:	393fffcc 	andi	r4,r7,65535
 4007430:	1909c83a 	sub	r4,r3,r4
 4007434:	280ad43a 	srli	r5,r5,16
 4007438:	380ed43a 	srli	r7,r7,16
 400743c:	2007d43a 	srai	r3,r4,16
 4007440:	213fffcc 	andi	r4,r4,65535
 4007444:	29cbc83a 	sub	r5,r5,r7
 4007448:	28c7883a 	add	r3,r5,r3
 400744c:	180a943a 	slli	r5,r3,16
 4007450:	8c400104 	addi	r17,r17,4
 4007454:	84000104 	addi	r16,r16,4
 4007458:	2908b03a 	or	r4,r5,r4
 400745c:	59000015 	stw	r4,0(r11)
 4007460:	1807d43a 	srai	r3,r3,16
 4007464:	3015883a 	mov	r10,r6
 4007468:	3017883a 	mov	r11,r6
 400746c:	8b3fea36 	bltu	r17,r12,4007418 <__ram_exceptions_end+0xfbf7f17c>
 4007470:	8200162e 	bgeu	r16,r8,40074cc <__mdiff+0x17c>
 4007474:	8017883a 	mov	r11,r16
 4007478:	59400017 	ldw	r5,0(r11)
 400747c:	31800104 	addi	r6,r6,4
 4007480:	5ac00104 	addi	r11,r11,4
 4007484:	293fffcc 	andi	r4,r5,65535
 4007488:	20c7883a 	add	r3,r4,r3
 400748c:	280ed43a 	srli	r7,r5,16
 4007490:	180bd43a 	srai	r5,r3,16
 4007494:	193fffcc 	andi	r4,r3,65535
 4007498:	3947883a 	add	r3,r7,r5
 400749c:	180a943a 	slli	r5,r3,16
 40074a0:	1807d43a 	srai	r3,r3,16
 40074a4:	2908b03a 	or	r4,r5,r4
 40074a8:	313fff15 	stw	r4,-4(r6)
 40074ac:	5a3ff236 	bltu	r11,r8,4007478 <__ram_exceptions_end+0xfbf7f1dc>
 40074b0:	0406303a 	nor	r3,zero,r16
 40074b4:	1a07883a 	add	r3,r3,r8
 40074b8:	1806d0ba 	srli	r3,r3,2
 40074bc:	18c00044 	addi	r3,r3,1
 40074c0:	18c7883a 	add	r3,r3,r3
 40074c4:	18c7883a 	add	r3,r3,r3
 40074c8:	50d5883a 	add	r10,r10,r3
 40074cc:	50ffff04 	addi	r3,r10,-4
 40074d0:	2000041e 	bne	r4,zero,40074e4 <__mdiff+0x194>
 40074d4:	18ffff04 	addi	r3,r3,-4
 40074d8:	19000017 	ldw	r4,0(r3)
 40074dc:	4a7fffc4 	addi	r9,r9,-1
 40074e0:	203ffc26 	beq	r4,zero,40074d4 <__ram_exceptions_end+0xfbf7f238>
 40074e4:	12400415 	stw	r9,16(r2)
 40074e8:	dfc00517 	ldw	ra,20(sp)
 40074ec:	dd000417 	ldw	r20,16(sp)
 40074f0:	dcc00317 	ldw	r19,12(sp)
 40074f4:	dc800217 	ldw	r18,8(sp)
 40074f8:	dc400117 	ldw	r17,4(sp)
 40074fc:	dc000017 	ldw	r16,0(sp)
 4007500:	dec00604 	addi	sp,sp,24
 4007504:	f800283a 	ret
 4007508:	000b883a 	mov	r5,zero
 400750c:	400696c0 	call	400696c <_Balloc>
 4007510:	00c00044 	movi	r3,1
 4007514:	10c00415 	stw	r3,16(r2)
 4007518:	10000515 	stw	zero,20(r2)
 400751c:	003ff206 	br	40074e8 <__ram_exceptions_end+0xfbf7f24c>
 4007520:	8023883a 	mov	r17,r16
 4007524:	0029883a 	mov	r20,zero
 4007528:	4021883a 	mov	r16,r8
 400752c:	003fad06 	br	40073e4 <__ram_exceptions_end+0xfbf7f148>
 4007530:	9005883a 	mov	r2,r18
 4007534:	94400504 	addi	r17,r18,20
 4007538:	9c000504 	addi	r16,r19,20
 400753c:	9825883a 	mov	r18,r19
 4007540:	05000044 	movi	r20,1
 4007544:	1027883a 	mov	r19,r2
 4007548:	003fa606 	br	40073e4 <__ram_exceptions_end+0xfbf7f148>

0400754c <__ulp>:
 400754c:	295ffc2c 	andhi	r5,r5,32752
 4007550:	00bf3034 	movhi	r2,64704
 4007554:	2887883a 	add	r3,r5,r2
 4007558:	00c0020e 	bge	zero,r3,4007564 <__ulp+0x18>
 400755c:	0005883a 	mov	r2,zero
 4007560:	f800283a 	ret
 4007564:	00c7c83a 	sub	r3,zero,r3
 4007568:	1807d53a 	srai	r3,r3,20
 400756c:	008004c4 	movi	r2,19
 4007570:	10c00b0e 	bge	r2,r3,40075a0 <__ulp+0x54>
 4007574:	18bffb04 	addi	r2,r3,-20
 4007578:	01000784 	movi	r4,30
 400757c:	0007883a 	mov	r3,zero
 4007580:	20800516 	blt	r4,r2,4007598 <__ulp+0x4c>
 4007584:	010007c4 	movi	r4,31
 4007588:	2089c83a 	sub	r4,r4,r2
 400758c:	00800044 	movi	r2,1
 4007590:	1104983a 	sll	r2,r2,r4
 4007594:	f800283a 	ret
 4007598:	00800044 	movi	r2,1
 400759c:	f800283a 	ret
 40075a0:	01400234 	movhi	r5,8
 40075a4:	28c7d83a 	sra	r3,r5,r3
 40075a8:	0005883a 	mov	r2,zero
 40075ac:	f800283a 	ret

040075b0 <__b2d>:
 40075b0:	defffa04 	addi	sp,sp,-24
 40075b4:	dc000015 	stw	r16,0(sp)
 40075b8:	24000417 	ldw	r16,16(r4)
 40075bc:	dc400115 	stw	r17,4(sp)
 40075c0:	24400504 	addi	r17,r4,20
 40075c4:	8421883a 	add	r16,r16,r16
 40075c8:	8421883a 	add	r16,r16,r16
 40075cc:	8c21883a 	add	r16,r17,r16
 40075d0:	dc800215 	stw	r18,8(sp)
 40075d4:	84bfff17 	ldw	r18,-4(r16)
 40075d8:	dd000415 	stw	r20,16(sp)
 40075dc:	dcc00315 	stw	r19,12(sp)
 40075e0:	9009883a 	mov	r4,r18
 40075e4:	2829883a 	mov	r20,r5
 40075e8:	dfc00515 	stw	ra,20(sp)
 40075ec:	4006c880 	call	4006c88 <__hi0bits>
 40075f0:	00c00804 	movi	r3,32
 40075f4:	1889c83a 	sub	r4,r3,r2
 40075f8:	a1000015 	stw	r4,0(r20)
 40075fc:	01000284 	movi	r4,10
 4007600:	84ffff04 	addi	r19,r16,-4
 4007604:	20801216 	blt	r4,r2,4007650 <__b2d+0xa0>
 4007608:	018002c4 	movi	r6,11
 400760c:	308dc83a 	sub	r6,r6,r2
 4007610:	9186d83a 	srl	r3,r18,r6
 4007614:	18cffc34 	orhi	r3,r3,16368
 4007618:	8cc0212e 	bgeu	r17,r19,40076a0 <__b2d+0xf0>
 400761c:	813ffe17 	ldw	r4,-8(r16)
 4007620:	218cd83a 	srl	r6,r4,r6
 4007624:	10800544 	addi	r2,r2,21
 4007628:	9084983a 	sll	r2,r18,r2
 400762c:	1184b03a 	or	r2,r2,r6
 4007630:	dfc00517 	ldw	ra,20(sp)
 4007634:	dd000417 	ldw	r20,16(sp)
 4007638:	dcc00317 	ldw	r19,12(sp)
 400763c:	dc800217 	ldw	r18,8(sp)
 4007640:	dc400117 	ldw	r17,4(sp)
 4007644:	dc000017 	ldw	r16,0(sp)
 4007648:	dec00604 	addi	sp,sp,24
 400764c:	f800283a 	ret
 4007650:	8cc00f2e 	bgeu	r17,r19,4007690 <__b2d+0xe0>
 4007654:	117ffd44 	addi	r5,r2,-11
 4007658:	80bffe17 	ldw	r2,-8(r16)
 400765c:	28000e26 	beq	r5,zero,4007698 <__b2d+0xe8>
 4007660:	1949c83a 	sub	r4,r3,r5
 4007664:	9164983a 	sll	r18,r18,r5
 4007668:	1106d83a 	srl	r3,r2,r4
 400766c:	81bffe04 	addi	r6,r16,-8
 4007670:	948ffc34 	orhi	r18,r18,16368
 4007674:	90c6b03a 	or	r3,r18,r3
 4007678:	89800e2e 	bgeu	r17,r6,40076b4 <__b2d+0x104>
 400767c:	81bffd17 	ldw	r6,-12(r16)
 4007680:	1144983a 	sll	r2,r2,r5
 4007684:	310ad83a 	srl	r5,r6,r4
 4007688:	2884b03a 	or	r2,r5,r2
 400768c:	003fe806 	br	4007630 <__ram_exceptions_end+0xfbf7f394>
 4007690:	10bffd44 	addi	r2,r2,-11
 4007694:	1000041e 	bne	r2,zero,40076a8 <__b2d+0xf8>
 4007698:	90cffc34 	orhi	r3,r18,16368
 400769c:	003fe406 	br	4007630 <__ram_exceptions_end+0xfbf7f394>
 40076a0:	000d883a 	mov	r6,zero
 40076a4:	003fdf06 	br	4007624 <__ram_exceptions_end+0xfbf7f388>
 40076a8:	90a4983a 	sll	r18,r18,r2
 40076ac:	0005883a 	mov	r2,zero
 40076b0:	003ff906 	br	4007698 <__ram_exceptions_end+0xfbf7f3fc>
 40076b4:	1144983a 	sll	r2,r2,r5
 40076b8:	003fdd06 	br	4007630 <__ram_exceptions_end+0xfbf7f394>

040076bc <__d2b>:
 40076bc:	defff804 	addi	sp,sp,-32
 40076c0:	dc000215 	stw	r16,8(sp)
 40076c4:	3021883a 	mov	r16,r6
 40076c8:	dc400315 	stw	r17,12(sp)
 40076cc:	8022907a 	slli	r17,r16,1
 40076d0:	dd000615 	stw	r20,24(sp)
 40076d4:	2829883a 	mov	r20,r5
 40076d8:	01400044 	movi	r5,1
 40076dc:	dcc00515 	stw	r19,20(sp)
 40076e0:	dc800415 	stw	r18,16(sp)
 40076e4:	dfc00715 	stw	ra,28(sp)
 40076e8:	3825883a 	mov	r18,r7
 40076ec:	8822d57a 	srli	r17,r17,21
 40076f0:	400696c0 	call	400696c <_Balloc>
 40076f4:	1027883a 	mov	r19,r2
 40076f8:	00800434 	movhi	r2,16
 40076fc:	10bfffc4 	addi	r2,r2,-1
 4007700:	808c703a 	and	r6,r16,r2
 4007704:	88000126 	beq	r17,zero,400770c <__d2b+0x50>
 4007708:	31800434 	orhi	r6,r6,16
 400770c:	d9800015 	stw	r6,0(sp)
 4007710:	a0002426 	beq	r20,zero,40077a4 <__d2b+0xe8>
 4007714:	d9000104 	addi	r4,sp,4
 4007718:	dd000115 	stw	r20,4(sp)
 400771c:	4006cf00 	call	4006cf0 <__lo0bits>
 4007720:	d8c00017 	ldw	r3,0(sp)
 4007724:	10002f1e 	bne	r2,zero,40077e4 <__d2b+0x128>
 4007728:	d9000117 	ldw	r4,4(sp)
 400772c:	99000515 	stw	r4,20(r19)
 4007730:	1821003a 	cmpeq	r16,r3,zero
 4007734:	01000084 	movi	r4,2
 4007738:	2421c83a 	sub	r16,r4,r16
 400773c:	98c00615 	stw	r3,24(r19)
 4007740:	9c000415 	stw	r16,16(r19)
 4007744:	88001f1e 	bne	r17,zero,40077c4 <__d2b+0x108>
 4007748:	10bef384 	addi	r2,r2,-1074
 400774c:	90800015 	stw	r2,0(r18)
 4007750:	00900034 	movhi	r2,16384
 4007754:	10bfffc4 	addi	r2,r2,-1
 4007758:	8085883a 	add	r2,r16,r2
 400775c:	1085883a 	add	r2,r2,r2
 4007760:	1085883a 	add	r2,r2,r2
 4007764:	9885883a 	add	r2,r19,r2
 4007768:	11000517 	ldw	r4,20(r2)
 400776c:	8020917a 	slli	r16,r16,5
 4007770:	4006c880 	call	4006c88 <__hi0bits>
 4007774:	d8c00817 	ldw	r3,32(sp)
 4007778:	8085c83a 	sub	r2,r16,r2
 400777c:	18800015 	stw	r2,0(r3)
 4007780:	9805883a 	mov	r2,r19
 4007784:	dfc00717 	ldw	ra,28(sp)
 4007788:	dd000617 	ldw	r20,24(sp)
 400778c:	dcc00517 	ldw	r19,20(sp)
 4007790:	dc800417 	ldw	r18,16(sp)
 4007794:	dc400317 	ldw	r17,12(sp)
 4007798:	dc000217 	ldw	r16,8(sp)
 400779c:	dec00804 	addi	sp,sp,32
 40077a0:	f800283a 	ret
 40077a4:	d809883a 	mov	r4,sp
 40077a8:	4006cf00 	call	4006cf0 <__lo0bits>
 40077ac:	d8c00017 	ldw	r3,0(sp)
 40077b0:	04000044 	movi	r16,1
 40077b4:	9c000415 	stw	r16,16(r19)
 40077b8:	98c00515 	stw	r3,20(r19)
 40077bc:	10800804 	addi	r2,r2,32
 40077c0:	883fe126 	beq	r17,zero,4007748 <__ram_exceptions_end+0xfbf7f4ac>
 40077c4:	00c00d44 	movi	r3,53
 40077c8:	8c7ef344 	addi	r17,r17,-1075
 40077cc:	88a3883a 	add	r17,r17,r2
 40077d0:	1885c83a 	sub	r2,r3,r2
 40077d4:	d8c00817 	ldw	r3,32(sp)
 40077d8:	94400015 	stw	r17,0(r18)
 40077dc:	18800015 	stw	r2,0(r3)
 40077e0:	003fe706 	br	4007780 <__ram_exceptions_end+0xfbf7f4e4>
 40077e4:	01000804 	movi	r4,32
 40077e8:	2089c83a 	sub	r4,r4,r2
 40077ec:	1908983a 	sll	r4,r3,r4
 40077f0:	d9400117 	ldw	r5,4(sp)
 40077f4:	1886d83a 	srl	r3,r3,r2
 40077f8:	2148b03a 	or	r4,r4,r5
 40077fc:	99000515 	stw	r4,20(r19)
 4007800:	d8c00015 	stw	r3,0(sp)
 4007804:	003fca06 	br	4007730 <__ram_exceptions_end+0xfbf7f494>

04007808 <__ratio>:
 4007808:	defff904 	addi	sp,sp,-28
 400780c:	dc400315 	stw	r17,12(sp)
 4007810:	2823883a 	mov	r17,r5
 4007814:	d9400104 	addi	r5,sp,4
 4007818:	dfc00615 	stw	ra,24(sp)
 400781c:	dcc00515 	stw	r19,20(sp)
 4007820:	dc800415 	stw	r18,16(sp)
 4007824:	2027883a 	mov	r19,r4
 4007828:	dc000215 	stw	r16,8(sp)
 400782c:	40075b00 	call	40075b0 <__b2d>
 4007830:	d80b883a 	mov	r5,sp
 4007834:	8809883a 	mov	r4,r17
 4007838:	1025883a 	mov	r18,r2
 400783c:	1821883a 	mov	r16,r3
 4007840:	40075b00 	call	40075b0 <__b2d>
 4007844:	8a000417 	ldw	r8,16(r17)
 4007848:	99000417 	ldw	r4,16(r19)
 400784c:	d9400117 	ldw	r5,4(sp)
 4007850:	2209c83a 	sub	r4,r4,r8
 4007854:	2010917a 	slli	r8,r4,5
 4007858:	d9000017 	ldw	r4,0(sp)
 400785c:	2909c83a 	sub	r4,r5,r4
 4007860:	4109883a 	add	r4,r8,r4
 4007864:	01000e0e 	bge	zero,r4,40078a0 <__ratio+0x98>
 4007868:	2008953a 	slli	r4,r4,20
 400786c:	2421883a 	add	r16,r4,r16
 4007870:	100d883a 	mov	r6,r2
 4007874:	180f883a 	mov	r7,r3
 4007878:	9009883a 	mov	r4,r18
 400787c:	800b883a 	mov	r5,r16
 4007880:	400bdd40 	call	400bdd4 <__divdf3>
 4007884:	dfc00617 	ldw	ra,24(sp)
 4007888:	dcc00517 	ldw	r19,20(sp)
 400788c:	dc800417 	ldw	r18,16(sp)
 4007890:	dc400317 	ldw	r17,12(sp)
 4007894:	dc000217 	ldw	r16,8(sp)
 4007898:	dec00704 	addi	sp,sp,28
 400789c:	f800283a 	ret
 40078a0:	2008953a 	slli	r4,r4,20
 40078a4:	1907c83a 	sub	r3,r3,r4
 40078a8:	003ff106 	br	4007870 <__ram_exceptions_end+0xfbf7f5d4>

040078ac <_mprec_log10>:
 40078ac:	defffe04 	addi	sp,sp,-8
 40078b0:	dc000015 	stw	r16,0(sp)
 40078b4:	dfc00115 	stw	ra,4(sp)
 40078b8:	008005c4 	movi	r2,23
 40078bc:	2021883a 	mov	r16,r4
 40078c0:	11000d0e 	bge	r2,r4,40078f8 <_mprec_log10+0x4c>
 40078c4:	0005883a 	mov	r2,zero
 40078c8:	00cffc34 	movhi	r3,16368
 40078cc:	843fffc4 	addi	r16,r16,-1
 40078d0:	000d883a 	mov	r6,zero
 40078d4:	01d00934 	movhi	r7,16420
 40078d8:	1009883a 	mov	r4,r2
 40078dc:	180b883a 	mov	r5,r3
 40078e0:	400c9fc0 	call	400c9fc <__muldf3>
 40078e4:	803ff91e 	bne	r16,zero,40078cc <__ram_exceptions_end+0xfbf7f630>
 40078e8:	dfc00117 	ldw	ra,4(sp)
 40078ec:	dc000017 	ldw	r16,0(sp)
 40078f0:	dec00204 	addi	sp,sp,8
 40078f4:	f800283a 	ret
 40078f8:	202090fa 	slli	r16,r4,3
 40078fc:	00810074 	movhi	r2,1025
 4007900:	10964b04 	addi	r2,r2,22828
 4007904:	1421883a 	add	r16,r2,r16
 4007908:	80800017 	ldw	r2,0(r16)
 400790c:	80c00117 	ldw	r3,4(r16)
 4007910:	dfc00117 	ldw	ra,4(sp)
 4007914:	dc000017 	ldw	r16,0(sp)
 4007918:	dec00204 	addi	sp,sp,8
 400791c:	f800283a 	ret

04007920 <__copybits>:
 4007920:	297fffc4 	addi	r5,r5,-1
 4007924:	280fd17a 	srai	r7,r5,5
 4007928:	30c00417 	ldw	r3,16(r6)
 400792c:	30800504 	addi	r2,r6,20
 4007930:	39c00044 	addi	r7,r7,1
 4007934:	18c7883a 	add	r3,r3,r3
 4007938:	39cf883a 	add	r7,r7,r7
 400793c:	18c7883a 	add	r3,r3,r3
 4007940:	39cf883a 	add	r7,r7,r7
 4007944:	10c7883a 	add	r3,r2,r3
 4007948:	21cf883a 	add	r7,r4,r7
 400794c:	10c00d2e 	bgeu	r2,r3,4007984 <__copybits+0x64>
 4007950:	200b883a 	mov	r5,r4
 4007954:	12000017 	ldw	r8,0(r2)
 4007958:	29400104 	addi	r5,r5,4
 400795c:	10800104 	addi	r2,r2,4
 4007960:	2a3fff15 	stw	r8,-4(r5)
 4007964:	10fffb36 	bltu	r2,r3,4007954 <__ram_exceptions_end+0xfbf7f6b8>
 4007968:	1985c83a 	sub	r2,r3,r6
 400796c:	10bffac4 	addi	r2,r2,-21
 4007970:	1004d0ba 	srli	r2,r2,2
 4007974:	10800044 	addi	r2,r2,1
 4007978:	1085883a 	add	r2,r2,r2
 400797c:	1085883a 	add	r2,r2,r2
 4007980:	2089883a 	add	r4,r4,r2
 4007984:	21c0032e 	bgeu	r4,r7,4007994 <__copybits+0x74>
 4007988:	20000015 	stw	zero,0(r4)
 400798c:	21000104 	addi	r4,r4,4
 4007990:	21fffd36 	bltu	r4,r7,4007988 <__ram_exceptions_end+0xfbf7f6ec>
 4007994:	f800283a 	ret

04007998 <__any_on>:
 4007998:	20c00417 	ldw	r3,16(r4)
 400799c:	2805d17a 	srai	r2,r5,5
 40079a0:	21000504 	addi	r4,r4,20
 40079a4:	18800d0e 	bge	r3,r2,40079dc <__any_on+0x44>
 40079a8:	18c7883a 	add	r3,r3,r3
 40079ac:	18c7883a 	add	r3,r3,r3
 40079b0:	20c7883a 	add	r3,r4,r3
 40079b4:	20c0192e 	bgeu	r4,r3,4007a1c <__any_on+0x84>
 40079b8:	18bfff17 	ldw	r2,-4(r3)
 40079bc:	18ffff04 	addi	r3,r3,-4
 40079c0:	1000041e 	bne	r2,zero,40079d4 <__any_on+0x3c>
 40079c4:	20c0142e 	bgeu	r4,r3,4007a18 <__any_on+0x80>
 40079c8:	18ffff04 	addi	r3,r3,-4
 40079cc:	19400017 	ldw	r5,0(r3)
 40079d0:	283ffc26 	beq	r5,zero,40079c4 <__ram_exceptions_end+0xfbf7f728>
 40079d4:	00800044 	movi	r2,1
 40079d8:	f800283a 	ret
 40079dc:	10c00a0e 	bge	r2,r3,4007a08 <__any_on+0x70>
 40079e0:	1085883a 	add	r2,r2,r2
 40079e4:	1085883a 	add	r2,r2,r2
 40079e8:	294007cc 	andi	r5,r5,31
 40079ec:	2087883a 	add	r3,r4,r2
 40079f0:	283ff026 	beq	r5,zero,40079b4 <__ram_exceptions_end+0xfbf7f718>
 40079f4:	19800017 	ldw	r6,0(r3)
 40079f8:	3144d83a 	srl	r2,r6,r5
 40079fc:	114a983a 	sll	r5,r2,r5
 4007a00:	317ff41e 	bne	r6,r5,40079d4 <__ram_exceptions_end+0xfbf7f738>
 4007a04:	003feb06 	br	40079b4 <__ram_exceptions_end+0xfbf7f718>
 4007a08:	1085883a 	add	r2,r2,r2
 4007a0c:	1085883a 	add	r2,r2,r2
 4007a10:	2087883a 	add	r3,r4,r2
 4007a14:	003fe706 	br	40079b4 <__ram_exceptions_end+0xfbf7f718>
 4007a18:	f800283a 	ret
 4007a1c:	0005883a 	mov	r2,zero
 4007a20:	f800283a 	ret

04007a24 <__fpclassifyd>:
 4007a24:	00a00034 	movhi	r2,32768
 4007a28:	10bfffc4 	addi	r2,r2,-1
 4007a2c:	2884703a 	and	r2,r5,r2
 4007a30:	10000726 	beq	r2,zero,4007a50 <__fpclassifyd+0x2c>
 4007a34:	00fffc34 	movhi	r3,65520
 4007a38:	019ff834 	movhi	r6,32736
 4007a3c:	28c7883a 	add	r3,r5,r3
 4007a40:	31bfffc4 	addi	r6,r6,-1
 4007a44:	30c00536 	bltu	r6,r3,4007a5c <__fpclassifyd+0x38>
 4007a48:	00800104 	movi	r2,4
 4007a4c:	f800283a 	ret
 4007a50:	2000021e 	bne	r4,zero,4007a5c <__fpclassifyd+0x38>
 4007a54:	00800084 	movi	r2,2
 4007a58:	f800283a 	ret
 4007a5c:	00dffc34 	movhi	r3,32752
 4007a60:	019ff834 	movhi	r6,32736
 4007a64:	28cb883a 	add	r5,r5,r3
 4007a68:	31bfffc4 	addi	r6,r6,-1
 4007a6c:	317ff62e 	bgeu	r6,r5,4007a48 <__ram_exceptions_end+0xfbf7f7ac>
 4007a70:	01400434 	movhi	r5,16
 4007a74:	297fffc4 	addi	r5,r5,-1
 4007a78:	28800236 	bltu	r5,r2,4007a84 <__fpclassifyd+0x60>
 4007a7c:	008000c4 	movi	r2,3
 4007a80:	f800283a 	ret
 4007a84:	10c00226 	beq	r2,r3,4007a90 <__fpclassifyd+0x6c>
 4007a88:	0005883a 	mov	r2,zero
 4007a8c:	f800283a 	ret
 4007a90:	2005003a 	cmpeq	r2,r4,zero
 4007a94:	f800283a 	ret

04007a98 <_sbrk_r>:
 4007a98:	defffd04 	addi	sp,sp,-12
 4007a9c:	dc000015 	stw	r16,0(sp)
 4007aa0:	04010074 	movhi	r16,1025
 4007aa4:	dc400115 	stw	r17,4(sp)
 4007aa8:	841e5c04 	addi	r16,r16,31088
 4007aac:	2023883a 	mov	r17,r4
 4007ab0:	2809883a 	mov	r4,r5
 4007ab4:	dfc00215 	stw	ra,8(sp)
 4007ab8:	80000015 	stw	zero,0(r16)
 4007abc:	400e5640 	call	400e564 <sbrk>
 4007ac0:	00ffffc4 	movi	r3,-1
 4007ac4:	10c00526 	beq	r2,r3,4007adc <_sbrk_r+0x44>
 4007ac8:	dfc00217 	ldw	ra,8(sp)
 4007acc:	dc400117 	ldw	r17,4(sp)
 4007ad0:	dc000017 	ldw	r16,0(sp)
 4007ad4:	dec00304 	addi	sp,sp,12
 4007ad8:	f800283a 	ret
 4007adc:	80c00017 	ldw	r3,0(r16)
 4007ae0:	183ff926 	beq	r3,zero,4007ac8 <__ram_exceptions_end+0xfbf7f82c>
 4007ae4:	88c00015 	stw	r3,0(r17)
 4007ae8:	003ff706 	br	4007ac8 <__ram_exceptions_end+0xfbf7f82c>

04007aec <__sread>:
 4007aec:	defffe04 	addi	sp,sp,-8
 4007af0:	dc000015 	stw	r16,0(sp)
 4007af4:	2821883a 	mov	r16,r5
 4007af8:	2940038f 	ldh	r5,14(r5)
 4007afc:	dfc00115 	stw	ra,4(sp)
 4007b00:	400a0640 	call	400a064 <_read_r>
 4007b04:	10000716 	blt	r2,zero,4007b24 <__sread+0x38>
 4007b08:	80c01417 	ldw	r3,80(r16)
 4007b0c:	1887883a 	add	r3,r3,r2
 4007b10:	80c01415 	stw	r3,80(r16)
 4007b14:	dfc00117 	ldw	ra,4(sp)
 4007b18:	dc000017 	ldw	r16,0(sp)
 4007b1c:	dec00204 	addi	sp,sp,8
 4007b20:	f800283a 	ret
 4007b24:	80c0030b 	ldhu	r3,12(r16)
 4007b28:	18fbffcc 	andi	r3,r3,61439
 4007b2c:	80c0030d 	sth	r3,12(r16)
 4007b30:	dfc00117 	ldw	ra,4(sp)
 4007b34:	dc000017 	ldw	r16,0(sp)
 4007b38:	dec00204 	addi	sp,sp,8
 4007b3c:	f800283a 	ret

04007b40 <__seofread>:
 4007b40:	0005883a 	mov	r2,zero
 4007b44:	f800283a 	ret

04007b48 <__swrite>:
 4007b48:	2880030b 	ldhu	r2,12(r5)
 4007b4c:	defffb04 	addi	sp,sp,-20
 4007b50:	dcc00315 	stw	r19,12(sp)
 4007b54:	dc800215 	stw	r18,8(sp)
 4007b58:	dc400115 	stw	r17,4(sp)
 4007b5c:	dc000015 	stw	r16,0(sp)
 4007b60:	dfc00415 	stw	ra,16(sp)
 4007b64:	10c0400c 	andi	r3,r2,256
 4007b68:	2821883a 	mov	r16,r5
 4007b6c:	2023883a 	mov	r17,r4
 4007b70:	3025883a 	mov	r18,r6
 4007b74:	3827883a 	mov	r19,r7
 4007b78:	18000526 	beq	r3,zero,4007b90 <__swrite+0x48>
 4007b7c:	2940038f 	ldh	r5,14(r5)
 4007b80:	01c00084 	movi	r7,2
 4007b84:	000d883a 	mov	r6,zero
 4007b88:	4009ea80 	call	4009ea8 <_lseek_r>
 4007b8c:	8080030b 	ldhu	r2,12(r16)
 4007b90:	8140038f 	ldh	r5,14(r16)
 4007b94:	10bbffcc 	andi	r2,r2,61439
 4007b98:	980f883a 	mov	r7,r19
 4007b9c:	900d883a 	mov	r6,r18
 4007ba0:	8809883a 	mov	r4,r17
 4007ba4:	8080030d 	sth	r2,12(r16)
 4007ba8:	dfc00417 	ldw	ra,16(sp)
 4007bac:	dcc00317 	ldw	r19,12(sp)
 4007bb0:	dc800217 	ldw	r18,8(sp)
 4007bb4:	dc400117 	ldw	r17,4(sp)
 4007bb8:	dc000017 	ldw	r16,0(sp)
 4007bbc:	dec00504 	addi	sp,sp,20
 4007bc0:	40094941 	jmpi	4009494 <_write_r>

04007bc4 <__sseek>:
 4007bc4:	defffe04 	addi	sp,sp,-8
 4007bc8:	dc000015 	stw	r16,0(sp)
 4007bcc:	2821883a 	mov	r16,r5
 4007bd0:	2940038f 	ldh	r5,14(r5)
 4007bd4:	dfc00115 	stw	ra,4(sp)
 4007bd8:	4009ea80 	call	4009ea8 <_lseek_r>
 4007bdc:	00ffffc4 	movi	r3,-1
 4007be0:	10c00826 	beq	r2,r3,4007c04 <__sseek+0x40>
 4007be4:	80c0030b 	ldhu	r3,12(r16)
 4007be8:	80801415 	stw	r2,80(r16)
 4007bec:	18c40014 	ori	r3,r3,4096
 4007bf0:	80c0030d 	sth	r3,12(r16)
 4007bf4:	dfc00117 	ldw	ra,4(sp)
 4007bf8:	dc000017 	ldw	r16,0(sp)
 4007bfc:	dec00204 	addi	sp,sp,8
 4007c00:	f800283a 	ret
 4007c04:	80c0030b 	ldhu	r3,12(r16)
 4007c08:	18fbffcc 	andi	r3,r3,61439
 4007c0c:	80c0030d 	sth	r3,12(r16)
 4007c10:	dfc00117 	ldw	ra,4(sp)
 4007c14:	dc000017 	ldw	r16,0(sp)
 4007c18:	dec00204 	addi	sp,sp,8
 4007c1c:	f800283a 	ret

04007c20 <__sclose>:
 4007c20:	2940038f 	ldh	r5,14(r5)
 4007c24:	40094f41 	jmpi	40094f4 <_close_r>

04007c28 <strcmp>:
 4007c28:	2144b03a 	or	r2,r4,r5
 4007c2c:	108000cc 	andi	r2,r2,3
 4007c30:	1000171e 	bne	r2,zero,4007c90 <strcmp+0x68>
 4007c34:	20800017 	ldw	r2,0(r4)
 4007c38:	28c00017 	ldw	r3,0(r5)
 4007c3c:	10c0141e 	bne	r2,r3,4007c90 <strcmp+0x68>
 4007c40:	027fbff4 	movhi	r9,65279
 4007c44:	4a7fbfc4 	addi	r9,r9,-257
 4007c48:	0086303a 	nor	r3,zero,r2
 4007c4c:	02202074 	movhi	r8,32897
 4007c50:	1245883a 	add	r2,r2,r9
 4007c54:	42202004 	addi	r8,r8,-32640
 4007c58:	10c4703a 	and	r2,r2,r3
 4007c5c:	1204703a 	and	r2,r2,r8
 4007c60:	10000226 	beq	r2,zero,4007c6c <strcmp+0x44>
 4007c64:	00002306 	br	4007cf4 <strcmp+0xcc>
 4007c68:	1000221e 	bne	r2,zero,4007cf4 <strcmp+0xcc>
 4007c6c:	21000104 	addi	r4,r4,4
 4007c70:	20c00017 	ldw	r3,0(r4)
 4007c74:	29400104 	addi	r5,r5,4
 4007c78:	29800017 	ldw	r6,0(r5)
 4007c7c:	1a4f883a 	add	r7,r3,r9
 4007c80:	00c4303a 	nor	r2,zero,r3
 4007c84:	3884703a 	and	r2,r7,r2
 4007c88:	1204703a 	and	r2,r2,r8
 4007c8c:	19bff626 	beq	r3,r6,4007c68 <__ram_exceptions_end+0xfbf7f9cc>
 4007c90:	20800003 	ldbu	r2,0(r4)
 4007c94:	10c03fcc 	andi	r3,r2,255
 4007c98:	18c0201c 	xori	r3,r3,128
 4007c9c:	18ffe004 	addi	r3,r3,-128
 4007ca0:	18000c26 	beq	r3,zero,4007cd4 <strcmp+0xac>
 4007ca4:	29800007 	ldb	r6,0(r5)
 4007ca8:	19800326 	beq	r3,r6,4007cb8 <strcmp+0x90>
 4007cac:	00001306 	br	4007cfc <strcmp+0xd4>
 4007cb0:	29800007 	ldb	r6,0(r5)
 4007cb4:	11800b1e 	bne	r2,r6,4007ce4 <strcmp+0xbc>
 4007cb8:	21000044 	addi	r4,r4,1
 4007cbc:	20c00003 	ldbu	r3,0(r4)
 4007cc0:	29400044 	addi	r5,r5,1
 4007cc4:	18803fcc 	andi	r2,r3,255
 4007cc8:	1080201c 	xori	r2,r2,128
 4007ccc:	10bfe004 	addi	r2,r2,-128
 4007cd0:	103ff71e 	bne	r2,zero,4007cb0 <__ram_exceptions_end+0xfbf7fa14>
 4007cd4:	0007883a 	mov	r3,zero
 4007cd8:	28800003 	ldbu	r2,0(r5)
 4007cdc:	1885c83a 	sub	r2,r3,r2
 4007ce0:	f800283a 	ret
 4007ce4:	28800003 	ldbu	r2,0(r5)
 4007ce8:	18c03fcc 	andi	r3,r3,255
 4007cec:	1885c83a 	sub	r2,r3,r2
 4007cf0:	f800283a 	ret
 4007cf4:	0005883a 	mov	r2,zero
 4007cf8:	f800283a 	ret
 4007cfc:	10c03fcc 	andi	r3,r2,255
 4007d00:	003ff506 	br	4007cd8 <__ram_exceptions_end+0xfbf7fa3c>

04007d04 <strlen>:
 4007d04:	208000cc 	andi	r2,r4,3
 4007d08:	10002026 	beq	r2,zero,4007d8c <strlen+0x88>
 4007d0c:	20800007 	ldb	r2,0(r4)
 4007d10:	10002026 	beq	r2,zero,4007d94 <strlen+0x90>
 4007d14:	2005883a 	mov	r2,r4
 4007d18:	00000206 	br	4007d24 <strlen+0x20>
 4007d1c:	10c00007 	ldb	r3,0(r2)
 4007d20:	18001826 	beq	r3,zero,4007d84 <strlen+0x80>
 4007d24:	10800044 	addi	r2,r2,1
 4007d28:	10c000cc 	andi	r3,r2,3
 4007d2c:	183ffb1e 	bne	r3,zero,4007d1c <__ram_exceptions_end+0xfbf7fa80>
 4007d30:	10c00017 	ldw	r3,0(r2)
 4007d34:	01ffbff4 	movhi	r7,65279
 4007d38:	39ffbfc4 	addi	r7,r7,-257
 4007d3c:	00ca303a 	nor	r5,zero,r3
 4007d40:	01a02074 	movhi	r6,32897
 4007d44:	19c7883a 	add	r3,r3,r7
 4007d48:	31a02004 	addi	r6,r6,-32640
 4007d4c:	1946703a 	and	r3,r3,r5
 4007d50:	1986703a 	and	r3,r3,r6
 4007d54:	1800091e 	bne	r3,zero,4007d7c <strlen+0x78>
 4007d58:	10800104 	addi	r2,r2,4
 4007d5c:	10c00017 	ldw	r3,0(r2)
 4007d60:	19cb883a 	add	r5,r3,r7
 4007d64:	00c6303a 	nor	r3,zero,r3
 4007d68:	28c6703a 	and	r3,r5,r3
 4007d6c:	1986703a 	and	r3,r3,r6
 4007d70:	183ff926 	beq	r3,zero,4007d58 <__ram_exceptions_end+0xfbf7fabc>
 4007d74:	00000106 	br	4007d7c <strlen+0x78>
 4007d78:	10800044 	addi	r2,r2,1
 4007d7c:	10c00007 	ldb	r3,0(r2)
 4007d80:	183ffd1e 	bne	r3,zero,4007d78 <__ram_exceptions_end+0xfbf7fadc>
 4007d84:	1105c83a 	sub	r2,r2,r4
 4007d88:	f800283a 	ret
 4007d8c:	2005883a 	mov	r2,r4
 4007d90:	003fe706 	br	4007d30 <__ram_exceptions_end+0xfbf7fa94>
 4007d94:	0005883a 	mov	r2,zero
 4007d98:	f800283a 	ret

04007d9c <__sprint_r.part.0>:
 4007d9c:	28801917 	ldw	r2,100(r5)
 4007da0:	defff604 	addi	sp,sp,-40
 4007da4:	dd400515 	stw	r21,20(sp)
 4007da8:	dfc00915 	stw	ra,36(sp)
 4007dac:	df000815 	stw	fp,32(sp)
 4007db0:	ddc00715 	stw	r23,28(sp)
 4007db4:	dd800615 	stw	r22,24(sp)
 4007db8:	dd000415 	stw	r20,16(sp)
 4007dbc:	dcc00315 	stw	r19,12(sp)
 4007dc0:	dc800215 	stw	r18,8(sp)
 4007dc4:	dc400115 	stw	r17,4(sp)
 4007dc8:	dc000015 	stw	r16,0(sp)
 4007dcc:	1088000c 	andi	r2,r2,8192
 4007dd0:	302b883a 	mov	r21,r6
 4007dd4:	10002e26 	beq	r2,zero,4007e90 <__sprint_r.part.0+0xf4>
 4007dd8:	30800217 	ldw	r2,8(r6)
 4007ddc:	35800017 	ldw	r22,0(r6)
 4007de0:	10002926 	beq	r2,zero,4007e88 <__sprint_r.part.0+0xec>
 4007de4:	2827883a 	mov	r19,r5
 4007de8:	2029883a 	mov	r20,r4
 4007dec:	b5c00104 	addi	r23,r22,4
 4007df0:	04bfffc4 	movi	r18,-1
 4007df4:	bc400017 	ldw	r17,0(r23)
 4007df8:	b4000017 	ldw	r16,0(r22)
 4007dfc:	0039883a 	mov	fp,zero
 4007e00:	8822d0ba 	srli	r17,r17,2
 4007e04:	8800031e 	bne	r17,zero,4007e14 <__sprint_r.part.0+0x78>
 4007e08:	00001806 	br	4007e6c <__sprint_r.part.0+0xd0>
 4007e0c:	84000104 	addi	r16,r16,4
 4007e10:	8f001526 	beq	r17,fp,4007e68 <__sprint_r.part.0+0xcc>
 4007e14:	81400017 	ldw	r5,0(r16)
 4007e18:	980d883a 	mov	r6,r19
 4007e1c:	a009883a 	mov	r4,r20
 4007e20:	400988c0 	call	400988c <_fputwc_r>
 4007e24:	e7000044 	addi	fp,fp,1
 4007e28:	14bff81e 	bne	r2,r18,4007e0c <__ram_exceptions_end+0xfbf7fb70>
 4007e2c:	9005883a 	mov	r2,r18
 4007e30:	a8000215 	stw	zero,8(r21)
 4007e34:	a8000115 	stw	zero,4(r21)
 4007e38:	dfc00917 	ldw	ra,36(sp)
 4007e3c:	df000817 	ldw	fp,32(sp)
 4007e40:	ddc00717 	ldw	r23,28(sp)
 4007e44:	dd800617 	ldw	r22,24(sp)
 4007e48:	dd400517 	ldw	r21,20(sp)
 4007e4c:	dd000417 	ldw	r20,16(sp)
 4007e50:	dcc00317 	ldw	r19,12(sp)
 4007e54:	dc800217 	ldw	r18,8(sp)
 4007e58:	dc400117 	ldw	r17,4(sp)
 4007e5c:	dc000017 	ldw	r16,0(sp)
 4007e60:	dec00a04 	addi	sp,sp,40
 4007e64:	f800283a 	ret
 4007e68:	a8800217 	ldw	r2,8(r21)
 4007e6c:	8c63883a 	add	r17,r17,r17
 4007e70:	8c63883a 	add	r17,r17,r17
 4007e74:	1445c83a 	sub	r2,r2,r17
 4007e78:	a8800215 	stw	r2,8(r21)
 4007e7c:	b5800204 	addi	r22,r22,8
 4007e80:	bdc00204 	addi	r23,r23,8
 4007e84:	103fdb1e 	bne	r2,zero,4007df4 <__ram_exceptions_end+0xfbf7fb58>
 4007e88:	0005883a 	mov	r2,zero
 4007e8c:	003fe806 	br	4007e30 <__ram_exceptions_end+0xfbf7fb94>
 4007e90:	400998c0 	call	400998c <__sfvwrite_r>
 4007e94:	003fe606 	br	4007e30 <__ram_exceptions_end+0xfbf7fb94>

04007e98 <__sprint_r>:
 4007e98:	30c00217 	ldw	r3,8(r6)
 4007e9c:	18000126 	beq	r3,zero,4007ea4 <__sprint_r+0xc>
 4007ea0:	4007d9c1 	jmpi	4007d9c <__sprint_r.part.0>
 4007ea4:	30000115 	stw	zero,4(r6)
 4007ea8:	0005883a 	mov	r2,zero
 4007eac:	f800283a 	ret

04007eb0 <___vfiprintf_internal_r>:
 4007eb0:	deffca04 	addi	sp,sp,-216
 4007eb4:	dd403115 	stw	r21,196(sp)
 4007eb8:	dfc03515 	stw	ra,212(sp)
 4007ebc:	df003415 	stw	fp,208(sp)
 4007ec0:	ddc03315 	stw	r23,204(sp)
 4007ec4:	dd803215 	stw	r22,200(sp)
 4007ec8:	dd003015 	stw	r20,192(sp)
 4007ecc:	dcc02f15 	stw	r19,188(sp)
 4007ed0:	dc802e15 	stw	r18,184(sp)
 4007ed4:	dc402d15 	stw	r17,180(sp)
 4007ed8:	dc002c15 	stw	r16,176(sp)
 4007edc:	d9002115 	stw	r4,132(sp)
 4007ee0:	d9402015 	stw	r5,128(sp)
 4007ee4:	d9c02215 	stw	r7,136(sp)
 4007ee8:	302b883a 	mov	r21,r6
 4007eec:	20000226 	beq	r4,zero,4007ef8 <___vfiprintf_internal_r+0x48>
 4007ef0:	20800e17 	ldw	r2,56(r4)
 4007ef4:	1000cf26 	beq	r2,zero,4008234 <___vfiprintf_internal_r+0x384>
 4007ef8:	d8c02017 	ldw	r3,128(sp)
 4007efc:	1880030b 	ldhu	r2,12(r3)
 4007f00:	10c8000c 	andi	r3,r2,8192
 4007f04:	1800071e 	bne	r3,zero,4007f24 <___vfiprintf_internal_r+0x74>
 4007f08:	d9402017 	ldw	r5,128(sp)
 4007f0c:	00f7ffc4 	movi	r3,-8193
 4007f10:	10880014 	ori	r2,r2,8192
 4007f14:	29001917 	ldw	r4,100(r5)
 4007f18:	2880030d 	sth	r2,12(r5)
 4007f1c:	20c6703a 	and	r3,r4,r3
 4007f20:	28c01915 	stw	r3,100(r5)
 4007f24:	10c0020c 	andi	r3,r2,8
 4007f28:	1800a526 	beq	r3,zero,40081c0 <___vfiprintf_internal_r+0x310>
 4007f2c:	d9002017 	ldw	r4,128(sp)
 4007f30:	20c00417 	ldw	r3,16(r4)
 4007f34:	1800a226 	beq	r3,zero,40081c0 <___vfiprintf_internal_r+0x310>
 4007f38:	1080068c 	andi	r2,r2,26
 4007f3c:	00c00284 	movi	r3,10
 4007f40:	10c0a826 	beq	r2,r3,40081e4 <___vfiprintf_internal_r+0x334>
 4007f44:	d9001a04 	addi	r4,sp,104
 4007f48:	d94019c4 	addi	r5,sp,103
 4007f4c:	04810074 	movhi	r18,1025
 4007f50:	2145c83a 	sub	r2,r4,r5
 4007f54:	94967d04 	addi	r18,r18,23028
 4007f58:	d9001e15 	stw	r4,120(sp)
 4007f5c:	d9401f15 	stw	r5,124(sp)
 4007f60:	dec01a15 	stw	sp,104(sp)
 4007f64:	d8001c15 	stw	zero,112(sp)
 4007f68:	d8001b15 	stw	zero,108(sp)
 4007f6c:	d811883a 	mov	r8,sp
 4007f70:	d8002615 	stw	zero,152(sp)
 4007f74:	d8002415 	stw	zero,144(sp)
 4007f78:	d8802815 	stw	r2,160(sp)
 4007f7c:	a82d883a 	mov	r22,r21
 4007f80:	b0800007 	ldb	r2,0(r22)
 4007f84:	10040d26 	beq	r2,zero,4008fbc <___vfiprintf_internal_r+0x110c>
 4007f88:	00c00944 	movi	r3,37
 4007f8c:	b029883a 	mov	r20,r22
 4007f90:	10c0021e 	bne	r2,r3,4007f9c <___vfiprintf_internal_r+0xec>
 4007f94:	00001606 	br	4007ff0 <___vfiprintf_internal_r+0x140>
 4007f98:	10c00326 	beq	r2,r3,4007fa8 <___vfiprintf_internal_r+0xf8>
 4007f9c:	a5000044 	addi	r20,r20,1
 4007fa0:	a0800007 	ldb	r2,0(r20)
 4007fa4:	103ffc1e 	bne	r2,zero,4007f98 <__ram_exceptions_end+0xfbf7fcfc>
 4007fa8:	a5a1c83a 	sub	r16,r20,r22
 4007fac:	80001026 	beq	r16,zero,4007ff0 <___vfiprintf_internal_r+0x140>
 4007fb0:	d8c01c17 	ldw	r3,112(sp)
 4007fb4:	d8801b17 	ldw	r2,108(sp)
 4007fb8:	45800015 	stw	r22,0(r8)
 4007fbc:	80c7883a 	add	r3,r16,r3
 4007fc0:	10800044 	addi	r2,r2,1
 4007fc4:	44000115 	stw	r16,4(r8)
 4007fc8:	d8c01c15 	stw	r3,112(sp)
 4007fcc:	d8801b15 	stw	r2,108(sp)
 4007fd0:	010001c4 	movi	r4,7
 4007fd4:	2080750e 	bge	r4,r2,40081ac <___vfiprintf_internal_r+0x2fc>
 4007fd8:	1803951e 	bne	r3,zero,4008e30 <___vfiprintf_internal_r+0xf80>
 4007fdc:	d8c02417 	ldw	r3,144(sp)
 4007fe0:	d8001b15 	stw	zero,108(sp)
 4007fe4:	d811883a 	mov	r8,sp
 4007fe8:	1c07883a 	add	r3,r3,r16
 4007fec:	d8c02415 	stw	r3,144(sp)
 4007ff0:	a0800007 	ldb	r2,0(r20)
 4007ff4:	1002e026 	beq	r2,zero,4008b78 <___vfiprintf_internal_r+0xcc8>
 4007ff8:	a5800044 	addi	r22,r20,1
 4007ffc:	a0c00047 	ldb	r3,1(r20)
 4008000:	d8001d85 	stb	zero,118(sp)
 4008004:	0027883a 	mov	r19,zero
 4008008:	d8002305 	stb	zero,140(sp)
 400800c:	043fffc4 	movi	r16,-1
 4008010:	d8002515 	stw	zero,148(sp)
 4008014:	0023883a 	mov	r17,zero
 4008018:	05001604 	movi	r20,88
 400801c:	05400244 	movi	r21,9
 4008020:	402f883a 	mov	r23,r8
 4008024:	b5800044 	addi	r22,r22,1
 4008028:	18bff804 	addi	r2,r3,-32
 400802c:	a0827736 	bltu	r20,r2,4008a0c <___vfiprintf_internal_r+0xb5c>
 4008030:	100490ba 	slli	r2,r2,2
 4008034:	01010074 	movhi	r4,1025
 4008038:	21201204 	addi	r4,r4,-32696
 400803c:	1105883a 	add	r2,r2,r4
 4008040:	10800017 	ldw	r2,0(r2)
 4008044:	1000683a 	jmp	r2
 4008048:	0400870c 	andi	r16,zero,540
 400804c:	04008a0c 	andi	r16,zero,552
 4008050:	04008a0c 	andi	r16,zero,552
 4008054:	04008728 	cmpgeui	r16,zero,540
 4008058:	04008a0c 	andi	r16,zero,552
 400805c:	04008a0c 	andi	r16,zero,552
 4008060:	04008a0c 	andi	r16,zero,552
 4008064:	04008a0c 	andi	r16,zero,552
 4008068:	04008a0c 	andi	r16,zero,552
 400806c:	04008a0c 	andi	r16,zero,552
 4008070:	04008930 	cmpltui	r16,zero,548
 4008074:	04008954 	movui	r16,549
 4008078:	04008a0c 	andi	r16,zero,552
 400807c:	0400824c 	andi	r16,zero,521
 4008080:	04008968 	cmpgeui	r16,zero,549
 4008084:	04008a0c 	andi	r16,zero,552
 4008088:	04008734 	movhi	r16,540
 400808c:	04008740 	call	400874 <alt_exception_trap+0x400874>
 4008090:	04008740 	call	400874 <alt_exception_trap+0x400874>
 4008094:	04008740 	call	400874 <alt_exception_trap+0x400874>
 4008098:	04008740 	call	400874 <alt_exception_trap+0x400874>
 400809c:	04008740 	call	400874 <alt_exception_trap+0x400874>
 40080a0:	04008740 	call	400874 <alt_exception_trap+0x400874>
 40080a4:	04008740 	call	400874 <alt_exception_trap+0x400874>
 40080a8:	04008740 	call	400874 <alt_exception_trap+0x400874>
 40080ac:	04008740 	call	400874 <alt_exception_trap+0x400874>
 40080b0:	04008a0c 	andi	r16,zero,552
 40080b4:	04008a0c 	andi	r16,zero,552
 40080b8:	04008a0c 	andi	r16,zero,552
 40080bc:	04008a0c 	andi	r16,zero,552
 40080c0:	04008a0c 	andi	r16,zero,552
 40080c4:	04008a0c 	andi	r16,zero,552
 40080c8:	04008a0c 	andi	r16,zero,552
 40080cc:	04008a0c 	andi	r16,zero,552
 40080d0:	04008a0c 	andi	r16,zero,552
 40080d4:	04008a0c 	andi	r16,zero,552
 40080d8:	04008780 	call	400878 <alt_exception_trap+0x400878>
 40080dc:	04008a0c 	andi	r16,zero,552
 40080e0:	04008a0c 	andi	r16,zero,552
 40080e4:	04008a0c 	andi	r16,zero,552
 40080e8:	04008a0c 	andi	r16,zero,552
 40080ec:	04008a0c 	andi	r16,zero,552
 40080f0:	04008a0c 	andi	r16,zero,552
 40080f4:	04008a0c 	andi	r16,zero,552
 40080f8:	04008a0c 	andi	r16,zero,552
 40080fc:	04008a0c 	andi	r16,zero,552
 4008100:	04008a0c 	andi	r16,zero,552
 4008104:	040087bc 	xorhi	r16,zero,542
 4008108:	04008a0c 	andi	r16,zero,552
 400810c:	04008a0c 	andi	r16,zero,552
 4008110:	04008a0c 	andi	r16,zero,552
 4008114:	04008a0c 	andi	r16,zero,552
 4008118:	04008a0c 	andi	r16,zero,552
 400811c:	04008818 	cmpnei	r16,zero,544
 4008120:	04008a0c 	andi	r16,zero,552
 4008124:	04008a0c 	andi	r16,zero,552
 4008128:	0400888c 	andi	r16,zero,546
 400812c:	04008a0c 	andi	r16,zero,552
 4008130:	04008a0c 	andi	r16,zero,552
 4008134:	04008a0c 	andi	r16,zero,552
 4008138:	04008a0c 	andi	r16,zero,552
 400813c:	04008a0c 	andi	r16,zero,552
 4008140:	04008a0c 	andi	r16,zero,552
 4008144:	04008a0c 	andi	r16,zero,552
 4008148:	04008a0c 	andi	r16,zero,552
 400814c:	04008a0c 	andi	r16,zero,552
 4008150:	04008a0c 	andi	r16,zero,552
 4008154:	04008634 	movhi	r16,536
 4008158:	04008664 	muli	r16,zero,537
 400815c:	04008a0c 	andi	r16,zero,552
 4008160:	04008a0c 	andi	r16,zero,552
 4008164:	04008a0c 	andi	r16,zero,552
 4008168:	040089b4 	movhi	r16,550
 400816c:	04008664 	muli	r16,zero,537
 4008170:	04008a0c 	andi	r16,zero,552
 4008174:	04008a0c 	andi	r16,zero,552
 4008178:	0400850c 	andi	r16,zero,532
 400817c:	04008a0c 	andi	r16,zero,552
 4008180:	04008520 	cmpeqi	r16,zero,532
 4008184:	04008558 	cmpnei	r16,zero,533
 4008188:	04008258 	cmpnei	r16,zero,521
 400818c:	04008500 	call	400850 <alt_exception_trap+0x400850>
 4008190:	04008a0c 	andi	r16,zero,552
 4008194:	040088cc 	andi	r16,zero,547
 4008198:	04008a0c 	andi	r16,zero,552
 400819c:	04008918 	cmpnei	r16,zero,548
 40081a0:	04008a0c 	andi	r16,zero,552
 40081a4:	04008a0c 	andi	r16,zero,552
 40081a8:	040085dc 	xori	r16,zero,535
 40081ac:	42000204 	addi	r8,r8,8
 40081b0:	d8c02417 	ldw	r3,144(sp)
 40081b4:	1c07883a 	add	r3,r3,r16
 40081b8:	d8c02415 	stw	r3,144(sp)
 40081bc:	003f8c06 	br	4007ff0 <__ram_exceptions_end+0xfbf7fd54>
 40081c0:	d9402017 	ldw	r5,128(sp)
 40081c4:	d9002117 	ldw	r4,132(sp)
 40081c8:	400355c0 	call	400355c <__swsetup_r>
 40081cc:	1003c11e 	bne	r2,zero,40090d4 <___vfiprintf_internal_r+0x1224>
 40081d0:	d9402017 	ldw	r5,128(sp)
 40081d4:	00c00284 	movi	r3,10
 40081d8:	2880030b 	ldhu	r2,12(r5)
 40081dc:	1080068c 	andi	r2,r2,26
 40081e0:	10ff581e 	bne	r2,r3,4007f44 <__ram_exceptions_end+0xfbf7fca8>
 40081e4:	d8c02017 	ldw	r3,128(sp)
 40081e8:	1880038f 	ldh	r2,14(r3)
 40081ec:	103f5516 	blt	r2,zero,4007f44 <__ram_exceptions_end+0xfbf7fca8>
 40081f0:	d9c02217 	ldw	r7,136(sp)
 40081f4:	d9002117 	ldw	r4,132(sp)
 40081f8:	a80d883a 	mov	r6,r21
 40081fc:	180b883a 	mov	r5,r3
 4008200:	40093d80 	call	40093d8 <__sbprintf>
 4008204:	dfc03517 	ldw	ra,212(sp)
 4008208:	df003417 	ldw	fp,208(sp)
 400820c:	ddc03317 	ldw	r23,204(sp)
 4008210:	dd803217 	ldw	r22,200(sp)
 4008214:	dd403117 	ldw	r21,196(sp)
 4008218:	dd003017 	ldw	r20,192(sp)
 400821c:	dcc02f17 	ldw	r19,188(sp)
 4008220:	dc802e17 	ldw	r18,184(sp)
 4008224:	dc402d17 	ldw	r17,180(sp)
 4008228:	dc002c17 	ldw	r16,176(sp)
 400822c:	dec03604 	addi	sp,sp,216
 4008230:	f800283a 	ret
 4008234:	40055680 	call	4005568 <__sinit>
 4008238:	003f2f06 	br	4007ef8 <__ram_exceptions_end+0xfbf7fc5c>
 400823c:	d8c02517 	ldw	r3,148(sp)
 4008240:	d8802215 	stw	r2,136(sp)
 4008244:	00c7c83a 	sub	r3,zero,r3
 4008248:	d8c02515 	stw	r3,148(sp)
 400824c:	8c400114 	ori	r17,r17,4
 4008250:	b0c00007 	ldb	r3,0(r22)
 4008254:	003f7306 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 4008258:	00800c04 	movi	r2,48
 400825c:	d9402217 	ldw	r5,136(sp)
 4008260:	d8801d05 	stb	r2,116(sp)
 4008264:	00801e04 	movi	r2,120
 4008268:	d8801d45 	stb	r2,117(sp)
 400826c:	d8001d85 	stb	zero,118(sp)
 4008270:	b811883a 	mov	r8,r23
 4008274:	28c00104 	addi	r3,r5,4
 4008278:	2cc00017 	ldw	r19,0(r5)
 400827c:	0029883a 	mov	r20,zero
 4008280:	88800094 	ori	r2,r17,2
 4008284:	80032516 	blt	r16,zero,4008f1c <___vfiprintf_internal_r+0x106c>
 4008288:	00bfdfc4 	movi	r2,-129
 400828c:	88a2703a 	and	r17,r17,r2
 4008290:	d8c02215 	stw	r3,136(sp)
 4008294:	8c400094 	ori	r17,r17,2
 4008298:	98032a1e 	bne	r19,zero,4008f44 <___vfiprintf_internal_r+0x1094>
 400829c:	00810074 	movhi	r2,1025
 40082a0:	10961d04 	addi	r2,r2,22644
 40082a4:	d8802615 	stw	r2,152(sp)
 40082a8:	002b883a 	mov	r21,zero
 40082ac:	8001741e 	bne	r16,zero,4008880 <___vfiprintf_internal_r+0x9d0>
 40082b0:	0021883a 	mov	r16,zero
 40082b4:	0029883a 	mov	r20,zero
 40082b8:	ddc01a04 	addi	r23,sp,104
 40082bc:	8027883a 	mov	r19,r16
 40082c0:	8500010e 	bge	r16,r20,40082c8 <___vfiprintf_internal_r+0x418>
 40082c4:	a027883a 	mov	r19,r20
 40082c8:	ad403fcc 	andi	r21,r21,255
 40082cc:	ad40201c 	xori	r21,r21,128
 40082d0:	ad7fe004 	addi	r21,r21,-128
 40082d4:	a8000126 	beq	r21,zero,40082dc <___vfiprintf_internal_r+0x42c>
 40082d8:	9cc00044 	addi	r19,r19,1
 40082dc:	89c0008c 	andi	r7,r17,2
 40082e0:	38000126 	beq	r7,zero,40082e8 <___vfiprintf_internal_r+0x438>
 40082e4:	9cc00084 	addi	r19,r19,2
 40082e8:	88c0210c 	andi	r3,r17,132
 40082ec:	1801dd1e 	bne	r3,zero,4008a64 <___vfiprintf_internal_r+0xbb4>
 40082f0:	d9402517 	ldw	r5,148(sp)
 40082f4:	2cebc83a 	sub	r21,r5,r19
 40082f8:	0541da0e 	bge	zero,r21,4008a64 <___vfiprintf_internal_r+0xbb4>
 40082fc:	07000404 	movi	fp,16
 4008300:	d8801c17 	ldw	r2,112(sp)
 4008304:	e543be0e 	bge	fp,r21,4009200 <___vfiprintf_internal_r+0x1350>
 4008308:	01410074 	movhi	r5,1025
 400830c:	29568104 	addi	r5,r5,23044
 4008310:	dc002715 	stw	r16,156(sp)
 4008314:	d9801b17 	ldw	r6,108(sp)
 4008318:	a821883a 	mov	r16,r21
 400831c:	d9402315 	stw	r5,140(sp)
 4008320:	028001c4 	movi	r10,7
 4008324:	d9c02915 	stw	r7,164(sp)
 4008328:	182b883a 	mov	r21,r3
 400832c:	00000506 	br	4008344 <___vfiprintf_internal_r+0x494>
 4008330:	31000084 	addi	r4,r6,2
 4008334:	42000204 	addi	r8,r8,8
 4008338:	180d883a 	mov	r6,r3
 400833c:	843ffc04 	addi	r16,r16,-16
 4008340:	e4000f0e 	bge	fp,r16,4008380 <___vfiprintf_internal_r+0x4d0>
 4008344:	01010074 	movhi	r4,1025
 4008348:	10800404 	addi	r2,r2,16
 400834c:	30c00044 	addi	r3,r6,1
 4008350:	21168104 	addi	r4,r4,23044
 4008354:	41000015 	stw	r4,0(r8)
 4008358:	47000115 	stw	fp,4(r8)
 400835c:	d8801c15 	stw	r2,112(sp)
 4008360:	d8c01b15 	stw	r3,108(sp)
 4008364:	50fff20e 	bge	r10,r3,4008330 <__ram_exceptions_end+0xfbf80094>
 4008368:	1001b21e 	bne	r2,zero,4008a34 <___vfiprintf_internal_r+0xb84>
 400836c:	843ffc04 	addi	r16,r16,-16
 4008370:	000d883a 	mov	r6,zero
 4008374:	01000044 	movi	r4,1
 4008378:	d811883a 	mov	r8,sp
 400837c:	e43ff116 	blt	fp,r16,4008344 <__ram_exceptions_end+0xfbf800a8>
 4008380:	a807883a 	mov	r3,r21
 4008384:	d9c02917 	ldw	r7,164(sp)
 4008388:	802b883a 	mov	r21,r16
 400838c:	dc002717 	ldw	r16,156(sp)
 4008390:	d9402317 	ldw	r5,140(sp)
 4008394:	a885883a 	add	r2,r21,r2
 4008398:	45400115 	stw	r21,4(r8)
 400839c:	41400015 	stw	r5,0(r8)
 40083a0:	d8801c15 	stw	r2,112(sp)
 40083a4:	d9001b15 	stw	r4,108(sp)
 40083a8:	014001c4 	movi	r5,7
 40083ac:	29026216 	blt	r5,r4,4008d38 <___vfiprintf_internal_r+0xe88>
 40083b0:	d9801d87 	ldb	r6,118(sp)
 40083b4:	42000204 	addi	r8,r8,8
 40083b8:	21400044 	addi	r5,r4,1
 40083bc:	3001ae1e 	bne	r6,zero,4008a78 <___vfiprintf_internal_r+0xbc8>
 40083c0:	3801bb26 	beq	r7,zero,4008ab0 <___vfiprintf_internal_r+0xc00>
 40083c4:	d9001d04 	addi	r4,sp,116
 40083c8:	10800084 	addi	r2,r2,2
 40083cc:	41000015 	stw	r4,0(r8)
 40083d0:	01000084 	movi	r4,2
 40083d4:	41000115 	stw	r4,4(r8)
 40083d8:	d8801c15 	stw	r2,112(sp)
 40083dc:	d9401b15 	stw	r5,108(sp)
 40083e0:	010001c4 	movi	r4,7
 40083e4:	2142680e 	bge	r4,r5,4008d88 <___vfiprintf_internal_r+0xed8>
 40083e8:	1002b11e 	bne	r2,zero,4008eb0 <___vfiprintf_internal_r+0x1000>
 40083ec:	01802004 	movi	r6,128
 40083f0:	01400044 	movi	r5,1
 40083f4:	0009883a 	mov	r4,zero
 40083f8:	d811883a 	mov	r8,sp
 40083fc:	1981ae1e 	bne	r3,r6,4008ab8 <___vfiprintf_internal_r+0xc08>
 4008400:	d8c02517 	ldw	r3,148(sp)
 4008404:	1cf9c83a 	sub	fp,r3,r19
 4008408:	0701ab0e 	bge	zero,fp,4008ab8 <___vfiprintf_internal_r+0xc08>
 400840c:	05400404 	movi	r21,16
 4008410:	af03a90e 	bge	r21,fp,40092b8 <___vfiprintf_internal_r+0x1408>
 4008414:	01410074 	movhi	r5,1025
 4008418:	29567d04 	addi	r5,r5,23028
 400841c:	d9402315 	stw	r5,140(sp)
 4008420:	01c001c4 	movi	r7,7
 4008424:	00000506 	br	400843c <___vfiprintf_internal_r+0x58c>
 4008428:	21800084 	addi	r6,r4,2
 400842c:	42000204 	addi	r8,r8,8
 4008430:	1809883a 	mov	r4,r3
 4008434:	e73ffc04 	addi	fp,fp,-16
 4008438:	af000d0e 	bge	r21,fp,4008470 <___vfiprintf_internal_r+0x5c0>
 400843c:	10800404 	addi	r2,r2,16
 4008440:	20c00044 	addi	r3,r4,1
 4008444:	44800015 	stw	r18,0(r8)
 4008448:	45400115 	stw	r21,4(r8)
 400844c:	d8801c15 	stw	r2,112(sp)
 4008450:	d8c01b15 	stw	r3,108(sp)
 4008454:	38fff40e 	bge	r7,r3,4008428 <__ram_exceptions_end+0xfbf8018c>
 4008458:	10022b1e 	bne	r2,zero,4008d08 <___vfiprintf_internal_r+0xe58>
 400845c:	e73ffc04 	addi	fp,fp,-16
 4008460:	01800044 	movi	r6,1
 4008464:	0009883a 	mov	r4,zero
 4008468:	d811883a 	mov	r8,sp
 400846c:	af3ff316 	blt	r21,fp,400843c <__ram_exceptions_end+0xfbf801a0>
 4008470:	d8c02317 	ldw	r3,140(sp)
 4008474:	1705883a 	add	r2,r2,fp
 4008478:	47000115 	stw	fp,4(r8)
 400847c:	40c00015 	stw	r3,0(r8)
 4008480:	d8801c15 	stw	r2,112(sp)
 4008484:	d9801b15 	stw	r6,108(sp)
 4008488:	00c001c4 	movi	r3,7
 400848c:	19829416 	blt	r3,r6,4008ee0 <___vfiprintf_internal_r+0x1030>
 4008490:	8521c83a 	sub	r16,r16,r20
 4008494:	42000204 	addi	r8,r8,8
 4008498:	31400044 	addi	r5,r6,1
 400849c:	3009883a 	mov	r4,r6
 40084a0:	04018716 	blt	zero,r16,4008ac0 <___vfiprintf_internal_r+0xc10>
 40084a4:	a085883a 	add	r2,r20,r2
 40084a8:	45c00015 	stw	r23,0(r8)
 40084ac:	45000115 	stw	r20,4(r8)
 40084b0:	d8801c15 	stw	r2,112(sp)
 40084b4:	d9401b15 	stw	r5,108(sp)
 40084b8:	00c001c4 	movi	r3,7
 40084bc:	1941c20e 	bge	r3,r5,4008bc8 <___vfiprintf_internal_r+0xd18>
 40084c0:	1002531e 	bne	r2,zero,4008e10 <___vfiprintf_internal_r+0xf60>
 40084c4:	d8001b15 	stw	zero,108(sp)
 40084c8:	8c40010c 	andi	r17,r17,4
 40084cc:	88023226 	beq	r17,zero,4008d98 <___vfiprintf_internal_r+0xee8>
 40084d0:	d9002517 	ldw	r4,148(sp)
 40084d4:	24e3c83a 	sub	r17,r4,r19
 40084d8:	04432916 	blt	zero,r17,4009180 <___vfiprintf_internal_r+0x12d0>
 40084dc:	d8802517 	ldw	r2,148(sp)
 40084e0:	14c0010e 	bge	r2,r19,40084e8 <___vfiprintf_internal_r+0x638>
 40084e4:	9805883a 	mov	r2,r19
 40084e8:	d8c02417 	ldw	r3,144(sp)
 40084ec:	1887883a 	add	r3,r3,r2
 40084f0:	d8c02415 	stw	r3,144(sp)
 40084f4:	d8001b15 	stw	zero,108(sp)
 40084f8:	d811883a 	mov	r8,sp
 40084fc:	003ea006 	br	4007f80 <__ram_exceptions_end+0xfbf7fce4>
 4008500:	8c400814 	ori	r17,r17,32
 4008504:	b0c00007 	ldb	r3,0(r22)
 4008508:	003ec606 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 400850c:	b0c00007 	ldb	r3,0(r22)
 4008510:	00801b04 	movi	r2,108
 4008514:	18832026 	beq	r3,r2,4009198 <___vfiprintf_internal_r+0x12e8>
 4008518:	8c400414 	ori	r17,r17,16
 400851c:	003ec106 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 4008520:	9cc03fcc 	andi	r19,r19,255
 4008524:	b811883a 	mov	r8,r23
 4008528:	9803981e 	bne	r19,zero,400938c <___vfiprintf_internal_r+0x14dc>
 400852c:	8880080c 	andi	r2,r17,32
 4008530:	1002be26 	beq	r2,zero,400902c <___vfiprintf_internal_r+0x117c>
 4008534:	d9002217 	ldw	r4,136(sp)
 4008538:	d9402417 	ldw	r5,144(sp)
 400853c:	20800017 	ldw	r2,0(r4)
 4008540:	2807d7fa 	srai	r3,r5,31
 4008544:	21000104 	addi	r4,r4,4
 4008548:	d9002215 	stw	r4,136(sp)
 400854c:	11400015 	stw	r5,0(r2)
 4008550:	10c00115 	stw	r3,4(r2)
 4008554:	003e8a06 	br	4007f80 <__ram_exceptions_end+0xfbf7fce4>
 4008558:	9cc03fcc 	andi	r19,r19,255
 400855c:	b811883a 	mov	r8,r23
 4008560:	9803871e 	bne	r19,zero,4009380 <___vfiprintf_internal_r+0x14d0>
 4008564:	8880080c 	andi	r2,r17,32
 4008568:	10009a26 	beq	r2,zero,40087d4 <___vfiprintf_internal_r+0x924>
 400856c:	d9002217 	ldw	r4,136(sp)
 4008570:	d8001d85 	stb	zero,118(sp)
 4008574:	20800204 	addi	r2,r4,8
 4008578:	24c00017 	ldw	r19,0(r4)
 400857c:	25000117 	ldw	r20,4(r4)
 4008580:	8002a416 	blt	r16,zero,4009014 <___vfiprintf_internal_r+0x1164>
 4008584:	013fdfc4 	movi	r4,-129
 4008588:	9d06b03a 	or	r3,r19,r20
 400858c:	d8802215 	stw	r2,136(sp)
 4008590:	8922703a 	and	r17,r17,r4
 4008594:	18009b26 	beq	r3,zero,4008804 <___vfiprintf_internal_r+0x954>
 4008598:	002b883a 	mov	r21,zero
 400859c:	ddc01a04 	addi	r23,sp,104
 40085a0:	9806d0fa 	srli	r3,r19,3
 40085a4:	a008977a 	slli	r4,r20,29
 40085a8:	a028d0fa 	srli	r20,r20,3
 40085ac:	9cc001cc 	andi	r19,r19,7
 40085b0:	98800c04 	addi	r2,r19,48
 40085b4:	bdffffc4 	addi	r23,r23,-1
 40085b8:	20e6b03a 	or	r19,r4,r3
 40085bc:	b8800005 	stb	r2,0(r23)
 40085c0:	9d06b03a 	or	r3,r19,r20
 40085c4:	183ff61e 	bne	r3,zero,40085a0 <__ram_exceptions_end+0xfbf80304>
 40085c8:	88c0004c 	andi	r3,r17,1
 40085cc:	18021f1e 	bne	r3,zero,4008e4c <___vfiprintf_internal_r+0xf9c>
 40085d0:	d9401e17 	ldw	r5,120(sp)
 40085d4:	2de9c83a 	sub	r20,r5,r23
 40085d8:	003f3806 	br	40082bc <__ram_exceptions_end+0xfbf80020>
 40085dc:	9cc03fcc 	andi	r19,r19,255
 40085e0:	b811883a 	mov	r8,r23
 40085e4:	98034f1e 	bne	r19,zero,4009324 <___vfiprintf_internal_r+0x1474>
 40085e8:	00810074 	movhi	r2,1025
 40085ec:	10961d04 	addi	r2,r2,22644
 40085f0:	d8802615 	stw	r2,152(sp)
 40085f4:	8880080c 	andi	r2,r17,32
 40085f8:	1000ac26 	beq	r2,zero,40088ac <___vfiprintf_internal_r+0x9fc>
 40085fc:	d9002217 	ldw	r4,136(sp)
 4008600:	24c00017 	ldw	r19,0(r4)
 4008604:	25000117 	ldw	r20,4(r4)
 4008608:	21000204 	addi	r4,r4,8
 400860c:	d9002215 	stw	r4,136(sp)
 4008610:	8880004c 	andi	r2,r17,1
 4008614:	1001e726 	beq	r2,zero,4008db4 <___vfiprintf_internal_r+0xf04>
 4008618:	9d04b03a 	or	r2,r19,r20
 400861c:	10025c1e 	bne	r2,zero,4008f90 <___vfiprintf_internal_r+0x10e0>
 4008620:	d8001d85 	stb	zero,118(sp)
 4008624:	80024416 	blt	r16,zero,4008f38 <___vfiprintf_internal_r+0x1088>
 4008628:	00bfdfc4 	movi	r2,-129
 400862c:	88a2703a 	and	r17,r17,r2
 4008630:	003f1d06 	br	40082a8 <__ram_exceptions_end+0xfbf8000c>
 4008634:	d8c02217 	ldw	r3,136(sp)
 4008638:	04c00044 	movi	r19,1
 400863c:	b811883a 	mov	r8,r23
 4008640:	18800017 	ldw	r2,0(r3)
 4008644:	18c00104 	addi	r3,r3,4
 4008648:	d8001d85 	stb	zero,118(sp)
 400864c:	d8801005 	stb	r2,64(sp)
 4008650:	d8c02215 	stw	r3,136(sp)
 4008654:	9829883a 	mov	r20,r19
 4008658:	ddc01004 	addi	r23,sp,64
 400865c:	0021883a 	mov	r16,zero
 4008660:	003f1e06 	br	40082dc <__ram_exceptions_end+0xfbf80040>
 4008664:	9cc03fcc 	andi	r19,r19,255
 4008668:	b811883a 	mov	r8,r23
 400866c:	9803331e 	bne	r19,zero,400933c <___vfiprintf_internal_r+0x148c>
 4008670:	8880080c 	andi	r2,r17,32
 4008674:	10004826 	beq	r2,zero,4008798 <___vfiprintf_internal_r+0x8e8>
 4008678:	d9002217 	ldw	r4,136(sp)
 400867c:	20800117 	ldw	r2,4(r4)
 4008680:	24c00017 	ldw	r19,0(r4)
 4008684:	21000204 	addi	r4,r4,8
 4008688:	d9002215 	stw	r4,136(sp)
 400868c:	1029883a 	mov	r20,r2
 4008690:	10024c16 	blt	r2,zero,4008fc4 <___vfiprintf_internal_r+0x1114>
 4008694:	dd401d83 	ldbu	r21,118(sp)
 4008698:	80007116 	blt	r16,zero,4008860 <___vfiprintf_internal_r+0x9b0>
 400869c:	00ffdfc4 	movi	r3,-129
 40086a0:	9d04b03a 	or	r2,r19,r20
 40086a4:	88e2703a 	and	r17,r17,r3
 40086a8:	1000d126 	beq	r2,zero,40089f0 <___vfiprintf_internal_r+0xb40>
 40086ac:	a0023526 	beq	r20,zero,4008f84 <___vfiprintf_internal_r+0x10d4>
 40086b0:	ddc01a04 	addi	r23,sp,104
 40086b4:	4039883a 	mov	fp,r8
 40086b8:	9809883a 	mov	r4,r19
 40086bc:	a00b883a 	mov	r5,r20
 40086c0:	01800284 	movi	r6,10
 40086c4:	000f883a 	mov	r7,zero
 40086c8:	400af640 	call	400af64 <__umoddi3>
 40086cc:	10800c04 	addi	r2,r2,48
 40086d0:	bdffffc4 	addi	r23,r23,-1
 40086d4:	9809883a 	mov	r4,r19
 40086d8:	a00b883a 	mov	r5,r20
 40086dc:	b8800005 	stb	r2,0(r23)
 40086e0:	01800284 	movi	r6,10
 40086e4:	000f883a 	mov	r7,zero
 40086e8:	400a9680 	call	400a968 <__udivdi3>
 40086ec:	1027883a 	mov	r19,r2
 40086f0:	10c4b03a 	or	r2,r2,r3
 40086f4:	1829883a 	mov	r20,r3
 40086f8:	103fef1e 	bne	r2,zero,40086b8 <__ram_exceptions_end+0xfbf8041c>
 40086fc:	d9001e17 	ldw	r4,120(sp)
 4008700:	e011883a 	mov	r8,fp
 4008704:	25e9c83a 	sub	r20,r4,r23
 4008708:	003eec06 	br	40082bc <__ram_exceptions_end+0xfbf80020>
 400870c:	d8802307 	ldb	r2,140(sp)
 4008710:	1002361e 	bne	r2,zero,4008fec <___vfiprintf_internal_r+0x113c>
 4008714:	00c00804 	movi	r3,32
 4008718:	d8c02305 	stb	r3,140(sp)
 400871c:	04c00044 	movi	r19,1
 4008720:	b0c00007 	ldb	r3,0(r22)
 4008724:	003e3f06 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 4008728:	8c400054 	ori	r17,r17,1
 400872c:	b0c00007 	ldb	r3,0(r22)
 4008730:	003e3c06 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 4008734:	8c402014 	ori	r17,r17,128
 4008738:	b0c00007 	ldb	r3,0(r22)
 400873c:	003e3906 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 4008740:	dc002715 	stw	r16,156(sp)
 4008744:	d8002515 	stw	zero,148(sp)
 4008748:	1f3ff404 	addi	fp,r3,-48
 400874c:	0009883a 	mov	r4,zero
 4008750:	b021883a 	mov	r16,r22
 4008754:	01400284 	movi	r5,10
 4008758:	40011140 	call	4001114 <__mulsi3>
 400875c:	80c00007 	ldb	r3,0(r16)
 4008760:	e089883a 	add	r4,fp,r2
 4008764:	b5800044 	addi	r22,r22,1
 4008768:	1f3ff404 	addi	fp,r3,-48
 400876c:	b021883a 	mov	r16,r22
 4008770:	af3ff82e 	bgeu	r21,fp,4008754 <__ram_exceptions_end+0xfbf804b8>
 4008774:	d9002515 	stw	r4,148(sp)
 4008778:	dc002717 	ldw	r16,156(sp)
 400877c:	003e2a06 	br	4008028 <__ram_exceptions_end+0xfbf7fd8c>
 4008780:	9cc03fcc 	andi	r19,r19,255
 4008784:	b811883a 	mov	r8,r23
 4008788:	9802e91e 	bne	r19,zero,4009330 <___vfiprintf_internal_r+0x1480>
 400878c:	8c400414 	ori	r17,r17,16
 4008790:	8880080c 	andi	r2,r17,32
 4008794:	103fb81e 	bne	r2,zero,4008678 <__ram_exceptions_end+0xfbf803dc>
 4008798:	8880040c 	andi	r2,r17,16
 400879c:	10022e26 	beq	r2,zero,4009058 <___vfiprintf_internal_r+0x11a8>
 40087a0:	d9402217 	ldw	r5,136(sp)
 40087a4:	2cc00017 	ldw	r19,0(r5)
 40087a8:	29400104 	addi	r5,r5,4
 40087ac:	d9402215 	stw	r5,136(sp)
 40087b0:	9829d7fa 	srai	r20,r19,31
 40087b4:	a005883a 	mov	r2,r20
 40087b8:	003fb506 	br	4008690 <__ram_exceptions_end+0xfbf803f4>
 40087bc:	9cc03fcc 	andi	r19,r19,255
 40087c0:	b811883a 	mov	r8,r23
 40087c4:	9802fa1e 	bne	r19,zero,40093b0 <___vfiprintf_internal_r+0x1500>
 40087c8:	8c400414 	ori	r17,r17,16
 40087cc:	8880080c 	andi	r2,r17,32
 40087d0:	103f661e 	bne	r2,zero,400856c <__ram_exceptions_end+0xfbf802d0>
 40087d4:	8880040c 	andi	r2,r17,16
 40087d8:	10020626 	beq	r2,zero,4008ff4 <___vfiprintf_internal_r+0x1144>
 40087dc:	d9402217 	ldw	r5,136(sp)
 40087e0:	d8001d85 	stb	zero,118(sp)
 40087e4:	0029883a 	mov	r20,zero
 40087e8:	28800104 	addi	r2,r5,4
 40087ec:	2cc00017 	ldw	r19,0(r5)
 40087f0:	80020816 	blt	r16,zero,4009014 <___vfiprintf_internal_r+0x1164>
 40087f4:	00ffdfc4 	movi	r3,-129
 40087f8:	d8802215 	stw	r2,136(sp)
 40087fc:	88e2703a 	and	r17,r17,r3
 4008800:	983f651e 	bne	r19,zero,4008598 <__ram_exceptions_end+0xfbf802fc>
 4008804:	002b883a 	mov	r21,zero
 4008808:	8002cf26 	beq	r16,zero,4009348 <___vfiprintf_internal_r+0x1498>
 400880c:	0027883a 	mov	r19,zero
 4008810:	0029883a 	mov	r20,zero
 4008814:	003f6106 	br	400859c <__ram_exceptions_end+0xfbf80300>
 4008818:	9cc03fcc 	andi	r19,r19,255
 400881c:	b811883a 	mov	r8,r23
 4008820:	9802e01e 	bne	r19,zero,40093a4 <___vfiprintf_internal_r+0x14f4>
 4008824:	8c400414 	ori	r17,r17,16
 4008828:	8880080c 	andi	r2,r17,32
 400882c:	1000641e 	bne	r2,zero,40089c0 <___vfiprintf_internal_r+0xb10>
 4008830:	8880040c 	andi	r2,r17,16
 4008834:	1001c81e 	bne	r2,zero,4008f58 <___vfiprintf_internal_r+0x10a8>
 4008838:	8880100c 	andi	r2,r17,64
 400883c:	d8001d85 	stb	zero,118(sp)
 4008840:	1002281e 	bne	r2,zero,40090e4 <___vfiprintf_internal_r+0x1234>
 4008844:	d9002217 	ldw	r4,136(sp)
 4008848:	0029883a 	mov	r20,zero
 400884c:	20800104 	addi	r2,r4,4
 4008850:	24c00017 	ldw	r19,0(r4)
 4008854:	8001c60e 	bge	r16,zero,4008f70 <___vfiprintf_internal_r+0x10c0>
 4008858:	d8802215 	stw	r2,136(sp)
 400885c:	002b883a 	mov	r21,zero
 4008860:	9d04b03a 	or	r2,r19,r20
 4008864:	103f911e 	bne	r2,zero,40086ac <__ram_exceptions_end+0xfbf80410>
 4008868:	00800044 	movi	r2,1
 400886c:	10803fcc 	andi	r2,r2,255
 4008870:	00c00044 	movi	r3,1
 4008874:	10c05f26 	beq	r2,r3,40089f4 <___vfiprintf_internal_r+0xb44>
 4008878:	00c00084 	movi	r3,2
 400887c:	10ffe31e 	bne	r2,r3,400880c <__ram_exceptions_end+0xfbf80570>
 4008880:	0027883a 	mov	r19,zero
 4008884:	0029883a 	mov	r20,zero
 4008888:	00015106 	br	4008dd0 <___vfiprintf_internal_r+0xf20>
 400888c:	9cc03fcc 	andi	r19,r19,255
 4008890:	b811883a 	mov	r8,r23
 4008894:	9802c01e 	bne	r19,zero,4009398 <___vfiprintf_internal_r+0x14e8>
 4008898:	01410074 	movhi	r5,1025
 400889c:	29561804 	addi	r5,r5,22624
 40088a0:	d9402615 	stw	r5,152(sp)
 40088a4:	8880080c 	andi	r2,r17,32
 40088a8:	103f541e 	bne	r2,zero,40085fc <__ram_exceptions_end+0xfbf80360>
 40088ac:	8880040c 	andi	r2,r17,16
 40088b0:	1001f226 	beq	r2,zero,400907c <___vfiprintf_internal_r+0x11cc>
 40088b4:	d9402217 	ldw	r5,136(sp)
 40088b8:	0029883a 	mov	r20,zero
 40088bc:	2cc00017 	ldw	r19,0(r5)
 40088c0:	29400104 	addi	r5,r5,4
 40088c4:	d9402215 	stw	r5,136(sp)
 40088c8:	003f5106 	br	4008610 <__ram_exceptions_end+0xfbf80374>
 40088cc:	d8c02217 	ldw	r3,136(sp)
 40088d0:	b811883a 	mov	r8,r23
 40088d4:	d8001d85 	stb	zero,118(sp)
 40088d8:	1dc00017 	ldw	r23,0(r3)
 40088dc:	1f000104 	addi	fp,r3,4
 40088e0:	b8025926 	beq	r23,zero,4009248 <___vfiprintf_internal_r+0x1398>
 40088e4:	80023316 	blt	r16,zero,40091b4 <___vfiprintf_internal_r+0x1304>
 40088e8:	800d883a 	mov	r6,r16
 40088ec:	000b883a 	mov	r5,zero
 40088f0:	b809883a 	mov	r4,r23
 40088f4:	da002a15 	stw	r8,168(sp)
 40088f8:	40066180 	call	4006618 <memchr>
 40088fc:	da002a17 	ldw	r8,168(sp)
 4008900:	10026826 	beq	r2,zero,40092a4 <___vfiprintf_internal_r+0x13f4>
 4008904:	15e9c83a 	sub	r20,r2,r23
 4008908:	dd401d83 	ldbu	r21,118(sp)
 400890c:	df002215 	stw	fp,136(sp)
 4008910:	0021883a 	mov	r16,zero
 4008914:	003e6906 	br	40082bc <__ram_exceptions_end+0xfbf80020>
 4008918:	9cc03fcc 	andi	r19,r19,255
 400891c:	b811883a 	mov	r8,r23
 4008920:	983fc126 	beq	r19,zero,4008828 <__ram_exceptions_end+0xfbf8058c>
 4008924:	d8c02303 	ldbu	r3,140(sp)
 4008928:	d8c01d85 	stb	r3,118(sp)
 400892c:	003fbe06 	br	4008828 <__ram_exceptions_end+0xfbf8058c>
 4008930:	d9002217 	ldw	r4,136(sp)
 4008934:	d9402217 	ldw	r5,136(sp)
 4008938:	21000017 	ldw	r4,0(r4)
 400893c:	28800104 	addi	r2,r5,4
 4008940:	d9002515 	stw	r4,148(sp)
 4008944:	203e3d16 	blt	r4,zero,400823c <__ram_exceptions_end+0xfbf7ffa0>
 4008948:	d8802215 	stw	r2,136(sp)
 400894c:	b0c00007 	ldb	r3,0(r22)
 4008950:	003db406 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 4008954:	00c00ac4 	movi	r3,43
 4008958:	d8c02305 	stb	r3,140(sp)
 400895c:	04c00044 	movi	r19,1
 4008960:	b0c00007 	ldb	r3,0(r22)
 4008964:	003daf06 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 4008968:	b0c00007 	ldb	r3,0(r22)
 400896c:	01000a84 	movi	r4,42
 4008970:	b4000044 	addi	r16,r22,1
 4008974:	19025e26 	beq	r3,r4,40092f0 <___vfiprintf_internal_r+0x1440>
 4008978:	1f3ff404 	addi	fp,r3,-48
 400897c:	0009883a 	mov	r4,zero
 4008980:	af025236 	bltu	r21,fp,40092cc <___vfiprintf_internal_r+0x141c>
 4008984:	01400284 	movi	r5,10
 4008988:	40011140 	call	4001114 <__mulsi3>
 400898c:	80c00007 	ldb	r3,0(r16)
 4008990:	1709883a 	add	r4,r2,fp
 4008994:	85800044 	addi	r22,r16,1
 4008998:	1f3ff404 	addi	fp,r3,-48
 400899c:	b021883a 	mov	r16,r22
 40089a0:	af3ff82e 	bgeu	r21,fp,4008984 <__ram_exceptions_end+0xfbf806e8>
 40089a4:	2021883a 	mov	r16,r4
 40089a8:	203d9f0e 	bge	r4,zero,4008028 <__ram_exceptions_end+0xfbf7fd8c>
 40089ac:	043fffc4 	movi	r16,-1
 40089b0:	003d9d06 	br	4008028 <__ram_exceptions_end+0xfbf7fd8c>
 40089b4:	8c401014 	ori	r17,r17,64
 40089b8:	b0c00007 	ldb	r3,0(r22)
 40089bc:	003d9906 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 40089c0:	d9002217 	ldw	r4,136(sp)
 40089c4:	d8001d85 	stb	zero,118(sp)
 40089c8:	20c00204 	addi	r3,r4,8
 40089cc:	24c00017 	ldw	r19,0(r4)
 40089d0:	25000117 	ldw	r20,4(r4)
 40089d4:	8001e716 	blt	r16,zero,4009174 <___vfiprintf_internal_r+0x12c4>
 40089d8:	013fdfc4 	movi	r4,-129
 40089dc:	9d04b03a 	or	r2,r19,r20
 40089e0:	d8c02215 	stw	r3,136(sp)
 40089e4:	8922703a 	and	r17,r17,r4
 40089e8:	002b883a 	mov	r21,zero
 40089ec:	103f2f1e 	bne	r2,zero,40086ac <__ram_exceptions_end+0xfbf80410>
 40089f0:	803e2f26 	beq	r16,zero,40082b0 <__ram_exceptions_end+0xfbf80014>
 40089f4:	0027883a 	mov	r19,zero
 40089f8:	9cc00c04 	addi	r19,r19,48
 40089fc:	dcc019c5 	stb	r19,103(sp)
 4008a00:	dd002817 	ldw	r20,160(sp)
 4008a04:	ddc019c4 	addi	r23,sp,103
 4008a08:	003e2c06 	br	40082bc <__ram_exceptions_end+0xfbf80020>
 4008a0c:	9cc03fcc 	andi	r19,r19,255
 4008a10:	b811883a 	mov	r8,r23
 4008a14:	9802571e 	bne	r19,zero,4009374 <___vfiprintf_internal_r+0x14c4>
 4008a18:	18005726 	beq	r3,zero,4008b78 <___vfiprintf_internal_r+0xcc8>
 4008a1c:	04c00044 	movi	r19,1
 4008a20:	d8c01005 	stb	r3,64(sp)
 4008a24:	d8001d85 	stb	zero,118(sp)
 4008a28:	9829883a 	mov	r20,r19
 4008a2c:	ddc01004 	addi	r23,sp,64
 4008a30:	003f0a06 	br	400865c <__ram_exceptions_end+0xfbf803c0>
 4008a34:	d9402017 	ldw	r5,128(sp)
 4008a38:	d9002117 	ldw	r4,132(sp)
 4008a3c:	d9801a04 	addi	r6,sp,104
 4008a40:	da802a15 	stw	r10,168(sp)
 4008a44:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008a48:	da802a17 	ldw	r10,168(sp)
 4008a4c:	1000501e 	bne	r2,zero,4008b90 <___vfiprintf_internal_r+0xce0>
 4008a50:	d9801b17 	ldw	r6,108(sp)
 4008a54:	d8801c17 	ldw	r2,112(sp)
 4008a58:	d811883a 	mov	r8,sp
 4008a5c:	31000044 	addi	r4,r6,1
 4008a60:	003e3606 	br	400833c <__ram_exceptions_end+0xfbf800a0>
 4008a64:	d9001b17 	ldw	r4,108(sp)
 4008a68:	d8801c17 	ldw	r2,112(sp)
 4008a6c:	21400044 	addi	r5,r4,1
 4008a70:	d9801d87 	ldb	r6,118(sp)
 4008a74:	303e5226 	beq	r6,zero,40083c0 <__ram_exceptions_end+0xfbf80124>
 4008a78:	01800044 	movi	r6,1
 4008a7c:	d9001d84 	addi	r4,sp,118
 4008a80:	1185883a 	add	r2,r2,r6
 4008a84:	41000015 	stw	r4,0(r8)
 4008a88:	41800115 	stw	r6,4(r8)
 4008a8c:	d8801c15 	stw	r2,112(sp)
 4008a90:	d9401b15 	stw	r5,108(sp)
 4008a94:	010001c4 	movi	r4,7
 4008a98:	2140b00e 	bge	r4,r5,4008d5c <___vfiprintf_internal_r+0xeac>
 4008a9c:	1000f61e 	bne	r2,zero,4008e78 <___vfiprintf_internal_r+0xfc8>
 4008aa0:	3800b31e 	bne	r7,zero,4008d70 <___vfiprintf_internal_r+0xec0>
 4008aa4:	0009883a 	mov	r4,zero
 4008aa8:	300b883a 	mov	r5,r6
 4008aac:	d811883a 	mov	r8,sp
 4008ab0:	01802004 	movi	r6,128
 4008ab4:	19be5226 	beq	r3,r6,4008400 <__ram_exceptions_end+0xfbf80164>
 4008ab8:	8521c83a 	sub	r16,r16,r20
 4008abc:	043e790e 	bge	zero,r16,40084a4 <__ram_exceptions_end+0xfbf80208>
 4008ac0:	05400404 	movi	r21,16
 4008ac4:	ac01b00e 	bge	r21,r16,4009188 <___vfiprintf_internal_r+0x12d8>
 4008ac8:	01410074 	movhi	r5,1025
 4008acc:	29567d04 	addi	r5,r5,23028
 4008ad0:	d9402315 	stw	r5,140(sp)
 4008ad4:	070001c4 	movi	fp,7
 4008ad8:	00000506 	br	4008af0 <___vfiprintf_internal_r+0xc40>
 4008adc:	21400084 	addi	r5,r4,2
 4008ae0:	42000204 	addi	r8,r8,8
 4008ae4:	1809883a 	mov	r4,r3
 4008ae8:	843ffc04 	addi	r16,r16,-16
 4008aec:	ac000d0e 	bge	r21,r16,4008b24 <___vfiprintf_internal_r+0xc74>
 4008af0:	10800404 	addi	r2,r2,16
 4008af4:	20c00044 	addi	r3,r4,1
 4008af8:	44800015 	stw	r18,0(r8)
 4008afc:	45400115 	stw	r21,4(r8)
 4008b00:	d8801c15 	stw	r2,112(sp)
 4008b04:	d8c01b15 	stw	r3,108(sp)
 4008b08:	e0fff40e 	bge	fp,r3,4008adc <__ram_exceptions_end+0xfbf80840>
 4008b0c:	1000101e 	bne	r2,zero,4008b50 <___vfiprintf_internal_r+0xca0>
 4008b10:	843ffc04 	addi	r16,r16,-16
 4008b14:	01400044 	movi	r5,1
 4008b18:	0009883a 	mov	r4,zero
 4008b1c:	d811883a 	mov	r8,sp
 4008b20:	ac3ff316 	blt	r21,r16,4008af0 <__ram_exceptions_end+0xfbf80854>
 4008b24:	d8c02317 	ldw	r3,140(sp)
 4008b28:	1405883a 	add	r2,r2,r16
 4008b2c:	44000115 	stw	r16,4(r8)
 4008b30:	40c00015 	stw	r3,0(r8)
 4008b34:	d8801c15 	stw	r2,112(sp)
 4008b38:	d9401b15 	stw	r5,108(sp)
 4008b3c:	00c001c4 	movi	r3,7
 4008b40:	19401916 	blt	r3,r5,4008ba8 <___vfiprintf_internal_r+0xcf8>
 4008b44:	42000204 	addi	r8,r8,8
 4008b48:	29400044 	addi	r5,r5,1
 4008b4c:	003e5506 	br	40084a4 <__ram_exceptions_end+0xfbf80208>
 4008b50:	d9402017 	ldw	r5,128(sp)
 4008b54:	d9002117 	ldw	r4,132(sp)
 4008b58:	d9801a04 	addi	r6,sp,104
 4008b5c:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008b60:	10000b1e 	bne	r2,zero,4008b90 <___vfiprintf_internal_r+0xce0>
 4008b64:	d9001b17 	ldw	r4,108(sp)
 4008b68:	d8801c17 	ldw	r2,112(sp)
 4008b6c:	d811883a 	mov	r8,sp
 4008b70:	21400044 	addi	r5,r4,1
 4008b74:	003fdc06 	br	4008ae8 <__ram_exceptions_end+0xfbf8084c>
 4008b78:	d8801c17 	ldw	r2,112(sp)
 4008b7c:	10000426 	beq	r2,zero,4008b90 <___vfiprintf_internal_r+0xce0>
 4008b80:	d9402017 	ldw	r5,128(sp)
 4008b84:	d9002117 	ldw	r4,132(sp)
 4008b88:	d9801a04 	addi	r6,sp,104
 4008b8c:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008b90:	d9402017 	ldw	r5,128(sp)
 4008b94:	2880030b 	ldhu	r2,12(r5)
 4008b98:	1080100c 	andi	r2,r2,64
 4008b9c:	10014d1e 	bne	r2,zero,40090d4 <___vfiprintf_internal_r+0x1224>
 4008ba0:	d8802417 	ldw	r2,144(sp)
 4008ba4:	003d9706 	br	4008204 <__ram_exceptions_end+0xfbf7ff68>
 4008ba8:	1000d21e 	bne	r2,zero,4008ef4 <___vfiprintf_internal_r+0x1044>
 4008bac:	00c00044 	movi	r3,1
 4008bb0:	a005883a 	mov	r2,r20
 4008bb4:	ddc00015 	stw	r23,0(sp)
 4008bb8:	dd000115 	stw	r20,4(sp)
 4008bbc:	dd001c15 	stw	r20,112(sp)
 4008bc0:	d8c01b15 	stw	r3,108(sp)
 4008bc4:	d811883a 	mov	r8,sp
 4008bc8:	42000204 	addi	r8,r8,8
 4008bcc:	8c40010c 	andi	r17,r17,4
 4008bd0:	88004026 	beq	r17,zero,4008cd4 <___vfiprintf_internal_r+0xe24>
 4008bd4:	d9002517 	ldw	r4,148(sp)
 4008bd8:	24e3c83a 	sub	r17,r4,r19
 4008bdc:	04403d0e 	bge	zero,r17,4008cd4 <___vfiprintf_internal_r+0xe24>
 4008be0:	04000404 	movi	r16,16
 4008be4:	8441a90e 	bge	r16,r17,400928c <___vfiprintf_internal_r+0x13dc>
 4008be8:	00c10074 	movhi	r3,1025
 4008bec:	18d68104 	addi	r3,r3,23044
 4008bf0:	d9001b17 	ldw	r4,108(sp)
 4008bf4:	d8c02315 	stw	r3,140(sp)
 4008bf8:	050001c4 	movi	r20,7
 4008bfc:	dd402117 	ldw	r21,132(sp)
 4008c00:	ddc02017 	ldw	r23,128(sp)
 4008c04:	00000506 	br	4008c1c <___vfiprintf_internal_r+0xd6c>
 4008c08:	21400084 	addi	r5,r4,2
 4008c0c:	42000204 	addi	r8,r8,8
 4008c10:	1809883a 	mov	r4,r3
 4008c14:	8c7ffc04 	addi	r17,r17,-16
 4008c18:	84400f0e 	bge	r16,r17,4008c58 <___vfiprintf_internal_r+0xda8>
 4008c1c:	01410074 	movhi	r5,1025
 4008c20:	10800404 	addi	r2,r2,16
 4008c24:	20c00044 	addi	r3,r4,1
 4008c28:	29568104 	addi	r5,r5,23044
 4008c2c:	41400015 	stw	r5,0(r8)
 4008c30:	44000115 	stw	r16,4(r8)
 4008c34:	d8801c15 	stw	r2,112(sp)
 4008c38:	d8c01b15 	stw	r3,108(sp)
 4008c3c:	a0fff20e 	bge	r20,r3,4008c08 <__ram_exceptions_end+0xfbf8096c>
 4008c40:	1000141e 	bne	r2,zero,4008c94 <___vfiprintf_internal_r+0xde4>
 4008c44:	8c7ffc04 	addi	r17,r17,-16
 4008c48:	01400044 	movi	r5,1
 4008c4c:	0009883a 	mov	r4,zero
 4008c50:	d811883a 	mov	r8,sp
 4008c54:	847ff116 	blt	r16,r17,4008c1c <__ram_exceptions_end+0xfbf80980>
 4008c58:	d8c02317 	ldw	r3,140(sp)
 4008c5c:	1445883a 	add	r2,r2,r17
 4008c60:	44400115 	stw	r17,4(r8)
 4008c64:	40c00015 	stw	r3,0(r8)
 4008c68:	d8801c15 	stw	r2,112(sp)
 4008c6c:	d9401b15 	stw	r5,108(sp)
 4008c70:	00c001c4 	movi	r3,7
 4008c74:	1940170e 	bge	r3,r5,4008cd4 <___vfiprintf_internal_r+0xe24>
 4008c78:	1000101e 	bne	r2,zero,4008cbc <___vfiprintf_internal_r+0xe0c>
 4008c7c:	d8802517 	ldw	r2,148(sp)
 4008c80:	14c11616 	blt	r2,r19,40090dc <___vfiprintf_internal_r+0x122c>
 4008c84:	d9002417 	ldw	r4,144(sp)
 4008c88:	2089883a 	add	r4,r4,r2
 4008c8c:	d9002415 	stw	r4,144(sp)
 4008c90:	003e1806 	br	40084f4 <__ram_exceptions_end+0xfbf80258>
 4008c94:	d9801a04 	addi	r6,sp,104
 4008c98:	b80b883a 	mov	r5,r23
 4008c9c:	a809883a 	mov	r4,r21
 4008ca0:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008ca4:	103fba1e 	bne	r2,zero,4008b90 <__ram_exceptions_end+0xfbf808f4>
 4008ca8:	d9001b17 	ldw	r4,108(sp)
 4008cac:	d8801c17 	ldw	r2,112(sp)
 4008cb0:	d811883a 	mov	r8,sp
 4008cb4:	21400044 	addi	r5,r4,1
 4008cb8:	003fd606 	br	4008c14 <__ram_exceptions_end+0xfbf80978>
 4008cbc:	d9402017 	ldw	r5,128(sp)
 4008cc0:	d9002117 	ldw	r4,132(sp)
 4008cc4:	d9801a04 	addi	r6,sp,104
 4008cc8:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008ccc:	103fb01e 	bne	r2,zero,4008b90 <__ram_exceptions_end+0xfbf808f4>
 4008cd0:	d8801c17 	ldw	r2,112(sp)
 4008cd4:	d8c02517 	ldw	r3,148(sp)
 4008cd8:	1cc0010e 	bge	r3,r19,4008ce0 <___vfiprintf_internal_r+0xe30>
 4008cdc:	9807883a 	mov	r3,r19
 4008ce0:	d9002417 	ldw	r4,144(sp)
 4008ce4:	20c9883a 	add	r4,r4,r3
 4008ce8:	d9002415 	stw	r4,144(sp)
 4008cec:	103e0126 	beq	r2,zero,40084f4 <__ram_exceptions_end+0xfbf80258>
 4008cf0:	d9402017 	ldw	r5,128(sp)
 4008cf4:	d9002117 	ldw	r4,132(sp)
 4008cf8:	d9801a04 	addi	r6,sp,104
 4008cfc:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008d00:	103dfc26 	beq	r2,zero,40084f4 <__ram_exceptions_end+0xfbf80258>
 4008d04:	003fa206 	br	4008b90 <__ram_exceptions_end+0xfbf808f4>
 4008d08:	d9402017 	ldw	r5,128(sp)
 4008d0c:	d9002117 	ldw	r4,132(sp)
 4008d10:	d9801a04 	addi	r6,sp,104
 4008d14:	d9c02b15 	stw	r7,172(sp)
 4008d18:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008d1c:	d9c02b17 	ldw	r7,172(sp)
 4008d20:	103f9b1e 	bne	r2,zero,4008b90 <__ram_exceptions_end+0xfbf808f4>
 4008d24:	d9001b17 	ldw	r4,108(sp)
 4008d28:	d8801c17 	ldw	r2,112(sp)
 4008d2c:	d811883a 	mov	r8,sp
 4008d30:	21800044 	addi	r6,r4,1
 4008d34:	003dbf06 	br	4008434 <__ram_exceptions_end+0xfbf80198>
 4008d38:	1000d81e 	bne	r2,zero,400909c <___vfiprintf_internal_r+0x11ec>
 4008d3c:	d9001d87 	ldb	r4,118(sp)
 4008d40:	20000a26 	beq	r4,zero,4008d6c <___vfiprintf_internal_r+0xebc>
 4008d44:	00800044 	movi	r2,1
 4008d48:	d9001d84 	addi	r4,sp,118
 4008d4c:	100b883a 	mov	r5,r2
 4008d50:	d9000015 	stw	r4,0(sp)
 4008d54:	d8800115 	stw	r2,4(sp)
 4008d58:	d811883a 	mov	r8,sp
 4008d5c:	2809883a 	mov	r4,r5
 4008d60:	42000204 	addi	r8,r8,8
 4008d64:	29400044 	addi	r5,r5,1
 4008d68:	003d9506 	br	40083c0 <__ram_exceptions_end+0xfbf80124>
 4008d6c:	3800fd26 	beq	r7,zero,4009164 <___vfiprintf_internal_r+0x12b4>
 4008d70:	00800084 	movi	r2,2
 4008d74:	d9001d04 	addi	r4,sp,116
 4008d78:	d9000015 	stw	r4,0(sp)
 4008d7c:	d8800115 	stw	r2,4(sp)
 4008d80:	01400044 	movi	r5,1
 4008d84:	d811883a 	mov	r8,sp
 4008d88:	2809883a 	mov	r4,r5
 4008d8c:	42000204 	addi	r8,r8,8
 4008d90:	29400044 	addi	r5,r5,1
 4008d94:	003f4606 	br	4008ab0 <__ram_exceptions_end+0xfbf80814>
 4008d98:	d8802517 	ldw	r2,148(sp)
 4008d9c:	14c0010e 	bge	r2,r19,4008da4 <___vfiprintf_internal_r+0xef4>
 4008da0:	9805883a 	mov	r2,r19
 4008da4:	d9402417 	ldw	r5,144(sp)
 4008da8:	288b883a 	add	r5,r5,r2
 4008dac:	d9402415 	stw	r5,144(sp)
 4008db0:	003dd006 	br	40084f4 <__ram_exceptions_end+0xfbf80258>
 4008db4:	d8001d85 	stb	zero,118(sp)
 4008db8:	80005d16 	blt	r16,zero,4008f30 <___vfiprintf_internal_r+0x1080>
 4008dbc:	00ffdfc4 	movi	r3,-129
 4008dc0:	9d04b03a 	or	r2,r19,r20
 4008dc4:	88e2703a 	and	r17,r17,r3
 4008dc8:	103d3726 	beq	r2,zero,40082a8 <__ram_exceptions_end+0xfbf8000c>
 4008dcc:	002b883a 	mov	r21,zero
 4008dd0:	d9002617 	ldw	r4,152(sp)
 4008dd4:	ddc01a04 	addi	r23,sp,104
 4008dd8:	988003cc 	andi	r2,r19,15
 4008ddc:	a006973a 	slli	r3,r20,28
 4008de0:	2085883a 	add	r2,r4,r2
 4008de4:	9826d13a 	srli	r19,r19,4
 4008de8:	10800003 	ldbu	r2,0(r2)
 4008dec:	a028d13a 	srli	r20,r20,4
 4008df0:	bdffffc4 	addi	r23,r23,-1
 4008df4:	1ce6b03a 	or	r19,r3,r19
 4008df8:	b8800005 	stb	r2,0(r23)
 4008dfc:	9d04b03a 	or	r2,r19,r20
 4008e00:	103ff51e 	bne	r2,zero,4008dd8 <__ram_exceptions_end+0xfbf80b3c>
 4008e04:	d8801e17 	ldw	r2,120(sp)
 4008e08:	15e9c83a 	sub	r20,r2,r23
 4008e0c:	003d2b06 	br	40082bc <__ram_exceptions_end+0xfbf80020>
 4008e10:	d9402017 	ldw	r5,128(sp)
 4008e14:	d9002117 	ldw	r4,132(sp)
 4008e18:	d9801a04 	addi	r6,sp,104
 4008e1c:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008e20:	103f5b1e 	bne	r2,zero,4008b90 <__ram_exceptions_end+0xfbf808f4>
 4008e24:	d8801c17 	ldw	r2,112(sp)
 4008e28:	d811883a 	mov	r8,sp
 4008e2c:	003f6706 	br	4008bcc <__ram_exceptions_end+0xfbf80930>
 4008e30:	d9402017 	ldw	r5,128(sp)
 4008e34:	d9002117 	ldw	r4,132(sp)
 4008e38:	d9801a04 	addi	r6,sp,104
 4008e3c:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008e40:	103f531e 	bne	r2,zero,4008b90 <__ram_exceptions_end+0xfbf808f4>
 4008e44:	d811883a 	mov	r8,sp
 4008e48:	003cd906 	br	40081b0 <__ram_exceptions_end+0xfbf7ff14>
 4008e4c:	10803fcc 	andi	r2,r2,255
 4008e50:	1080201c 	xori	r2,r2,128
 4008e54:	10bfe004 	addi	r2,r2,-128
 4008e58:	00c00c04 	movi	r3,48
 4008e5c:	10ffe926 	beq	r2,r3,4008e04 <__ram_exceptions_end+0xfbf80b68>
 4008e60:	b8ffffc5 	stb	r3,-1(r23)
 4008e64:	d8c01e17 	ldw	r3,120(sp)
 4008e68:	b8bfffc4 	addi	r2,r23,-1
 4008e6c:	102f883a 	mov	r23,r2
 4008e70:	18a9c83a 	sub	r20,r3,r2
 4008e74:	003d1106 	br	40082bc <__ram_exceptions_end+0xfbf80020>
 4008e78:	d9402017 	ldw	r5,128(sp)
 4008e7c:	d9002117 	ldw	r4,132(sp)
 4008e80:	d9801a04 	addi	r6,sp,104
 4008e84:	d8c02a15 	stw	r3,168(sp)
 4008e88:	d9c02b15 	stw	r7,172(sp)
 4008e8c:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008e90:	d8c02a17 	ldw	r3,168(sp)
 4008e94:	d9c02b17 	ldw	r7,172(sp)
 4008e98:	103f3d1e 	bne	r2,zero,4008b90 <__ram_exceptions_end+0xfbf808f4>
 4008e9c:	d9001b17 	ldw	r4,108(sp)
 4008ea0:	d8801c17 	ldw	r2,112(sp)
 4008ea4:	d811883a 	mov	r8,sp
 4008ea8:	21400044 	addi	r5,r4,1
 4008eac:	003d4406 	br	40083c0 <__ram_exceptions_end+0xfbf80124>
 4008eb0:	d9402017 	ldw	r5,128(sp)
 4008eb4:	d9002117 	ldw	r4,132(sp)
 4008eb8:	d9801a04 	addi	r6,sp,104
 4008ebc:	d8c02a15 	stw	r3,168(sp)
 4008ec0:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008ec4:	d8c02a17 	ldw	r3,168(sp)
 4008ec8:	103f311e 	bne	r2,zero,4008b90 <__ram_exceptions_end+0xfbf808f4>
 4008ecc:	d9001b17 	ldw	r4,108(sp)
 4008ed0:	d8801c17 	ldw	r2,112(sp)
 4008ed4:	d811883a 	mov	r8,sp
 4008ed8:	21400044 	addi	r5,r4,1
 4008edc:	003ef406 	br	4008ab0 <__ram_exceptions_end+0xfbf80814>
 4008ee0:	1000bd1e 	bne	r2,zero,40091d8 <___vfiprintf_internal_r+0x1328>
 4008ee4:	01400044 	movi	r5,1
 4008ee8:	0009883a 	mov	r4,zero
 4008eec:	d811883a 	mov	r8,sp
 4008ef0:	003ef106 	br	4008ab8 <__ram_exceptions_end+0xfbf8081c>
 4008ef4:	d9402017 	ldw	r5,128(sp)
 4008ef8:	d9002117 	ldw	r4,132(sp)
 4008efc:	d9801a04 	addi	r6,sp,104
 4008f00:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 4008f04:	103f221e 	bne	r2,zero,4008b90 <__ram_exceptions_end+0xfbf808f4>
 4008f08:	d9401b17 	ldw	r5,108(sp)
 4008f0c:	d8801c17 	ldw	r2,112(sp)
 4008f10:	d811883a 	mov	r8,sp
 4008f14:	29400044 	addi	r5,r5,1
 4008f18:	003d6206 	br	40084a4 <__ram_exceptions_end+0xfbf80208>
 4008f1c:	01410074 	movhi	r5,1025
 4008f20:	29561d04 	addi	r5,r5,22644
 4008f24:	d9402615 	stw	r5,152(sp)
 4008f28:	d8c02215 	stw	r3,136(sp)
 4008f2c:	1023883a 	mov	r17,r2
 4008f30:	9d04b03a 	or	r2,r19,r20
 4008f34:	103fa51e 	bne	r2,zero,4008dcc <__ram_exceptions_end+0xfbf80b30>
 4008f38:	002b883a 	mov	r21,zero
 4008f3c:	00800084 	movi	r2,2
 4008f40:	003e4a06 	br	400886c <__ram_exceptions_end+0xfbf805d0>
 4008f44:	01410074 	movhi	r5,1025
 4008f48:	29561d04 	addi	r5,r5,22644
 4008f4c:	002b883a 	mov	r21,zero
 4008f50:	d9402615 	stw	r5,152(sp)
 4008f54:	003f9e06 	br	4008dd0 <__ram_exceptions_end+0xfbf80b34>
 4008f58:	d9402217 	ldw	r5,136(sp)
 4008f5c:	d8001d85 	stb	zero,118(sp)
 4008f60:	0029883a 	mov	r20,zero
 4008f64:	28800104 	addi	r2,r5,4
 4008f68:	2cc00017 	ldw	r19,0(r5)
 4008f6c:	803e3a16 	blt	r16,zero,4008858 <__ram_exceptions_end+0xfbf805bc>
 4008f70:	00ffdfc4 	movi	r3,-129
 4008f74:	d8802215 	stw	r2,136(sp)
 4008f78:	88e2703a 	and	r17,r17,r3
 4008f7c:	002b883a 	mov	r21,zero
 4008f80:	983e9b26 	beq	r19,zero,40089f0 <__ram_exceptions_end+0xfbf80754>
 4008f84:	00800244 	movi	r2,9
 4008f88:	14fdc936 	bltu	r2,r19,40086b0 <__ram_exceptions_end+0xfbf80414>
 4008f8c:	003e9a06 	br	40089f8 <__ram_exceptions_end+0xfbf8075c>
 4008f90:	00800c04 	movi	r2,48
 4008f94:	d8c01d45 	stb	r3,117(sp)
 4008f98:	d8801d05 	stb	r2,116(sp)
 4008f9c:	d8001d85 	stb	zero,118(sp)
 4008fa0:	88c00094 	ori	r3,r17,2
 4008fa4:	80009c16 	blt	r16,zero,4009218 <___vfiprintf_internal_r+0x1368>
 4008fa8:	00bfdfc4 	movi	r2,-129
 4008fac:	88a2703a 	and	r17,r17,r2
 4008fb0:	8c400094 	ori	r17,r17,2
 4008fb4:	002b883a 	mov	r21,zero
 4008fb8:	003f8506 	br	4008dd0 <__ram_exceptions_end+0xfbf80b34>
 4008fbc:	b029883a 	mov	r20,r22
 4008fc0:	003c0b06 	br	4007ff0 <__ram_exceptions_end+0xfbf7fd54>
 4008fc4:	04e7c83a 	sub	r19,zero,r19
 4008fc8:	05400b44 	movi	r21,45
 4008fcc:	9804c03a 	cmpne	r2,r19,zero
 4008fd0:	0529c83a 	sub	r20,zero,r20
 4008fd4:	dd401d85 	stb	r21,118(sp)
 4008fd8:	a0a9c83a 	sub	r20,r20,r2
 4008fdc:	80009716 	blt	r16,zero,400923c <___vfiprintf_internal_r+0x138c>
 4008fe0:	00bfdfc4 	movi	r2,-129
 4008fe4:	88a2703a 	and	r17,r17,r2
 4008fe8:	003db006 	br	40086ac <__ram_exceptions_end+0xfbf80410>
 4008fec:	b0c00007 	ldb	r3,0(r22)
 4008ff0:	003c0c06 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 4008ff4:	8880100c 	andi	r2,r17,64
 4008ff8:	d8001d85 	stb	zero,118(sp)
 4008ffc:	1000461e 	bne	r2,zero,4009118 <___vfiprintf_internal_r+0x1268>
 4009000:	d9002217 	ldw	r4,136(sp)
 4009004:	0029883a 	mov	r20,zero
 4009008:	20800104 	addi	r2,r4,4
 400900c:	24c00017 	ldw	r19,0(r4)
 4009010:	803df80e 	bge	r16,zero,40087f4 <__ram_exceptions_end+0xfbf80558>
 4009014:	9d06b03a 	or	r3,r19,r20
 4009018:	d8802215 	stw	r2,136(sp)
 400901c:	183d5e1e 	bne	r3,zero,4008598 <__ram_exceptions_end+0xfbf802fc>
 4009020:	002b883a 	mov	r21,zero
 4009024:	0005883a 	mov	r2,zero
 4009028:	003e1006 	br	400886c <__ram_exceptions_end+0xfbf805d0>
 400902c:	8880040c 	andi	r2,r17,16
 4009030:	1000321e 	bne	r2,zero,40090fc <___vfiprintf_internal_r+0x124c>
 4009034:	8c40100c 	andi	r17,r17,64
 4009038:	88008d26 	beq	r17,zero,4009270 <___vfiprintf_internal_r+0x13c0>
 400903c:	d9402217 	ldw	r5,136(sp)
 4009040:	d8c02417 	ldw	r3,144(sp)
 4009044:	28800017 	ldw	r2,0(r5)
 4009048:	29400104 	addi	r5,r5,4
 400904c:	d9402215 	stw	r5,136(sp)
 4009050:	10c0000d 	sth	r3,0(r2)
 4009054:	003bca06 	br	4007f80 <__ram_exceptions_end+0xfbf7fce4>
 4009058:	8880100c 	andi	r2,r17,64
 400905c:	10003a26 	beq	r2,zero,4009148 <___vfiprintf_internal_r+0x1298>
 4009060:	d8802217 	ldw	r2,136(sp)
 4009064:	14c0000f 	ldh	r19,0(r2)
 4009068:	10800104 	addi	r2,r2,4
 400906c:	d8802215 	stw	r2,136(sp)
 4009070:	9829d7fa 	srai	r20,r19,31
 4009074:	a005883a 	mov	r2,r20
 4009078:	003d8506 	br	4008690 <__ram_exceptions_end+0xfbf803f4>
 400907c:	8880100c 	andi	r2,r17,64
 4009080:	10002b26 	beq	r2,zero,4009130 <___vfiprintf_internal_r+0x1280>
 4009084:	d8802217 	ldw	r2,136(sp)
 4009088:	0029883a 	mov	r20,zero
 400908c:	14c0000b 	ldhu	r19,0(r2)
 4009090:	10800104 	addi	r2,r2,4
 4009094:	d8802215 	stw	r2,136(sp)
 4009098:	003d5d06 	br	4008610 <__ram_exceptions_end+0xfbf80374>
 400909c:	d9402017 	ldw	r5,128(sp)
 40090a0:	d9002117 	ldw	r4,132(sp)
 40090a4:	d9801a04 	addi	r6,sp,104
 40090a8:	d8c02a15 	stw	r3,168(sp)
 40090ac:	d9c02b15 	stw	r7,172(sp)
 40090b0:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 40090b4:	d8c02a17 	ldw	r3,168(sp)
 40090b8:	d9c02b17 	ldw	r7,172(sp)
 40090bc:	103eb41e 	bne	r2,zero,4008b90 <__ram_exceptions_end+0xfbf808f4>
 40090c0:	d9001b17 	ldw	r4,108(sp)
 40090c4:	d8801c17 	ldw	r2,112(sp)
 40090c8:	d811883a 	mov	r8,sp
 40090cc:	21400044 	addi	r5,r4,1
 40090d0:	003e6706 	br	4008a70 <__ram_exceptions_end+0xfbf807d4>
 40090d4:	00bfffc4 	movi	r2,-1
 40090d8:	003c4a06 	br	4008204 <__ram_exceptions_end+0xfbf7ff68>
 40090dc:	9805883a 	mov	r2,r19
 40090e0:	003ee806 	br	4008c84 <__ram_exceptions_end+0xfbf809e8>
 40090e4:	d8c02217 	ldw	r3,136(sp)
 40090e8:	0029883a 	mov	r20,zero
 40090ec:	18800104 	addi	r2,r3,4
 40090f0:	1cc0000b 	ldhu	r19,0(r3)
 40090f4:	803f9e0e 	bge	r16,zero,4008f70 <__ram_exceptions_end+0xfbf80cd4>
 40090f8:	003dd706 	br	4008858 <__ram_exceptions_end+0xfbf805bc>
 40090fc:	d8c02217 	ldw	r3,136(sp)
 4009100:	d9002417 	ldw	r4,144(sp)
 4009104:	18800017 	ldw	r2,0(r3)
 4009108:	18c00104 	addi	r3,r3,4
 400910c:	d8c02215 	stw	r3,136(sp)
 4009110:	11000015 	stw	r4,0(r2)
 4009114:	003b9a06 	br	4007f80 <__ram_exceptions_end+0xfbf7fce4>
 4009118:	d8c02217 	ldw	r3,136(sp)
 400911c:	0029883a 	mov	r20,zero
 4009120:	18800104 	addi	r2,r3,4
 4009124:	1cc0000b 	ldhu	r19,0(r3)
 4009128:	803db20e 	bge	r16,zero,40087f4 <__ram_exceptions_end+0xfbf80558>
 400912c:	003fb906 	br	4009014 <__ram_exceptions_end+0xfbf80d78>
 4009130:	d9002217 	ldw	r4,136(sp)
 4009134:	0029883a 	mov	r20,zero
 4009138:	24c00017 	ldw	r19,0(r4)
 400913c:	21000104 	addi	r4,r4,4
 4009140:	d9002215 	stw	r4,136(sp)
 4009144:	003d3206 	br	4008610 <__ram_exceptions_end+0xfbf80374>
 4009148:	d8c02217 	ldw	r3,136(sp)
 400914c:	1cc00017 	ldw	r19,0(r3)
 4009150:	18c00104 	addi	r3,r3,4
 4009154:	d8c02215 	stw	r3,136(sp)
 4009158:	9829d7fa 	srai	r20,r19,31
 400915c:	a005883a 	mov	r2,r20
 4009160:	003d4b06 	br	4008690 <__ram_exceptions_end+0xfbf803f4>
 4009164:	0009883a 	mov	r4,zero
 4009168:	01400044 	movi	r5,1
 400916c:	d811883a 	mov	r8,sp
 4009170:	003e4f06 	br	4008ab0 <__ram_exceptions_end+0xfbf80814>
 4009174:	d8c02215 	stw	r3,136(sp)
 4009178:	002b883a 	mov	r21,zero
 400917c:	003db806 	br	4008860 <__ram_exceptions_end+0xfbf805c4>
 4009180:	d811883a 	mov	r8,sp
 4009184:	003e9606 	br	4008be0 <__ram_exceptions_end+0xfbf80944>
 4009188:	01010074 	movhi	r4,1025
 400918c:	21167d04 	addi	r4,r4,23028
 4009190:	d9002315 	stw	r4,140(sp)
 4009194:	003e6306 	br	4008b24 <__ram_exceptions_end+0xfbf80888>
 4009198:	b0c00043 	ldbu	r3,1(r22)
 400919c:	8c400814 	ori	r17,r17,32
 40091a0:	b5800044 	addi	r22,r22,1
 40091a4:	18c03fcc 	andi	r3,r3,255
 40091a8:	18c0201c 	xori	r3,r3,128
 40091ac:	18ffe004 	addi	r3,r3,-128
 40091b0:	003b9c06 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 40091b4:	b809883a 	mov	r4,r23
 40091b8:	da002a15 	stw	r8,168(sp)
 40091bc:	4007d040 	call	4007d04 <strlen>
 40091c0:	1029883a 	mov	r20,r2
 40091c4:	dd401d83 	ldbu	r21,118(sp)
 40091c8:	df002215 	stw	fp,136(sp)
 40091cc:	0021883a 	mov	r16,zero
 40091d0:	da002a17 	ldw	r8,168(sp)
 40091d4:	003c3906 	br	40082bc <__ram_exceptions_end+0xfbf80020>
 40091d8:	d9402017 	ldw	r5,128(sp)
 40091dc:	d9002117 	ldw	r4,132(sp)
 40091e0:	d9801a04 	addi	r6,sp,104
 40091e4:	4007d9c0 	call	4007d9c <__sprint_r.part.0>
 40091e8:	103e691e 	bne	r2,zero,4008b90 <__ram_exceptions_end+0xfbf808f4>
 40091ec:	d9001b17 	ldw	r4,108(sp)
 40091f0:	d8801c17 	ldw	r2,112(sp)
 40091f4:	d811883a 	mov	r8,sp
 40091f8:	21400044 	addi	r5,r4,1
 40091fc:	003e2e06 	br	4008ab8 <__ram_exceptions_end+0xfbf8081c>
 4009200:	01010074 	movhi	r4,1025
 4009204:	21168104 	addi	r4,r4,23044
 4009208:	d9002315 	stw	r4,140(sp)
 400920c:	d9001b17 	ldw	r4,108(sp)
 4009210:	21000044 	addi	r4,r4,1
 4009214:	003c5e06 	br	4008390 <__ram_exceptions_end+0xfbf800f4>
 4009218:	002b883a 	mov	r21,zero
 400921c:	00800084 	movi	r2,2
 4009220:	10803fcc 	andi	r2,r2,255
 4009224:	01000044 	movi	r4,1
 4009228:	11002b26 	beq	r2,r4,40092d8 <___vfiprintf_internal_r+0x1428>
 400922c:	01000084 	movi	r4,2
 4009230:	11002b1e 	bne	r2,r4,40092e0 <___vfiprintf_internal_r+0x1430>
 4009234:	1823883a 	mov	r17,r3
 4009238:	003ee506 	br	4008dd0 <__ram_exceptions_end+0xfbf80b34>
 400923c:	8807883a 	mov	r3,r17
 4009240:	00800044 	movi	r2,1
 4009244:	003ff606 	br	4009220 <__ram_exceptions_end+0xfbf80f84>
 4009248:	00800184 	movi	r2,6
 400924c:	1400012e 	bgeu	r2,r16,4009254 <___vfiprintf_internal_r+0x13a4>
 4009250:	1021883a 	mov	r16,r2
 4009254:	8029883a 	mov	r20,r16
 4009258:	8027883a 	mov	r19,r16
 400925c:	80002216 	blt	r16,zero,40092e8 <___vfiprintf_internal_r+0x1438>
 4009260:	05c10074 	movhi	r23,1025
 4009264:	df002215 	stw	fp,136(sp)
 4009268:	bdd62204 	addi	r23,r23,22664
 400926c:	003cfb06 	br	400865c <__ram_exceptions_end+0xfbf803c0>
 4009270:	d9002217 	ldw	r4,136(sp)
 4009274:	d9402417 	ldw	r5,144(sp)
 4009278:	20800017 	ldw	r2,0(r4)
 400927c:	21000104 	addi	r4,r4,4
 4009280:	d9002215 	stw	r4,136(sp)
 4009284:	11400015 	stw	r5,0(r2)
 4009288:	003b3d06 	br	4007f80 <__ram_exceptions_end+0xfbf7fce4>
 400928c:	01410074 	movhi	r5,1025
 4009290:	29568104 	addi	r5,r5,23044
 4009294:	d9402315 	stw	r5,140(sp)
 4009298:	d9401b17 	ldw	r5,108(sp)
 400929c:	29400044 	addi	r5,r5,1
 40092a0:	003e6d06 	br	4008c58 <__ram_exceptions_end+0xfbf809bc>
 40092a4:	8029883a 	mov	r20,r16
 40092a8:	dd401d83 	ldbu	r21,118(sp)
 40092ac:	df002215 	stw	fp,136(sp)
 40092b0:	0021883a 	mov	r16,zero
 40092b4:	003c0106 	br	40082bc <__ram_exceptions_end+0xfbf80020>
 40092b8:	00c10074 	movhi	r3,1025
 40092bc:	18d67d04 	addi	r3,r3,23028
 40092c0:	d8c02315 	stw	r3,140(sp)
 40092c4:	280d883a 	mov	r6,r5
 40092c8:	003c6906 	br	4008470 <__ram_exceptions_end+0xfbf801d4>
 40092cc:	802d883a 	mov	r22,r16
 40092d0:	0021883a 	mov	r16,zero
 40092d4:	003b5406 	br	4008028 <__ram_exceptions_end+0xfbf7fd8c>
 40092d8:	1823883a 	mov	r17,r3
 40092dc:	003cf306 	br	40086ac <__ram_exceptions_end+0xfbf80410>
 40092e0:	1823883a 	mov	r17,r3
 40092e4:	003cad06 	br	400859c <__ram_exceptions_end+0xfbf80300>
 40092e8:	0027883a 	mov	r19,zero
 40092ec:	003fdc06 	br	4009260 <__ram_exceptions_end+0xfbf80fc4>
 40092f0:	d9402217 	ldw	r5,136(sp)
 40092f4:	8005883a 	mov	r2,r16
 40092f8:	b0c00043 	ldbu	r3,1(r22)
 40092fc:	2c000017 	ldw	r16,0(r5)
 4009300:	29000104 	addi	r4,r5,4
 4009304:	d9002215 	stw	r4,136(sp)
 4009308:	102d883a 	mov	r22,r2
 400930c:	803fa50e 	bge	r16,zero,40091a4 <__ram_exceptions_end+0xfbf80f08>
 4009310:	18c03fcc 	andi	r3,r3,255
 4009314:	18c0201c 	xori	r3,r3,128
 4009318:	043fffc4 	movi	r16,-1
 400931c:	18ffe004 	addi	r3,r3,-128
 4009320:	003b4006 	br	4008024 <__ram_exceptions_end+0xfbf7fd88>
 4009324:	d9402303 	ldbu	r5,140(sp)
 4009328:	d9401d85 	stb	r5,118(sp)
 400932c:	003cae06 	br	40085e8 <__ram_exceptions_end+0xfbf8034c>
 4009330:	d8c02303 	ldbu	r3,140(sp)
 4009334:	d8c01d85 	stb	r3,118(sp)
 4009338:	003d1406 	br	400878c <__ram_exceptions_end+0xfbf804f0>
 400933c:	d8c02303 	ldbu	r3,140(sp)
 4009340:	d8c01d85 	stb	r3,118(sp)
 4009344:	003cca06 	br	4008670 <__ram_exceptions_end+0xfbf803d4>
 4009348:	8880004c 	andi	r2,r17,1
 400934c:	002b883a 	mov	r21,zero
 4009350:	10000526 	beq	r2,zero,4009368 <___vfiprintf_internal_r+0x14b8>
 4009354:	00800c04 	movi	r2,48
 4009358:	d88019c5 	stb	r2,103(sp)
 400935c:	dd002817 	ldw	r20,160(sp)
 4009360:	ddc019c4 	addi	r23,sp,103
 4009364:	003bd506 	br	40082bc <__ram_exceptions_end+0xfbf80020>
 4009368:	0029883a 	mov	r20,zero
 400936c:	ddc01a04 	addi	r23,sp,104
 4009370:	003bd206 	br	40082bc <__ram_exceptions_end+0xfbf80020>
 4009374:	d9002303 	ldbu	r4,140(sp)
 4009378:	d9001d85 	stb	r4,118(sp)
 400937c:	003da606 	br	4008a18 <__ram_exceptions_end+0xfbf8077c>
 4009380:	d8c02303 	ldbu	r3,140(sp)
 4009384:	d8c01d85 	stb	r3,118(sp)
 4009388:	003c7606 	br	4008564 <__ram_exceptions_end+0xfbf802c8>
 400938c:	d8c02303 	ldbu	r3,140(sp)
 4009390:	d8c01d85 	stb	r3,118(sp)
 4009394:	003c6506 	br	400852c <__ram_exceptions_end+0xfbf80290>
 4009398:	d9002303 	ldbu	r4,140(sp)
 400939c:	d9001d85 	stb	r4,118(sp)
 40093a0:	003d3d06 	br	4008898 <__ram_exceptions_end+0xfbf805fc>
 40093a4:	d8c02303 	ldbu	r3,140(sp)
 40093a8:	d8c01d85 	stb	r3,118(sp)
 40093ac:	003d1d06 	br	4008824 <__ram_exceptions_end+0xfbf80588>
 40093b0:	d8c02303 	ldbu	r3,140(sp)
 40093b4:	d8c01d85 	stb	r3,118(sp)
 40093b8:	003d0306 	br	40087c8 <__ram_exceptions_end+0xfbf8052c>

040093bc <__vfiprintf_internal>:
 40093bc:	00810074 	movhi	r2,1025
 40093c0:	109b1804 	addi	r2,r2,27744
 40093c4:	300f883a 	mov	r7,r6
 40093c8:	280d883a 	mov	r6,r5
 40093cc:	200b883a 	mov	r5,r4
 40093d0:	11000017 	ldw	r4,0(r2)
 40093d4:	4007eb01 	jmpi	4007eb0 <___vfiprintf_internal_r>

040093d8 <__sbprintf>:
 40093d8:	2880030b 	ldhu	r2,12(r5)
 40093dc:	2ac01917 	ldw	r11,100(r5)
 40093e0:	2a80038b 	ldhu	r10,14(r5)
 40093e4:	2a400717 	ldw	r9,28(r5)
 40093e8:	2a000917 	ldw	r8,36(r5)
 40093ec:	defee204 	addi	sp,sp,-1144
 40093f0:	00c10004 	movi	r3,1024
 40093f4:	dc011a15 	stw	r16,1128(sp)
 40093f8:	10bfff4c 	andi	r2,r2,65533
 40093fc:	2821883a 	mov	r16,r5
 4009400:	d8cb883a 	add	r5,sp,r3
 4009404:	dc811c15 	stw	r18,1136(sp)
 4009408:	dc411b15 	stw	r17,1132(sp)
 400940c:	dfc11d15 	stw	ra,1140(sp)
 4009410:	2025883a 	mov	r18,r4
 4009414:	d881030d 	sth	r2,1036(sp)
 4009418:	dac11915 	stw	r11,1124(sp)
 400941c:	da81038d 	sth	r10,1038(sp)
 4009420:	da410715 	stw	r9,1052(sp)
 4009424:	da010915 	stw	r8,1060(sp)
 4009428:	dec10015 	stw	sp,1024(sp)
 400942c:	dec10415 	stw	sp,1040(sp)
 4009430:	d8c10215 	stw	r3,1032(sp)
 4009434:	d8c10515 	stw	r3,1044(sp)
 4009438:	d8010615 	stw	zero,1048(sp)
 400943c:	4007eb00 	call	4007eb0 <___vfiprintf_internal_r>
 4009440:	1023883a 	mov	r17,r2
 4009444:	10000416 	blt	r2,zero,4009458 <__sbprintf+0x80>
 4009448:	d9410004 	addi	r5,sp,1024
 400944c:	9009883a 	mov	r4,r18
 4009450:	400517c0 	call	400517c <_fflush_r>
 4009454:	10000d1e 	bne	r2,zero,400948c <__sbprintf+0xb4>
 4009458:	d881030b 	ldhu	r2,1036(sp)
 400945c:	1080100c 	andi	r2,r2,64
 4009460:	10000326 	beq	r2,zero,4009470 <__sbprintf+0x98>
 4009464:	8080030b 	ldhu	r2,12(r16)
 4009468:	10801014 	ori	r2,r2,64
 400946c:	8080030d 	sth	r2,12(r16)
 4009470:	8805883a 	mov	r2,r17
 4009474:	dfc11d17 	ldw	ra,1140(sp)
 4009478:	dc811c17 	ldw	r18,1136(sp)
 400947c:	dc411b17 	ldw	r17,1132(sp)
 4009480:	dc011a17 	ldw	r16,1128(sp)
 4009484:	dec11e04 	addi	sp,sp,1144
 4009488:	f800283a 	ret
 400948c:	047fffc4 	movi	r17,-1
 4009490:	003ff106 	br	4009458 <__ram_exceptions_end+0xfbf811bc>

04009494 <_write_r>:
 4009494:	defffd04 	addi	sp,sp,-12
 4009498:	2805883a 	mov	r2,r5
 400949c:	dc000015 	stw	r16,0(sp)
 40094a0:	04010074 	movhi	r16,1025
 40094a4:	dc400115 	stw	r17,4(sp)
 40094a8:	300b883a 	mov	r5,r6
 40094ac:	841e5c04 	addi	r16,r16,31088
 40094b0:	2023883a 	mov	r17,r4
 40094b4:	380d883a 	mov	r6,r7
 40094b8:	1009883a 	mov	r4,r2
 40094bc:	dfc00215 	stw	ra,8(sp)
 40094c0:	80000015 	stw	zero,0(r16)
 40094c4:	400e6500 	call	400e650 <write>
 40094c8:	00ffffc4 	movi	r3,-1
 40094cc:	10c00526 	beq	r2,r3,40094e4 <_write_r+0x50>
 40094d0:	dfc00217 	ldw	ra,8(sp)
 40094d4:	dc400117 	ldw	r17,4(sp)
 40094d8:	dc000017 	ldw	r16,0(sp)
 40094dc:	dec00304 	addi	sp,sp,12
 40094e0:	f800283a 	ret
 40094e4:	80c00017 	ldw	r3,0(r16)
 40094e8:	183ff926 	beq	r3,zero,40094d0 <__ram_exceptions_end+0xfbf81234>
 40094ec:	88c00015 	stw	r3,0(r17)
 40094f0:	003ff706 	br	40094d0 <__ram_exceptions_end+0xfbf81234>

040094f4 <_close_r>:
 40094f4:	defffd04 	addi	sp,sp,-12
 40094f8:	dc000015 	stw	r16,0(sp)
 40094fc:	04010074 	movhi	r16,1025
 4009500:	dc400115 	stw	r17,4(sp)
 4009504:	841e5c04 	addi	r16,r16,31088
 4009508:	2023883a 	mov	r17,r4
 400950c:	2809883a 	mov	r4,r5
 4009510:	dfc00215 	stw	ra,8(sp)
 4009514:	80000015 	stw	zero,0(r16)
 4009518:	400de080 	call	400de08 <close>
 400951c:	00ffffc4 	movi	r3,-1
 4009520:	10c00526 	beq	r2,r3,4009538 <_close_r+0x44>
 4009524:	dfc00217 	ldw	ra,8(sp)
 4009528:	dc400117 	ldw	r17,4(sp)
 400952c:	dc000017 	ldw	r16,0(sp)
 4009530:	dec00304 	addi	sp,sp,12
 4009534:	f800283a 	ret
 4009538:	80c00017 	ldw	r3,0(r16)
 400953c:	183ff926 	beq	r3,zero,4009524 <__ram_exceptions_end+0xfbf81288>
 4009540:	88c00015 	stw	r3,0(r17)
 4009544:	003ff706 	br	4009524 <__ram_exceptions_end+0xfbf81288>

04009548 <_calloc_r>:
 4009548:	defffe04 	addi	sp,sp,-8
 400954c:	2805883a 	mov	r2,r5
 4009550:	dc000015 	stw	r16,0(sp)
 4009554:	300b883a 	mov	r5,r6
 4009558:	2021883a 	mov	r16,r4
 400955c:	1009883a 	mov	r4,r2
 4009560:	dfc00115 	stw	ra,4(sp)
 4009564:	40011140 	call	4001114 <__mulsi3>
 4009568:	100b883a 	mov	r5,r2
 400956c:	8009883a 	mov	r4,r16
 4009570:	4005e0c0 	call	4005e0c <_malloc_r>
 4009574:	10002926 	beq	r2,zero,400961c <_calloc_r+0xd4>
 4009578:	11bfff17 	ldw	r6,-4(r2)
 400957c:	1021883a 	mov	r16,r2
 4009580:	00bfff04 	movi	r2,-4
 4009584:	308c703a 	and	r6,r6,r2
 4009588:	00c00904 	movi	r3,36
 400958c:	308d883a 	add	r6,r6,r2
 4009590:	19801636 	bltu	r3,r6,40095ec <_calloc_r+0xa4>
 4009594:	008004c4 	movi	r2,19
 4009598:	11800b2e 	bgeu	r2,r6,40095c8 <_calloc_r+0x80>
 400959c:	80000015 	stw	zero,0(r16)
 40095a0:	80000115 	stw	zero,4(r16)
 40095a4:	008006c4 	movi	r2,27
 40095a8:	11801a2e 	bgeu	r2,r6,4009614 <_calloc_r+0xcc>
 40095ac:	80000215 	stw	zero,8(r16)
 40095b0:	80000315 	stw	zero,12(r16)
 40095b4:	30c0151e 	bne	r6,r3,400960c <_calloc_r+0xc4>
 40095b8:	80000415 	stw	zero,16(r16)
 40095bc:	80800604 	addi	r2,r16,24
 40095c0:	80000515 	stw	zero,20(r16)
 40095c4:	00000106 	br	40095cc <_calloc_r+0x84>
 40095c8:	8005883a 	mov	r2,r16
 40095cc:	10000015 	stw	zero,0(r2)
 40095d0:	10000115 	stw	zero,4(r2)
 40095d4:	10000215 	stw	zero,8(r2)
 40095d8:	8005883a 	mov	r2,r16
 40095dc:	dfc00117 	ldw	ra,4(sp)
 40095e0:	dc000017 	ldw	r16,0(sp)
 40095e4:	dec00204 	addi	sp,sp,8
 40095e8:	f800283a 	ret
 40095ec:	000b883a 	mov	r5,zero
 40095f0:	8009883a 	mov	r4,r16
 40095f4:	40068440 	call	4006844 <memset>
 40095f8:	8005883a 	mov	r2,r16
 40095fc:	dfc00117 	ldw	ra,4(sp)
 4009600:	dc000017 	ldw	r16,0(sp)
 4009604:	dec00204 	addi	sp,sp,8
 4009608:	f800283a 	ret
 400960c:	80800404 	addi	r2,r16,16
 4009610:	003fee06 	br	40095cc <__ram_exceptions_end+0xfbf81330>
 4009614:	80800204 	addi	r2,r16,8
 4009618:	003fec06 	br	40095cc <__ram_exceptions_end+0xfbf81330>
 400961c:	0005883a 	mov	r2,zero
 4009620:	003fee06 	br	40095dc <__ram_exceptions_end+0xfbf81340>

04009624 <_fclose_r>:
 4009624:	28003926 	beq	r5,zero,400970c <_fclose_r+0xe8>
 4009628:	defffc04 	addi	sp,sp,-16
 400962c:	dc400115 	stw	r17,4(sp)
 4009630:	dc000015 	stw	r16,0(sp)
 4009634:	dfc00315 	stw	ra,12(sp)
 4009638:	dc800215 	stw	r18,8(sp)
 400963c:	2023883a 	mov	r17,r4
 4009640:	2821883a 	mov	r16,r5
 4009644:	20000226 	beq	r4,zero,4009650 <_fclose_r+0x2c>
 4009648:	20800e17 	ldw	r2,56(r4)
 400964c:	10002726 	beq	r2,zero,40096ec <_fclose_r+0xc8>
 4009650:	8080030f 	ldh	r2,12(r16)
 4009654:	1000071e 	bne	r2,zero,4009674 <_fclose_r+0x50>
 4009658:	0005883a 	mov	r2,zero
 400965c:	dfc00317 	ldw	ra,12(sp)
 4009660:	dc800217 	ldw	r18,8(sp)
 4009664:	dc400117 	ldw	r17,4(sp)
 4009668:	dc000017 	ldw	r16,0(sp)
 400966c:	dec00404 	addi	sp,sp,16
 4009670:	f800283a 	ret
 4009674:	800b883a 	mov	r5,r16
 4009678:	8809883a 	mov	r4,r17
 400967c:	4004f600 	call	4004f60 <__sflush_r>
 4009680:	1025883a 	mov	r18,r2
 4009684:	80800b17 	ldw	r2,44(r16)
 4009688:	10000426 	beq	r2,zero,400969c <_fclose_r+0x78>
 400968c:	81400717 	ldw	r5,28(r16)
 4009690:	8809883a 	mov	r4,r17
 4009694:	103ee83a 	callr	r2
 4009698:	10001616 	blt	r2,zero,40096f4 <_fclose_r+0xd0>
 400969c:	8080030b 	ldhu	r2,12(r16)
 40096a0:	1080200c 	andi	r2,r2,128
 40096a4:	1000151e 	bne	r2,zero,40096fc <_fclose_r+0xd8>
 40096a8:	81400c17 	ldw	r5,48(r16)
 40096ac:	28000526 	beq	r5,zero,40096c4 <_fclose_r+0xa0>
 40096b0:	80801004 	addi	r2,r16,64
 40096b4:	28800226 	beq	r5,r2,40096c0 <_fclose_r+0x9c>
 40096b8:	8809883a 	mov	r4,r17
 40096bc:	40056dc0 	call	40056dc <_free_r>
 40096c0:	80000c15 	stw	zero,48(r16)
 40096c4:	81401117 	ldw	r5,68(r16)
 40096c8:	28000326 	beq	r5,zero,40096d8 <_fclose_r+0xb4>
 40096cc:	8809883a 	mov	r4,r17
 40096d0:	40056dc0 	call	40056dc <_free_r>
 40096d4:	80001115 	stw	zero,68(r16)
 40096d8:	40055780 	call	4005578 <__sfp_lock_acquire>
 40096dc:	8000030d 	sth	zero,12(r16)
 40096e0:	400557c0 	call	400557c <__sfp_lock_release>
 40096e4:	9005883a 	mov	r2,r18
 40096e8:	003fdc06 	br	400965c <__ram_exceptions_end+0xfbf813c0>
 40096ec:	40055680 	call	4005568 <__sinit>
 40096f0:	003fd706 	br	4009650 <__ram_exceptions_end+0xfbf813b4>
 40096f4:	04bfffc4 	movi	r18,-1
 40096f8:	003fe806 	br	400969c <__ram_exceptions_end+0xfbf81400>
 40096fc:	81400417 	ldw	r5,16(r16)
 4009700:	8809883a 	mov	r4,r17
 4009704:	40056dc0 	call	40056dc <_free_r>
 4009708:	003fe706 	br	40096a8 <__ram_exceptions_end+0xfbf8140c>
 400970c:	0005883a 	mov	r2,zero
 4009710:	f800283a 	ret

04009714 <fclose>:
 4009714:	00810074 	movhi	r2,1025
 4009718:	109b1804 	addi	r2,r2,27744
 400971c:	200b883a 	mov	r5,r4
 4009720:	11000017 	ldw	r4,0(r2)
 4009724:	40096241 	jmpi	4009624 <_fclose_r>

04009728 <__fputwc>:
 4009728:	defff804 	addi	sp,sp,-32
 400972c:	dcc00415 	stw	r19,16(sp)
 4009730:	dc800315 	stw	r18,12(sp)
 4009734:	dc000115 	stw	r16,4(sp)
 4009738:	dfc00715 	stw	ra,28(sp)
 400973c:	dd400615 	stw	r21,24(sp)
 4009740:	dd000515 	stw	r20,20(sp)
 4009744:	dc400215 	stw	r17,8(sp)
 4009748:	2027883a 	mov	r19,r4
 400974c:	2825883a 	mov	r18,r5
 4009750:	3021883a 	mov	r16,r6
 4009754:	4005bfc0 	call	4005bfc <__locale_mb_cur_max>
 4009758:	00c00044 	movi	r3,1
 400975c:	10c03e26 	beq	r2,r3,4009858 <__fputwc+0x130>
 4009760:	81c01704 	addi	r7,r16,92
 4009764:	900d883a 	mov	r6,r18
 4009768:	d80b883a 	mov	r5,sp
 400976c:	9809883a 	mov	r4,r19
 4009770:	400a7800 	call	400a780 <_wcrtomb_r>
 4009774:	1029883a 	mov	r20,r2
 4009778:	00bfffc4 	movi	r2,-1
 400977c:	a0802026 	beq	r20,r2,4009800 <__fputwc+0xd8>
 4009780:	d9400003 	ldbu	r5,0(sp)
 4009784:	a0001c26 	beq	r20,zero,40097f8 <__fputwc+0xd0>
 4009788:	0023883a 	mov	r17,zero
 400978c:	05400284 	movi	r21,10
 4009790:	00000906 	br	40097b8 <__fputwc+0x90>
 4009794:	80800017 	ldw	r2,0(r16)
 4009798:	11400005 	stb	r5,0(r2)
 400979c:	80c00017 	ldw	r3,0(r16)
 40097a0:	18c00044 	addi	r3,r3,1
 40097a4:	80c00015 	stw	r3,0(r16)
 40097a8:	8c400044 	addi	r17,r17,1
 40097ac:	dc45883a 	add	r2,sp,r17
 40097b0:	8d00112e 	bgeu	r17,r20,40097f8 <__fputwc+0xd0>
 40097b4:	11400003 	ldbu	r5,0(r2)
 40097b8:	80c00217 	ldw	r3,8(r16)
 40097bc:	18ffffc4 	addi	r3,r3,-1
 40097c0:	80c00215 	stw	r3,8(r16)
 40097c4:	183ff30e 	bge	r3,zero,4009794 <__ram_exceptions_end+0xfbf814f8>
 40097c8:	80800617 	ldw	r2,24(r16)
 40097cc:	18801916 	blt	r3,r2,4009834 <__fputwc+0x10c>
 40097d0:	80800017 	ldw	r2,0(r16)
 40097d4:	11400005 	stb	r5,0(r2)
 40097d8:	80800017 	ldw	r2,0(r16)
 40097dc:	10c00003 	ldbu	r3,0(r2)
 40097e0:	10800044 	addi	r2,r2,1
 40097e4:	1d402326 	beq	r3,r21,4009874 <__fputwc+0x14c>
 40097e8:	80800015 	stw	r2,0(r16)
 40097ec:	8c400044 	addi	r17,r17,1
 40097f0:	dc45883a 	add	r2,sp,r17
 40097f4:	8d3fef36 	bltu	r17,r20,40097b4 <__ram_exceptions_end+0xfbf81518>
 40097f8:	9005883a 	mov	r2,r18
 40097fc:	00000406 	br	4009810 <__fputwc+0xe8>
 4009800:	80c0030b 	ldhu	r3,12(r16)
 4009804:	a005883a 	mov	r2,r20
 4009808:	18c01014 	ori	r3,r3,64
 400980c:	80c0030d 	sth	r3,12(r16)
 4009810:	dfc00717 	ldw	ra,28(sp)
 4009814:	dd400617 	ldw	r21,24(sp)
 4009818:	dd000517 	ldw	r20,20(sp)
 400981c:	dcc00417 	ldw	r19,16(sp)
 4009820:	dc800317 	ldw	r18,12(sp)
 4009824:	dc400217 	ldw	r17,8(sp)
 4009828:	dc000117 	ldw	r16,4(sp)
 400982c:	dec00804 	addi	sp,sp,32
 4009830:	f800283a 	ret
 4009834:	800d883a 	mov	r6,r16
 4009838:	29403fcc 	andi	r5,r5,255
 400983c:	9809883a 	mov	r4,r19
 4009840:	400a6280 	call	400a628 <__swbuf_r>
 4009844:	10bfffe0 	cmpeqi	r2,r2,-1
 4009848:	10803fcc 	andi	r2,r2,255
 400984c:	103fd626 	beq	r2,zero,40097a8 <__ram_exceptions_end+0xfbf8150c>
 4009850:	00bfffc4 	movi	r2,-1
 4009854:	003fee06 	br	4009810 <__ram_exceptions_end+0xfbf81574>
 4009858:	90ffffc4 	addi	r3,r18,-1
 400985c:	01003f84 	movi	r4,254
 4009860:	20ffbf36 	bltu	r4,r3,4009760 <__ram_exceptions_end+0xfbf814c4>
 4009864:	900b883a 	mov	r5,r18
 4009868:	dc800005 	stb	r18,0(sp)
 400986c:	1029883a 	mov	r20,r2
 4009870:	003fc506 	br	4009788 <__ram_exceptions_end+0xfbf814ec>
 4009874:	800d883a 	mov	r6,r16
 4009878:	a80b883a 	mov	r5,r21
 400987c:	9809883a 	mov	r4,r19
 4009880:	400a6280 	call	400a628 <__swbuf_r>
 4009884:	10bfffe0 	cmpeqi	r2,r2,-1
 4009888:	003fef06 	br	4009848 <__ram_exceptions_end+0xfbf815ac>

0400988c <_fputwc_r>:
 400988c:	3080030b 	ldhu	r2,12(r6)
 4009890:	10c8000c 	andi	r3,r2,8192
 4009894:	1800051e 	bne	r3,zero,40098ac <_fputwc_r+0x20>
 4009898:	30c01917 	ldw	r3,100(r6)
 400989c:	10880014 	ori	r2,r2,8192
 40098a0:	3080030d 	sth	r2,12(r6)
 40098a4:	18880014 	ori	r2,r3,8192
 40098a8:	30801915 	stw	r2,100(r6)
 40098ac:	40097281 	jmpi	4009728 <__fputwc>

040098b0 <fputwc>:
 40098b0:	00810074 	movhi	r2,1025
 40098b4:	defffc04 	addi	sp,sp,-16
 40098b8:	109b1804 	addi	r2,r2,27744
 40098bc:	dc000115 	stw	r16,4(sp)
 40098c0:	14000017 	ldw	r16,0(r2)
 40098c4:	dc400215 	stw	r17,8(sp)
 40098c8:	dfc00315 	stw	ra,12(sp)
 40098cc:	2023883a 	mov	r17,r4
 40098d0:	80000226 	beq	r16,zero,40098dc <fputwc+0x2c>
 40098d4:	80800e17 	ldw	r2,56(r16)
 40098d8:	10001026 	beq	r2,zero,400991c <fputwc+0x6c>
 40098dc:	2880030b 	ldhu	r2,12(r5)
 40098e0:	10c8000c 	andi	r3,r2,8192
 40098e4:	1800051e 	bne	r3,zero,40098fc <fputwc+0x4c>
 40098e8:	28c01917 	ldw	r3,100(r5)
 40098ec:	10880014 	ori	r2,r2,8192
 40098f0:	2880030d 	sth	r2,12(r5)
 40098f4:	18880014 	ori	r2,r3,8192
 40098f8:	28801915 	stw	r2,100(r5)
 40098fc:	280d883a 	mov	r6,r5
 4009900:	8009883a 	mov	r4,r16
 4009904:	880b883a 	mov	r5,r17
 4009908:	dfc00317 	ldw	ra,12(sp)
 400990c:	dc400217 	ldw	r17,8(sp)
 4009910:	dc000117 	ldw	r16,4(sp)
 4009914:	dec00404 	addi	sp,sp,16
 4009918:	40097281 	jmpi	4009728 <__fputwc>
 400991c:	8009883a 	mov	r4,r16
 4009920:	d9400015 	stw	r5,0(sp)
 4009924:	40055680 	call	4005568 <__sinit>
 4009928:	d9400017 	ldw	r5,0(sp)
 400992c:	003feb06 	br	40098dc <__ram_exceptions_end+0xfbf81640>

04009930 <_fstat_r>:
 4009930:	defffd04 	addi	sp,sp,-12
 4009934:	2805883a 	mov	r2,r5
 4009938:	dc000015 	stw	r16,0(sp)
 400993c:	04010074 	movhi	r16,1025
 4009940:	dc400115 	stw	r17,4(sp)
 4009944:	841e5c04 	addi	r16,r16,31088
 4009948:	2023883a 	mov	r17,r4
 400994c:	300b883a 	mov	r5,r6
 4009950:	1009883a 	mov	r4,r2
 4009954:	dfc00215 	stw	ra,8(sp)
 4009958:	80000015 	stw	zero,0(r16)
 400995c:	400df480 	call	400df48 <fstat>
 4009960:	00ffffc4 	movi	r3,-1
 4009964:	10c00526 	beq	r2,r3,400997c <_fstat_r+0x4c>
 4009968:	dfc00217 	ldw	ra,8(sp)
 400996c:	dc400117 	ldw	r17,4(sp)
 4009970:	dc000017 	ldw	r16,0(sp)
 4009974:	dec00304 	addi	sp,sp,12
 4009978:	f800283a 	ret
 400997c:	80c00017 	ldw	r3,0(r16)
 4009980:	183ff926 	beq	r3,zero,4009968 <__ram_exceptions_end+0xfbf816cc>
 4009984:	88c00015 	stw	r3,0(r17)
 4009988:	003ff706 	br	4009968 <__ram_exceptions_end+0xfbf816cc>

0400998c <__sfvwrite_r>:
 400998c:	30800217 	ldw	r2,8(r6)
 4009990:	10006726 	beq	r2,zero,4009b30 <__sfvwrite_r+0x1a4>
 4009994:	28c0030b 	ldhu	r3,12(r5)
 4009998:	defff404 	addi	sp,sp,-48
 400999c:	dd400715 	stw	r21,28(sp)
 40099a0:	dd000615 	stw	r20,24(sp)
 40099a4:	dc000215 	stw	r16,8(sp)
 40099a8:	dfc00b15 	stw	ra,44(sp)
 40099ac:	df000a15 	stw	fp,40(sp)
 40099b0:	ddc00915 	stw	r23,36(sp)
 40099b4:	dd800815 	stw	r22,32(sp)
 40099b8:	dcc00515 	stw	r19,20(sp)
 40099bc:	dc800415 	stw	r18,16(sp)
 40099c0:	dc400315 	stw	r17,12(sp)
 40099c4:	1880020c 	andi	r2,r3,8
 40099c8:	2821883a 	mov	r16,r5
 40099cc:	202b883a 	mov	r21,r4
 40099d0:	3029883a 	mov	r20,r6
 40099d4:	10002726 	beq	r2,zero,4009a74 <__sfvwrite_r+0xe8>
 40099d8:	28800417 	ldw	r2,16(r5)
 40099dc:	10002526 	beq	r2,zero,4009a74 <__sfvwrite_r+0xe8>
 40099e0:	1880008c 	andi	r2,r3,2
 40099e4:	a4400017 	ldw	r17,0(r20)
 40099e8:	10002a26 	beq	r2,zero,4009a94 <__sfvwrite_r+0x108>
 40099ec:	05a00034 	movhi	r22,32768
 40099f0:	0027883a 	mov	r19,zero
 40099f4:	0025883a 	mov	r18,zero
 40099f8:	b5bf0004 	addi	r22,r22,-1024
 40099fc:	980d883a 	mov	r6,r19
 4009a00:	a809883a 	mov	r4,r21
 4009a04:	90004626 	beq	r18,zero,4009b20 <__sfvwrite_r+0x194>
 4009a08:	900f883a 	mov	r7,r18
 4009a0c:	b480022e 	bgeu	r22,r18,4009a18 <__sfvwrite_r+0x8c>
 4009a10:	01e00034 	movhi	r7,32768
 4009a14:	39ff0004 	addi	r7,r7,-1024
 4009a18:	80800917 	ldw	r2,36(r16)
 4009a1c:	81400717 	ldw	r5,28(r16)
 4009a20:	103ee83a 	callr	r2
 4009a24:	00805a0e 	bge	zero,r2,4009b90 <__sfvwrite_r+0x204>
 4009a28:	a0c00217 	ldw	r3,8(r20)
 4009a2c:	98a7883a 	add	r19,r19,r2
 4009a30:	90a5c83a 	sub	r18,r18,r2
 4009a34:	1885c83a 	sub	r2,r3,r2
 4009a38:	a0800215 	stw	r2,8(r20)
 4009a3c:	103fef1e 	bne	r2,zero,40099fc <__ram_exceptions_end+0xfbf81760>
 4009a40:	0005883a 	mov	r2,zero
 4009a44:	dfc00b17 	ldw	ra,44(sp)
 4009a48:	df000a17 	ldw	fp,40(sp)
 4009a4c:	ddc00917 	ldw	r23,36(sp)
 4009a50:	dd800817 	ldw	r22,32(sp)
 4009a54:	dd400717 	ldw	r21,28(sp)
 4009a58:	dd000617 	ldw	r20,24(sp)
 4009a5c:	dcc00517 	ldw	r19,20(sp)
 4009a60:	dc800417 	ldw	r18,16(sp)
 4009a64:	dc400317 	ldw	r17,12(sp)
 4009a68:	dc000217 	ldw	r16,8(sp)
 4009a6c:	dec00c04 	addi	sp,sp,48
 4009a70:	f800283a 	ret
 4009a74:	800b883a 	mov	r5,r16
 4009a78:	a809883a 	mov	r4,r21
 4009a7c:	400355c0 	call	400355c <__swsetup_r>
 4009a80:	1000ee1e 	bne	r2,zero,4009e3c <__sfvwrite_r+0x4b0>
 4009a84:	80c0030b 	ldhu	r3,12(r16)
 4009a88:	a4400017 	ldw	r17,0(r20)
 4009a8c:	1880008c 	andi	r2,r3,2
 4009a90:	103fd61e 	bne	r2,zero,40099ec <__ram_exceptions_end+0xfbf81750>
 4009a94:	1880004c 	andi	r2,r3,1
 4009a98:	1000421e 	bne	r2,zero,4009ba4 <__sfvwrite_r+0x218>
 4009a9c:	0039883a 	mov	fp,zero
 4009aa0:	0025883a 	mov	r18,zero
 4009aa4:	90001a26 	beq	r18,zero,4009b10 <__sfvwrite_r+0x184>
 4009aa8:	1880800c 	andi	r2,r3,512
 4009aac:	84c00217 	ldw	r19,8(r16)
 4009ab0:	10002126 	beq	r2,zero,4009b38 <__sfvwrite_r+0x1ac>
 4009ab4:	982f883a 	mov	r23,r19
 4009ab8:	94c09636 	bltu	r18,r19,4009d14 <__sfvwrite_r+0x388>
 4009abc:	1881200c 	andi	r2,r3,1152
 4009ac0:	1000a11e 	bne	r2,zero,4009d48 <__sfvwrite_r+0x3bc>
 4009ac4:	81000017 	ldw	r4,0(r16)
 4009ac8:	b80d883a 	mov	r6,r23
 4009acc:	e00b883a 	mov	r5,fp
 4009ad0:	4009f080 	call	4009f08 <memmove>
 4009ad4:	80c00217 	ldw	r3,8(r16)
 4009ad8:	81000017 	ldw	r4,0(r16)
 4009adc:	9005883a 	mov	r2,r18
 4009ae0:	1ce7c83a 	sub	r19,r3,r19
 4009ae4:	25cf883a 	add	r7,r4,r23
 4009ae8:	84c00215 	stw	r19,8(r16)
 4009aec:	81c00015 	stw	r7,0(r16)
 4009af0:	a0c00217 	ldw	r3,8(r20)
 4009af4:	e0b9883a 	add	fp,fp,r2
 4009af8:	90a5c83a 	sub	r18,r18,r2
 4009afc:	18a7c83a 	sub	r19,r3,r2
 4009b00:	a4c00215 	stw	r19,8(r20)
 4009b04:	983fce26 	beq	r19,zero,4009a40 <__ram_exceptions_end+0xfbf817a4>
 4009b08:	80c0030b 	ldhu	r3,12(r16)
 4009b0c:	903fe61e 	bne	r18,zero,4009aa8 <__ram_exceptions_end+0xfbf8180c>
 4009b10:	8f000017 	ldw	fp,0(r17)
 4009b14:	8c800117 	ldw	r18,4(r17)
 4009b18:	8c400204 	addi	r17,r17,8
 4009b1c:	003fe106 	br	4009aa4 <__ram_exceptions_end+0xfbf81808>
 4009b20:	8cc00017 	ldw	r19,0(r17)
 4009b24:	8c800117 	ldw	r18,4(r17)
 4009b28:	8c400204 	addi	r17,r17,8
 4009b2c:	003fb306 	br	40099fc <__ram_exceptions_end+0xfbf81760>
 4009b30:	0005883a 	mov	r2,zero
 4009b34:	f800283a 	ret
 4009b38:	81000017 	ldw	r4,0(r16)
 4009b3c:	80800417 	ldw	r2,16(r16)
 4009b40:	11005a36 	bltu	r2,r4,4009cac <__sfvwrite_r+0x320>
 4009b44:	85c00517 	ldw	r23,20(r16)
 4009b48:	95c05836 	bltu	r18,r23,4009cac <__sfvwrite_r+0x320>
 4009b4c:	00a00034 	movhi	r2,32768
 4009b50:	10bfffc4 	addi	r2,r2,-1
 4009b54:	9009883a 	mov	r4,r18
 4009b58:	1480012e 	bgeu	r2,r18,4009b60 <__sfvwrite_r+0x1d4>
 4009b5c:	1009883a 	mov	r4,r2
 4009b60:	b80b883a 	mov	r5,r23
 4009b64:	4000f600 	call	4000f60 <__divsi3>
 4009b68:	b80b883a 	mov	r5,r23
 4009b6c:	1009883a 	mov	r4,r2
 4009b70:	40011140 	call	4001114 <__mulsi3>
 4009b74:	81400717 	ldw	r5,28(r16)
 4009b78:	80c00917 	ldw	r3,36(r16)
 4009b7c:	100f883a 	mov	r7,r2
 4009b80:	e00d883a 	mov	r6,fp
 4009b84:	a809883a 	mov	r4,r21
 4009b88:	183ee83a 	callr	r3
 4009b8c:	00bfd816 	blt	zero,r2,4009af0 <__ram_exceptions_end+0xfbf81854>
 4009b90:	8080030b 	ldhu	r2,12(r16)
 4009b94:	10801014 	ori	r2,r2,64
 4009b98:	8080030d 	sth	r2,12(r16)
 4009b9c:	00bfffc4 	movi	r2,-1
 4009ba0:	003fa806 	br	4009a44 <__ram_exceptions_end+0xfbf817a8>
 4009ba4:	0027883a 	mov	r19,zero
 4009ba8:	0011883a 	mov	r8,zero
 4009bac:	0039883a 	mov	fp,zero
 4009bb0:	0025883a 	mov	r18,zero
 4009bb4:	90001f26 	beq	r18,zero,4009c34 <__sfvwrite_r+0x2a8>
 4009bb8:	40005a26 	beq	r8,zero,4009d24 <__sfvwrite_r+0x398>
 4009bbc:	982d883a 	mov	r22,r19
 4009bc0:	94c0012e 	bgeu	r18,r19,4009bc8 <__sfvwrite_r+0x23c>
 4009bc4:	902d883a 	mov	r22,r18
 4009bc8:	81000017 	ldw	r4,0(r16)
 4009bcc:	80800417 	ldw	r2,16(r16)
 4009bd0:	b02f883a 	mov	r23,r22
 4009bd4:	81c00517 	ldw	r7,20(r16)
 4009bd8:	1100032e 	bgeu	r2,r4,4009be8 <__sfvwrite_r+0x25c>
 4009bdc:	80c00217 	ldw	r3,8(r16)
 4009be0:	38c7883a 	add	r3,r7,r3
 4009be4:	1d801816 	blt	r3,r22,4009c48 <__sfvwrite_r+0x2bc>
 4009be8:	b1c03e16 	blt	r22,r7,4009ce4 <__sfvwrite_r+0x358>
 4009bec:	80800917 	ldw	r2,36(r16)
 4009bf0:	81400717 	ldw	r5,28(r16)
 4009bf4:	e00d883a 	mov	r6,fp
 4009bf8:	da000115 	stw	r8,4(sp)
 4009bfc:	a809883a 	mov	r4,r21
 4009c00:	103ee83a 	callr	r2
 4009c04:	102f883a 	mov	r23,r2
 4009c08:	da000117 	ldw	r8,4(sp)
 4009c0c:	00bfe00e 	bge	zero,r2,4009b90 <__ram_exceptions_end+0xfbf818f4>
 4009c10:	9de7c83a 	sub	r19,r19,r23
 4009c14:	98001f26 	beq	r19,zero,4009c94 <__sfvwrite_r+0x308>
 4009c18:	a0800217 	ldw	r2,8(r20)
 4009c1c:	e5f9883a 	add	fp,fp,r23
 4009c20:	95e5c83a 	sub	r18,r18,r23
 4009c24:	15efc83a 	sub	r23,r2,r23
 4009c28:	a5c00215 	stw	r23,8(r20)
 4009c2c:	b83f8426 	beq	r23,zero,4009a40 <__ram_exceptions_end+0xfbf817a4>
 4009c30:	903fe11e 	bne	r18,zero,4009bb8 <__ram_exceptions_end+0xfbf8191c>
 4009c34:	8f000017 	ldw	fp,0(r17)
 4009c38:	8c800117 	ldw	r18,4(r17)
 4009c3c:	0011883a 	mov	r8,zero
 4009c40:	8c400204 	addi	r17,r17,8
 4009c44:	003fdb06 	br	4009bb4 <__ram_exceptions_end+0xfbf81918>
 4009c48:	180d883a 	mov	r6,r3
 4009c4c:	e00b883a 	mov	r5,fp
 4009c50:	da000115 	stw	r8,4(sp)
 4009c54:	d8c00015 	stw	r3,0(sp)
 4009c58:	4009f080 	call	4009f08 <memmove>
 4009c5c:	d8c00017 	ldw	r3,0(sp)
 4009c60:	80800017 	ldw	r2,0(r16)
 4009c64:	800b883a 	mov	r5,r16
 4009c68:	a809883a 	mov	r4,r21
 4009c6c:	10c5883a 	add	r2,r2,r3
 4009c70:	80800015 	stw	r2,0(r16)
 4009c74:	d8c00015 	stw	r3,0(sp)
 4009c78:	400517c0 	call	400517c <_fflush_r>
 4009c7c:	d8c00017 	ldw	r3,0(sp)
 4009c80:	da000117 	ldw	r8,4(sp)
 4009c84:	103fc21e 	bne	r2,zero,4009b90 <__ram_exceptions_end+0xfbf818f4>
 4009c88:	182f883a 	mov	r23,r3
 4009c8c:	9de7c83a 	sub	r19,r19,r23
 4009c90:	983fe11e 	bne	r19,zero,4009c18 <__ram_exceptions_end+0xfbf8197c>
 4009c94:	800b883a 	mov	r5,r16
 4009c98:	a809883a 	mov	r4,r21
 4009c9c:	400517c0 	call	400517c <_fflush_r>
 4009ca0:	103fbb1e 	bne	r2,zero,4009b90 <__ram_exceptions_end+0xfbf818f4>
 4009ca4:	0011883a 	mov	r8,zero
 4009ca8:	003fdb06 	br	4009c18 <__ram_exceptions_end+0xfbf8197c>
 4009cac:	94c0012e 	bgeu	r18,r19,4009cb4 <__sfvwrite_r+0x328>
 4009cb0:	9027883a 	mov	r19,r18
 4009cb4:	980d883a 	mov	r6,r19
 4009cb8:	e00b883a 	mov	r5,fp
 4009cbc:	4009f080 	call	4009f08 <memmove>
 4009cc0:	80800217 	ldw	r2,8(r16)
 4009cc4:	80c00017 	ldw	r3,0(r16)
 4009cc8:	14c5c83a 	sub	r2,r2,r19
 4009ccc:	1cc7883a 	add	r3,r3,r19
 4009cd0:	80800215 	stw	r2,8(r16)
 4009cd4:	80c00015 	stw	r3,0(r16)
 4009cd8:	10004326 	beq	r2,zero,4009de8 <__sfvwrite_r+0x45c>
 4009cdc:	9805883a 	mov	r2,r19
 4009ce0:	003f8306 	br	4009af0 <__ram_exceptions_end+0xfbf81854>
 4009ce4:	b00d883a 	mov	r6,r22
 4009ce8:	e00b883a 	mov	r5,fp
 4009cec:	da000115 	stw	r8,4(sp)
 4009cf0:	4009f080 	call	4009f08 <memmove>
 4009cf4:	80800217 	ldw	r2,8(r16)
 4009cf8:	80c00017 	ldw	r3,0(r16)
 4009cfc:	da000117 	ldw	r8,4(sp)
 4009d00:	1585c83a 	sub	r2,r2,r22
 4009d04:	1dad883a 	add	r22,r3,r22
 4009d08:	80800215 	stw	r2,8(r16)
 4009d0c:	85800015 	stw	r22,0(r16)
 4009d10:	003fbf06 	br	4009c10 <__ram_exceptions_end+0xfbf81974>
 4009d14:	81000017 	ldw	r4,0(r16)
 4009d18:	9027883a 	mov	r19,r18
 4009d1c:	902f883a 	mov	r23,r18
 4009d20:	003f6906 	br	4009ac8 <__ram_exceptions_end+0xfbf8182c>
 4009d24:	900d883a 	mov	r6,r18
 4009d28:	01400284 	movi	r5,10
 4009d2c:	e009883a 	mov	r4,fp
 4009d30:	40066180 	call	4006618 <memchr>
 4009d34:	10003e26 	beq	r2,zero,4009e30 <__sfvwrite_r+0x4a4>
 4009d38:	10800044 	addi	r2,r2,1
 4009d3c:	1727c83a 	sub	r19,r2,fp
 4009d40:	02000044 	movi	r8,1
 4009d44:	003f9d06 	br	4009bbc <__ram_exceptions_end+0xfbf81920>
 4009d48:	80800517 	ldw	r2,20(r16)
 4009d4c:	81400417 	ldw	r5,16(r16)
 4009d50:	81c00017 	ldw	r7,0(r16)
 4009d54:	10a7883a 	add	r19,r2,r2
 4009d58:	9885883a 	add	r2,r19,r2
 4009d5c:	1026d7fa 	srli	r19,r2,31
 4009d60:	396dc83a 	sub	r22,r7,r5
 4009d64:	b1000044 	addi	r4,r22,1
 4009d68:	9885883a 	add	r2,r19,r2
 4009d6c:	1027d07a 	srai	r19,r2,1
 4009d70:	2485883a 	add	r2,r4,r18
 4009d74:	980d883a 	mov	r6,r19
 4009d78:	9880022e 	bgeu	r19,r2,4009d84 <__sfvwrite_r+0x3f8>
 4009d7c:	1027883a 	mov	r19,r2
 4009d80:	100d883a 	mov	r6,r2
 4009d84:	18c1000c 	andi	r3,r3,1024
 4009d88:	18001c26 	beq	r3,zero,4009dfc <__sfvwrite_r+0x470>
 4009d8c:	300b883a 	mov	r5,r6
 4009d90:	a809883a 	mov	r4,r21
 4009d94:	4005e0c0 	call	4005e0c <_malloc_r>
 4009d98:	102f883a 	mov	r23,r2
 4009d9c:	10002926 	beq	r2,zero,4009e44 <__sfvwrite_r+0x4b8>
 4009da0:	81400417 	ldw	r5,16(r16)
 4009da4:	b00d883a 	mov	r6,r22
 4009da8:	1009883a 	mov	r4,r2
 4009dac:	40066fc0 	call	40066fc <memcpy>
 4009db0:	8080030b 	ldhu	r2,12(r16)
 4009db4:	00fedfc4 	movi	r3,-1153
 4009db8:	10c4703a 	and	r2,r2,r3
 4009dbc:	10802014 	ori	r2,r2,128
 4009dc0:	8080030d 	sth	r2,12(r16)
 4009dc4:	bd89883a 	add	r4,r23,r22
 4009dc8:	9d8fc83a 	sub	r7,r19,r22
 4009dcc:	85c00415 	stw	r23,16(r16)
 4009dd0:	84c00515 	stw	r19,20(r16)
 4009dd4:	81000015 	stw	r4,0(r16)
 4009dd8:	9027883a 	mov	r19,r18
 4009ddc:	81c00215 	stw	r7,8(r16)
 4009de0:	902f883a 	mov	r23,r18
 4009de4:	003f3806 	br	4009ac8 <__ram_exceptions_end+0xfbf8182c>
 4009de8:	800b883a 	mov	r5,r16
 4009dec:	a809883a 	mov	r4,r21
 4009df0:	400517c0 	call	400517c <_fflush_r>
 4009df4:	103fb926 	beq	r2,zero,4009cdc <__ram_exceptions_end+0xfbf81a40>
 4009df8:	003f6506 	br	4009b90 <__ram_exceptions_end+0xfbf818f4>
 4009dfc:	a809883a 	mov	r4,r21
 4009e00:	400a0c40 	call	400a0c4 <_realloc_r>
 4009e04:	102f883a 	mov	r23,r2
 4009e08:	103fee1e 	bne	r2,zero,4009dc4 <__ram_exceptions_end+0xfbf81b28>
 4009e0c:	81400417 	ldw	r5,16(r16)
 4009e10:	a809883a 	mov	r4,r21
 4009e14:	40056dc0 	call	40056dc <_free_r>
 4009e18:	8080030b 	ldhu	r2,12(r16)
 4009e1c:	00ffdfc4 	movi	r3,-129
 4009e20:	1884703a 	and	r2,r3,r2
 4009e24:	00c00304 	movi	r3,12
 4009e28:	a8c00015 	stw	r3,0(r21)
 4009e2c:	003f5906 	br	4009b94 <__ram_exceptions_end+0xfbf818f8>
 4009e30:	94c00044 	addi	r19,r18,1
 4009e34:	02000044 	movi	r8,1
 4009e38:	003f6006 	br	4009bbc <__ram_exceptions_end+0xfbf81920>
 4009e3c:	00bfffc4 	movi	r2,-1
 4009e40:	003f0006 	br	4009a44 <__ram_exceptions_end+0xfbf817a8>
 4009e44:	00800304 	movi	r2,12
 4009e48:	a8800015 	stw	r2,0(r21)
 4009e4c:	8080030b 	ldhu	r2,12(r16)
 4009e50:	003f5006 	br	4009b94 <__ram_exceptions_end+0xfbf818f8>

04009e54 <_isatty_r>:
 4009e54:	defffd04 	addi	sp,sp,-12
 4009e58:	dc000015 	stw	r16,0(sp)
 4009e5c:	04010074 	movhi	r16,1025
 4009e60:	dc400115 	stw	r17,4(sp)
 4009e64:	841e5c04 	addi	r16,r16,31088
 4009e68:	2023883a 	mov	r17,r4
 4009e6c:	2809883a 	mov	r4,r5
 4009e70:	dfc00215 	stw	ra,8(sp)
 4009e74:	80000015 	stw	zero,0(r16)
 4009e78:	400e03c0 	call	400e03c <isatty>
 4009e7c:	00ffffc4 	movi	r3,-1
 4009e80:	10c00526 	beq	r2,r3,4009e98 <_isatty_r+0x44>
 4009e84:	dfc00217 	ldw	ra,8(sp)
 4009e88:	dc400117 	ldw	r17,4(sp)
 4009e8c:	dc000017 	ldw	r16,0(sp)
 4009e90:	dec00304 	addi	sp,sp,12
 4009e94:	f800283a 	ret
 4009e98:	80c00017 	ldw	r3,0(r16)
 4009e9c:	183ff926 	beq	r3,zero,4009e84 <__ram_exceptions_end+0xfbf81be8>
 4009ea0:	88c00015 	stw	r3,0(r17)
 4009ea4:	003ff706 	br	4009e84 <__ram_exceptions_end+0xfbf81be8>

04009ea8 <_lseek_r>:
 4009ea8:	defffd04 	addi	sp,sp,-12
 4009eac:	2805883a 	mov	r2,r5
 4009eb0:	dc000015 	stw	r16,0(sp)
 4009eb4:	04010074 	movhi	r16,1025
 4009eb8:	dc400115 	stw	r17,4(sp)
 4009ebc:	300b883a 	mov	r5,r6
 4009ec0:	841e5c04 	addi	r16,r16,31088
 4009ec4:	2023883a 	mov	r17,r4
 4009ec8:	380d883a 	mov	r6,r7
 4009ecc:	1009883a 	mov	r4,r2
 4009ed0:	dfc00215 	stw	ra,8(sp)
 4009ed4:	80000015 	stw	zero,0(r16)
 4009ed8:	400e2100 	call	400e210 <lseek>
 4009edc:	00ffffc4 	movi	r3,-1
 4009ee0:	10c00526 	beq	r2,r3,4009ef8 <_lseek_r+0x50>
 4009ee4:	dfc00217 	ldw	ra,8(sp)
 4009ee8:	dc400117 	ldw	r17,4(sp)
 4009eec:	dc000017 	ldw	r16,0(sp)
 4009ef0:	dec00304 	addi	sp,sp,12
 4009ef4:	f800283a 	ret
 4009ef8:	80c00017 	ldw	r3,0(r16)
 4009efc:	183ff926 	beq	r3,zero,4009ee4 <__ram_exceptions_end+0xfbf81c48>
 4009f00:	88c00015 	stw	r3,0(r17)
 4009f04:	003ff706 	br	4009ee4 <__ram_exceptions_end+0xfbf81c48>

04009f08 <memmove>:
 4009f08:	2005883a 	mov	r2,r4
 4009f0c:	29000b2e 	bgeu	r5,r4,4009f3c <memmove+0x34>
 4009f10:	298f883a 	add	r7,r5,r6
 4009f14:	21c0092e 	bgeu	r4,r7,4009f3c <memmove+0x34>
 4009f18:	2187883a 	add	r3,r4,r6
 4009f1c:	198bc83a 	sub	r5,r3,r6
 4009f20:	30004826 	beq	r6,zero,400a044 <memmove+0x13c>
 4009f24:	39ffffc4 	addi	r7,r7,-1
 4009f28:	39000003 	ldbu	r4,0(r7)
 4009f2c:	18ffffc4 	addi	r3,r3,-1
 4009f30:	19000005 	stb	r4,0(r3)
 4009f34:	28fffb1e 	bne	r5,r3,4009f24 <__ram_exceptions_end+0xfbf81c88>
 4009f38:	f800283a 	ret
 4009f3c:	00c003c4 	movi	r3,15
 4009f40:	1980412e 	bgeu	r3,r6,400a048 <memmove+0x140>
 4009f44:	2886b03a 	or	r3,r5,r2
 4009f48:	18c000cc 	andi	r3,r3,3
 4009f4c:	1800401e 	bne	r3,zero,400a050 <memmove+0x148>
 4009f50:	33fffc04 	addi	r15,r6,-16
 4009f54:	781ed13a 	srli	r15,r15,4
 4009f58:	28c00104 	addi	r3,r5,4
 4009f5c:	13400104 	addi	r13,r2,4
 4009f60:	781c913a 	slli	r14,r15,4
 4009f64:	2b000204 	addi	r12,r5,8
 4009f68:	12c00204 	addi	r11,r2,8
 4009f6c:	73800504 	addi	r14,r14,20
 4009f70:	2a800304 	addi	r10,r5,12
 4009f74:	12400304 	addi	r9,r2,12
 4009f78:	2b9d883a 	add	r14,r5,r14
 4009f7c:	2811883a 	mov	r8,r5
 4009f80:	100f883a 	mov	r7,r2
 4009f84:	41000017 	ldw	r4,0(r8)
 4009f88:	39c00404 	addi	r7,r7,16
 4009f8c:	18c00404 	addi	r3,r3,16
 4009f90:	393ffc15 	stw	r4,-16(r7)
 4009f94:	193ffc17 	ldw	r4,-16(r3)
 4009f98:	6b400404 	addi	r13,r13,16
 4009f9c:	5ac00404 	addi	r11,r11,16
 4009fa0:	693ffc15 	stw	r4,-16(r13)
 4009fa4:	61000017 	ldw	r4,0(r12)
 4009fa8:	4a400404 	addi	r9,r9,16
 4009fac:	42000404 	addi	r8,r8,16
 4009fb0:	593ffc15 	stw	r4,-16(r11)
 4009fb4:	51000017 	ldw	r4,0(r10)
 4009fb8:	63000404 	addi	r12,r12,16
 4009fbc:	52800404 	addi	r10,r10,16
 4009fc0:	493ffc15 	stw	r4,-16(r9)
 4009fc4:	1bbfef1e 	bne	r3,r14,4009f84 <__ram_exceptions_end+0xfbf81ce8>
 4009fc8:	79000044 	addi	r4,r15,1
 4009fcc:	2008913a 	slli	r4,r4,4
 4009fd0:	328003cc 	andi	r10,r6,15
 4009fd4:	02c000c4 	movi	r11,3
 4009fd8:	1107883a 	add	r3,r2,r4
 4009fdc:	290b883a 	add	r5,r5,r4
 4009fe0:	5a801e2e 	bgeu	r11,r10,400a05c <memmove+0x154>
 4009fe4:	1813883a 	mov	r9,r3
 4009fe8:	2811883a 	mov	r8,r5
 4009fec:	500f883a 	mov	r7,r10
 4009ff0:	41000017 	ldw	r4,0(r8)
 4009ff4:	4a400104 	addi	r9,r9,4
 4009ff8:	39ffff04 	addi	r7,r7,-4
 4009ffc:	493fff15 	stw	r4,-4(r9)
 400a000:	42000104 	addi	r8,r8,4
 400a004:	59fffa36 	bltu	r11,r7,4009ff0 <__ram_exceptions_end+0xfbf81d54>
 400a008:	513fff04 	addi	r4,r10,-4
 400a00c:	2008d0ba 	srli	r4,r4,2
 400a010:	318000cc 	andi	r6,r6,3
 400a014:	21000044 	addi	r4,r4,1
 400a018:	2109883a 	add	r4,r4,r4
 400a01c:	2109883a 	add	r4,r4,r4
 400a020:	1907883a 	add	r3,r3,r4
 400a024:	290b883a 	add	r5,r5,r4
 400a028:	30000b26 	beq	r6,zero,400a058 <memmove+0x150>
 400a02c:	198d883a 	add	r6,r3,r6
 400a030:	29c00003 	ldbu	r7,0(r5)
 400a034:	18c00044 	addi	r3,r3,1
 400a038:	29400044 	addi	r5,r5,1
 400a03c:	19ffffc5 	stb	r7,-1(r3)
 400a040:	19bffb1e 	bne	r3,r6,400a030 <__ram_exceptions_end+0xfbf81d94>
 400a044:	f800283a 	ret
 400a048:	1007883a 	mov	r3,r2
 400a04c:	003ff606 	br	400a028 <__ram_exceptions_end+0xfbf81d8c>
 400a050:	1007883a 	mov	r3,r2
 400a054:	003ff506 	br	400a02c <__ram_exceptions_end+0xfbf81d90>
 400a058:	f800283a 	ret
 400a05c:	500d883a 	mov	r6,r10
 400a060:	003ff106 	br	400a028 <__ram_exceptions_end+0xfbf81d8c>

0400a064 <_read_r>:
 400a064:	defffd04 	addi	sp,sp,-12
 400a068:	2805883a 	mov	r2,r5
 400a06c:	dc000015 	stw	r16,0(sp)
 400a070:	04010074 	movhi	r16,1025
 400a074:	dc400115 	stw	r17,4(sp)
 400a078:	300b883a 	mov	r5,r6
 400a07c:	841e5c04 	addi	r16,r16,31088
 400a080:	2023883a 	mov	r17,r4
 400a084:	380d883a 	mov	r6,r7
 400a088:	1009883a 	mov	r4,r2
 400a08c:	dfc00215 	stw	ra,8(sp)
 400a090:	80000015 	stw	zero,0(r16)
 400a094:	400e3dc0 	call	400e3dc <read>
 400a098:	00ffffc4 	movi	r3,-1
 400a09c:	10c00526 	beq	r2,r3,400a0b4 <_read_r+0x50>
 400a0a0:	dfc00217 	ldw	ra,8(sp)
 400a0a4:	dc400117 	ldw	r17,4(sp)
 400a0a8:	dc000017 	ldw	r16,0(sp)
 400a0ac:	dec00304 	addi	sp,sp,12
 400a0b0:	f800283a 	ret
 400a0b4:	80c00017 	ldw	r3,0(r16)
 400a0b8:	183ff926 	beq	r3,zero,400a0a0 <__ram_exceptions_end+0xfbf81e04>
 400a0bc:	88c00015 	stw	r3,0(r17)
 400a0c0:	003ff706 	br	400a0a0 <__ram_exceptions_end+0xfbf81e04>

0400a0c4 <_realloc_r>:
 400a0c4:	defff604 	addi	sp,sp,-40
 400a0c8:	dc800215 	stw	r18,8(sp)
 400a0cc:	dfc00915 	stw	ra,36(sp)
 400a0d0:	df000815 	stw	fp,32(sp)
 400a0d4:	ddc00715 	stw	r23,28(sp)
 400a0d8:	dd800615 	stw	r22,24(sp)
 400a0dc:	dd400515 	stw	r21,20(sp)
 400a0e0:	dd000415 	stw	r20,16(sp)
 400a0e4:	dcc00315 	stw	r19,12(sp)
 400a0e8:	dc400115 	stw	r17,4(sp)
 400a0ec:	dc000015 	stw	r16,0(sp)
 400a0f0:	3025883a 	mov	r18,r6
 400a0f4:	2800b726 	beq	r5,zero,400a3d4 <_realloc_r+0x310>
 400a0f8:	282b883a 	mov	r21,r5
 400a0fc:	2029883a 	mov	r20,r4
 400a100:	400e3580 	call	400e358 <__malloc_lock>
 400a104:	a8bfff17 	ldw	r2,-4(r21)
 400a108:	043fff04 	movi	r16,-4
 400a10c:	90c002c4 	addi	r3,r18,11
 400a110:	01000584 	movi	r4,22
 400a114:	acfffe04 	addi	r19,r21,-8
 400a118:	1420703a 	and	r16,r2,r16
 400a11c:	20c0332e 	bgeu	r4,r3,400a1ec <_realloc_r+0x128>
 400a120:	047ffe04 	movi	r17,-8
 400a124:	1c62703a 	and	r17,r3,r17
 400a128:	8807883a 	mov	r3,r17
 400a12c:	88005816 	blt	r17,zero,400a290 <_realloc_r+0x1cc>
 400a130:	8c805736 	bltu	r17,r18,400a290 <_realloc_r+0x1cc>
 400a134:	80c0300e 	bge	r16,r3,400a1f8 <_realloc_r+0x134>
 400a138:	07010074 	movhi	fp,1025
 400a13c:	e7192904 	addi	fp,fp,25764
 400a140:	e1c00217 	ldw	r7,8(fp)
 400a144:	9c09883a 	add	r4,r19,r16
 400a148:	22000117 	ldw	r8,4(r4)
 400a14c:	21c06326 	beq	r4,r7,400a2dc <_realloc_r+0x218>
 400a150:	017fff84 	movi	r5,-2
 400a154:	414a703a 	and	r5,r8,r5
 400a158:	214b883a 	add	r5,r4,r5
 400a15c:	29800117 	ldw	r6,4(r5)
 400a160:	3180004c 	andi	r6,r6,1
 400a164:	30003f26 	beq	r6,zero,400a264 <_realloc_r+0x1a0>
 400a168:	1080004c 	andi	r2,r2,1
 400a16c:	10008326 	beq	r2,zero,400a37c <_realloc_r+0x2b8>
 400a170:	900b883a 	mov	r5,r18
 400a174:	a009883a 	mov	r4,r20
 400a178:	4005e0c0 	call	4005e0c <_malloc_r>
 400a17c:	1025883a 	mov	r18,r2
 400a180:	10011e26 	beq	r2,zero,400a5fc <_realloc_r+0x538>
 400a184:	a93fff17 	ldw	r4,-4(r21)
 400a188:	10fffe04 	addi	r3,r2,-8
 400a18c:	00bfff84 	movi	r2,-2
 400a190:	2084703a 	and	r2,r4,r2
 400a194:	9885883a 	add	r2,r19,r2
 400a198:	1880ee26 	beq	r3,r2,400a554 <_realloc_r+0x490>
 400a19c:	81bfff04 	addi	r6,r16,-4
 400a1a0:	00800904 	movi	r2,36
 400a1a4:	1180b836 	bltu	r2,r6,400a488 <_realloc_r+0x3c4>
 400a1a8:	00c004c4 	movi	r3,19
 400a1ac:	19809636 	bltu	r3,r6,400a408 <_realloc_r+0x344>
 400a1b0:	9005883a 	mov	r2,r18
 400a1b4:	a807883a 	mov	r3,r21
 400a1b8:	19000017 	ldw	r4,0(r3)
 400a1bc:	11000015 	stw	r4,0(r2)
 400a1c0:	19000117 	ldw	r4,4(r3)
 400a1c4:	11000115 	stw	r4,4(r2)
 400a1c8:	18c00217 	ldw	r3,8(r3)
 400a1cc:	10c00215 	stw	r3,8(r2)
 400a1d0:	a80b883a 	mov	r5,r21
 400a1d4:	a009883a 	mov	r4,r20
 400a1d8:	40056dc0 	call	40056dc <_free_r>
 400a1dc:	a009883a 	mov	r4,r20
 400a1e0:	400e37c0 	call	400e37c <__malloc_unlock>
 400a1e4:	9005883a 	mov	r2,r18
 400a1e8:	00001206 	br	400a234 <_realloc_r+0x170>
 400a1ec:	00c00404 	movi	r3,16
 400a1f0:	1823883a 	mov	r17,r3
 400a1f4:	003fce06 	br	400a130 <__ram_exceptions_end+0xfbf81e94>
 400a1f8:	a825883a 	mov	r18,r21
 400a1fc:	8445c83a 	sub	r2,r16,r17
 400a200:	00c003c4 	movi	r3,15
 400a204:	18802636 	bltu	r3,r2,400a2a0 <_realloc_r+0x1dc>
 400a208:	99800117 	ldw	r6,4(r19)
 400a20c:	9c07883a 	add	r3,r19,r16
 400a210:	3180004c 	andi	r6,r6,1
 400a214:	3420b03a 	or	r16,r6,r16
 400a218:	9c000115 	stw	r16,4(r19)
 400a21c:	18800117 	ldw	r2,4(r3)
 400a220:	10800054 	ori	r2,r2,1
 400a224:	18800115 	stw	r2,4(r3)
 400a228:	a009883a 	mov	r4,r20
 400a22c:	400e37c0 	call	400e37c <__malloc_unlock>
 400a230:	9005883a 	mov	r2,r18
 400a234:	dfc00917 	ldw	ra,36(sp)
 400a238:	df000817 	ldw	fp,32(sp)
 400a23c:	ddc00717 	ldw	r23,28(sp)
 400a240:	dd800617 	ldw	r22,24(sp)
 400a244:	dd400517 	ldw	r21,20(sp)
 400a248:	dd000417 	ldw	r20,16(sp)
 400a24c:	dcc00317 	ldw	r19,12(sp)
 400a250:	dc800217 	ldw	r18,8(sp)
 400a254:	dc400117 	ldw	r17,4(sp)
 400a258:	dc000017 	ldw	r16,0(sp)
 400a25c:	dec00a04 	addi	sp,sp,40
 400a260:	f800283a 	ret
 400a264:	017fff04 	movi	r5,-4
 400a268:	414a703a 	and	r5,r8,r5
 400a26c:	814d883a 	add	r6,r16,r5
 400a270:	30c01f16 	blt	r6,r3,400a2f0 <_realloc_r+0x22c>
 400a274:	20800317 	ldw	r2,12(r4)
 400a278:	20c00217 	ldw	r3,8(r4)
 400a27c:	a825883a 	mov	r18,r21
 400a280:	3021883a 	mov	r16,r6
 400a284:	18800315 	stw	r2,12(r3)
 400a288:	10c00215 	stw	r3,8(r2)
 400a28c:	003fdb06 	br	400a1fc <__ram_exceptions_end+0xfbf81f60>
 400a290:	00800304 	movi	r2,12
 400a294:	a0800015 	stw	r2,0(r20)
 400a298:	0005883a 	mov	r2,zero
 400a29c:	003fe506 	br	400a234 <__ram_exceptions_end+0xfbf81f98>
 400a2a0:	98c00117 	ldw	r3,4(r19)
 400a2a4:	9c4b883a 	add	r5,r19,r17
 400a2a8:	11000054 	ori	r4,r2,1
 400a2ac:	18c0004c 	andi	r3,r3,1
 400a2b0:	1c62b03a 	or	r17,r3,r17
 400a2b4:	9c400115 	stw	r17,4(r19)
 400a2b8:	29000115 	stw	r4,4(r5)
 400a2bc:	2885883a 	add	r2,r5,r2
 400a2c0:	10c00117 	ldw	r3,4(r2)
 400a2c4:	29400204 	addi	r5,r5,8
 400a2c8:	a009883a 	mov	r4,r20
 400a2cc:	18c00054 	ori	r3,r3,1
 400a2d0:	10c00115 	stw	r3,4(r2)
 400a2d4:	40056dc0 	call	40056dc <_free_r>
 400a2d8:	003fd306 	br	400a228 <__ram_exceptions_end+0xfbf81f8c>
 400a2dc:	017fff04 	movi	r5,-4
 400a2e0:	414a703a 	and	r5,r8,r5
 400a2e4:	89800404 	addi	r6,r17,16
 400a2e8:	8151883a 	add	r8,r16,r5
 400a2ec:	4180590e 	bge	r8,r6,400a454 <_realloc_r+0x390>
 400a2f0:	1080004c 	andi	r2,r2,1
 400a2f4:	103f9e1e 	bne	r2,zero,400a170 <__ram_exceptions_end+0xfbf81ed4>
 400a2f8:	adbffe17 	ldw	r22,-8(r21)
 400a2fc:	00bfff04 	movi	r2,-4
 400a300:	9dadc83a 	sub	r22,r19,r22
 400a304:	b1800117 	ldw	r6,4(r22)
 400a308:	3084703a 	and	r2,r6,r2
 400a30c:	20002026 	beq	r4,zero,400a390 <_realloc_r+0x2cc>
 400a310:	80af883a 	add	r23,r16,r2
 400a314:	b96f883a 	add	r23,r23,r5
 400a318:	21c05f26 	beq	r4,r7,400a498 <_realloc_r+0x3d4>
 400a31c:	b8c01c16 	blt	r23,r3,400a390 <_realloc_r+0x2cc>
 400a320:	20800317 	ldw	r2,12(r4)
 400a324:	20c00217 	ldw	r3,8(r4)
 400a328:	81bfff04 	addi	r6,r16,-4
 400a32c:	01000904 	movi	r4,36
 400a330:	18800315 	stw	r2,12(r3)
 400a334:	10c00215 	stw	r3,8(r2)
 400a338:	b0c00217 	ldw	r3,8(r22)
 400a33c:	b0800317 	ldw	r2,12(r22)
 400a340:	b4800204 	addi	r18,r22,8
 400a344:	18800315 	stw	r2,12(r3)
 400a348:	10c00215 	stw	r3,8(r2)
 400a34c:	21801b36 	bltu	r4,r6,400a3bc <_realloc_r+0x2f8>
 400a350:	008004c4 	movi	r2,19
 400a354:	1180352e 	bgeu	r2,r6,400a42c <_realloc_r+0x368>
 400a358:	a8800017 	ldw	r2,0(r21)
 400a35c:	b0800215 	stw	r2,8(r22)
 400a360:	a8800117 	ldw	r2,4(r21)
 400a364:	b0800315 	stw	r2,12(r22)
 400a368:	008006c4 	movi	r2,27
 400a36c:	11807f36 	bltu	r2,r6,400a56c <_realloc_r+0x4a8>
 400a370:	b0800404 	addi	r2,r22,16
 400a374:	ad400204 	addi	r21,r21,8
 400a378:	00002d06 	br	400a430 <_realloc_r+0x36c>
 400a37c:	adbffe17 	ldw	r22,-8(r21)
 400a380:	00bfff04 	movi	r2,-4
 400a384:	9dadc83a 	sub	r22,r19,r22
 400a388:	b1000117 	ldw	r4,4(r22)
 400a38c:	2084703a 	and	r2,r4,r2
 400a390:	b03f7726 	beq	r22,zero,400a170 <__ram_exceptions_end+0xfbf81ed4>
 400a394:	80af883a 	add	r23,r16,r2
 400a398:	b8ff7516 	blt	r23,r3,400a170 <__ram_exceptions_end+0xfbf81ed4>
 400a39c:	b0800317 	ldw	r2,12(r22)
 400a3a0:	b0c00217 	ldw	r3,8(r22)
 400a3a4:	81bfff04 	addi	r6,r16,-4
 400a3a8:	01000904 	movi	r4,36
 400a3ac:	18800315 	stw	r2,12(r3)
 400a3b0:	10c00215 	stw	r3,8(r2)
 400a3b4:	b4800204 	addi	r18,r22,8
 400a3b8:	21bfe52e 	bgeu	r4,r6,400a350 <__ram_exceptions_end+0xfbf820b4>
 400a3bc:	a80b883a 	mov	r5,r21
 400a3c0:	9009883a 	mov	r4,r18
 400a3c4:	4009f080 	call	4009f08 <memmove>
 400a3c8:	b821883a 	mov	r16,r23
 400a3cc:	b027883a 	mov	r19,r22
 400a3d0:	003f8a06 	br	400a1fc <__ram_exceptions_end+0xfbf81f60>
 400a3d4:	300b883a 	mov	r5,r6
 400a3d8:	dfc00917 	ldw	ra,36(sp)
 400a3dc:	df000817 	ldw	fp,32(sp)
 400a3e0:	ddc00717 	ldw	r23,28(sp)
 400a3e4:	dd800617 	ldw	r22,24(sp)
 400a3e8:	dd400517 	ldw	r21,20(sp)
 400a3ec:	dd000417 	ldw	r20,16(sp)
 400a3f0:	dcc00317 	ldw	r19,12(sp)
 400a3f4:	dc800217 	ldw	r18,8(sp)
 400a3f8:	dc400117 	ldw	r17,4(sp)
 400a3fc:	dc000017 	ldw	r16,0(sp)
 400a400:	dec00a04 	addi	sp,sp,40
 400a404:	4005e0c1 	jmpi	4005e0c <_malloc_r>
 400a408:	a8c00017 	ldw	r3,0(r21)
 400a40c:	90c00015 	stw	r3,0(r18)
 400a410:	a8c00117 	ldw	r3,4(r21)
 400a414:	90c00115 	stw	r3,4(r18)
 400a418:	00c006c4 	movi	r3,27
 400a41c:	19804536 	bltu	r3,r6,400a534 <_realloc_r+0x470>
 400a420:	90800204 	addi	r2,r18,8
 400a424:	a8c00204 	addi	r3,r21,8
 400a428:	003f6306 	br	400a1b8 <__ram_exceptions_end+0xfbf81f1c>
 400a42c:	9005883a 	mov	r2,r18
 400a430:	a8c00017 	ldw	r3,0(r21)
 400a434:	b821883a 	mov	r16,r23
 400a438:	b027883a 	mov	r19,r22
 400a43c:	10c00015 	stw	r3,0(r2)
 400a440:	a8c00117 	ldw	r3,4(r21)
 400a444:	10c00115 	stw	r3,4(r2)
 400a448:	a8c00217 	ldw	r3,8(r21)
 400a44c:	10c00215 	stw	r3,8(r2)
 400a450:	003f6a06 	br	400a1fc <__ram_exceptions_end+0xfbf81f60>
 400a454:	9c67883a 	add	r19,r19,r17
 400a458:	4445c83a 	sub	r2,r8,r17
 400a45c:	e4c00215 	stw	r19,8(fp)
 400a460:	10800054 	ori	r2,r2,1
 400a464:	98800115 	stw	r2,4(r19)
 400a468:	a8bfff17 	ldw	r2,-4(r21)
 400a46c:	a009883a 	mov	r4,r20
 400a470:	1080004c 	andi	r2,r2,1
 400a474:	1462b03a 	or	r17,r2,r17
 400a478:	ac7fff15 	stw	r17,-4(r21)
 400a47c:	400e37c0 	call	400e37c <__malloc_unlock>
 400a480:	a805883a 	mov	r2,r21
 400a484:	003f6b06 	br	400a234 <__ram_exceptions_end+0xfbf81f98>
 400a488:	a80b883a 	mov	r5,r21
 400a48c:	9009883a 	mov	r4,r18
 400a490:	4009f080 	call	4009f08 <memmove>
 400a494:	003f4e06 	br	400a1d0 <__ram_exceptions_end+0xfbf81f34>
 400a498:	89000404 	addi	r4,r17,16
 400a49c:	b93fbc16 	blt	r23,r4,400a390 <__ram_exceptions_end+0xfbf820f4>
 400a4a0:	b0800317 	ldw	r2,12(r22)
 400a4a4:	b0c00217 	ldw	r3,8(r22)
 400a4a8:	81bfff04 	addi	r6,r16,-4
 400a4ac:	01000904 	movi	r4,36
 400a4b0:	18800315 	stw	r2,12(r3)
 400a4b4:	10c00215 	stw	r3,8(r2)
 400a4b8:	b4800204 	addi	r18,r22,8
 400a4bc:	21804336 	bltu	r4,r6,400a5cc <_realloc_r+0x508>
 400a4c0:	008004c4 	movi	r2,19
 400a4c4:	11803f2e 	bgeu	r2,r6,400a5c4 <_realloc_r+0x500>
 400a4c8:	a8800017 	ldw	r2,0(r21)
 400a4cc:	b0800215 	stw	r2,8(r22)
 400a4d0:	a8800117 	ldw	r2,4(r21)
 400a4d4:	b0800315 	stw	r2,12(r22)
 400a4d8:	008006c4 	movi	r2,27
 400a4dc:	11803f36 	bltu	r2,r6,400a5dc <_realloc_r+0x518>
 400a4e0:	b0800404 	addi	r2,r22,16
 400a4e4:	ad400204 	addi	r21,r21,8
 400a4e8:	a8c00017 	ldw	r3,0(r21)
 400a4ec:	10c00015 	stw	r3,0(r2)
 400a4f0:	a8c00117 	ldw	r3,4(r21)
 400a4f4:	10c00115 	stw	r3,4(r2)
 400a4f8:	a8c00217 	ldw	r3,8(r21)
 400a4fc:	10c00215 	stw	r3,8(r2)
 400a500:	b447883a 	add	r3,r22,r17
 400a504:	bc45c83a 	sub	r2,r23,r17
 400a508:	e0c00215 	stw	r3,8(fp)
 400a50c:	10800054 	ori	r2,r2,1
 400a510:	18800115 	stw	r2,4(r3)
 400a514:	b0800117 	ldw	r2,4(r22)
 400a518:	a009883a 	mov	r4,r20
 400a51c:	1080004c 	andi	r2,r2,1
 400a520:	1462b03a 	or	r17,r2,r17
 400a524:	b4400115 	stw	r17,4(r22)
 400a528:	400e37c0 	call	400e37c <__malloc_unlock>
 400a52c:	9005883a 	mov	r2,r18
 400a530:	003f4006 	br	400a234 <__ram_exceptions_end+0xfbf81f98>
 400a534:	a8c00217 	ldw	r3,8(r21)
 400a538:	90c00215 	stw	r3,8(r18)
 400a53c:	a8c00317 	ldw	r3,12(r21)
 400a540:	90c00315 	stw	r3,12(r18)
 400a544:	30801126 	beq	r6,r2,400a58c <_realloc_r+0x4c8>
 400a548:	90800404 	addi	r2,r18,16
 400a54c:	a8c00404 	addi	r3,r21,16
 400a550:	003f1906 	br	400a1b8 <__ram_exceptions_end+0xfbf81f1c>
 400a554:	90ffff17 	ldw	r3,-4(r18)
 400a558:	00bfff04 	movi	r2,-4
 400a55c:	a825883a 	mov	r18,r21
 400a560:	1884703a 	and	r2,r3,r2
 400a564:	80a1883a 	add	r16,r16,r2
 400a568:	003f2406 	br	400a1fc <__ram_exceptions_end+0xfbf81f60>
 400a56c:	a8800217 	ldw	r2,8(r21)
 400a570:	b0800415 	stw	r2,16(r22)
 400a574:	a8800317 	ldw	r2,12(r21)
 400a578:	b0800515 	stw	r2,20(r22)
 400a57c:	31000a26 	beq	r6,r4,400a5a8 <_realloc_r+0x4e4>
 400a580:	b0800604 	addi	r2,r22,24
 400a584:	ad400404 	addi	r21,r21,16
 400a588:	003fa906 	br	400a430 <__ram_exceptions_end+0xfbf82194>
 400a58c:	a9000417 	ldw	r4,16(r21)
 400a590:	90800604 	addi	r2,r18,24
 400a594:	a8c00604 	addi	r3,r21,24
 400a598:	91000415 	stw	r4,16(r18)
 400a59c:	a9000517 	ldw	r4,20(r21)
 400a5a0:	91000515 	stw	r4,20(r18)
 400a5a4:	003f0406 	br	400a1b8 <__ram_exceptions_end+0xfbf81f1c>
 400a5a8:	a8c00417 	ldw	r3,16(r21)
 400a5ac:	ad400604 	addi	r21,r21,24
 400a5b0:	b0800804 	addi	r2,r22,32
 400a5b4:	b0c00615 	stw	r3,24(r22)
 400a5b8:	a8ffff17 	ldw	r3,-4(r21)
 400a5bc:	b0c00715 	stw	r3,28(r22)
 400a5c0:	003f9b06 	br	400a430 <__ram_exceptions_end+0xfbf82194>
 400a5c4:	9005883a 	mov	r2,r18
 400a5c8:	003fc706 	br	400a4e8 <__ram_exceptions_end+0xfbf8224c>
 400a5cc:	a80b883a 	mov	r5,r21
 400a5d0:	9009883a 	mov	r4,r18
 400a5d4:	4009f080 	call	4009f08 <memmove>
 400a5d8:	003fc906 	br	400a500 <__ram_exceptions_end+0xfbf82264>
 400a5dc:	a8800217 	ldw	r2,8(r21)
 400a5e0:	b0800415 	stw	r2,16(r22)
 400a5e4:	a8800317 	ldw	r2,12(r21)
 400a5e8:	b0800515 	stw	r2,20(r22)
 400a5ec:	31000726 	beq	r6,r4,400a60c <_realloc_r+0x548>
 400a5f0:	b0800604 	addi	r2,r22,24
 400a5f4:	ad400404 	addi	r21,r21,16
 400a5f8:	003fbb06 	br	400a4e8 <__ram_exceptions_end+0xfbf8224c>
 400a5fc:	a009883a 	mov	r4,r20
 400a600:	400e37c0 	call	400e37c <__malloc_unlock>
 400a604:	0005883a 	mov	r2,zero
 400a608:	003f0a06 	br	400a234 <__ram_exceptions_end+0xfbf81f98>
 400a60c:	a8c00417 	ldw	r3,16(r21)
 400a610:	ad400604 	addi	r21,r21,24
 400a614:	b0800804 	addi	r2,r22,32
 400a618:	b0c00615 	stw	r3,24(r22)
 400a61c:	a8ffff17 	ldw	r3,-4(r21)
 400a620:	b0c00715 	stw	r3,28(r22)
 400a624:	003fb006 	br	400a4e8 <__ram_exceptions_end+0xfbf8224c>

0400a628 <__swbuf_r>:
 400a628:	defffb04 	addi	sp,sp,-20
 400a62c:	dcc00315 	stw	r19,12(sp)
 400a630:	dc800215 	stw	r18,8(sp)
 400a634:	dc000015 	stw	r16,0(sp)
 400a638:	dfc00415 	stw	ra,16(sp)
 400a63c:	dc400115 	stw	r17,4(sp)
 400a640:	2025883a 	mov	r18,r4
 400a644:	2827883a 	mov	r19,r5
 400a648:	3021883a 	mov	r16,r6
 400a64c:	20000226 	beq	r4,zero,400a658 <__swbuf_r+0x30>
 400a650:	20800e17 	ldw	r2,56(r4)
 400a654:	10004226 	beq	r2,zero,400a760 <__swbuf_r+0x138>
 400a658:	80800617 	ldw	r2,24(r16)
 400a65c:	8100030b 	ldhu	r4,12(r16)
 400a660:	80800215 	stw	r2,8(r16)
 400a664:	2080020c 	andi	r2,r4,8
 400a668:	10003626 	beq	r2,zero,400a744 <__swbuf_r+0x11c>
 400a66c:	80c00417 	ldw	r3,16(r16)
 400a670:	18003426 	beq	r3,zero,400a744 <__swbuf_r+0x11c>
 400a674:	2088000c 	andi	r2,r4,8192
 400a678:	9c403fcc 	andi	r17,r19,255
 400a67c:	10001a26 	beq	r2,zero,400a6e8 <__swbuf_r+0xc0>
 400a680:	80800017 	ldw	r2,0(r16)
 400a684:	81000517 	ldw	r4,20(r16)
 400a688:	10c7c83a 	sub	r3,r2,r3
 400a68c:	1900200e 	bge	r3,r4,400a710 <__swbuf_r+0xe8>
 400a690:	18c00044 	addi	r3,r3,1
 400a694:	81000217 	ldw	r4,8(r16)
 400a698:	11400044 	addi	r5,r2,1
 400a69c:	81400015 	stw	r5,0(r16)
 400a6a0:	213fffc4 	addi	r4,r4,-1
 400a6a4:	81000215 	stw	r4,8(r16)
 400a6a8:	14c00005 	stb	r19,0(r2)
 400a6ac:	80800517 	ldw	r2,20(r16)
 400a6b0:	10c01e26 	beq	r2,r3,400a72c <__swbuf_r+0x104>
 400a6b4:	8080030b 	ldhu	r2,12(r16)
 400a6b8:	1080004c 	andi	r2,r2,1
 400a6bc:	10000226 	beq	r2,zero,400a6c8 <__swbuf_r+0xa0>
 400a6c0:	00800284 	movi	r2,10
 400a6c4:	88801926 	beq	r17,r2,400a72c <__swbuf_r+0x104>
 400a6c8:	8805883a 	mov	r2,r17
 400a6cc:	dfc00417 	ldw	ra,16(sp)
 400a6d0:	dcc00317 	ldw	r19,12(sp)
 400a6d4:	dc800217 	ldw	r18,8(sp)
 400a6d8:	dc400117 	ldw	r17,4(sp)
 400a6dc:	dc000017 	ldw	r16,0(sp)
 400a6e0:	dec00504 	addi	sp,sp,20
 400a6e4:	f800283a 	ret
 400a6e8:	81401917 	ldw	r5,100(r16)
 400a6ec:	00b7ffc4 	movi	r2,-8193
 400a6f0:	21080014 	ori	r4,r4,8192
 400a6f4:	2884703a 	and	r2,r5,r2
 400a6f8:	80801915 	stw	r2,100(r16)
 400a6fc:	80800017 	ldw	r2,0(r16)
 400a700:	8100030d 	sth	r4,12(r16)
 400a704:	81000517 	ldw	r4,20(r16)
 400a708:	10c7c83a 	sub	r3,r2,r3
 400a70c:	193fe016 	blt	r3,r4,400a690 <__ram_exceptions_end+0xfbf823f4>
 400a710:	800b883a 	mov	r5,r16
 400a714:	9009883a 	mov	r4,r18
 400a718:	400517c0 	call	400517c <_fflush_r>
 400a71c:	1000071e 	bne	r2,zero,400a73c <__swbuf_r+0x114>
 400a720:	80800017 	ldw	r2,0(r16)
 400a724:	00c00044 	movi	r3,1
 400a728:	003fda06 	br	400a694 <__ram_exceptions_end+0xfbf823f8>
 400a72c:	800b883a 	mov	r5,r16
 400a730:	9009883a 	mov	r4,r18
 400a734:	400517c0 	call	400517c <_fflush_r>
 400a738:	103fe326 	beq	r2,zero,400a6c8 <__ram_exceptions_end+0xfbf8242c>
 400a73c:	00bfffc4 	movi	r2,-1
 400a740:	003fe206 	br	400a6cc <__ram_exceptions_end+0xfbf82430>
 400a744:	800b883a 	mov	r5,r16
 400a748:	9009883a 	mov	r4,r18
 400a74c:	400355c0 	call	400355c <__swsetup_r>
 400a750:	103ffa1e 	bne	r2,zero,400a73c <__ram_exceptions_end+0xfbf824a0>
 400a754:	8100030b 	ldhu	r4,12(r16)
 400a758:	80c00417 	ldw	r3,16(r16)
 400a75c:	003fc506 	br	400a674 <__ram_exceptions_end+0xfbf823d8>
 400a760:	40055680 	call	4005568 <__sinit>
 400a764:	003fbc06 	br	400a658 <__ram_exceptions_end+0xfbf823bc>

0400a768 <__swbuf>:
 400a768:	00810074 	movhi	r2,1025
 400a76c:	109b1804 	addi	r2,r2,27744
 400a770:	280d883a 	mov	r6,r5
 400a774:	200b883a 	mov	r5,r4
 400a778:	11000017 	ldw	r4,0(r2)
 400a77c:	400a6281 	jmpi	400a628 <__swbuf_r>

0400a780 <_wcrtomb_r>:
 400a780:	defff604 	addi	sp,sp,-40
 400a784:	00810074 	movhi	r2,1025
 400a788:	dc800815 	stw	r18,32(sp)
 400a78c:	dc400715 	stw	r17,28(sp)
 400a790:	dc000615 	stw	r16,24(sp)
 400a794:	109b1c04 	addi	r2,r2,27760
 400a798:	dfc00915 	stw	ra,36(sp)
 400a79c:	2021883a 	mov	r16,r4
 400a7a0:	3823883a 	mov	r17,r7
 400a7a4:	14800017 	ldw	r18,0(r2)
 400a7a8:	28001426 	beq	r5,zero,400a7fc <_wcrtomb_r+0x7c>
 400a7ac:	d9400415 	stw	r5,16(sp)
 400a7b0:	d9800515 	stw	r6,20(sp)
 400a7b4:	4005bf00 	call	4005bf0 <__locale_charset>
 400a7b8:	d9800517 	ldw	r6,20(sp)
 400a7bc:	d9400417 	ldw	r5,16(sp)
 400a7c0:	100f883a 	mov	r7,r2
 400a7c4:	dc400015 	stw	r17,0(sp)
 400a7c8:	8009883a 	mov	r4,r16
 400a7cc:	903ee83a 	callr	r18
 400a7d0:	00ffffc4 	movi	r3,-1
 400a7d4:	10c0031e 	bne	r2,r3,400a7e4 <_wcrtomb_r+0x64>
 400a7d8:	88000015 	stw	zero,0(r17)
 400a7dc:	00c02284 	movi	r3,138
 400a7e0:	80c00015 	stw	r3,0(r16)
 400a7e4:	dfc00917 	ldw	ra,36(sp)
 400a7e8:	dc800817 	ldw	r18,32(sp)
 400a7ec:	dc400717 	ldw	r17,28(sp)
 400a7f0:	dc000617 	ldw	r16,24(sp)
 400a7f4:	dec00a04 	addi	sp,sp,40
 400a7f8:	f800283a 	ret
 400a7fc:	4005bf00 	call	4005bf0 <__locale_charset>
 400a800:	100f883a 	mov	r7,r2
 400a804:	dc400015 	stw	r17,0(sp)
 400a808:	000d883a 	mov	r6,zero
 400a80c:	d9400104 	addi	r5,sp,4
 400a810:	8009883a 	mov	r4,r16
 400a814:	903ee83a 	callr	r18
 400a818:	003fed06 	br	400a7d0 <__ram_exceptions_end+0xfbf82534>

0400a81c <wcrtomb>:
 400a81c:	defff604 	addi	sp,sp,-40
 400a820:	00810074 	movhi	r2,1025
 400a824:	dc800615 	stw	r18,24(sp)
 400a828:	dc400515 	stw	r17,20(sp)
 400a82c:	109b1804 	addi	r2,r2,27744
 400a830:	dfc00915 	stw	ra,36(sp)
 400a834:	dd000815 	stw	r20,32(sp)
 400a838:	dcc00715 	stw	r19,28(sp)
 400a83c:	dc000415 	stw	r16,16(sp)
 400a840:	3025883a 	mov	r18,r6
 400a844:	14400017 	ldw	r17,0(r2)
 400a848:	20001926 	beq	r4,zero,400a8b0 <wcrtomb+0x94>
 400a84c:	00810074 	movhi	r2,1025
 400a850:	109b1c04 	addi	r2,r2,27760
 400a854:	15000017 	ldw	r20,0(r2)
 400a858:	2021883a 	mov	r16,r4
 400a85c:	2827883a 	mov	r19,r5
 400a860:	4005bf00 	call	4005bf0 <__locale_charset>
 400a864:	100f883a 	mov	r7,r2
 400a868:	dc800015 	stw	r18,0(sp)
 400a86c:	980d883a 	mov	r6,r19
 400a870:	800b883a 	mov	r5,r16
 400a874:	8809883a 	mov	r4,r17
 400a878:	a03ee83a 	callr	r20
 400a87c:	00ffffc4 	movi	r3,-1
 400a880:	10c0031e 	bne	r2,r3,400a890 <wcrtomb+0x74>
 400a884:	90000015 	stw	zero,0(r18)
 400a888:	00c02284 	movi	r3,138
 400a88c:	88c00015 	stw	r3,0(r17)
 400a890:	dfc00917 	ldw	ra,36(sp)
 400a894:	dd000817 	ldw	r20,32(sp)
 400a898:	dcc00717 	ldw	r19,28(sp)
 400a89c:	dc800617 	ldw	r18,24(sp)
 400a8a0:	dc400517 	ldw	r17,20(sp)
 400a8a4:	dc000417 	ldw	r16,16(sp)
 400a8a8:	dec00a04 	addi	sp,sp,40
 400a8ac:	f800283a 	ret
 400a8b0:	00810074 	movhi	r2,1025
 400a8b4:	109b1c04 	addi	r2,r2,27760
 400a8b8:	14000017 	ldw	r16,0(r2)
 400a8bc:	4005bf00 	call	4005bf0 <__locale_charset>
 400a8c0:	100f883a 	mov	r7,r2
 400a8c4:	dc800015 	stw	r18,0(sp)
 400a8c8:	000d883a 	mov	r6,zero
 400a8cc:	d9400104 	addi	r5,sp,4
 400a8d0:	8809883a 	mov	r4,r17
 400a8d4:	803ee83a 	callr	r16
 400a8d8:	003fe806 	br	400a87c <__ram_exceptions_end+0xfbf825e0>

0400a8dc <__ascii_wctomb>:
 400a8dc:	28000526 	beq	r5,zero,400a8f4 <__ascii_wctomb+0x18>
 400a8e0:	00803fc4 	movi	r2,255
 400a8e4:	11800536 	bltu	r2,r6,400a8fc <__ascii_wctomb+0x20>
 400a8e8:	29800005 	stb	r6,0(r5)
 400a8ec:	00800044 	movi	r2,1
 400a8f0:	f800283a 	ret
 400a8f4:	0005883a 	mov	r2,zero
 400a8f8:	f800283a 	ret
 400a8fc:	00802284 	movi	r2,138
 400a900:	20800015 	stw	r2,0(r4)
 400a904:	00bfffc4 	movi	r2,-1
 400a908:	f800283a 	ret

0400a90c <_wctomb_r>:
 400a90c:	00810074 	movhi	r2,1025
 400a910:	defff904 	addi	sp,sp,-28
 400a914:	109b1c04 	addi	r2,r2,27760
 400a918:	dfc00615 	stw	ra,24(sp)
 400a91c:	dc400515 	stw	r17,20(sp)
 400a920:	dc000415 	stw	r16,16(sp)
 400a924:	3823883a 	mov	r17,r7
 400a928:	14000017 	ldw	r16,0(r2)
 400a92c:	d9000115 	stw	r4,4(sp)
 400a930:	d9400215 	stw	r5,8(sp)
 400a934:	d9800315 	stw	r6,12(sp)
 400a938:	4005bf00 	call	4005bf0 <__locale_charset>
 400a93c:	d9800317 	ldw	r6,12(sp)
 400a940:	d9400217 	ldw	r5,8(sp)
 400a944:	d9000117 	ldw	r4,4(sp)
 400a948:	100f883a 	mov	r7,r2
 400a94c:	dc400015 	stw	r17,0(sp)
 400a950:	803ee83a 	callr	r16
 400a954:	dfc00617 	ldw	ra,24(sp)
 400a958:	dc400517 	ldw	r17,20(sp)
 400a95c:	dc000417 	ldw	r16,16(sp)
 400a960:	dec00704 	addi	sp,sp,28
 400a964:	f800283a 	ret

0400a968 <__udivdi3>:
 400a968:	defff404 	addi	sp,sp,-48
 400a96c:	dcc00515 	stw	r19,20(sp)
 400a970:	dc000215 	stw	r16,8(sp)
 400a974:	dfc00b15 	stw	ra,44(sp)
 400a978:	df000a15 	stw	fp,40(sp)
 400a97c:	ddc00915 	stw	r23,36(sp)
 400a980:	dd800815 	stw	r22,32(sp)
 400a984:	dd400715 	stw	r21,28(sp)
 400a988:	dd000615 	stw	r20,24(sp)
 400a98c:	dc800415 	stw	r18,16(sp)
 400a990:	dc400315 	stw	r17,12(sp)
 400a994:	2027883a 	mov	r19,r4
 400a998:	2821883a 	mov	r16,r5
 400a99c:	3800461e 	bne	r7,zero,400aab8 <__udivdi3+0x150>
 400a9a0:	3023883a 	mov	r17,r6
 400a9a4:	2025883a 	mov	r18,r4
 400a9a8:	2980572e 	bgeu	r5,r6,400ab08 <__udivdi3+0x1a0>
 400a9ac:	00bfffd4 	movui	r2,65535
 400a9b0:	282d883a 	mov	r22,r5
 400a9b4:	1180b236 	bltu	r2,r6,400ac80 <__udivdi3+0x318>
 400a9b8:	00803fc4 	movi	r2,255
 400a9bc:	1185803a 	cmpltu	r2,r2,r6
 400a9c0:	100490fa 	slli	r2,r2,3
 400a9c4:	3086d83a 	srl	r3,r6,r2
 400a9c8:	01010074 	movhi	r4,1025
 400a9cc:	21168504 	addi	r4,r4,23060
 400a9d0:	20c7883a 	add	r3,r4,r3
 400a9d4:	18c00003 	ldbu	r3,0(r3)
 400a9d8:	1885883a 	add	r2,r3,r2
 400a9dc:	00c00804 	movi	r3,32
 400a9e0:	1887c83a 	sub	r3,r3,r2
 400a9e4:	18000526 	beq	r3,zero,400a9fc <__udivdi3+0x94>
 400a9e8:	80e0983a 	sll	r16,r16,r3
 400a9ec:	9884d83a 	srl	r2,r19,r2
 400a9f0:	30e2983a 	sll	r17,r6,r3
 400a9f4:	98e4983a 	sll	r18,r19,r3
 400a9f8:	142cb03a 	or	r22,r2,r16
 400a9fc:	882ad43a 	srli	r21,r17,16
 400aa00:	b009883a 	mov	r4,r22
 400aa04:	8d3fffcc 	andi	r20,r17,65535
 400aa08:	a80b883a 	mov	r5,r21
 400aa0c:	40010bc0 	call	40010bc <__umodsi3>
 400aa10:	b009883a 	mov	r4,r22
 400aa14:	a80b883a 	mov	r5,r21
 400aa18:	1027883a 	mov	r19,r2
 400aa1c:	40010580 	call	4001058 <__udivsi3>
 400aa20:	100b883a 	mov	r5,r2
 400aa24:	a009883a 	mov	r4,r20
 400aa28:	102d883a 	mov	r22,r2
 400aa2c:	40011140 	call	4001114 <__mulsi3>
 400aa30:	9826943a 	slli	r19,r19,16
 400aa34:	9006d43a 	srli	r3,r18,16
 400aa38:	1cc6b03a 	or	r3,r3,r19
 400aa3c:	1880052e 	bgeu	r3,r2,400aa54 <__udivdi3+0xec>
 400aa40:	1c47883a 	add	r3,r3,r17
 400aa44:	b13fffc4 	addi	r4,r22,-1
 400aa48:	1c400136 	bltu	r3,r17,400aa50 <__udivdi3+0xe8>
 400aa4c:	18814236 	bltu	r3,r2,400af58 <__udivdi3+0x5f0>
 400aa50:	202d883a 	mov	r22,r4
 400aa54:	18a1c83a 	sub	r16,r3,r2
 400aa58:	8009883a 	mov	r4,r16
 400aa5c:	a80b883a 	mov	r5,r21
 400aa60:	40010bc0 	call	40010bc <__umodsi3>
 400aa64:	1027883a 	mov	r19,r2
 400aa68:	8009883a 	mov	r4,r16
 400aa6c:	a80b883a 	mov	r5,r21
 400aa70:	9826943a 	slli	r19,r19,16
 400aa74:	40010580 	call	4001058 <__udivsi3>
 400aa78:	100b883a 	mov	r5,r2
 400aa7c:	a009883a 	mov	r4,r20
 400aa80:	94bfffcc 	andi	r18,r18,65535
 400aa84:	1021883a 	mov	r16,r2
 400aa88:	94e4b03a 	or	r18,r18,r19
 400aa8c:	40011140 	call	4001114 <__mulsi3>
 400aa90:	9080052e 	bgeu	r18,r2,400aaa8 <__udivdi3+0x140>
 400aa94:	8ca5883a 	add	r18,r17,r18
 400aa98:	80ffffc4 	addi	r3,r16,-1
 400aa9c:	94410c36 	bltu	r18,r17,400aed0 <__udivdi3+0x568>
 400aaa0:	90810b2e 	bgeu	r18,r2,400aed0 <__udivdi3+0x568>
 400aaa4:	843fff84 	addi	r16,r16,-2
 400aaa8:	b004943a 	slli	r2,r22,16
 400aaac:	0007883a 	mov	r3,zero
 400aab0:	1404b03a 	or	r2,r2,r16
 400aab4:	00005e06 	br	400ac30 <__udivdi3+0x2c8>
 400aab8:	29c05b36 	bltu	r5,r7,400ac28 <__udivdi3+0x2c0>
 400aabc:	00bfffd4 	movui	r2,65535
 400aac0:	11c0672e 	bgeu	r2,r7,400ac60 <__udivdi3+0x2f8>
 400aac4:	00804034 	movhi	r2,256
 400aac8:	10bfffc4 	addi	r2,r2,-1
 400aacc:	11c10a36 	bltu	r2,r7,400aef8 <__udivdi3+0x590>
 400aad0:	00800404 	movi	r2,16
 400aad4:	3886d83a 	srl	r3,r7,r2
 400aad8:	01010074 	movhi	r4,1025
 400aadc:	21168504 	addi	r4,r4,23060
 400aae0:	20c7883a 	add	r3,r4,r3
 400aae4:	18c00003 	ldbu	r3,0(r3)
 400aae8:	05c00804 	movi	r23,32
 400aaec:	1885883a 	add	r2,r3,r2
 400aaf0:	b8afc83a 	sub	r23,r23,r2
 400aaf4:	b800671e 	bne	r23,zero,400ac94 <__udivdi3+0x32c>
 400aaf8:	3c010536 	bltu	r7,r16,400af10 <__udivdi3+0x5a8>
 400aafc:	9985403a 	cmpgeu	r2,r19,r6
 400ab00:	0007883a 	mov	r3,zero
 400ab04:	00004a06 	br	400ac30 <__udivdi3+0x2c8>
 400ab08:	3000041e 	bne	r6,zero,400ab1c <__udivdi3+0x1b4>
 400ab0c:	000b883a 	mov	r5,zero
 400ab10:	01000044 	movi	r4,1
 400ab14:	40010580 	call	4001058 <__udivsi3>
 400ab18:	1023883a 	mov	r17,r2
 400ab1c:	00bfffd4 	movui	r2,65535
 400ab20:	1440532e 	bgeu	r2,r17,400ac70 <__udivdi3+0x308>
 400ab24:	00804034 	movhi	r2,256
 400ab28:	10bfffc4 	addi	r2,r2,-1
 400ab2c:	1440f436 	bltu	r2,r17,400af00 <__udivdi3+0x598>
 400ab30:	00800404 	movi	r2,16
 400ab34:	8886d83a 	srl	r3,r17,r2
 400ab38:	01010074 	movhi	r4,1025
 400ab3c:	21168504 	addi	r4,r4,23060
 400ab40:	20c7883a 	add	r3,r4,r3
 400ab44:	18c00003 	ldbu	r3,0(r3)
 400ab48:	1885883a 	add	r2,r3,r2
 400ab4c:	00c00804 	movi	r3,32
 400ab50:	1887c83a 	sub	r3,r3,r2
 400ab54:	1800a51e 	bne	r3,zero,400adec <__udivdi3+0x484>
 400ab58:	882ad43a 	srli	r21,r17,16
 400ab5c:	8461c83a 	sub	r16,r16,r17
 400ab60:	8d3fffcc 	andi	r20,r17,65535
 400ab64:	00c00044 	movi	r3,1
 400ab68:	a80b883a 	mov	r5,r21
 400ab6c:	8009883a 	mov	r4,r16
 400ab70:	d8c00115 	stw	r3,4(sp)
 400ab74:	40010bc0 	call	40010bc <__umodsi3>
 400ab78:	a80b883a 	mov	r5,r21
 400ab7c:	8009883a 	mov	r4,r16
 400ab80:	1027883a 	mov	r19,r2
 400ab84:	40010580 	call	4001058 <__udivsi3>
 400ab88:	a00b883a 	mov	r5,r20
 400ab8c:	1009883a 	mov	r4,r2
 400ab90:	102d883a 	mov	r22,r2
 400ab94:	40011140 	call	4001114 <__mulsi3>
 400ab98:	9826943a 	slli	r19,r19,16
 400ab9c:	900ed43a 	srli	r7,r18,16
 400aba0:	d8c00117 	ldw	r3,4(sp)
 400aba4:	3cceb03a 	or	r7,r7,r19
 400aba8:	3880052e 	bgeu	r7,r2,400abc0 <__udivdi3+0x258>
 400abac:	3c4f883a 	add	r7,r7,r17
 400abb0:	b13fffc4 	addi	r4,r22,-1
 400abb4:	3c400136 	bltu	r7,r17,400abbc <__udivdi3+0x254>
 400abb8:	3880e436 	bltu	r7,r2,400af4c <__udivdi3+0x5e4>
 400abbc:	202d883a 	mov	r22,r4
 400abc0:	38a1c83a 	sub	r16,r7,r2
 400abc4:	8009883a 	mov	r4,r16
 400abc8:	a80b883a 	mov	r5,r21
 400abcc:	d8c00115 	stw	r3,4(sp)
 400abd0:	40010bc0 	call	40010bc <__umodsi3>
 400abd4:	1027883a 	mov	r19,r2
 400abd8:	8009883a 	mov	r4,r16
 400abdc:	a80b883a 	mov	r5,r21
 400abe0:	9826943a 	slli	r19,r19,16
 400abe4:	40010580 	call	4001058 <__udivsi3>
 400abe8:	a00b883a 	mov	r5,r20
 400abec:	1009883a 	mov	r4,r2
 400abf0:	94bfffcc 	andi	r18,r18,65535
 400abf4:	1021883a 	mov	r16,r2
 400abf8:	94e4b03a 	or	r18,r18,r19
 400abfc:	40011140 	call	4001114 <__mulsi3>
 400ac00:	d8c00117 	ldw	r3,4(sp)
 400ac04:	9080052e 	bgeu	r18,r2,400ac1c <__udivdi3+0x2b4>
 400ac08:	8ca5883a 	add	r18,r17,r18
 400ac0c:	813fffc4 	addi	r4,r16,-1
 400ac10:	9440ad36 	bltu	r18,r17,400aec8 <__udivdi3+0x560>
 400ac14:	9080ac2e 	bgeu	r18,r2,400aec8 <__udivdi3+0x560>
 400ac18:	843fff84 	addi	r16,r16,-2
 400ac1c:	b004943a 	slli	r2,r22,16
 400ac20:	1404b03a 	or	r2,r2,r16
 400ac24:	00000206 	br	400ac30 <__udivdi3+0x2c8>
 400ac28:	0007883a 	mov	r3,zero
 400ac2c:	0005883a 	mov	r2,zero
 400ac30:	dfc00b17 	ldw	ra,44(sp)
 400ac34:	df000a17 	ldw	fp,40(sp)
 400ac38:	ddc00917 	ldw	r23,36(sp)
 400ac3c:	dd800817 	ldw	r22,32(sp)
 400ac40:	dd400717 	ldw	r21,28(sp)
 400ac44:	dd000617 	ldw	r20,24(sp)
 400ac48:	dcc00517 	ldw	r19,20(sp)
 400ac4c:	dc800417 	ldw	r18,16(sp)
 400ac50:	dc400317 	ldw	r17,12(sp)
 400ac54:	dc000217 	ldw	r16,8(sp)
 400ac58:	dec00c04 	addi	sp,sp,48
 400ac5c:	f800283a 	ret
 400ac60:	00803fc4 	movi	r2,255
 400ac64:	11c5803a 	cmpltu	r2,r2,r7
 400ac68:	100490fa 	slli	r2,r2,3
 400ac6c:	003f9906 	br	400aad4 <__ram_exceptions_end+0xfbf82838>
 400ac70:	00803fc4 	movi	r2,255
 400ac74:	1445803a 	cmpltu	r2,r2,r17
 400ac78:	100490fa 	slli	r2,r2,3
 400ac7c:	003fad06 	br	400ab34 <__ram_exceptions_end+0xfbf82898>
 400ac80:	00804034 	movhi	r2,256
 400ac84:	10bfffc4 	addi	r2,r2,-1
 400ac88:	11809f36 	bltu	r2,r6,400af08 <__udivdi3+0x5a0>
 400ac8c:	00800404 	movi	r2,16
 400ac90:	003f4c06 	br	400a9c4 <__ram_exceptions_end+0xfbf82728>
 400ac94:	3dce983a 	sll	r7,r7,r23
 400ac98:	30b8d83a 	srl	fp,r6,r2
 400ac9c:	80a2d83a 	srl	r17,r16,r2
 400aca0:	35cc983a 	sll	r6,r6,r23
 400aca4:	3f38b03a 	or	fp,r7,fp
 400aca8:	e024d43a 	srli	r18,fp,16
 400acac:	9884d83a 	srl	r2,r19,r2
 400acb0:	85e0983a 	sll	r16,r16,r23
 400acb4:	8809883a 	mov	r4,r17
 400acb8:	900b883a 	mov	r5,r18
 400acbc:	d9800015 	stw	r6,0(sp)
 400acc0:	1420b03a 	or	r16,r2,r16
 400acc4:	40010bc0 	call	40010bc <__umodsi3>
 400acc8:	900b883a 	mov	r5,r18
 400accc:	8809883a 	mov	r4,r17
 400acd0:	1029883a 	mov	r20,r2
 400acd4:	e5bfffcc 	andi	r22,fp,65535
 400acd8:	40010580 	call	4001058 <__udivsi3>
 400acdc:	100b883a 	mov	r5,r2
 400ace0:	b009883a 	mov	r4,r22
 400ace4:	102b883a 	mov	r21,r2
 400ace8:	40011140 	call	4001114 <__mulsi3>
 400acec:	a028943a 	slli	r20,r20,16
 400acf0:	8006d43a 	srli	r3,r16,16
 400acf4:	1d06b03a 	or	r3,r3,r20
 400acf8:	1880042e 	bgeu	r3,r2,400ad0c <__udivdi3+0x3a4>
 400acfc:	1f07883a 	add	r3,r3,fp
 400ad00:	a93fffc4 	addi	r4,r21,-1
 400ad04:	1f00892e 	bgeu	r3,fp,400af2c <__udivdi3+0x5c4>
 400ad08:	202b883a 	mov	r21,r4
 400ad0c:	18a3c83a 	sub	r17,r3,r2
 400ad10:	8809883a 	mov	r4,r17
 400ad14:	900b883a 	mov	r5,r18
 400ad18:	40010bc0 	call	40010bc <__umodsi3>
 400ad1c:	1029883a 	mov	r20,r2
 400ad20:	8809883a 	mov	r4,r17
 400ad24:	900b883a 	mov	r5,r18
 400ad28:	a028943a 	slli	r20,r20,16
 400ad2c:	40010580 	call	4001058 <__udivsi3>
 400ad30:	100b883a 	mov	r5,r2
 400ad34:	b009883a 	mov	r4,r22
 400ad38:	843fffcc 	andi	r16,r16,65535
 400ad3c:	1023883a 	mov	r17,r2
 400ad40:	8520b03a 	or	r16,r16,r20
 400ad44:	40011140 	call	4001114 <__mulsi3>
 400ad48:	8080042e 	bgeu	r16,r2,400ad5c <__udivdi3+0x3f4>
 400ad4c:	8721883a 	add	r16,r16,fp
 400ad50:	88ffffc4 	addi	r3,r17,-1
 400ad54:	8700712e 	bgeu	r16,fp,400af1c <__udivdi3+0x5b4>
 400ad58:	1823883a 	mov	r17,r3
 400ad5c:	a80e943a 	slli	r7,r21,16
 400ad60:	d8c00017 	ldw	r3,0(sp)
 400ad64:	80a1c83a 	sub	r16,r16,r2
 400ad68:	3c64b03a 	or	r18,r7,r17
 400ad6c:	1d3fffcc 	andi	r20,r3,65535
 400ad70:	9022d43a 	srli	r17,r18,16
 400ad74:	95bfffcc 	andi	r22,r18,65535
 400ad78:	a00b883a 	mov	r5,r20
 400ad7c:	b009883a 	mov	r4,r22
 400ad80:	182ad43a 	srli	r21,r3,16
 400ad84:	40011140 	call	4001114 <__mulsi3>
 400ad88:	a00b883a 	mov	r5,r20
 400ad8c:	8809883a 	mov	r4,r17
 400ad90:	1039883a 	mov	fp,r2
 400ad94:	40011140 	call	4001114 <__mulsi3>
 400ad98:	8809883a 	mov	r4,r17
 400ad9c:	a80b883a 	mov	r5,r21
 400ada0:	1029883a 	mov	r20,r2
 400ada4:	40011140 	call	4001114 <__mulsi3>
 400ada8:	a80b883a 	mov	r5,r21
 400adac:	b009883a 	mov	r4,r22
 400adb0:	1023883a 	mov	r17,r2
 400adb4:	40011140 	call	4001114 <__mulsi3>
 400adb8:	e006d43a 	srli	r3,fp,16
 400adbc:	1505883a 	add	r2,r2,r20
 400adc0:	1887883a 	add	r3,r3,r2
 400adc4:	1d00022e 	bgeu	r3,r20,400add0 <__udivdi3+0x468>
 400adc8:	00800074 	movhi	r2,1
 400adcc:	88a3883a 	add	r17,r17,r2
 400add0:	1804d43a 	srli	r2,r3,16
 400add4:	1463883a 	add	r17,r2,r17
 400add8:	84404436 	bltu	r16,r17,400aeec <__udivdi3+0x584>
 400addc:	84403e26 	beq	r16,r17,400aed8 <__udivdi3+0x570>
 400ade0:	9005883a 	mov	r2,r18
 400ade4:	0007883a 	mov	r3,zero
 400ade8:	003f9106 	br	400ac30 <__ram_exceptions_end+0xfbf82994>
 400adec:	88e2983a 	sll	r17,r17,r3
 400adf0:	80aed83a 	srl	r23,r16,r2
 400adf4:	80e0983a 	sll	r16,r16,r3
 400adf8:	882ad43a 	srli	r21,r17,16
 400adfc:	9884d83a 	srl	r2,r19,r2
 400ae00:	b809883a 	mov	r4,r23
 400ae04:	a80b883a 	mov	r5,r21
 400ae08:	98e4983a 	sll	r18,r19,r3
 400ae0c:	142cb03a 	or	r22,r2,r16
 400ae10:	40010bc0 	call	40010bc <__umodsi3>
 400ae14:	b809883a 	mov	r4,r23
 400ae18:	a80b883a 	mov	r5,r21
 400ae1c:	1027883a 	mov	r19,r2
 400ae20:	8d3fffcc 	andi	r20,r17,65535
 400ae24:	40010580 	call	4001058 <__udivsi3>
 400ae28:	a009883a 	mov	r4,r20
 400ae2c:	100b883a 	mov	r5,r2
 400ae30:	102f883a 	mov	r23,r2
 400ae34:	40011140 	call	4001114 <__mulsi3>
 400ae38:	9826943a 	slli	r19,r19,16
 400ae3c:	b008d43a 	srli	r4,r22,16
 400ae40:	24c8b03a 	or	r4,r4,r19
 400ae44:	2080062e 	bgeu	r4,r2,400ae60 <__udivdi3+0x4f8>
 400ae48:	2449883a 	add	r4,r4,r17
 400ae4c:	b8ffffc4 	addi	r3,r23,-1
 400ae50:	24403c36 	bltu	r4,r17,400af44 <__udivdi3+0x5dc>
 400ae54:	20803b2e 	bgeu	r4,r2,400af44 <__udivdi3+0x5dc>
 400ae58:	bdffff84 	addi	r23,r23,-2
 400ae5c:	2449883a 	add	r4,r4,r17
 400ae60:	20a1c83a 	sub	r16,r4,r2
 400ae64:	a80b883a 	mov	r5,r21
 400ae68:	8009883a 	mov	r4,r16
 400ae6c:	40010bc0 	call	40010bc <__umodsi3>
 400ae70:	a80b883a 	mov	r5,r21
 400ae74:	8009883a 	mov	r4,r16
 400ae78:	1027883a 	mov	r19,r2
 400ae7c:	40010580 	call	4001058 <__udivsi3>
 400ae80:	a009883a 	mov	r4,r20
 400ae84:	100b883a 	mov	r5,r2
 400ae88:	9826943a 	slli	r19,r19,16
 400ae8c:	1039883a 	mov	fp,r2
 400ae90:	40011140 	call	4001114 <__mulsi3>
 400ae94:	b13fffcc 	andi	r4,r22,65535
 400ae98:	24c8b03a 	or	r4,r4,r19
 400ae9c:	2080062e 	bgeu	r4,r2,400aeb8 <__udivdi3+0x550>
 400aea0:	2449883a 	add	r4,r4,r17
 400aea4:	e0ffffc4 	addi	r3,fp,-1
 400aea8:	24402436 	bltu	r4,r17,400af3c <__udivdi3+0x5d4>
 400aeac:	2080232e 	bgeu	r4,r2,400af3c <__udivdi3+0x5d4>
 400aeb0:	e73fff84 	addi	fp,fp,-2
 400aeb4:	2449883a 	add	r4,r4,r17
 400aeb8:	b82e943a 	slli	r23,r23,16
 400aebc:	20a1c83a 	sub	r16,r4,r2
 400aec0:	bf06b03a 	or	r3,r23,fp
 400aec4:	003f2806 	br	400ab68 <__ram_exceptions_end+0xfbf828cc>
 400aec8:	2021883a 	mov	r16,r4
 400aecc:	003f5306 	br	400ac1c <__ram_exceptions_end+0xfbf82980>
 400aed0:	1821883a 	mov	r16,r3
 400aed4:	003ef406 	br	400aaa8 <__ram_exceptions_end+0xfbf8280c>
 400aed8:	1806943a 	slli	r3,r3,16
 400aedc:	9de6983a 	sll	r19,r19,r23
 400aee0:	e73fffcc 	andi	fp,fp,65535
 400aee4:	1f07883a 	add	r3,r3,fp
 400aee8:	98ffbd2e 	bgeu	r19,r3,400ade0 <__ram_exceptions_end+0xfbf82b44>
 400aeec:	90bfffc4 	addi	r2,r18,-1
 400aef0:	0007883a 	mov	r3,zero
 400aef4:	003f4e06 	br	400ac30 <__ram_exceptions_end+0xfbf82994>
 400aef8:	00800604 	movi	r2,24
 400aefc:	003ef506 	br	400aad4 <__ram_exceptions_end+0xfbf82838>
 400af00:	00800604 	movi	r2,24
 400af04:	003f0b06 	br	400ab34 <__ram_exceptions_end+0xfbf82898>
 400af08:	00800604 	movi	r2,24
 400af0c:	003ead06 	br	400a9c4 <__ram_exceptions_end+0xfbf82728>
 400af10:	0007883a 	mov	r3,zero
 400af14:	00800044 	movi	r2,1
 400af18:	003f4506 	br	400ac30 <__ram_exceptions_end+0xfbf82994>
 400af1c:	80bf8e2e 	bgeu	r16,r2,400ad58 <__ram_exceptions_end+0xfbf82abc>
 400af20:	8c7fff84 	addi	r17,r17,-2
 400af24:	8721883a 	add	r16,r16,fp
 400af28:	003f8c06 	br	400ad5c <__ram_exceptions_end+0xfbf82ac0>
 400af2c:	18bf762e 	bgeu	r3,r2,400ad08 <__ram_exceptions_end+0xfbf82a6c>
 400af30:	ad7fff84 	addi	r21,r21,-2
 400af34:	1f07883a 	add	r3,r3,fp
 400af38:	003f7406 	br	400ad0c <__ram_exceptions_end+0xfbf82a70>
 400af3c:	1839883a 	mov	fp,r3
 400af40:	003fdd06 	br	400aeb8 <__ram_exceptions_end+0xfbf82c1c>
 400af44:	182f883a 	mov	r23,r3
 400af48:	003fc506 	br	400ae60 <__ram_exceptions_end+0xfbf82bc4>
 400af4c:	b5bfff84 	addi	r22,r22,-2
 400af50:	3c4f883a 	add	r7,r7,r17
 400af54:	003f1a06 	br	400abc0 <__ram_exceptions_end+0xfbf82924>
 400af58:	b5bfff84 	addi	r22,r22,-2
 400af5c:	1c47883a 	add	r3,r3,r17
 400af60:	003ebc06 	br	400aa54 <__ram_exceptions_end+0xfbf827b8>

0400af64 <__umoddi3>:
 400af64:	defff304 	addi	sp,sp,-52
 400af68:	df000b15 	stw	fp,44(sp)
 400af6c:	dc400415 	stw	r17,16(sp)
 400af70:	dc000315 	stw	r16,12(sp)
 400af74:	dfc00c15 	stw	ra,48(sp)
 400af78:	ddc00a15 	stw	r23,40(sp)
 400af7c:	dd800915 	stw	r22,36(sp)
 400af80:	dd400815 	stw	r21,32(sp)
 400af84:	dd000715 	stw	r20,28(sp)
 400af88:	dcc00615 	stw	r19,24(sp)
 400af8c:	dc800515 	stw	r18,20(sp)
 400af90:	2021883a 	mov	r16,r4
 400af94:	2823883a 	mov	r17,r5
 400af98:	2839883a 	mov	fp,r5
 400af9c:	3800401e 	bne	r7,zero,400b0a0 <__umoddi3+0x13c>
 400afa0:	3027883a 	mov	r19,r6
 400afa4:	2029883a 	mov	r20,r4
 400afa8:	2980552e 	bgeu	r5,r6,400b100 <__umoddi3+0x19c>
 400afac:	00bfffd4 	movui	r2,65535
 400afb0:	1180a236 	bltu	r2,r6,400b23c <__umoddi3+0x2d8>
 400afb4:	01003fc4 	movi	r4,255
 400afb8:	2189803a 	cmpltu	r4,r4,r6
 400afbc:	200890fa 	slli	r4,r4,3
 400afc0:	3104d83a 	srl	r2,r6,r4
 400afc4:	00c10074 	movhi	r3,1025
 400afc8:	18d68504 	addi	r3,r3,23060
 400afcc:	1885883a 	add	r2,r3,r2
 400afd0:	10c00003 	ldbu	r3,0(r2)
 400afd4:	00800804 	movi	r2,32
 400afd8:	1909883a 	add	r4,r3,r4
 400afdc:	1125c83a 	sub	r18,r2,r4
 400afe0:	90000526 	beq	r18,zero,400aff8 <__umoddi3+0x94>
 400afe4:	8ca2983a 	sll	r17,r17,r18
 400afe8:	8108d83a 	srl	r4,r16,r4
 400afec:	34a6983a 	sll	r19,r6,r18
 400aff0:	84a8983a 	sll	r20,r16,r18
 400aff4:	2478b03a 	or	fp,r4,r17
 400aff8:	982cd43a 	srli	r22,r19,16
 400affc:	e009883a 	mov	r4,fp
 400b000:	9dffffcc 	andi	r23,r19,65535
 400b004:	b00b883a 	mov	r5,r22
 400b008:	40010bc0 	call	40010bc <__umodsi3>
 400b00c:	b00b883a 	mov	r5,r22
 400b010:	e009883a 	mov	r4,fp
 400b014:	102b883a 	mov	r21,r2
 400b018:	40010580 	call	4001058 <__udivsi3>
 400b01c:	100b883a 	mov	r5,r2
 400b020:	b809883a 	mov	r4,r23
 400b024:	40011140 	call	4001114 <__mulsi3>
 400b028:	a82a943a 	slli	r21,r21,16
 400b02c:	a006d43a 	srli	r3,r20,16
 400b030:	1d46b03a 	or	r3,r3,r21
 400b034:	1880032e 	bgeu	r3,r2,400b044 <__umoddi3+0xe0>
 400b038:	1cc7883a 	add	r3,r3,r19
 400b03c:	1cc00136 	bltu	r3,r19,400b044 <__umoddi3+0xe0>
 400b040:	18813136 	bltu	r3,r2,400b508 <__umoddi3+0x5a4>
 400b044:	18a1c83a 	sub	r16,r3,r2
 400b048:	b00b883a 	mov	r5,r22
 400b04c:	8009883a 	mov	r4,r16
 400b050:	40010bc0 	call	40010bc <__umodsi3>
 400b054:	b00b883a 	mov	r5,r22
 400b058:	8009883a 	mov	r4,r16
 400b05c:	1023883a 	mov	r17,r2
 400b060:	40010580 	call	4001058 <__udivsi3>
 400b064:	100b883a 	mov	r5,r2
 400b068:	b809883a 	mov	r4,r23
 400b06c:	8822943a 	slli	r17,r17,16
 400b070:	40011140 	call	4001114 <__mulsi3>
 400b074:	a0ffffcc 	andi	r3,r20,65535
 400b078:	1c46b03a 	or	r3,r3,r17
 400b07c:	1880042e 	bgeu	r3,r2,400b090 <__umoddi3+0x12c>
 400b080:	1cc7883a 	add	r3,r3,r19
 400b084:	1cc00236 	bltu	r3,r19,400b090 <__umoddi3+0x12c>
 400b088:	1880012e 	bgeu	r3,r2,400b090 <__umoddi3+0x12c>
 400b08c:	1cc7883a 	add	r3,r3,r19
 400b090:	1885c83a 	sub	r2,r3,r2
 400b094:	1484d83a 	srl	r2,r2,r18
 400b098:	0007883a 	mov	r3,zero
 400b09c:	00005306 	br	400b1ec <__umoddi3+0x288>
 400b0a0:	29c05036 	bltu	r5,r7,400b1e4 <__umoddi3+0x280>
 400b0a4:	00bfffd4 	movui	r2,65535
 400b0a8:	11c05c2e 	bgeu	r2,r7,400b21c <__umoddi3+0x2b8>
 400b0ac:	00804034 	movhi	r2,256
 400b0b0:	10bfffc4 	addi	r2,r2,-1
 400b0b4:	11c10636 	bltu	r2,r7,400b4d0 <__umoddi3+0x56c>
 400b0b8:	01000404 	movi	r4,16
 400b0bc:	3904d83a 	srl	r2,r7,r4
 400b0c0:	00c10074 	movhi	r3,1025
 400b0c4:	18d68504 	addi	r3,r3,23060
 400b0c8:	1885883a 	add	r2,r3,r2
 400b0cc:	14c00003 	ldbu	r19,0(r2)
 400b0d0:	00c00804 	movi	r3,32
 400b0d4:	9927883a 	add	r19,r19,r4
 400b0d8:	1ce9c83a 	sub	r20,r3,r19
 400b0dc:	a0005c1e 	bne	r20,zero,400b250 <__umoddi3+0x2ec>
 400b0e0:	3c400136 	bltu	r7,r17,400b0e8 <__umoddi3+0x184>
 400b0e4:	81810a36 	bltu	r16,r6,400b510 <__umoddi3+0x5ac>
 400b0e8:	8185c83a 	sub	r2,r16,r6
 400b0ec:	89e3c83a 	sub	r17,r17,r7
 400b0f0:	8089803a 	cmpltu	r4,r16,r2
 400b0f4:	8939c83a 	sub	fp,r17,r4
 400b0f8:	e007883a 	mov	r3,fp
 400b0fc:	00003b06 	br	400b1ec <__umoddi3+0x288>
 400b100:	3000041e 	bne	r6,zero,400b114 <__umoddi3+0x1b0>
 400b104:	000b883a 	mov	r5,zero
 400b108:	01000044 	movi	r4,1
 400b10c:	40010580 	call	4001058 <__udivsi3>
 400b110:	1027883a 	mov	r19,r2
 400b114:	00bfffd4 	movui	r2,65535
 400b118:	14c0442e 	bgeu	r2,r19,400b22c <__umoddi3+0x2c8>
 400b11c:	00804034 	movhi	r2,256
 400b120:	10bfffc4 	addi	r2,r2,-1
 400b124:	14c0ec36 	bltu	r2,r19,400b4d8 <__umoddi3+0x574>
 400b128:	00800404 	movi	r2,16
 400b12c:	9886d83a 	srl	r3,r19,r2
 400b130:	01010074 	movhi	r4,1025
 400b134:	21168504 	addi	r4,r4,23060
 400b138:	20c7883a 	add	r3,r4,r3
 400b13c:	18c00003 	ldbu	r3,0(r3)
 400b140:	1887883a 	add	r3,r3,r2
 400b144:	00800804 	movi	r2,32
 400b148:	10e5c83a 	sub	r18,r2,r3
 400b14c:	9000ab1e 	bne	r18,zero,400b3fc <__umoddi3+0x498>
 400b150:	982cd43a 	srli	r22,r19,16
 400b154:	8ce3c83a 	sub	r17,r17,r19
 400b158:	9dffffcc 	andi	r23,r19,65535
 400b15c:	b00b883a 	mov	r5,r22
 400b160:	8809883a 	mov	r4,r17
 400b164:	40010bc0 	call	40010bc <__umodsi3>
 400b168:	b00b883a 	mov	r5,r22
 400b16c:	8809883a 	mov	r4,r17
 400b170:	102b883a 	mov	r21,r2
 400b174:	40010580 	call	4001058 <__udivsi3>
 400b178:	b80b883a 	mov	r5,r23
 400b17c:	1009883a 	mov	r4,r2
 400b180:	40011140 	call	4001114 <__mulsi3>
 400b184:	a82a943a 	slli	r21,r21,16
 400b188:	a006d43a 	srli	r3,r20,16
 400b18c:	1d46b03a 	or	r3,r3,r21
 400b190:	1880042e 	bgeu	r3,r2,400b1a4 <__umoddi3+0x240>
 400b194:	1cc7883a 	add	r3,r3,r19
 400b198:	1cc00236 	bltu	r3,r19,400b1a4 <__umoddi3+0x240>
 400b19c:	1880012e 	bgeu	r3,r2,400b1a4 <__umoddi3+0x240>
 400b1a0:	1cc7883a 	add	r3,r3,r19
 400b1a4:	18a1c83a 	sub	r16,r3,r2
 400b1a8:	b00b883a 	mov	r5,r22
 400b1ac:	8009883a 	mov	r4,r16
 400b1b0:	40010bc0 	call	40010bc <__umodsi3>
 400b1b4:	1023883a 	mov	r17,r2
 400b1b8:	b00b883a 	mov	r5,r22
 400b1bc:	8009883a 	mov	r4,r16
 400b1c0:	40010580 	call	4001058 <__udivsi3>
 400b1c4:	8822943a 	slli	r17,r17,16
 400b1c8:	b80b883a 	mov	r5,r23
 400b1cc:	1009883a 	mov	r4,r2
 400b1d0:	40011140 	call	4001114 <__mulsi3>
 400b1d4:	a53fffcc 	andi	r20,r20,65535
 400b1d8:	a446b03a 	or	r3,r20,r17
 400b1dc:	18bfac2e 	bgeu	r3,r2,400b090 <__ram_exceptions_end+0xfbf82df4>
 400b1e0:	003fa706 	br	400b080 <__ram_exceptions_end+0xfbf82de4>
 400b1e4:	2005883a 	mov	r2,r4
 400b1e8:	2807883a 	mov	r3,r5
 400b1ec:	dfc00c17 	ldw	ra,48(sp)
 400b1f0:	df000b17 	ldw	fp,44(sp)
 400b1f4:	ddc00a17 	ldw	r23,40(sp)
 400b1f8:	dd800917 	ldw	r22,36(sp)
 400b1fc:	dd400817 	ldw	r21,32(sp)
 400b200:	dd000717 	ldw	r20,28(sp)
 400b204:	dcc00617 	ldw	r19,24(sp)
 400b208:	dc800517 	ldw	r18,20(sp)
 400b20c:	dc400417 	ldw	r17,16(sp)
 400b210:	dc000317 	ldw	r16,12(sp)
 400b214:	dec00d04 	addi	sp,sp,52
 400b218:	f800283a 	ret
 400b21c:	04c03fc4 	movi	r19,255
 400b220:	99c9803a 	cmpltu	r4,r19,r7
 400b224:	200890fa 	slli	r4,r4,3
 400b228:	003fa406 	br	400b0bc <__ram_exceptions_end+0xfbf82e20>
 400b22c:	00803fc4 	movi	r2,255
 400b230:	14c5803a 	cmpltu	r2,r2,r19
 400b234:	100490fa 	slli	r2,r2,3
 400b238:	003fbc06 	br	400b12c <__ram_exceptions_end+0xfbf82e90>
 400b23c:	00804034 	movhi	r2,256
 400b240:	10bfffc4 	addi	r2,r2,-1
 400b244:	1180a636 	bltu	r2,r6,400b4e0 <__umoddi3+0x57c>
 400b248:	01000404 	movi	r4,16
 400b24c:	003f5c06 	br	400afc0 <__ram_exceptions_end+0xfbf82d24>
 400b250:	3d0e983a 	sll	r7,r7,r20
 400b254:	34ead83a 	srl	r21,r6,r19
 400b258:	8cc6d83a 	srl	r3,r17,r19
 400b25c:	8d10983a 	sll	r8,r17,r20
 400b260:	3d6ab03a 	or	r21,r7,r21
 400b264:	a82cd43a 	srli	r22,r21,16
 400b268:	84e2d83a 	srl	r17,r16,r19
 400b26c:	1809883a 	mov	r4,r3
 400b270:	b00b883a 	mov	r5,r22
 400b274:	8a22b03a 	or	r17,r17,r8
 400b278:	3524983a 	sll	r18,r6,r20
 400b27c:	dc400015 	stw	r17,0(sp)
 400b280:	d8c00115 	stw	r3,4(sp)
 400b284:	40010bc0 	call	40010bc <__umodsi3>
 400b288:	d8c00117 	ldw	r3,4(sp)
 400b28c:	b00b883a 	mov	r5,r22
 400b290:	1039883a 	mov	fp,r2
 400b294:	1809883a 	mov	r4,r3
 400b298:	40010580 	call	4001058 <__udivsi3>
 400b29c:	adffffcc 	andi	r23,r21,65535
 400b2a0:	100b883a 	mov	r5,r2
 400b2a4:	b809883a 	mov	r4,r23
 400b2a8:	1023883a 	mov	r17,r2
 400b2ac:	40011140 	call	4001114 <__mulsi3>
 400b2b0:	d9400017 	ldw	r5,0(sp)
 400b2b4:	e008943a 	slli	r4,fp,16
 400b2b8:	8520983a 	sll	r16,r16,r20
 400b2bc:	2806d43a 	srli	r3,r5,16
 400b2c0:	1906b03a 	or	r3,r3,r4
 400b2c4:	1880042e 	bgeu	r3,r2,400b2d8 <__umoddi3+0x374>
 400b2c8:	1d47883a 	add	r3,r3,r21
 400b2cc:	893fffc4 	addi	r4,r17,-1
 400b2d0:	1d40892e 	bgeu	r3,r21,400b4f8 <__umoddi3+0x594>
 400b2d4:	2023883a 	mov	r17,r4
 400b2d8:	18b9c83a 	sub	fp,r3,r2
 400b2dc:	b00b883a 	mov	r5,r22
 400b2e0:	e009883a 	mov	r4,fp
 400b2e4:	40010bc0 	call	40010bc <__umodsi3>
 400b2e8:	b00b883a 	mov	r5,r22
 400b2ec:	e009883a 	mov	r4,fp
 400b2f0:	d8800215 	stw	r2,8(sp)
 400b2f4:	40010580 	call	4001058 <__udivsi3>
 400b2f8:	100b883a 	mov	r5,r2
 400b2fc:	b809883a 	mov	r4,r23
 400b300:	102d883a 	mov	r22,r2
 400b304:	40011140 	call	4001114 <__mulsi3>
 400b308:	d9800217 	ldw	r6,8(sp)
 400b30c:	d8c00017 	ldw	r3,0(sp)
 400b310:	300c943a 	slli	r6,r6,16
 400b314:	1a3fffcc 	andi	r8,r3,65535
 400b318:	4190b03a 	or	r8,r8,r6
 400b31c:	4080042e 	bgeu	r8,r2,400b330 <__umoddi3+0x3cc>
 400b320:	4551883a 	add	r8,r8,r21
 400b324:	b0ffffc4 	addi	r3,r22,-1
 400b328:	45406f2e 	bgeu	r8,r21,400b4e8 <__umoddi3+0x584>
 400b32c:	182d883a 	mov	r22,r3
 400b330:	880e943a 	slli	r7,r17,16
 400b334:	9006d43a 	srli	r3,r18,16
 400b338:	91bfffcc 	andi	r6,r18,65535
 400b33c:	3dacb03a 	or	r22,r7,r22
 400b340:	b02ed43a 	srli	r23,r22,16
 400b344:	b5bfffcc 	andi	r22,r22,65535
 400b348:	300b883a 	mov	r5,r6
 400b34c:	b009883a 	mov	r4,r22
 400b350:	40a3c83a 	sub	r17,r8,r2
 400b354:	d8c00115 	stw	r3,4(sp)
 400b358:	d9800215 	stw	r6,8(sp)
 400b35c:	40011140 	call	4001114 <__mulsi3>
 400b360:	d9800217 	ldw	r6,8(sp)
 400b364:	b809883a 	mov	r4,r23
 400b368:	1039883a 	mov	fp,r2
 400b36c:	300b883a 	mov	r5,r6
 400b370:	40011140 	call	4001114 <__mulsi3>
 400b374:	d8c00117 	ldw	r3,4(sp)
 400b378:	b809883a 	mov	r4,r23
 400b37c:	d8800215 	stw	r2,8(sp)
 400b380:	180b883a 	mov	r5,r3
 400b384:	40011140 	call	4001114 <__mulsi3>
 400b388:	d8c00117 	ldw	r3,4(sp)
 400b38c:	b009883a 	mov	r4,r22
 400b390:	102f883a 	mov	r23,r2
 400b394:	180b883a 	mov	r5,r3
 400b398:	40011140 	call	4001114 <__mulsi3>
 400b39c:	d9800217 	ldw	r6,8(sp)
 400b3a0:	e006d43a 	srli	r3,fp,16
 400b3a4:	1185883a 	add	r2,r2,r6
 400b3a8:	1885883a 	add	r2,r3,r2
 400b3ac:	1180022e 	bgeu	r2,r6,400b3b8 <__umoddi3+0x454>
 400b3b0:	00c00074 	movhi	r3,1
 400b3b4:	b8ef883a 	add	r23,r23,r3
 400b3b8:	1006d43a 	srli	r3,r2,16
 400b3bc:	1004943a 	slli	r2,r2,16
 400b3c0:	e73fffcc 	andi	fp,fp,65535
 400b3c4:	1dc7883a 	add	r3,r3,r23
 400b3c8:	1739883a 	add	fp,r2,fp
 400b3cc:	88c03a36 	bltu	r17,r3,400b4b8 <__umoddi3+0x554>
 400b3d0:	88c05126 	beq	r17,r3,400b518 <__umoddi3+0x5b4>
 400b3d4:	88c9c83a 	sub	r4,r17,r3
 400b3d8:	e00f883a 	mov	r7,fp
 400b3dc:	81cfc83a 	sub	r7,r16,r7
 400b3e0:	81c7803a 	cmpltu	r3,r16,r7
 400b3e4:	20c7c83a 	sub	r3,r4,r3
 400b3e8:	1cc4983a 	sll	r2,r3,r19
 400b3ec:	3d0ed83a 	srl	r7,r7,r20
 400b3f0:	1d06d83a 	srl	r3,r3,r20
 400b3f4:	11c4b03a 	or	r2,r2,r7
 400b3f8:	003f7c06 	br	400b1ec <__ram_exceptions_end+0xfbf82f50>
 400b3fc:	9ca6983a 	sll	r19,r19,r18
 400b400:	88f8d83a 	srl	fp,r17,r3
 400b404:	80c4d83a 	srl	r2,r16,r3
 400b408:	982cd43a 	srli	r22,r19,16
 400b40c:	8ca2983a 	sll	r17,r17,r18
 400b410:	e009883a 	mov	r4,fp
 400b414:	b00b883a 	mov	r5,r22
 400b418:	146ab03a 	or	r21,r2,r17
 400b41c:	40010bc0 	call	40010bc <__umodsi3>
 400b420:	b00b883a 	mov	r5,r22
 400b424:	e009883a 	mov	r4,fp
 400b428:	1029883a 	mov	r20,r2
 400b42c:	9dffffcc 	andi	r23,r19,65535
 400b430:	40010580 	call	4001058 <__udivsi3>
 400b434:	b809883a 	mov	r4,r23
 400b438:	100b883a 	mov	r5,r2
 400b43c:	40011140 	call	4001114 <__mulsi3>
 400b440:	a008943a 	slli	r4,r20,16
 400b444:	a806d43a 	srli	r3,r21,16
 400b448:	84a8983a 	sll	r20,r16,r18
 400b44c:	1906b03a 	or	r3,r3,r4
 400b450:	1880042e 	bgeu	r3,r2,400b464 <__umoddi3+0x500>
 400b454:	1cc7883a 	add	r3,r3,r19
 400b458:	1cc00236 	bltu	r3,r19,400b464 <__umoddi3+0x500>
 400b45c:	1880012e 	bgeu	r3,r2,400b464 <__umoddi3+0x500>
 400b460:	1cc7883a 	add	r3,r3,r19
 400b464:	18a3c83a 	sub	r17,r3,r2
 400b468:	b00b883a 	mov	r5,r22
 400b46c:	8809883a 	mov	r4,r17
 400b470:	40010bc0 	call	40010bc <__umodsi3>
 400b474:	b00b883a 	mov	r5,r22
 400b478:	8809883a 	mov	r4,r17
 400b47c:	1021883a 	mov	r16,r2
 400b480:	40010580 	call	4001058 <__udivsi3>
 400b484:	100b883a 	mov	r5,r2
 400b488:	b809883a 	mov	r4,r23
 400b48c:	8020943a 	slli	r16,r16,16
 400b490:	40011140 	call	4001114 <__mulsi3>
 400b494:	a8ffffcc 	andi	r3,r21,65535
 400b498:	1c06b03a 	or	r3,r3,r16
 400b49c:	1880042e 	bgeu	r3,r2,400b4b0 <__umoddi3+0x54c>
 400b4a0:	1cc7883a 	add	r3,r3,r19
 400b4a4:	1cc00236 	bltu	r3,r19,400b4b0 <__umoddi3+0x54c>
 400b4a8:	1880012e 	bgeu	r3,r2,400b4b0 <__umoddi3+0x54c>
 400b4ac:	1cc7883a 	add	r3,r3,r19
 400b4b0:	18a3c83a 	sub	r17,r3,r2
 400b4b4:	003f2906 	br	400b15c <__ram_exceptions_end+0xfbf82ec0>
 400b4b8:	e48fc83a 	sub	r7,fp,r18
 400b4bc:	1d49c83a 	sub	r4,r3,r21
 400b4c0:	e1f9803a 	cmpltu	fp,fp,r7
 400b4c4:	2739c83a 	sub	fp,r4,fp
 400b4c8:	8f09c83a 	sub	r4,r17,fp
 400b4cc:	003fc306 	br	400b3dc <__ram_exceptions_end+0xfbf83140>
 400b4d0:	01000604 	movi	r4,24
 400b4d4:	003ef906 	br	400b0bc <__ram_exceptions_end+0xfbf82e20>
 400b4d8:	00800604 	movi	r2,24
 400b4dc:	003f1306 	br	400b12c <__ram_exceptions_end+0xfbf82e90>
 400b4e0:	01000604 	movi	r4,24
 400b4e4:	003eb606 	br	400afc0 <__ram_exceptions_end+0xfbf82d24>
 400b4e8:	40bf902e 	bgeu	r8,r2,400b32c <__ram_exceptions_end+0xfbf83090>
 400b4ec:	b5bfff84 	addi	r22,r22,-2
 400b4f0:	4551883a 	add	r8,r8,r21
 400b4f4:	003f8e06 	br	400b330 <__ram_exceptions_end+0xfbf83094>
 400b4f8:	18bf762e 	bgeu	r3,r2,400b2d4 <__ram_exceptions_end+0xfbf83038>
 400b4fc:	8c7fff84 	addi	r17,r17,-2
 400b500:	1d47883a 	add	r3,r3,r21
 400b504:	003f7406 	br	400b2d8 <__ram_exceptions_end+0xfbf8303c>
 400b508:	1cc7883a 	add	r3,r3,r19
 400b50c:	003ecd06 	br	400b044 <__ram_exceptions_end+0xfbf82da8>
 400b510:	8005883a 	mov	r2,r16
 400b514:	003ef806 	br	400b0f8 <__ram_exceptions_end+0xfbf82e5c>
 400b518:	873fe736 	bltu	r16,fp,400b4b8 <__ram_exceptions_end+0xfbf8321c>
 400b51c:	e00f883a 	mov	r7,fp
 400b520:	0009883a 	mov	r4,zero
 400b524:	003fad06 	br	400b3dc <__ram_exceptions_end+0xfbf83140>

0400b528 <__adddf3>:
 400b528:	02c00434 	movhi	r11,16
 400b52c:	5affffc4 	addi	r11,r11,-1
 400b530:	2806d7fa 	srli	r3,r5,31
 400b534:	2ad4703a 	and	r10,r5,r11
 400b538:	3ad2703a 	and	r9,r7,r11
 400b53c:	3804d53a 	srli	r2,r7,20
 400b540:	3018d77a 	srli	r12,r6,29
 400b544:	280ad53a 	srli	r5,r5,20
 400b548:	501490fa 	slli	r10,r10,3
 400b54c:	2010d77a 	srli	r8,r4,29
 400b550:	481290fa 	slli	r9,r9,3
 400b554:	380ed7fa 	srli	r7,r7,31
 400b558:	defffb04 	addi	sp,sp,-20
 400b55c:	dc800215 	stw	r18,8(sp)
 400b560:	dc400115 	stw	r17,4(sp)
 400b564:	dc000015 	stw	r16,0(sp)
 400b568:	dfc00415 	stw	ra,16(sp)
 400b56c:	dcc00315 	stw	r19,12(sp)
 400b570:	1c803fcc 	andi	r18,r3,255
 400b574:	2c01ffcc 	andi	r16,r5,2047
 400b578:	5210b03a 	or	r8,r10,r8
 400b57c:	202290fa 	slli	r17,r4,3
 400b580:	1081ffcc 	andi	r2,r2,2047
 400b584:	4b12b03a 	or	r9,r9,r12
 400b588:	300c90fa 	slli	r6,r6,3
 400b58c:	91c07526 	beq	r18,r7,400b764 <__adddf3+0x23c>
 400b590:	8087c83a 	sub	r3,r16,r2
 400b594:	00c0ab0e 	bge	zero,r3,400b844 <__adddf3+0x31c>
 400b598:	10002a1e 	bne	r2,zero,400b644 <__adddf3+0x11c>
 400b59c:	4984b03a 	or	r2,r9,r6
 400b5a0:	1000961e 	bne	r2,zero,400b7fc <__adddf3+0x2d4>
 400b5a4:	888001cc 	andi	r2,r17,7
 400b5a8:	10000726 	beq	r2,zero,400b5c8 <__adddf3+0xa0>
 400b5ac:	888003cc 	andi	r2,r17,15
 400b5b0:	00c00104 	movi	r3,4
 400b5b4:	10c00426 	beq	r2,r3,400b5c8 <__adddf3+0xa0>
 400b5b8:	88c7883a 	add	r3,r17,r3
 400b5bc:	1c63803a 	cmpltu	r17,r3,r17
 400b5c0:	4451883a 	add	r8,r8,r17
 400b5c4:	1823883a 	mov	r17,r3
 400b5c8:	4080202c 	andhi	r2,r8,128
 400b5cc:	10005926 	beq	r2,zero,400b734 <__adddf3+0x20c>
 400b5d0:	84000044 	addi	r16,r16,1
 400b5d4:	0081ffc4 	movi	r2,2047
 400b5d8:	8080ba26 	beq	r16,r2,400b8c4 <__adddf3+0x39c>
 400b5dc:	00bfe034 	movhi	r2,65408
 400b5e0:	10bfffc4 	addi	r2,r2,-1
 400b5e4:	4090703a 	and	r8,r8,r2
 400b5e8:	4004977a 	slli	r2,r8,29
 400b5ec:	4010927a 	slli	r8,r8,9
 400b5f0:	8822d0fa 	srli	r17,r17,3
 400b5f4:	8401ffcc 	andi	r16,r16,2047
 400b5f8:	4010d33a 	srli	r8,r8,12
 400b5fc:	9007883a 	mov	r3,r18
 400b600:	1444b03a 	or	r2,r2,r17
 400b604:	8401ffcc 	andi	r16,r16,2047
 400b608:	8020953a 	slli	r16,r16,20
 400b60c:	18c03fcc 	andi	r3,r3,255
 400b610:	01000434 	movhi	r4,16
 400b614:	213fffc4 	addi	r4,r4,-1
 400b618:	180697fa 	slli	r3,r3,31
 400b61c:	4110703a 	and	r8,r8,r4
 400b620:	4410b03a 	or	r8,r8,r16
 400b624:	40c6b03a 	or	r3,r8,r3
 400b628:	dfc00417 	ldw	ra,16(sp)
 400b62c:	dcc00317 	ldw	r19,12(sp)
 400b630:	dc800217 	ldw	r18,8(sp)
 400b634:	dc400117 	ldw	r17,4(sp)
 400b638:	dc000017 	ldw	r16,0(sp)
 400b63c:	dec00504 	addi	sp,sp,20
 400b640:	f800283a 	ret
 400b644:	0081ffc4 	movi	r2,2047
 400b648:	80bfd626 	beq	r16,r2,400b5a4 <__ram_exceptions_end+0xfbf83308>
 400b64c:	4a402034 	orhi	r9,r9,128
 400b650:	00800e04 	movi	r2,56
 400b654:	10c09f16 	blt	r2,r3,400b8d4 <__adddf3+0x3ac>
 400b658:	008007c4 	movi	r2,31
 400b65c:	10c0c216 	blt	r2,r3,400b968 <__adddf3+0x440>
 400b660:	00800804 	movi	r2,32
 400b664:	10c5c83a 	sub	r2,r2,r3
 400b668:	488a983a 	sll	r5,r9,r2
 400b66c:	30c8d83a 	srl	r4,r6,r3
 400b670:	3084983a 	sll	r2,r6,r2
 400b674:	48c6d83a 	srl	r3,r9,r3
 400b678:	290cb03a 	or	r6,r5,r4
 400b67c:	1004c03a 	cmpne	r2,r2,zero
 400b680:	308cb03a 	or	r6,r6,r2
 400b684:	898dc83a 	sub	r6,r17,r6
 400b688:	89a3803a 	cmpltu	r17,r17,r6
 400b68c:	40d1c83a 	sub	r8,r8,r3
 400b690:	4451c83a 	sub	r8,r8,r17
 400b694:	3023883a 	mov	r17,r6
 400b698:	4080202c 	andhi	r2,r8,128
 400b69c:	10002326 	beq	r2,zero,400b72c <__adddf3+0x204>
 400b6a0:	04c02034 	movhi	r19,128
 400b6a4:	9cffffc4 	addi	r19,r19,-1
 400b6a8:	44e6703a 	and	r19,r8,r19
 400b6ac:	98007626 	beq	r19,zero,400b888 <__adddf3+0x360>
 400b6b0:	9809883a 	mov	r4,r19
 400b6b4:	400dd680 	call	400dd68 <__clzsi2>
 400b6b8:	10fffe04 	addi	r3,r2,-8
 400b6bc:	010007c4 	movi	r4,31
 400b6c0:	20c07716 	blt	r4,r3,400b8a0 <__adddf3+0x378>
 400b6c4:	00800804 	movi	r2,32
 400b6c8:	10c5c83a 	sub	r2,r2,r3
 400b6cc:	8884d83a 	srl	r2,r17,r2
 400b6d0:	98d0983a 	sll	r8,r19,r3
 400b6d4:	88e2983a 	sll	r17,r17,r3
 400b6d8:	1204b03a 	or	r2,r2,r8
 400b6dc:	1c007416 	blt	r3,r16,400b8b0 <__adddf3+0x388>
 400b6e0:	1c21c83a 	sub	r16,r3,r16
 400b6e4:	82000044 	addi	r8,r16,1
 400b6e8:	00c007c4 	movi	r3,31
 400b6ec:	1a009116 	blt	r3,r8,400b934 <__adddf3+0x40c>
 400b6f0:	00c00804 	movi	r3,32
 400b6f4:	1a07c83a 	sub	r3,r3,r8
 400b6f8:	8a08d83a 	srl	r4,r17,r8
 400b6fc:	88e2983a 	sll	r17,r17,r3
 400b700:	10c6983a 	sll	r3,r2,r3
 400b704:	1210d83a 	srl	r8,r2,r8
 400b708:	8804c03a 	cmpne	r2,r17,zero
 400b70c:	1906b03a 	or	r3,r3,r4
 400b710:	18a2b03a 	or	r17,r3,r2
 400b714:	0021883a 	mov	r16,zero
 400b718:	003fa206 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400b71c:	1890b03a 	or	r8,r3,r2
 400b720:	40017d26 	beq	r8,zero,400bd18 <__adddf3+0x7f0>
 400b724:	1011883a 	mov	r8,r2
 400b728:	1823883a 	mov	r17,r3
 400b72c:	888001cc 	andi	r2,r17,7
 400b730:	103f9e1e 	bne	r2,zero,400b5ac <__ram_exceptions_end+0xfbf83310>
 400b734:	4004977a 	slli	r2,r8,29
 400b738:	8822d0fa 	srli	r17,r17,3
 400b73c:	4010d0fa 	srli	r8,r8,3
 400b740:	9007883a 	mov	r3,r18
 400b744:	1444b03a 	or	r2,r2,r17
 400b748:	0101ffc4 	movi	r4,2047
 400b74c:	81002426 	beq	r16,r4,400b7e0 <__adddf3+0x2b8>
 400b750:	8120703a 	and	r16,r16,r4
 400b754:	01000434 	movhi	r4,16
 400b758:	213fffc4 	addi	r4,r4,-1
 400b75c:	4110703a 	and	r8,r8,r4
 400b760:	003fa806 	br	400b604 <__ram_exceptions_end+0xfbf83368>
 400b764:	8089c83a 	sub	r4,r16,r2
 400b768:	01005e0e 	bge	zero,r4,400b8e4 <__adddf3+0x3bc>
 400b76c:	10002b26 	beq	r2,zero,400b81c <__adddf3+0x2f4>
 400b770:	0081ffc4 	movi	r2,2047
 400b774:	80bf8b26 	beq	r16,r2,400b5a4 <__ram_exceptions_end+0xfbf83308>
 400b778:	4a402034 	orhi	r9,r9,128
 400b77c:	00800e04 	movi	r2,56
 400b780:	1100a40e 	bge	r2,r4,400ba14 <__adddf3+0x4ec>
 400b784:	498cb03a 	or	r6,r9,r6
 400b788:	300ac03a 	cmpne	r5,r6,zero
 400b78c:	0013883a 	mov	r9,zero
 400b790:	2c4b883a 	add	r5,r5,r17
 400b794:	2c63803a 	cmpltu	r17,r5,r17
 400b798:	4a11883a 	add	r8,r9,r8
 400b79c:	8a11883a 	add	r8,r17,r8
 400b7a0:	2823883a 	mov	r17,r5
 400b7a4:	4080202c 	andhi	r2,r8,128
 400b7a8:	103fe026 	beq	r2,zero,400b72c <__ram_exceptions_end+0xfbf83490>
 400b7ac:	84000044 	addi	r16,r16,1
 400b7b0:	0081ffc4 	movi	r2,2047
 400b7b4:	8080d226 	beq	r16,r2,400bb00 <__adddf3+0x5d8>
 400b7b8:	00bfe034 	movhi	r2,65408
 400b7bc:	10bfffc4 	addi	r2,r2,-1
 400b7c0:	4090703a 	and	r8,r8,r2
 400b7c4:	880ad07a 	srli	r5,r17,1
 400b7c8:	400897fa 	slli	r4,r8,31
 400b7cc:	88c0004c 	andi	r3,r17,1
 400b7d0:	28e2b03a 	or	r17,r5,r3
 400b7d4:	4010d07a 	srli	r8,r8,1
 400b7d8:	2462b03a 	or	r17,r4,r17
 400b7dc:	003f7106 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400b7e0:	4088b03a 	or	r4,r8,r2
 400b7e4:	20014526 	beq	r4,zero,400bcfc <__adddf3+0x7d4>
 400b7e8:	01000434 	movhi	r4,16
 400b7ec:	42000234 	orhi	r8,r8,8
 400b7f0:	213fffc4 	addi	r4,r4,-1
 400b7f4:	4110703a 	and	r8,r8,r4
 400b7f8:	003f8206 	br	400b604 <__ram_exceptions_end+0xfbf83368>
 400b7fc:	18ffffc4 	addi	r3,r3,-1
 400b800:	1800491e 	bne	r3,zero,400b928 <__adddf3+0x400>
 400b804:	898bc83a 	sub	r5,r17,r6
 400b808:	8963803a 	cmpltu	r17,r17,r5
 400b80c:	4251c83a 	sub	r8,r8,r9
 400b810:	4451c83a 	sub	r8,r8,r17
 400b814:	2823883a 	mov	r17,r5
 400b818:	003f9f06 	br	400b698 <__ram_exceptions_end+0xfbf833fc>
 400b81c:	4984b03a 	or	r2,r9,r6
 400b820:	103f6026 	beq	r2,zero,400b5a4 <__ram_exceptions_end+0xfbf83308>
 400b824:	213fffc4 	addi	r4,r4,-1
 400b828:	2000931e 	bne	r4,zero,400ba78 <__adddf3+0x550>
 400b82c:	898d883a 	add	r6,r17,r6
 400b830:	3463803a 	cmpltu	r17,r6,r17
 400b834:	4251883a 	add	r8,r8,r9
 400b838:	8a11883a 	add	r8,r17,r8
 400b83c:	3023883a 	mov	r17,r6
 400b840:	003fd806 	br	400b7a4 <__ram_exceptions_end+0xfbf83508>
 400b844:	1800541e 	bne	r3,zero,400b998 <__adddf3+0x470>
 400b848:	80800044 	addi	r2,r16,1
 400b84c:	1081ffcc 	andi	r2,r2,2047
 400b850:	00c00044 	movi	r3,1
 400b854:	1880a00e 	bge	r3,r2,400bad8 <__adddf3+0x5b0>
 400b858:	8989c83a 	sub	r4,r17,r6
 400b85c:	8905803a 	cmpltu	r2,r17,r4
 400b860:	4267c83a 	sub	r19,r8,r9
 400b864:	98a7c83a 	sub	r19,r19,r2
 400b868:	9880202c 	andhi	r2,r19,128
 400b86c:	10006326 	beq	r2,zero,400b9fc <__adddf3+0x4d4>
 400b870:	3463c83a 	sub	r17,r6,r17
 400b874:	4a07c83a 	sub	r3,r9,r8
 400b878:	344d803a 	cmpltu	r6,r6,r17
 400b87c:	19a7c83a 	sub	r19,r3,r6
 400b880:	3825883a 	mov	r18,r7
 400b884:	983f8a1e 	bne	r19,zero,400b6b0 <__ram_exceptions_end+0xfbf83414>
 400b888:	8809883a 	mov	r4,r17
 400b88c:	400dd680 	call	400dd68 <__clzsi2>
 400b890:	10800804 	addi	r2,r2,32
 400b894:	10fffe04 	addi	r3,r2,-8
 400b898:	010007c4 	movi	r4,31
 400b89c:	20ff890e 	bge	r4,r3,400b6c4 <__ram_exceptions_end+0xfbf83428>
 400b8a0:	10bff604 	addi	r2,r2,-40
 400b8a4:	8884983a 	sll	r2,r17,r2
 400b8a8:	0023883a 	mov	r17,zero
 400b8ac:	1c3f8c0e 	bge	r3,r16,400b6e0 <__ram_exceptions_end+0xfbf83444>
 400b8b0:	023fe034 	movhi	r8,65408
 400b8b4:	423fffc4 	addi	r8,r8,-1
 400b8b8:	80e1c83a 	sub	r16,r16,r3
 400b8bc:	1210703a 	and	r8,r2,r8
 400b8c0:	003f3806 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400b8c4:	9007883a 	mov	r3,r18
 400b8c8:	0011883a 	mov	r8,zero
 400b8cc:	0005883a 	mov	r2,zero
 400b8d0:	003f4c06 	br	400b604 <__ram_exceptions_end+0xfbf83368>
 400b8d4:	498cb03a 	or	r6,r9,r6
 400b8d8:	300cc03a 	cmpne	r6,r6,zero
 400b8dc:	0007883a 	mov	r3,zero
 400b8e0:	003f6806 	br	400b684 <__ram_exceptions_end+0xfbf833e8>
 400b8e4:	20009c1e 	bne	r4,zero,400bb58 <__adddf3+0x630>
 400b8e8:	80800044 	addi	r2,r16,1
 400b8ec:	1141ffcc 	andi	r5,r2,2047
 400b8f0:	01000044 	movi	r4,1
 400b8f4:	2140670e 	bge	r4,r5,400ba94 <__adddf3+0x56c>
 400b8f8:	0101ffc4 	movi	r4,2047
 400b8fc:	11007f26 	beq	r2,r4,400bafc <__adddf3+0x5d4>
 400b900:	898d883a 	add	r6,r17,r6
 400b904:	4247883a 	add	r3,r8,r9
 400b908:	3451803a 	cmpltu	r8,r6,r17
 400b90c:	40d1883a 	add	r8,r8,r3
 400b910:	402297fa 	slli	r17,r8,31
 400b914:	300cd07a 	srli	r6,r6,1
 400b918:	4010d07a 	srli	r8,r8,1
 400b91c:	1021883a 	mov	r16,r2
 400b920:	89a2b03a 	or	r17,r17,r6
 400b924:	003f1f06 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400b928:	0081ffc4 	movi	r2,2047
 400b92c:	80bf481e 	bne	r16,r2,400b650 <__ram_exceptions_end+0xfbf833b4>
 400b930:	003f1c06 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400b934:	843ff844 	addi	r16,r16,-31
 400b938:	01000804 	movi	r4,32
 400b93c:	1406d83a 	srl	r3,r2,r16
 400b940:	41005026 	beq	r8,r4,400ba84 <__adddf3+0x55c>
 400b944:	01001004 	movi	r4,64
 400b948:	2211c83a 	sub	r8,r4,r8
 400b94c:	1204983a 	sll	r2,r2,r8
 400b950:	88a2b03a 	or	r17,r17,r2
 400b954:	8822c03a 	cmpne	r17,r17,zero
 400b958:	1c62b03a 	or	r17,r3,r17
 400b95c:	0011883a 	mov	r8,zero
 400b960:	0021883a 	mov	r16,zero
 400b964:	003f7106 	br	400b72c <__ram_exceptions_end+0xfbf83490>
 400b968:	193ff804 	addi	r4,r3,-32
 400b96c:	00800804 	movi	r2,32
 400b970:	4908d83a 	srl	r4,r9,r4
 400b974:	18804526 	beq	r3,r2,400ba8c <__adddf3+0x564>
 400b978:	00801004 	movi	r2,64
 400b97c:	10c5c83a 	sub	r2,r2,r3
 400b980:	4886983a 	sll	r3,r9,r2
 400b984:	198cb03a 	or	r6,r3,r6
 400b988:	300cc03a 	cmpne	r6,r6,zero
 400b98c:	218cb03a 	or	r6,r4,r6
 400b990:	0007883a 	mov	r3,zero
 400b994:	003f3b06 	br	400b684 <__ram_exceptions_end+0xfbf833e8>
 400b998:	80002a26 	beq	r16,zero,400ba44 <__adddf3+0x51c>
 400b99c:	0101ffc4 	movi	r4,2047
 400b9a0:	11006826 	beq	r2,r4,400bb44 <__adddf3+0x61c>
 400b9a4:	00c7c83a 	sub	r3,zero,r3
 400b9a8:	42002034 	orhi	r8,r8,128
 400b9ac:	01000e04 	movi	r4,56
 400b9b0:	20c07c16 	blt	r4,r3,400bba4 <__adddf3+0x67c>
 400b9b4:	010007c4 	movi	r4,31
 400b9b8:	20c0da16 	blt	r4,r3,400bd24 <__adddf3+0x7fc>
 400b9bc:	01000804 	movi	r4,32
 400b9c0:	20c9c83a 	sub	r4,r4,r3
 400b9c4:	4114983a 	sll	r10,r8,r4
 400b9c8:	88cad83a 	srl	r5,r17,r3
 400b9cc:	8908983a 	sll	r4,r17,r4
 400b9d0:	40c6d83a 	srl	r3,r8,r3
 400b9d4:	5162b03a 	or	r17,r10,r5
 400b9d8:	2008c03a 	cmpne	r4,r4,zero
 400b9dc:	8922b03a 	or	r17,r17,r4
 400b9e0:	3463c83a 	sub	r17,r6,r17
 400b9e4:	48c7c83a 	sub	r3,r9,r3
 400b9e8:	344d803a 	cmpltu	r6,r6,r17
 400b9ec:	1991c83a 	sub	r8,r3,r6
 400b9f0:	1021883a 	mov	r16,r2
 400b9f4:	3825883a 	mov	r18,r7
 400b9f8:	003f2706 	br	400b698 <__ram_exceptions_end+0xfbf833fc>
 400b9fc:	24d0b03a 	or	r8,r4,r19
 400ba00:	40001b1e 	bne	r8,zero,400ba70 <__adddf3+0x548>
 400ba04:	0005883a 	mov	r2,zero
 400ba08:	0007883a 	mov	r3,zero
 400ba0c:	0021883a 	mov	r16,zero
 400ba10:	003f4d06 	br	400b748 <__ram_exceptions_end+0xfbf834ac>
 400ba14:	008007c4 	movi	r2,31
 400ba18:	11003c16 	blt	r2,r4,400bb0c <__adddf3+0x5e4>
 400ba1c:	00800804 	movi	r2,32
 400ba20:	1105c83a 	sub	r2,r2,r4
 400ba24:	488e983a 	sll	r7,r9,r2
 400ba28:	310ad83a 	srl	r5,r6,r4
 400ba2c:	3084983a 	sll	r2,r6,r2
 400ba30:	4912d83a 	srl	r9,r9,r4
 400ba34:	394ab03a 	or	r5,r7,r5
 400ba38:	1004c03a 	cmpne	r2,r2,zero
 400ba3c:	288ab03a 	or	r5,r5,r2
 400ba40:	003f5306 	br	400b790 <__ram_exceptions_end+0xfbf834f4>
 400ba44:	4448b03a 	or	r4,r8,r17
 400ba48:	20003e26 	beq	r4,zero,400bb44 <__adddf3+0x61c>
 400ba4c:	00c6303a 	nor	r3,zero,r3
 400ba50:	18003a1e 	bne	r3,zero,400bb3c <__adddf3+0x614>
 400ba54:	3463c83a 	sub	r17,r6,r17
 400ba58:	4a07c83a 	sub	r3,r9,r8
 400ba5c:	344d803a 	cmpltu	r6,r6,r17
 400ba60:	1991c83a 	sub	r8,r3,r6
 400ba64:	1021883a 	mov	r16,r2
 400ba68:	3825883a 	mov	r18,r7
 400ba6c:	003f0a06 	br	400b698 <__ram_exceptions_end+0xfbf833fc>
 400ba70:	2023883a 	mov	r17,r4
 400ba74:	003f0d06 	br	400b6ac <__ram_exceptions_end+0xfbf83410>
 400ba78:	0081ffc4 	movi	r2,2047
 400ba7c:	80bf3f1e 	bne	r16,r2,400b77c <__ram_exceptions_end+0xfbf834e0>
 400ba80:	003ec806 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400ba84:	0005883a 	mov	r2,zero
 400ba88:	003fb106 	br	400b950 <__ram_exceptions_end+0xfbf836b4>
 400ba8c:	0007883a 	mov	r3,zero
 400ba90:	003fbc06 	br	400b984 <__ram_exceptions_end+0xfbf836e8>
 400ba94:	4444b03a 	or	r2,r8,r17
 400ba98:	8000871e 	bne	r16,zero,400bcb8 <__adddf3+0x790>
 400ba9c:	1000ba26 	beq	r2,zero,400bd88 <__adddf3+0x860>
 400baa0:	4984b03a 	or	r2,r9,r6
 400baa4:	103ebf26 	beq	r2,zero,400b5a4 <__ram_exceptions_end+0xfbf83308>
 400baa8:	8985883a 	add	r2,r17,r6
 400baac:	4247883a 	add	r3,r8,r9
 400bab0:	1451803a 	cmpltu	r8,r2,r17
 400bab4:	40d1883a 	add	r8,r8,r3
 400bab8:	40c0202c 	andhi	r3,r8,128
 400babc:	1023883a 	mov	r17,r2
 400bac0:	183f1a26 	beq	r3,zero,400b72c <__ram_exceptions_end+0xfbf83490>
 400bac4:	00bfe034 	movhi	r2,65408
 400bac8:	10bfffc4 	addi	r2,r2,-1
 400bacc:	2021883a 	mov	r16,r4
 400bad0:	4090703a 	and	r8,r8,r2
 400bad4:	003eb306 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400bad8:	4444b03a 	or	r2,r8,r17
 400badc:	8000291e 	bne	r16,zero,400bb84 <__adddf3+0x65c>
 400bae0:	10004b1e 	bne	r2,zero,400bc10 <__adddf3+0x6e8>
 400bae4:	4990b03a 	or	r8,r9,r6
 400bae8:	40008b26 	beq	r8,zero,400bd18 <__adddf3+0x7f0>
 400baec:	4811883a 	mov	r8,r9
 400baf0:	3023883a 	mov	r17,r6
 400baf4:	3825883a 	mov	r18,r7
 400baf8:	003eaa06 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400bafc:	1021883a 	mov	r16,r2
 400bb00:	0011883a 	mov	r8,zero
 400bb04:	0005883a 	mov	r2,zero
 400bb08:	003f0f06 	br	400b748 <__ram_exceptions_end+0xfbf834ac>
 400bb0c:	217ff804 	addi	r5,r4,-32
 400bb10:	00800804 	movi	r2,32
 400bb14:	494ad83a 	srl	r5,r9,r5
 400bb18:	20807d26 	beq	r4,r2,400bd10 <__adddf3+0x7e8>
 400bb1c:	00801004 	movi	r2,64
 400bb20:	1109c83a 	sub	r4,r2,r4
 400bb24:	4912983a 	sll	r9,r9,r4
 400bb28:	498cb03a 	or	r6,r9,r6
 400bb2c:	300cc03a 	cmpne	r6,r6,zero
 400bb30:	298ab03a 	or	r5,r5,r6
 400bb34:	0013883a 	mov	r9,zero
 400bb38:	003f1506 	br	400b790 <__ram_exceptions_end+0xfbf834f4>
 400bb3c:	0101ffc4 	movi	r4,2047
 400bb40:	113f9a1e 	bne	r2,r4,400b9ac <__ram_exceptions_end+0xfbf83710>
 400bb44:	4811883a 	mov	r8,r9
 400bb48:	3023883a 	mov	r17,r6
 400bb4c:	1021883a 	mov	r16,r2
 400bb50:	3825883a 	mov	r18,r7
 400bb54:	003e9306 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400bb58:	8000161e 	bne	r16,zero,400bbb4 <__adddf3+0x68c>
 400bb5c:	444ab03a 	or	r5,r8,r17
 400bb60:	28005126 	beq	r5,zero,400bca8 <__adddf3+0x780>
 400bb64:	0108303a 	nor	r4,zero,r4
 400bb68:	20004d1e 	bne	r4,zero,400bca0 <__adddf3+0x778>
 400bb6c:	89a3883a 	add	r17,r17,r6
 400bb70:	4253883a 	add	r9,r8,r9
 400bb74:	898d803a 	cmpltu	r6,r17,r6
 400bb78:	3251883a 	add	r8,r6,r9
 400bb7c:	1021883a 	mov	r16,r2
 400bb80:	003f0806 	br	400b7a4 <__ram_exceptions_end+0xfbf83508>
 400bb84:	1000301e 	bne	r2,zero,400bc48 <__adddf3+0x720>
 400bb88:	4984b03a 	or	r2,r9,r6
 400bb8c:	10007126 	beq	r2,zero,400bd54 <__adddf3+0x82c>
 400bb90:	4811883a 	mov	r8,r9
 400bb94:	3023883a 	mov	r17,r6
 400bb98:	3825883a 	mov	r18,r7
 400bb9c:	0401ffc4 	movi	r16,2047
 400bba0:	003e8006 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400bba4:	4462b03a 	or	r17,r8,r17
 400bba8:	8822c03a 	cmpne	r17,r17,zero
 400bbac:	0007883a 	mov	r3,zero
 400bbb0:	003f8b06 	br	400b9e0 <__ram_exceptions_end+0xfbf83744>
 400bbb4:	0141ffc4 	movi	r5,2047
 400bbb8:	11403b26 	beq	r2,r5,400bca8 <__adddf3+0x780>
 400bbbc:	0109c83a 	sub	r4,zero,r4
 400bbc0:	42002034 	orhi	r8,r8,128
 400bbc4:	01400e04 	movi	r5,56
 400bbc8:	29006716 	blt	r5,r4,400bd68 <__adddf3+0x840>
 400bbcc:	014007c4 	movi	r5,31
 400bbd0:	29007016 	blt	r5,r4,400bd94 <__adddf3+0x86c>
 400bbd4:	01400804 	movi	r5,32
 400bbd8:	290bc83a 	sub	r5,r5,r4
 400bbdc:	4154983a 	sll	r10,r8,r5
 400bbe0:	890ed83a 	srl	r7,r17,r4
 400bbe4:	894a983a 	sll	r5,r17,r5
 400bbe8:	4108d83a 	srl	r4,r8,r4
 400bbec:	51e2b03a 	or	r17,r10,r7
 400bbf0:	280ac03a 	cmpne	r5,r5,zero
 400bbf4:	8962b03a 	or	r17,r17,r5
 400bbf8:	89a3883a 	add	r17,r17,r6
 400bbfc:	2253883a 	add	r9,r4,r9
 400bc00:	898d803a 	cmpltu	r6,r17,r6
 400bc04:	3251883a 	add	r8,r6,r9
 400bc08:	1021883a 	mov	r16,r2
 400bc0c:	003ee506 	br	400b7a4 <__ram_exceptions_end+0xfbf83508>
 400bc10:	4984b03a 	or	r2,r9,r6
 400bc14:	103e6326 	beq	r2,zero,400b5a4 <__ram_exceptions_end+0xfbf83308>
 400bc18:	8987c83a 	sub	r3,r17,r6
 400bc1c:	88c9803a 	cmpltu	r4,r17,r3
 400bc20:	4245c83a 	sub	r2,r8,r9
 400bc24:	1105c83a 	sub	r2,r2,r4
 400bc28:	1100202c 	andhi	r4,r2,128
 400bc2c:	203ebb26 	beq	r4,zero,400b71c <__ram_exceptions_end+0xfbf83480>
 400bc30:	3463c83a 	sub	r17,r6,r17
 400bc34:	4a07c83a 	sub	r3,r9,r8
 400bc38:	344d803a 	cmpltu	r6,r6,r17
 400bc3c:	1991c83a 	sub	r8,r3,r6
 400bc40:	3825883a 	mov	r18,r7
 400bc44:	003e5706 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400bc48:	4984b03a 	or	r2,r9,r6
 400bc4c:	10002e26 	beq	r2,zero,400bd08 <__adddf3+0x7e0>
 400bc50:	4004d0fa 	srli	r2,r8,3
 400bc54:	8822d0fa 	srli	r17,r17,3
 400bc58:	4010977a 	slli	r8,r8,29
 400bc5c:	10c0022c 	andhi	r3,r2,8
 400bc60:	4462b03a 	or	r17,r8,r17
 400bc64:	18000826 	beq	r3,zero,400bc88 <__adddf3+0x760>
 400bc68:	4808d0fa 	srli	r4,r9,3
 400bc6c:	20c0022c 	andhi	r3,r4,8
 400bc70:	1800051e 	bne	r3,zero,400bc88 <__adddf3+0x760>
 400bc74:	300cd0fa 	srli	r6,r6,3
 400bc78:	4806977a 	slli	r3,r9,29
 400bc7c:	2005883a 	mov	r2,r4
 400bc80:	3825883a 	mov	r18,r7
 400bc84:	19a2b03a 	or	r17,r3,r6
 400bc88:	8810d77a 	srli	r8,r17,29
 400bc8c:	100490fa 	slli	r2,r2,3
 400bc90:	882290fa 	slli	r17,r17,3
 400bc94:	0401ffc4 	movi	r16,2047
 400bc98:	4090b03a 	or	r8,r8,r2
 400bc9c:	003e4106 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400bca0:	0141ffc4 	movi	r5,2047
 400bca4:	117fc71e 	bne	r2,r5,400bbc4 <__ram_exceptions_end+0xfbf83928>
 400bca8:	4811883a 	mov	r8,r9
 400bcac:	3023883a 	mov	r17,r6
 400bcb0:	1021883a 	mov	r16,r2
 400bcb4:	003e3b06 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400bcb8:	10002f26 	beq	r2,zero,400bd78 <__adddf3+0x850>
 400bcbc:	4984b03a 	or	r2,r9,r6
 400bcc0:	10001126 	beq	r2,zero,400bd08 <__adddf3+0x7e0>
 400bcc4:	4004d0fa 	srli	r2,r8,3
 400bcc8:	8822d0fa 	srli	r17,r17,3
 400bccc:	4010977a 	slli	r8,r8,29
 400bcd0:	10c0022c 	andhi	r3,r2,8
 400bcd4:	4462b03a 	or	r17,r8,r17
 400bcd8:	183feb26 	beq	r3,zero,400bc88 <__ram_exceptions_end+0xfbf839ec>
 400bcdc:	4808d0fa 	srli	r4,r9,3
 400bce0:	20c0022c 	andhi	r3,r4,8
 400bce4:	183fe81e 	bne	r3,zero,400bc88 <__ram_exceptions_end+0xfbf839ec>
 400bce8:	300cd0fa 	srli	r6,r6,3
 400bcec:	4806977a 	slli	r3,r9,29
 400bcf0:	2005883a 	mov	r2,r4
 400bcf4:	19a2b03a 	or	r17,r3,r6
 400bcf8:	003fe306 	br	400bc88 <__ram_exceptions_end+0xfbf839ec>
 400bcfc:	0011883a 	mov	r8,zero
 400bd00:	0005883a 	mov	r2,zero
 400bd04:	003e3f06 	br	400b604 <__ram_exceptions_end+0xfbf83368>
 400bd08:	0401ffc4 	movi	r16,2047
 400bd0c:	003e2506 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400bd10:	0013883a 	mov	r9,zero
 400bd14:	003f8406 	br	400bb28 <__ram_exceptions_end+0xfbf8388c>
 400bd18:	0005883a 	mov	r2,zero
 400bd1c:	0007883a 	mov	r3,zero
 400bd20:	003e8906 	br	400b748 <__ram_exceptions_end+0xfbf834ac>
 400bd24:	197ff804 	addi	r5,r3,-32
 400bd28:	01000804 	movi	r4,32
 400bd2c:	414ad83a 	srl	r5,r8,r5
 400bd30:	19002426 	beq	r3,r4,400bdc4 <__adddf3+0x89c>
 400bd34:	01001004 	movi	r4,64
 400bd38:	20c7c83a 	sub	r3,r4,r3
 400bd3c:	40c6983a 	sll	r3,r8,r3
 400bd40:	1c46b03a 	or	r3,r3,r17
 400bd44:	1806c03a 	cmpne	r3,r3,zero
 400bd48:	28e2b03a 	or	r17,r5,r3
 400bd4c:	0007883a 	mov	r3,zero
 400bd50:	003f2306 	br	400b9e0 <__ram_exceptions_end+0xfbf83744>
 400bd54:	0007883a 	mov	r3,zero
 400bd58:	5811883a 	mov	r8,r11
 400bd5c:	00bfffc4 	movi	r2,-1
 400bd60:	0401ffc4 	movi	r16,2047
 400bd64:	003e7806 	br	400b748 <__ram_exceptions_end+0xfbf834ac>
 400bd68:	4462b03a 	or	r17,r8,r17
 400bd6c:	8822c03a 	cmpne	r17,r17,zero
 400bd70:	0009883a 	mov	r4,zero
 400bd74:	003fa006 	br	400bbf8 <__ram_exceptions_end+0xfbf8395c>
 400bd78:	4811883a 	mov	r8,r9
 400bd7c:	3023883a 	mov	r17,r6
 400bd80:	0401ffc4 	movi	r16,2047
 400bd84:	003e0706 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400bd88:	4811883a 	mov	r8,r9
 400bd8c:	3023883a 	mov	r17,r6
 400bd90:	003e0406 	br	400b5a4 <__ram_exceptions_end+0xfbf83308>
 400bd94:	21fff804 	addi	r7,r4,-32
 400bd98:	01400804 	movi	r5,32
 400bd9c:	41ced83a 	srl	r7,r8,r7
 400bda0:	21400a26 	beq	r4,r5,400bdcc <__adddf3+0x8a4>
 400bda4:	01401004 	movi	r5,64
 400bda8:	2909c83a 	sub	r4,r5,r4
 400bdac:	4108983a 	sll	r4,r8,r4
 400bdb0:	2448b03a 	or	r4,r4,r17
 400bdb4:	2008c03a 	cmpne	r4,r4,zero
 400bdb8:	3922b03a 	or	r17,r7,r4
 400bdbc:	0009883a 	mov	r4,zero
 400bdc0:	003f8d06 	br	400bbf8 <__ram_exceptions_end+0xfbf8395c>
 400bdc4:	0007883a 	mov	r3,zero
 400bdc8:	003fdd06 	br	400bd40 <__ram_exceptions_end+0xfbf83aa4>
 400bdcc:	0009883a 	mov	r4,zero
 400bdd0:	003ff706 	br	400bdb0 <__ram_exceptions_end+0xfbf83b14>

0400bdd4 <__divdf3>:
 400bdd4:	defff004 	addi	sp,sp,-64
 400bdd8:	dc800815 	stw	r18,32(sp)
 400bddc:	2824d53a 	srli	r18,r5,20
 400bde0:	dd800c15 	stw	r22,48(sp)
 400bde4:	282cd7fa 	srli	r22,r5,31
 400bde8:	dc000615 	stw	r16,24(sp)
 400bdec:	04000434 	movhi	r16,16
 400bdf0:	843fffc4 	addi	r16,r16,-1
 400bdf4:	dfc00f15 	stw	ra,60(sp)
 400bdf8:	df000e15 	stw	fp,56(sp)
 400bdfc:	ddc00d15 	stw	r23,52(sp)
 400be00:	dd400b15 	stw	r21,44(sp)
 400be04:	dd000a15 	stw	r20,40(sp)
 400be08:	dcc00915 	stw	r19,36(sp)
 400be0c:	dc400715 	stw	r17,28(sp)
 400be10:	9481ffcc 	andi	r18,r18,2047
 400be14:	2c20703a 	and	r16,r5,r16
 400be18:	b2003fcc 	andi	r8,r22,255
 400be1c:	90006126 	beq	r18,zero,400bfa4 <__divdf3+0x1d0>
 400be20:	0081ffc4 	movi	r2,2047
 400be24:	202b883a 	mov	r21,r4
 400be28:	90803726 	beq	r18,r2,400bf08 <__divdf3+0x134>
 400be2c:	80800434 	orhi	r2,r16,16
 400be30:	100490fa 	slli	r2,r2,3
 400be34:	2020d77a 	srli	r16,r4,29
 400be38:	202a90fa 	slli	r21,r4,3
 400be3c:	94bf0044 	addi	r18,r18,-1023
 400be40:	80a0b03a 	or	r16,r16,r2
 400be44:	0013883a 	mov	r9,zero
 400be48:	000b883a 	mov	r5,zero
 400be4c:	3806d53a 	srli	r3,r7,20
 400be50:	382ed7fa 	srli	r23,r7,31
 400be54:	04400434 	movhi	r17,16
 400be58:	8c7fffc4 	addi	r17,r17,-1
 400be5c:	18c1ffcc 	andi	r3,r3,2047
 400be60:	3029883a 	mov	r20,r6
 400be64:	3c62703a 	and	r17,r7,r17
 400be68:	bf003fcc 	andi	fp,r23,255
 400be6c:	18006e26 	beq	r3,zero,400c028 <__divdf3+0x254>
 400be70:	0081ffc4 	movi	r2,2047
 400be74:	18806626 	beq	r3,r2,400c010 <__divdf3+0x23c>
 400be78:	88800434 	orhi	r2,r17,16
 400be7c:	100490fa 	slli	r2,r2,3
 400be80:	3022d77a 	srli	r17,r6,29
 400be84:	302890fa 	slli	r20,r6,3
 400be88:	18ff0044 	addi	r3,r3,-1023
 400be8c:	88a2b03a 	or	r17,r17,r2
 400be90:	000f883a 	mov	r7,zero
 400be94:	b5e6f03a 	xor	r19,r22,r23
 400be98:	3a4cb03a 	or	r6,r7,r9
 400be9c:	008003c4 	movi	r2,15
 400bea0:	9809883a 	mov	r4,r19
 400bea4:	90c7c83a 	sub	r3,r18,r3
 400bea8:	9cc03fcc 	andi	r19,r19,255
 400beac:	11809636 	bltu	r2,r6,400c108 <__divdf3+0x334>
 400beb0:	300c90ba 	slli	r6,r6,2
 400beb4:	00810074 	movhi	r2,1025
 400beb8:	10afb204 	addi	r2,r2,-16696
 400bebc:	308d883a 	add	r6,r6,r2
 400bec0:	30800017 	ldw	r2,0(r6)
 400bec4:	1000683a 	jmp	r2
 400bec8:	0400c108 	cmpgei	r16,zero,772
 400becc:	0400bf40 	call	400bf4 <alt_exception_trap+0x400bf4>
 400bed0:	0400c0f8 	rdprs	r16,zero,771
 400bed4:	0400bf34 	movhi	r16,764
 400bed8:	0400c0f8 	rdprs	r16,zero,771
 400bedc:	0400c0cc 	andi	r16,zero,771
 400bee0:	0400c0f8 	rdprs	r16,zero,771
 400bee4:	0400bf34 	movhi	r16,764
 400bee8:	0400bf40 	call	400bf4 <alt_exception_trap+0x400bf4>
 400beec:	0400bf40 	call	400bf4 <alt_exception_trap+0x400bf4>
 400bef0:	0400c0cc 	andi	r16,zero,771
 400bef4:	0400bf34 	movhi	r16,764
 400bef8:	0400bf24 	muli	r16,zero,764
 400befc:	0400bf24 	muli	r16,zero,764
 400bf00:	0400bf24 	muli	r16,zero,764
 400bf04:	0400c490 	cmplti	r16,zero,786
 400bf08:	2404b03a 	or	r2,r4,r16
 400bf0c:	10006c1e 	bne	r2,zero,400c0c0 <__divdf3+0x2ec>
 400bf10:	02400204 	movi	r9,8
 400bf14:	0021883a 	mov	r16,zero
 400bf18:	002b883a 	mov	r21,zero
 400bf1c:	01400084 	movi	r5,2
 400bf20:	003fca06 	br	400be4c <__ram_exceptions_end+0xfbf83bb0>
 400bf24:	8023883a 	mov	r17,r16
 400bf28:	a829883a 	mov	r20,r21
 400bf2c:	4039883a 	mov	fp,r8
 400bf30:	280f883a 	mov	r7,r5
 400bf34:	00800084 	movi	r2,2
 400bf38:	3881601e 	bne	r7,r2,400c4bc <__divdf3+0x6e8>
 400bf3c:	e027883a 	mov	r19,fp
 400bf40:	9900004c 	andi	r4,r19,1
 400bf44:	0081ffc4 	movi	r2,2047
 400bf48:	0021883a 	mov	r16,zero
 400bf4c:	002b883a 	mov	r21,zero
 400bf50:	1004953a 	slli	r2,r2,20
 400bf54:	20c03fcc 	andi	r3,r4,255
 400bf58:	01400434 	movhi	r5,16
 400bf5c:	297fffc4 	addi	r5,r5,-1
 400bf60:	180697fa 	slli	r3,r3,31
 400bf64:	8160703a 	and	r16,r16,r5
 400bf68:	80a0b03a 	or	r16,r16,r2
 400bf6c:	80c6b03a 	or	r3,r16,r3
 400bf70:	a805883a 	mov	r2,r21
 400bf74:	dfc00f17 	ldw	ra,60(sp)
 400bf78:	df000e17 	ldw	fp,56(sp)
 400bf7c:	ddc00d17 	ldw	r23,52(sp)
 400bf80:	dd800c17 	ldw	r22,48(sp)
 400bf84:	dd400b17 	ldw	r21,44(sp)
 400bf88:	dd000a17 	ldw	r20,40(sp)
 400bf8c:	dcc00917 	ldw	r19,36(sp)
 400bf90:	dc800817 	ldw	r18,32(sp)
 400bf94:	dc400717 	ldw	r17,28(sp)
 400bf98:	dc000617 	ldw	r16,24(sp)
 400bf9c:	dec01004 	addi	sp,sp,64
 400bfa0:	f800283a 	ret
 400bfa4:	2404b03a 	or	r2,r4,r16
 400bfa8:	2023883a 	mov	r17,r4
 400bfac:	10003f26 	beq	r2,zero,400c0ac <__divdf3+0x2d8>
 400bfb0:	80015e26 	beq	r16,zero,400c52c <__divdf3+0x758>
 400bfb4:	8009883a 	mov	r4,r16
 400bfb8:	d9800215 	stw	r6,8(sp)
 400bfbc:	d9c00515 	stw	r7,20(sp)
 400bfc0:	da000415 	stw	r8,16(sp)
 400bfc4:	400dd680 	call	400dd68 <__clzsi2>
 400bfc8:	d9800217 	ldw	r6,8(sp)
 400bfcc:	d9c00517 	ldw	r7,20(sp)
 400bfd0:	da000417 	ldw	r8,16(sp)
 400bfd4:	113ffd44 	addi	r4,r2,-11
 400bfd8:	00c00704 	movi	r3,28
 400bfdc:	19014f16 	blt	r3,r4,400c51c <__divdf3+0x748>
 400bfe0:	00c00744 	movi	r3,29
 400bfe4:	157ffe04 	addi	r21,r2,-8
 400bfe8:	1907c83a 	sub	r3,r3,r4
 400bfec:	8560983a 	sll	r16,r16,r21
 400bff0:	88c6d83a 	srl	r3,r17,r3
 400bff4:	8d6a983a 	sll	r21,r17,r21
 400bff8:	1c20b03a 	or	r16,r3,r16
 400bffc:	1080fcc4 	addi	r2,r2,1011
 400c000:	00a5c83a 	sub	r18,zero,r2
 400c004:	0013883a 	mov	r9,zero
 400c008:	000b883a 	mov	r5,zero
 400c00c:	003f8f06 	br	400be4c <__ram_exceptions_end+0xfbf83bb0>
 400c010:	3444b03a 	or	r2,r6,r17
 400c014:	1000231e 	bne	r2,zero,400c0a4 <__divdf3+0x2d0>
 400c018:	0023883a 	mov	r17,zero
 400c01c:	0029883a 	mov	r20,zero
 400c020:	01c00084 	movi	r7,2
 400c024:	003f9b06 	br	400be94 <__ram_exceptions_end+0xfbf83bf8>
 400c028:	3444b03a 	or	r2,r6,r17
 400c02c:	10001926 	beq	r2,zero,400c094 <__divdf3+0x2c0>
 400c030:	88014b26 	beq	r17,zero,400c560 <__divdf3+0x78c>
 400c034:	8809883a 	mov	r4,r17
 400c038:	d9400115 	stw	r5,4(sp)
 400c03c:	d9800215 	stw	r6,8(sp)
 400c040:	da000415 	stw	r8,16(sp)
 400c044:	da400315 	stw	r9,12(sp)
 400c048:	400dd680 	call	400dd68 <__clzsi2>
 400c04c:	d9400117 	ldw	r5,4(sp)
 400c050:	d9800217 	ldw	r6,8(sp)
 400c054:	da000417 	ldw	r8,16(sp)
 400c058:	da400317 	ldw	r9,12(sp)
 400c05c:	113ffd44 	addi	r4,r2,-11
 400c060:	00c00704 	movi	r3,28
 400c064:	19013a16 	blt	r3,r4,400c550 <__divdf3+0x77c>
 400c068:	00c00744 	movi	r3,29
 400c06c:	153ffe04 	addi	r20,r2,-8
 400c070:	1907c83a 	sub	r3,r3,r4
 400c074:	8d22983a 	sll	r17,r17,r20
 400c078:	30c6d83a 	srl	r3,r6,r3
 400c07c:	3528983a 	sll	r20,r6,r20
 400c080:	1c62b03a 	or	r17,r3,r17
 400c084:	1080fcc4 	addi	r2,r2,1011
 400c088:	0087c83a 	sub	r3,zero,r2
 400c08c:	000f883a 	mov	r7,zero
 400c090:	003f8006 	br	400be94 <__ram_exceptions_end+0xfbf83bf8>
 400c094:	0023883a 	mov	r17,zero
 400c098:	0029883a 	mov	r20,zero
 400c09c:	01c00044 	movi	r7,1
 400c0a0:	003f7c06 	br	400be94 <__ram_exceptions_end+0xfbf83bf8>
 400c0a4:	01c000c4 	movi	r7,3
 400c0a8:	003f7a06 	br	400be94 <__ram_exceptions_end+0xfbf83bf8>
 400c0ac:	02400104 	movi	r9,4
 400c0b0:	0021883a 	mov	r16,zero
 400c0b4:	002b883a 	mov	r21,zero
 400c0b8:	01400044 	movi	r5,1
 400c0bc:	003f6306 	br	400be4c <__ram_exceptions_end+0xfbf83bb0>
 400c0c0:	02400304 	movi	r9,12
 400c0c4:	014000c4 	movi	r5,3
 400c0c8:	003f6006 	br	400be4c <__ram_exceptions_end+0xfbf83bb0>
 400c0cc:	04000434 	movhi	r16,16
 400c0d0:	0009883a 	mov	r4,zero
 400c0d4:	843fffc4 	addi	r16,r16,-1
 400c0d8:	057fffc4 	movi	r21,-1
 400c0dc:	0081ffc4 	movi	r2,2047
 400c0e0:	003f9b06 	br	400bf50 <__ram_exceptions_end+0xfbf83cb4>
 400c0e4:	00c00044 	movi	r3,1
 400c0e8:	1887c83a 	sub	r3,r3,r2
 400c0ec:	01000e04 	movi	r4,56
 400c0f0:	20c1530e 	bge	r4,r3,400c640 <__divdf3+0x86c>
 400c0f4:	9900004c 	andi	r4,r19,1
 400c0f8:	0005883a 	mov	r2,zero
 400c0fc:	0021883a 	mov	r16,zero
 400c100:	002b883a 	mov	r21,zero
 400c104:	003f9206 	br	400bf50 <__ram_exceptions_end+0xfbf83cb4>
 400c108:	8c012e36 	bltu	r17,r16,400c5c4 <__divdf3+0x7f0>
 400c10c:	84412c26 	beq	r16,r17,400c5c0 <__divdf3+0x7ec>
 400c110:	a82f883a 	mov	r23,r21
 400c114:	18ffffc4 	addi	r3,r3,-1
 400c118:	002b883a 	mov	r21,zero
 400c11c:	a004d63a 	srli	r2,r20,24
 400c120:	8822923a 	slli	r17,r17,8
 400c124:	a028923a 	slli	r20,r20,8
 400c128:	8009883a 	mov	r4,r16
 400c12c:	88acb03a 	or	r22,r17,r2
 400c130:	dd000015 	stw	r20,0(sp)
 400c134:	b028d43a 	srli	r20,r22,16
 400c138:	d8c00215 	stw	r3,8(sp)
 400c13c:	b4bfffcc 	andi	r18,r22,65535
 400c140:	a00b883a 	mov	r5,r20
 400c144:	40010580 	call	4001058 <__udivsi3>
 400c148:	100b883a 	mov	r5,r2
 400c14c:	9009883a 	mov	r4,r18
 400c150:	1023883a 	mov	r17,r2
 400c154:	40011140 	call	4001114 <__mulsi3>
 400c158:	8009883a 	mov	r4,r16
 400c15c:	a00b883a 	mov	r5,r20
 400c160:	1039883a 	mov	fp,r2
 400c164:	40010bc0 	call	40010bc <__umodsi3>
 400c168:	1004943a 	slli	r2,r2,16
 400c16c:	b808d43a 	srli	r4,r23,16
 400c170:	d8c00217 	ldw	r3,8(sp)
 400c174:	2084b03a 	or	r2,r4,r2
 400c178:	1700062e 	bgeu	r2,fp,400c194 <__divdf3+0x3c0>
 400c17c:	1585883a 	add	r2,r2,r22
 400c180:	893fffc4 	addi	r4,r17,-1
 400c184:	15811d36 	bltu	r2,r22,400c5fc <__divdf3+0x828>
 400c188:	17011c2e 	bgeu	r2,fp,400c5fc <__divdf3+0x828>
 400c18c:	8c7fff84 	addi	r17,r17,-2
 400c190:	1585883a 	add	r2,r2,r22
 400c194:	1739c83a 	sub	fp,r2,fp
 400c198:	a00b883a 	mov	r5,r20
 400c19c:	e009883a 	mov	r4,fp
 400c1a0:	d8c00215 	stw	r3,8(sp)
 400c1a4:	40010580 	call	4001058 <__udivsi3>
 400c1a8:	100b883a 	mov	r5,r2
 400c1ac:	9009883a 	mov	r4,r18
 400c1b0:	1021883a 	mov	r16,r2
 400c1b4:	40011140 	call	4001114 <__mulsi3>
 400c1b8:	a00b883a 	mov	r5,r20
 400c1bc:	e009883a 	mov	r4,fp
 400c1c0:	d8800415 	stw	r2,16(sp)
 400c1c4:	40010bc0 	call	40010bc <__umodsi3>
 400c1c8:	1004943a 	slli	r2,r2,16
 400c1cc:	da000417 	ldw	r8,16(sp)
 400c1d0:	bdffffcc 	andi	r23,r23,65535
 400c1d4:	b884b03a 	or	r2,r23,r2
 400c1d8:	d8c00217 	ldw	r3,8(sp)
 400c1dc:	1200062e 	bgeu	r2,r8,400c1f8 <__divdf3+0x424>
 400c1e0:	1585883a 	add	r2,r2,r22
 400c1e4:	813fffc4 	addi	r4,r16,-1
 400c1e8:	15810236 	bltu	r2,r22,400c5f4 <__divdf3+0x820>
 400c1ec:	1201012e 	bgeu	r2,r8,400c5f4 <__divdf3+0x820>
 400c1f0:	843fff84 	addi	r16,r16,-2
 400c1f4:	1585883a 	add	r2,r2,r22
 400c1f8:	8822943a 	slli	r17,r17,16
 400c1fc:	d9800017 	ldw	r6,0(sp)
 400c200:	1211c83a 	sub	r8,r2,r8
 400c204:	8c22b03a 	or	r17,r17,r16
 400c208:	373fffcc 	andi	fp,r6,65535
 400c20c:	8abfffcc 	andi	r10,r17,65535
 400c210:	8820d43a 	srli	r16,r17,16
 400c214:	5009883a 	mov	r4,r10
 400c218:	e00b883a 	mov	r5,fp
 400c21c:	302ed43a 	srli	r23,r6,16
 400c220:	d8c00215 	stw	r3,8(sp)
 400c224:	da000415 	stw	r8,16(sp)
 400c228:	da800115 	stw	r10,4(sp)
 400c22c:	40011140 	call	4001114 <__mulsi3>
 400c230:	800b883a 	mov	r5,r16
 400c234:	e009883a 	mov	r4,fp
 400c238:	d8800515 	stw	r2,20(sp)
 400c23c:	40011140 	call	4001114 <__mulsi3>
 400c240:	8009883a 	mov	r4,r16
 400c244:	b80b883a 	mov	r5,r23
 400c248:	d8800315 	stw	r2,12(sp)
 400c24c:	40011140 	call	4001114 <__mulsi3>
 400c250:	da800117 	ldw	r10,4(sp)
 400c254:	b80b883a 	mov	r5,r23
 400c258:	1021883a 	mov	r16,r2
 400c25c:	5009883a 	mov	r4,r10
 400c260:	40011140 	call	4001114 <__mulsi3>
 400c264:	d9c00517 	ldw	r7,20(sp)
 400c268:	da400317 	ldw	r9,12(sp)
 400c26c:	d8c00217 	ldw	r3,8(sp)
 400c270:	3808d43a 	srli	r4,r7,16
 400c274:	1245883a 	add	r2,r2,r9
 400c278:	da000417 	ldw	r8,16(sp)
 400c27c:	2085883a 	add	r2,r4,r2
 400c280:	1240022e 	bgeu	r2,r9,400c28c <__divdf3+0x4b8>
 400c284:	01000074 	movhi	r4,1
 400c288:	8121883a 	add	r16,r16,r4
 400c28c:	1008d43a 	srli	r4,r2,16
 400c290:	1004943a 	slli	r2,r2,16
 400c294:	39ffffcc 	andi	r7,r7,65535
 400c298:	2409883a 	add	r4,r4,r16
 400c29c:	11c5883a 	add	r2,r2,r7
 400c2a0:	4100bb36 	bltu	r8,r4,400c590 <__divdf3+0x7bc>
 400c2a4:	4100d726 	beq	r8,r4,400c604 <__divdf3+0x830>
 400c2a8:	4109c83a 	sub	r4,r8,r4
 400c2ac:	a8a1c83a 	sub	r16,r21,r2
 400c2b0:	ac2b803a 	cmpltu	r21,r21,r16
 400c2b4:	256bc83a 	sub	r21,r4,r21
 400c2b8:	b540d926 	beq	r22,r21,400c620 <__divdf3+0x84c>
 400c2bc:	a00b883a 	mov	r5,r20
 400c2c0:	a809883a 	mov	r4,r21
 400c2c4:	d8c00215 	stw	r3,8(sp)
 400c2c8:	40010580 	call	4001058 <__udivsi3>
 400c2cc:	100b883a 	mov	r5,r2
 400c2d0:	9009883a 	mov	r4,r18
 400c2d4:	d8800515 	stw	r2,20(sp)
 400c2d8:	40011140 	call	4001114 <__mulsi3>
 400c2dc:	a809883a 	mov	r4,r21
 400c2e0:	a00b883a 	mov	r5,r20
 400c2e4:	d8800415 	stw	r2,16(sp)
 400c2e8:	40010bc0 	call	40010bc <__umodsi3>
 400c2ec:	1004943a 	slli	r2,r2,16
 400c2f0:	8008d43a 	srli	r4,r16,16
 400c2f4:	da000417 	ldw	r8,16(sp)
 400c2f8:	d8c00217 	ldw	r3,8(sp)
 400c2fc:	2084b03a 	or	r2,r4,r2
 400c300:	d9c00517 	ldw	r7,20(sp)
 400c304:	1200062e 	bgeu	r2,r8,400c320 <__divdf3+0x54c>
 400c308:	1585883a 	add	r2,r2,r22
 400c30c:	393fffc4 	addi	r4,r7,-1
 400c310:	1580c536 	bltu	r2,r22,400c628 <__divdf3+0x854>
 400c314:	1200c42e 	bgeu	r2,r8,400c628 <__divdf3+0x854>
 400c318:	39ffff84 	addi	r7,r7,-2
 400c31c:	1585883a 	add	r2,r2,r22
 400c320:	122bc83a 	sub	r21,r2,r8
 400c324:	a00b883a 	mov	r5,r20
 400c328:	a809883a 	mov	r4,r21
 400c32c:	d8c00215 	stw	r3,8(sp)
 400c330:	d9c00515 	stw	r7,20(sp)
 400c334:	40010580 	call	4001058 <__udivsi3>
 400c338:	9009883a 	mov	r4,r18
 400c33c:	100b883a 	mov	r5,r2
 400c340:	d8800415 	stw	r2,16(sp)
 400c344:	40011140 	call	4001114 <__mulsi3>
 400c348:	a809883a 	mov	r4,r21
 400c34c:	a00b883a 	mov	r5,r20
 400c350:	1025883a 	mov	r18,r2
 400c354:	40010bc0 	call	40010bc <__umodsi3>
 400c358:	1004943a 	slli	r2,r2,16
 400c35c:	813fffcc 	andi	r4,r16,65535
 400c360:	d8c00217 	ldw	r3,8(sp)
 400c364:	20a0b03a 	or	r16,r4,r2
 400c368:	d9c00517 	ldw	r7,20(sp)
 400c36c:	da000417 	ldw	r8,16(sp)
 400c370:	8480062e 	bgeu	r16,r18,400c38c <__divdf3+0x5b8>
 400c374:	85a1883a 	add	r16,r16,r22
 400c378:	40bfffc4 	addi	r2,r8,-1
 400c37c:	8580ac36 	bltu	r16,r22,400c630 <__divdf3+0x85c>
 400c380:	8480ab2e 	bgeu	r16,r18,400c630 <__divdf3+0x85c>
 400c384:	423fff84 	addi	r8,r8,-2
 400c388:	85a1883a 	add	r16,r16,r22
 400c38c:	3804943a 	slli	r2,r7,16
 400c390:	84a1c83a 	sub	r16,r16,r18
 400c394:	e009883a 	mov	r4,fp
 400c398:	1228b03a 	or	r20,r2,r8
 400c39c:	a1ffffcc 	andi	r7,r20,65535
 400c3a0:	a024d43a 	srli	r18,r20,16
 400c3a4:	380b883a 	mov	r5,r7
 400c3a8:	d8c00215 	stw	r3,8(sp)
 400c3ac:	d9c00515 	stw	r7,20(sp)
 400c3b0:	40011140 	call	4001114 <__mulsi3>
 400c3b4:	900b883a 	mov	r5,r18
 400c3b8:	e009883a 	mov	r4,fp
 400c3bc:	102b883a 	mov	r21,r2
 400c3c0:	40011140 	call	4001114 <__mulsi3>
 400c3c4:	900b883a 	mov	r5,r18
 400c3c8:	b809883a 	mov	r4,r23
 400c3cc:	1039883a 	mov	fp,r2
 400c3d0:	40011140 	call	4001114 <__mulsi3>
 400c3d4:	d9c00517 	ldw	r7,20(sp)
 400c3d8:	b80b883a 	mov	r5,r23
 400c3dc:	1025883a 	mov	r18,r2
 400c3e0:	3809883a 	mov	r4,r7
 400c3e4:	40011140 	call	4001114 <__mulsi3>
 400c3e8:	a808d43a 	srli	r4,r21,16
 400c3ec:	1705883a 	add	r2,r2,fp
 400c3f0:	d8c00217 	ldw	r3,8(sp)
 400c3f4:	2085883a 	add	r2,r4,r2
 400c3f8:	1700022e 	bgeu	r2,fp,400c404 <__divdf3+0x630>
 400c3fc:	01000074 	movhi	r4,1
 400c400:	9125883a 	add	r18,r18,r4
 400c404:	1008d43a 	srli	r4,r2,16
 400c408:	1004943a 	slli	r2,r2,16
 400c40c:	ad7fffcc 	andi	r21,r21,65535
 400c410:	2489883a 	add	r4,r4,r18
 400c414:	1545883a 	add	r2,r2,r21
 400c418:	81003836 	bltu	r16,r4,400c4fc <__divdf3+0x728>
 400c41c:	81003626 	beq	r16,r4,400c4f8 <__divdf3+0x724>
 400c420:	a5000054 	ori	r20,r20,1
 400c424:	1880ffc4 	addi	r2,r3,1023
 400c428:	00bf2e0e 	bge	zero,r2,400c0e4 <__ram_exceptions_end+0xfbf83e48>
 400c42c:	a10001cc 	andi	r4,r20,7
 400c430:	20000726 	beq	r4,zero,400c450 <__divdf3+0x67c>
 400c434:	a10003cc 	andi	r4,r20,15
 400c438:	01400104 	movi	r5,4
 400c43c:	21400426 	beq	r4,r5,400c450 <__divdf3+0x67c>
 400c440:	a149883a 	add	r4,r20,r5
 400c444:	2529803a 	cmpltu	r20,r4,r20
 400c448:	8d23883a 	add	r17,r17,r20
 400c44c:	2029883a 	mov	r20,r4
 400c450:	8900402c 	andhi	r4,r17,256
 400c454:	20000426 	beq	r4,zero,400c468 <__divdf3+0x694>
 400c458:	18810004 	addi	r2,r3,1024
 400c45c:	00ffc034 	movhi	r3,65280
 400c460:	18ffffc4 	addi	r3,r3,-1
 400c464:	88e2703a 	and	r17,r17,r3
 400c468:	00c1ff84 	movi	r3,2046
 400c46c:	18beb416 	blt	r3,r2,400bf40 <__ram_exceptions_end+0xfbf83ca4>
 400c470:	a028d0fa 	srli	r20,r20,3
 400c474:	882a977a 	slli	r21,r17,29
 400c478:	8820927a 	slli	r16,r17,9
 400c47c:	1081ffcc 	andi	r2,r2,2047
 400c480:	ad2ab03a 	or	r21,r21,r20
 400c484:	8020d33a 	srli	r16,r16,12
 400c488:	9900004c 	andi	r4,r19,1
 400c48c:	003eb006 	br	400bf50 <__ram_exceptions_end+0xfbf83cb4>
 400c490:	8080022c 	andhi	r2,r16,8
 400c494:	10001226 	beq	r2,zero,400c4e0 <__divdf3+0x70c>
 400c498:	8880022c 	andhi	r2,r17,8
 400c49c:	1000101e 	bne	r2,zero,400c4e0 <__divdf3+0x70c>
 400c4a0:	00800434 	movhi	r2,16
 400c4a4:	8c000234 	orhi	r16,r17,8
 400c4a8:	10bfffc4 	addi	r2,r2,-1
 400c4ac:	b809883a 	mov	r4,r23
 400c4b0:	80a0703a 	and	r16,r16,r2
 400c4b4:	a02b883a 	mov	r21,r20
 400c4b8:	003f0806 	br	400c0dc <__ram_exceptions_end+0xfbf83e40>
 400c4bc:	008000c4 	movi	r2,3
 400c4c0:	3880b126 	beq	r7,r2,400c788 <__divdf3+0x9b4>
 400c4c4:	00800044 	movi	r2,1
 400c4c8:	38805b1e 	bne	r7,r2,400c638 <__divdf3+0x864>
 400c4cc:	e009883a 	mov	r4,fp
 400c4d0:	0005883a 	mov	r2,zero
 400c4d4:	0021883a 	mov	r16,zero
 400c4d8:	002b883a 	mov	r21,zero
 400c4dc:	003e9c06 	br	400bf50 <__ram_exceptions_end+0xfbf83cb4>
 400c4e0:	00800434 	movhi	r2,16
 400c4e4:	84000234 	orhi	r16,r16,8
 400c4e8:	10bfffc4 	addi	r2,r2,-1
 400c4ec:	b009883a 	mov	r4,r22
 400c4f0:	80a0703a 	and	r16,r16,r2
 400c4f4:	003ef906 	br	400c0dc <__ram_exceptions_end+0xfbf83e40>
 400c4f8:	103fca26 	beq	r2,zero,400c424 <__ram_exceptions_end+0xfbf84188>
 400c4fc:	b421883a 	add	r16,r22,r16
 400c500:	a17fffc4 	addi	r5,r20,-1
 400c504:	8580422e 	bgeu	r16,r22,400c610 <__divdf3+0x83c>
 400c508:	2829883a 	mov	r20,r5
 400c50c:	813fc41e 	bne	r16,r4,400c420 <__ram_exceptions_end+0xfbf84184>
 400c510:	d9800017 	ldw	r6,0(sp)
 400c514:	30bfc21e 	bne	r6,r2,400c420 <__ram_exceptions_end+0xfbf84184>
 400c518:	003fc206 	br	400c424 <__ram_exceptions_end+0xfbf84188>
 400c51c:	143ff604 	addi	r16,r2,-40
 400c520:	8c20983a 	sll	r16,r17,r16
 400c524:	002b883a 	mov	r21,zero
 400c528:	003eb406 	br	400bffc <__ram_exceptions_end+0xfbf83d60>
 400c52c:	d9800215 	stw	r6,8(sp)
 400c530:	d9c00515 	stw	r7,20(sp)
 400c534:	da000415 	stw	r8,16(sp)
 400c538:	400dd680 	call	400dd68 <__clzsi2>
 400c53c:	10800804 	addi	r2,r2,32
 400c540:	da000417 	ldw	r8,16(sp)
 400c544:	d9c00517 	ldw	r7,20(sp)
 400c548:	d9800217 	ldw	r6,8(sp)
 400c54c:	003ea106 	br	400bfd4 <__ram_exceptions_end+0xfbf83d38>
 400c550:	147ff604 	addi	r17,r2,-40
 400c554:	3462983a 	sll	r17,r6,r17
 400c558:	0029883a 	mov	r20,zero
 400c55c:	003ec906 	br	400c084 <__ram_exceptions_end+0xfbf83de8>
 400c560:	3009883a 	mov	r4,r6
 400c564:	d9400115 	stw	r5,4(sp)
 400c568:	d9800215 	stw	r6,8(sp)
 400c56c:	da000415 	stw	r8,16(sp)
 400c570:	da400315 	stw	r9,12(sp)
 400c574:	400dd680 	call	400dd68 <__clzsi2>
 400c578:	10800804 	addi	r2,r2,32
 400c57c:	da400317 	ldw	r9,12(sp)
 400c580:	da000417 	ldw	r8,16(sp)
 400c584:	d9800217 	ldw	r6,8(sp)
 400c588:	d9400117 	ldw	r5,4(sp)
 400c58c:	003eb306 	br	400c05c <__ram_exceptions_end+0xfbf83dc0>
 400c590:	d9800017 	ldw	r6,0(sp)
 400c594:	a9ab883a 	add	r21,r21,r6
 400c598:	a98b803a 	cmpltu	r5,r21,r6
 400c59c:	2d8b883a 	add	r5,r5,r22
 400c5a0:	2a11883a 	add	r8,r5,r8
 400c5a4:	897fffc4 	addi	r5,r17,-1
 400c5a8:	b2000c2e 	bgeu	r22,r8,400c5dc <__divdf3+0x808>
 400c5ac:	41003f36 	bltu	r8,r4,400c6ac <__divdf3+0x8d8>
 400c5b0:	22006c26 	beq	r4,r8,400c764 <__divdf3+0x990>
 400c5b4:	4109c83a 	sub	r4,r8,r4
 400c5b8:	2823883a 	mov	r17,r5
 400c5bc:	003f3b06 	br	400c2ac <__ram_exceptions_end+0xfbf84010>
 400c5c0:	ad3ed336 	bltu	r21,r20,400c110 <__ram_exceptions_end+0xfbf83e74>
 400c5c4:	a804d07a 	srli	r2,r21,1
 400c5c8:	802e97fa 	slli	r23,r16,31
 400c5cc:	a82a97fa 	slli	r21,r21,31
 400c5d0:	8020d07a 	srli	r16,r16,1
 400c5d4:	b8aeb03a 	or	r23,r23,r2
 400c5d8:	003ed006 	br	400c11c <__ram_exceptions_end+0xfbf83e80>
 400c5dc:	b23ff51e 	bne	r22,r8,400c5b4 <__ram_exceptions_end+0xfbf84318>
 400c5e0:	d9800017 	ldw	r6,0(sp)
 400c5e4:	a9bff12e 	bgeu	r21,r6,400c5ac <__ram_exceptions_end+0xfbf84310>
 400c5e8:	b109c83a 	sub	r4,r22,r4
 400c5ec:	2823883a 	mov	r17,r5
 400c5f0:	003f2e06 	br	400c2ac <__ram_exceptions_end+0xfbf84010>
 400c5f4:	2021883a 	mov	r16,r4
 400c5f8:	003eff06 	br	400c1f8 <__ram_exceptions_end+0xfbf83f5c>
 400c5fc:	2023883a 	mov	r17,r4
 400c600:	003ee406 	br	400c194 <__ram_exceptions_end+0xfbf83ef8>
 400c604:	a8bfe236 	bltu	r21,r2,400c590 <__ram_exceptions_end+0xfbf842f4>
 400c608:	0009883a 	mov	r4,zero
 400c60c:	003f2706 	br	400c2ac <__ram_exceptions_end+0xfbf84010>
 400c610:	81002d36 	bltu	r16,r4,400c6c8 <__divdf3+0x8f4>
 400c614:	24005626 	beq	r4,r16,400c770 <__divdf3+0x99c>
 400c618:	2829883a 	mov	r20,r5
 400c61c:	003f8006 	br	400c420 <__ram_exceptions_end+0xfbf84184>
 400c620:	053fffc4 	movi	r20,-1
 400c624:	003f7f06 	br	400c424 <__ram_exceptions_end+0xfbf84188>
 400c628:	200f883a 	mov	r7,r4
 400c62c:	003f3c06 	br	400c320 <__ram_exceptions_end+0xfbf84084>
 400c630:	1011883a 	mov	r8,r2
 400c634:	003f5506 	br	400c38c <__ram_exceptions_end+0xfbf840f0>
 400c638:	e027883a 	mov	r19,fp
 400c63c:	003f7906 	br	400c424 <__ram_exceptions_end+0xfbf84188>
 400c640:	010007c4 	movi	r4,31
 400c644:	20c02816 	blt	r4,r3,400c6e8 <__divdf3+0x914>
 400c648:	00800804 	movi	r2,32
 400c64c:	10c5c83a 	sub	r2,r2,r3
 400c650:	888a983a 	sll	r5,r17,r2
 400c654:	a0c8d83a 	srl	r4,r20,r3
 400c658:	a084983a 	sll	r2,r20,r2
 400c65c:	88e2d83a 	srl	r17,r17,r3
 400c660:	2906b03a 	or	r3,r5,r4
 400c664:	1004c03a 	cmpne	r2,r2,zero
 400c668:	1886b03a 	or	r3,r3,r2
 400c66c:	188001cc 	andi	r2,r3,7
 400c670:	10000726 	beq	r2,zero,400c690 <__divdf3+0x8bc>
 400c674:	188003cc 	andi	r2,r3,15
 400c678:	01000104 	movi	r4,4
 400c67c:	11000426 	beq	r2,r4,400c690 <__divdf3+0x8bc>
 400c680:	1805883a 	mov	r2,r3
 400c684:	10c00104 	addi	r3,r2,4
 400c688:	1885803a 	cmpltu	r2,r3,r2
 400c68c:	88a3883a 	add	r17,r17,r2
 400c690:	8880202c 	andhi	r2,r17,128
 400c694:	10002926 	beq	r2,zero,400c73c <__divdf3+0x968>
 400c698:	9900004c 	andi	r4,r19,1
 400c69c:	00800044 	movi	r2,1
 400c6a0:	0021883a 	mov	r16,zero
 400c6a4:	002b883a 	mov	r21,zero
 400c6a8:	003e2906 	br	400bf50 <__ram_exceptions_end+0xfbf83cb4>
 400c6ac:	d9800017 	ldw	r6,0(sp)
 400c6b0:	8c7fff84 	addi	r17,r17,-2
 400c6b4:	a9ab883a 	add	r21,r21,r6
 400c6b8:	a98b803a 	cmpltu	r5,r21,r6
 400c6bc:	2d8b883a 	add	r5,r5,r22
 400c6c0:	2a11883a 	add	r8,r5,r8
 400c6c4:	003ef806 	br	400c2a8 <__ram_exceptions_end+0xfbf8400c>
 400c6c8:	d9800017 	ldw	r6,0(sp)
 400c6cc:	318f883a 	add	r7,r6,r6
 400c6d0:	398b803a 	cmpltu	r5,r7,r6
 400c6d4:	2d8d883a 	add	r6,r5,r22
 400c6d8:	81a1883a 	add	r16,r16,r6
 400c6dc:	a17fff84 	addi	r5,r20,-2
 400c6e0:	d9c00015 	stw	r7,0(sp)
 400c6e4:	003f8806 	br	400c508 <__ram_exceptions_end+0xfbf8426c>
 400c6e8:	013ff844 	movi	r4,-31
 400c6ec:	2085c83a 	sub	r2,r4,r2
 400c6f0:	8888d83a 	srl	r4,r17,r2
 400c6f4:	00800804 	movi	r2,32
 400c6f8:	18802126 	beq	r3,r2,400c780 <__divdf3+0x9ac>
 400c6fc:	04001004 	movi	r16,64
 400c700:	80c7c83a 	sub	r3,r16,r3
 400c704:	88e0983a 	sll	r16,r17,r3
 400c708:	8504b03a 	or	r2,r16,r20
 400c70c:	1004c03a 	cmpne	r2,r2,zero
 400c710:	2084b03a 	or	r2,r4,r2
 400c714:	144001cc 	andi	r17,r2,7
 400c718:	88000d1e 	bne	r17,zero,400c750 <__divdf3+0x97c>
 400c71c:	0021883a 	mov	r16,zero
 400c720:	102ad0fa 	srli	r21,r2,3
 400c724:	9900004c 	andi	r4,r19,1
 400c728:	0005883a 	mov	r2,zero
 400c72c:	ac6ab03a 	or	r21,r21,r17
 400c730:	003e0706 	br	400bf50 <__ram_exceptions_end+0xfbf83cb4>
 400c734:	1007883a 	mov	r3,r2
 400c738:	0023883a 	mov	r17,zero
 400c73c:	8820927a 	slli	r16,r17,9
 400c740:	1805883a 	mov	r2,r3
 400c744:	8822977a 	slli	r17,r17,29
 400c748:	8020d33a 	srli	r16,r16,12
 400c74c:	003ff406 	br	400c720 <__ram_exceptions_end+0xfbf84484>
 400c750:	10c003cc 	andi	r3,r2,15
 400c754:	01000104 	movi	r4,4
 400c758:	193ff626 	beq	r3,r4,400c734 <__ram_exceptions_end+0xfbf84498>
 400c75c:	0023883a 	mov	r17,zero
 400c760:	003fc806 	br	400c684 <__ram_exceptions_end+0xfbf843e8>
 400c764:	a8bfd136 	bltu	r21,r2,400c6ac <__ram_exceptions_end+0xfbf84410>
 400c768:	2823883a 	mov	r17,r5
 400c76c:	003fa606 	br	400c608 <__ram_exceptions_end+0xfbf8436c>
 400c770:	d9800017 	ldw	r6,0(sp)
 400c774:	30bfd436 	bltu	r6,r2,400c6c8 <__ram_exceptions_end+0xfbf8442c>
 400c778:	2829883a 	mov	r20,r5
 400c77c:	003f6406 	br	400c510 <__ram_exceptions_end+0xfbf84274>
 400c780:	0021883a 	mov	r16,zero
 400c784:	003fe006 	br	400c708 <__ram_exceptions_end+0xfbf8446c>
 400c788:	00800434 	movhi	r2,16
 400c78c:	8c000234 	orhi	r16,r17,8
 400c790:	10bfffc4 	addi	r2,r2,-1
 400c794:	e009883a 	mov	r4,fp
 400c798:	80a0703a 	and	r16,r16,r2
 400c79c:	a02b883a 	mov	r21,r20
 400c7a0:	003e4e06 	br	400c0dc <__ram_exceptions_end+0xfbf83e40>

0400c7a4 <__eqdf2>:
 400c7a4:	2804d53a 	srli	r2,r5,20
 400c7a8:	3806d53a 	srli	r3,r7,20
 400c7ac:	02000434 	movhi	r8,16
 400c7b0:	423fffc4 	addi	r8,r8,-1
 400c7b4:	1081ffcc 	andi	r2,r2,2047
 400c7b8:	0281ffc4 	movi	r10,2047
 400c7bc:	2a12703a 	and	r9,r5,r8
 400c7c0:	18c1ffcc 	andi	r3,r3,2047
 400c7c4:	3a10703a 	and	r8,r7,r8
 400c7c8:	280ad7fa 	srli	r5,r5,31
 400c7cc:	380ed7fa 	srli	r7,r7,31
 400c7d0:	12801026 	beq	r2,r10,400c814 <__eqdf2+0x70>
 400c7d4:	0281ffc4 	movi	r10,2047
 400c7d8:	1a800a26 	beq	r3,r10,400c804 <__eqdf2+0x60>
 400c7dc:	10c00226 	beq	r2,r3,400c7e8 <__eqdf2+0x44>
 400c7e0:	00800044 	movi	r2,1
 400c7e4:	f800283a 	ret
 400c7e8:	4a3ffd1e 	bne	r9,r8,400c7e0 <__ram_exceptions_end+0xfbf84544>
 400c7ec:	21bffc1e 	bne	r4,r6,400c7e0 <__ram_exceptions_end+0xfbf84544>
 400c7f0:	29c00c26 	beq	r5,r7,400c824 <__eqdf2+0x80>
 400c7f4:	103ffa1e 	bne	r2,zero,400c7e0 <__ram_exceptions_end+0xfbf84544>
 400c7f8:	2244b03a 	or	r2,r4,r9
 400c7fc:	1004c03a 	cmpne	r2,r2,zero
 400c800:	f800283a 	ret
 400c804:	3214b03a 	or	r10,r6,r8
 400c808:	503ff426 	beq	r10,zero,400c7dc <__ram_exceptions_end+0xfbf84540>
 400c80c:	00800044 	movi	r2,1
 400c810:	f800283a 	ret
 400c814:	2254b03a 	or	r10,r4,r9
 400c818:	503fee26 	beq	r10,zero,400c7d4 <__ram_exceptions_end+0xfbf84538>
 400c81c:	00800044 	movi	r2,1
 400c820:	f800283a 	ret
 400c824:	0005883a 	mov	r2,zero
 400c828:	f800283a 	ret

0400c82c <__gedf2>:
 400c82c:	2804d53a 	srli	r2,r5,20
 400c830:	3806d53a 	srli	r3,r7,20
 400c834:	02000434 	movhi	r8,16
 400c838:	423fffc4 	addi	r8,r8,-1
 400c83c:	1081ffcc 	andi	r2,r2,2047
 400c840:	0241ffc4 	movi	r9,2047
 400c844:	2a14703a 	and	r10,r5,r8
 400c848:	18c1ffcc 	andi	r3,r3,2047
 400c84c:	3a10703a 	and	r8,r7,r8
 400c850:	280ad7fa 	srli	r5,r5,31
 400c854:	380ed7fa 	srli	r7,r7,31
 400c858:	12401d26 	beq	r2,r9,400c8d0 <__gedf2+0xa4>
 400c85c:	0241ffc4 	movi	r9,2047
 400c860:	1a401226 	beq	r3,r9,400c8ac <__gedf2+0x80>
 400c864:	1000081e 	bne	r2,zero,400c888 <__gedf2+0x5c>
 400c868:	2296b03a 	or	r11,r4,r10
 400c86c:	5813003a 	cmpeq	r9,r11,zero
 400c870:	1800091e 	bne	r3,zero,400c898 <__gedf2+0x6c>
 400c874:	3218b03a 	or	r12,r6,r8
 400c878:	6000071e 	bne	r12,zero,400c898 <__gedf2+0x6c>
 400c87c:	0005883a 	mov	r2,zero
 400c880:	5800101e 	bne	r11,zero,400c8c4 <__gedf2+0x98>
 400c884:	f800283a 	ret
 400c888:	18000c1e 	bne	r3,zero,400c8bc <__gedf2+0x90>
 400c88c:	3212b03a 	or	r9,r6,r8
 400c890:	48000c26 	beq	r9,zero,400c8c4 <__gedf2+0x98>
 400c894:	0013883a 	mov	r9,zero
 400c898:	39c03fcc 	andi	r7,r7,255
 400c89c:	48000826 	beq	r9,zero,400c8c0 <__gedf2+0x94>
 400c8a0:	38000926 	beq	r7,zero,400c8c8 <__gedf2+0x9c>
 400c8a4:	00800044 	movi	r2,1
 400c8a8:	f800283a 	ret
 400c8ac:	3212b03a 	or	r9,r6,r8
 400c8b0:	483fec26 	beq	r9,zero,400c864 <__ram_exceptions_end+0xfbf845c8>
 400c8b4:	00bfff84 	movi	r2,-2
 400c8b8:	f800283a 	ret
 400c8bc:	39c03fcc 	andi	r7,r7,255
 400c8c0:	29c00626 	beq	r5,r7,400c8dc <__gedf2+0xb0>
 400c8c4:	283ff726 	beq	r5,zero,400c8a4 <__ram_exceptions_end+0xfbf84608>
 400c8c8:	00bfffc4 	movi	r2,-1
 400c8cc:	f800283a 	ret
 400c8d0:	2292b03a 	or	r9,r4,r10
 400c8d4:	483fe126 	beq	r9,zero,400c85c <__ram_exceptions_end+0xfbf845c0>
 400c8d8:	003ff606 	br	400c8b4 <__ram_exceptions_end+0xfbf84618>
 400c8dc:	18bff916 	blt	r3,r2,400c8c4 <__ram_exceptions_end+0xfbf84628>
 400c8e0:	10c00316 	blt	r2,r3,400c8f0 <__gedf2+0xc4>
 400c8e4:	42bff736 	bltu	r8,r10,400c8c4 <__ram_exceptions_end+0xfbf84628>
 400c8e8:	52000326 	beq	r10,r8,400c8f8 <__gedf2+0xcc>
 400c8ec:	5200042e 	bgeu	r10,r8,400c900 <__gedf2+0xd4>
 400c8f0:	283fec1e 	bne	r5,zero,400c8a4 <__ram_exceptions_end+0xfbf84608>
 400c8f4:	003ff406 	br	400c8c8 <__ram_exceptions_end+0xfbf8462c>
 400c8f8:	313ff236 	bltu	r6,r4,400c8c4 <__ram_exceptions_end+0xfbf84628>
 400c8fc:	21bffc36 	bltu	r4,r6,400c8f0 <__ram_exceptions_end+0xfbf84654>
 400c900:	0005883a 	mov	r2,zero
 400c904:	f800283a 	ret

0400c908 <__ledf2>:
 400c908:	2804d53a 	srli	r2,r5,20
 400c90c:	3810d53a 	srli	r8,r7,20
 400c910:	00c00434 	movhi	r3,16
 400c914:	18ffffc4 	addi	r3,r3,-1
 400c918:	1081ffcc 	andi	r2,r2,2047
 400c91c:	0241ffc4 	movi	r9,2047
 400c920:	28d4703a 	and	r10,r5,r3
 400c924:	4201ffcc 	andi	r8,r8,2047
 400c928:	38c6703a 	and	r3,r7,r3
 400c92c:	280ad7fa 	srli	r5,r5,31
 400c930:	380ed7fa 	srli	r7,r7,31
 400c934:	12401f26 	beq	r2,r9,400c9b4 <__ledf2+0xac>
 400c938:	0241ffc4 	movi	r9,2047
 400c93c:	42401426 	beq	r8,r9,400c990 <__ledf2+0x88>
 400c940:	1000091e 	bne	r2,zero,400c968 <__ledf2+0x60>
 400c944:	2296b03a 	or	r11,r4,r10
 400c948:	5813003a 	cmpeq	r9,r11,zero
 400c94c:	29403fcc 	andi	r5,r5,255
 400c950:	40000a1e 	bne	r8,zero,400c97c <__ledf2+0x74>
 400c954:	30d8b03a 	or	r12,r6,r3
 400c958:	6000081e 	bne	r12,zero,400c97c <__ledf2+0x74>
 400c95c:	0005883a 	mov	r2,zero
 400c960:	5800111e 	bne	r11,zero,400c9a8 <__ledf2+0xa0>
 400c964:	f800283a 	ret
 400c968:	29403fcc 	andi	r5,r5,255
 400c96c:	40000c1e 	bne	r8,zero,400c9a0 <__ledf2+0x98>
 400c970:	30d2b03a 	or	r9,r6,r3
 400c974:	48000c26 	beq	r9,zero,400c9a8 <__ledf2+0xa0>
 400c978:	0013883a 	mov	r9,zero
 400c97c:	39c03fcc 	andi	r7,r7,255
 400c980:	48000826 	beq	r9,zero,400c9a4 <__ledf2+0x9c>
 400c984:	38001126 	beq	r7,zero,400c9cc <__ledf2+0xc4>
 400c988:	00800044 	movi	r2,1
 400c98c:	f800283a 	ret
 400c990:	30d2b03a 	or	r9,r6,r3
 400c994:	483fea26 	beq	r9,zero,400c940 <__ram_exceptions_end+0xfbf846a4>
 400c998:	00800084 	movi	r2,2
 400c99c:	f800283a 	ret
 400c9a0:	39c03fcc 	andi	r7,r7,255
 400c9a4:	39400726 	beq	r7,r5,400c9c4 <__ledf2+0xbc>
 400c9a8:	2800081e 	bne	r5,zero,400c9cc <__ledf2+0xc4>
 400c9ac:	00800044 	movi	r2,1
 400c9b0:	f800283a 	ret
 400c9b4:	2292b03a 	or	r9,r4,r10
 400c9b8:	483fdf26 	beq	r9,zero,400c938 <__ram_exceptions_end+0xfbf8469c>
 400c9bc:	00800084 	movi	r2,2
 400c9c0:	f800283a 	ret
 400c9c4:	4080030e 	bge	r8,r2,400c9d4 <__ledf2+0xcc>
 400c9c8:	383fef26 	beq	r7,zero,400c988 <__ram_exceptions_end+0xfbf846ec>
 400c9cc:	00bfffc4 	movi	r2,-1
 400c9d0:	f800283a 	ret
 400c9d4:	123feb16 	blt	r2,r8,400c984 <__ram_exceptions_end+0xfbf846e8>
 400c9d8:	1abff336 	bltu	r3,r10,400c9a8 <__ram_exceptions_end+0xfbf8470c>
 400c9dc:	50c00326 	beq	r10,r3,400c9ec <__ledf2+0xe4>
 400c9e0:	50c0042e 	bgeu	r10,r3,400c9f4 <__ledf2+0xec>
 400c9e4:	283fe81e 	bne	r5,zero,400c988 <__ram_exceptions_end+0xfbf846ec>
 400c9e8:	003ff806 	br	400c9cc <__ram_exceptions_end+0xfbf84730>
 400c9ec:	313fee36 	bltu	r6,r4,400c9a8 <__ram_exceptions_end+0xfbf8470c>
 400c9f0:	21bffc36 	bltu	r4,r6,400c9e4 <__ram_exceptions_end+0xfbf84748>
 400c9f4:	0005883a 	mov	r2,zero
 400c9f8:	f800283a 	ret

0400c9fc <__muldf3>:
 400c9fc:	deffee04 	addi	sp,sp,-72
 400ca00:	dd000c15 	stw	r20,48(sp)
 400ca04:	2828d53a 	srli	r20,r5,20
 400ca08:	ddc00f15 	stw	r23,60(sp)
 400ca0c:	282ed7fa 	srli	r23,r5,31
 400ca10:	dc000815 	stw	r16,32(sp)
 400ca14:	04000434 	movhi	r16,16
 400ca18:	dcc00b15 	stw	r19,44(sp)
 400ca1c:	843fffc4 	addi	r16,r16,-1
 400ca20:	dfc01115 	stw	ra,68(sp)
 400ca24:	df001015 	stw	fp,64(sp)
 400ca28:	dd800e15 	stw	r22,56(sp)
 400ca2c:	dd400d15 	stw	r21,52(sp)
 400ca30:	dc800a15 	stw	r18,40(sp)
 400ca34:	dc400915 	stw	r17,36(sp)
 400ca38:	a501ffcc 	andi	r20,r20,2047
 400ca3c:	2c20703a 	and	r16,r5,r16
 400ca40:	b827883a 	mov	r19,r23
 400ca44:	ba403fcc 	andi	r9,r23,255
 400ca48:	a0006026 	beq	r20,zero,400cbcc <__muldf3+0x1d0>
 400ca4c:	0081ffc4 	movi	r2,2047
 400ca50:	202d883a 	mov	r22,r4
 400ca54:	a0803626 	beq	r20,r2,400cb30 <__muldf3+0x134>
 400ca58:	84000434 	orhi	r16,r16,16
 400ca5c:	200ad77a 	srli	r5,r4,29
 400ca60:	800490fa 	slli	r2,r16,3
 400ca64:	202c90fa 	slli	r22,r4,3
 400ca68:	a53f0044 	addi	r20,r20,-1023
 400ca6c:	28a0b03a 	or	r16,r5,r2
 400ca70:	002b883a 	mov	r21,zero
 400ca74:	000b883a 	mov	r5,zero
 400ca78:	3804d53a 	srli	r2,r7,20
 400ca7c:	3838d7fa 	srli	fp,r7,31
 400ca80:	04400434 	movhi	r17,16
 400ca84:	8c7fffc4 	addi	r17,r17,-1
 400ca88:	1081ffcc 	andi	r2,r2,2047
 400ca8c:	3025883a 	mov	r18,r6
 400ca90:	3c62703a 	and	r17,r7,r17
 400ca94:	e2803fcc 	andi	r10,fp,255
 400ca98:	10006d26 	beq	r2,zero,400cc50 <__muldf3+0x254>
 400ca9c:	00c1ffc4 	movi	r3,2047
 400caa0:	10c06526 	beq	r2,r3,400cc38 <__muldf3+0x23c>
 400caa4:	8c400434 	orhi	r17,r17,16
 400caa8:	300ed77a 	srli	r7,r6,29
 400caac:	880690fa 	slli	r3,r17,3
 400cab0:	302490fa 	slli	r18,r6,3
 400cab4:	10bf0044 	addi	r2,r2,-1023
 400cab8:	38e2b03a 	or	r17,r7,r3
 400cabc:	000f883a 	mov	r7,zero
 400cac0:	a087883a 	add	r3,r20,r2
 400cac4:	010003c4 	movi	r4,15
 400cac8:	3d44b03a 	or	r2,r7,r21
 400cacc:	e5ccf03a 	xor	r6,fp,r23
 400cad0:	1a000044 	addi	r8,r3,1
 400cad4:	20809b36 	bltu	r4,r2,400cd44 <__muldf3+0x348>
 400cad8:	100490ba 	slli	r2,r2,2
 400cadc:	01010074 	movhi	r4,1025
 400cae0:	2132bc04 	addi	r4,r4,-13584
 400cae4:	1105883a 	add	r2,r2,r4
 400cae8:	10800017 	ldw	r2,0(r2)
 400caec:	1000683a 	jmp	r2
 400caf0:	0400cd44 	movi	r16,821
 400caf4:	0400cb50 	cmplti	r16,zero,813
 400caf8:	0400cb50 	cmplti	r16,zero,813
 400cafc:	0400cb4c 	andi	r16,zero,813
 400cb00:	0400cd20 	cmpeqi	r16,zero,820
 400cb04:	0400cd20 	cmpeqi	r16,zero,820
 400cb08:	0400cd08 	cmpgei	r16,zero,820
 400cb0c:	0400cb4c 	andi	r16,zero,813
 400cb10:	0400cd20 	cmpeqi	r16,zero,820
 400cb14:	0400cd08 	cmpgei	r16,zero,820
 400cb18:	0400cd20 	cmpeqi	r16,zero,820
 400cb1c:	0400cb4c 	andi	r16,zero,813
 400cb20:	0400cd30 	cmpltui	r16,zero,820
 400cb24:	0400cd30 	cmpltui	r16,zero,820
 400cb28:	0400cd30 	cmpltui	r16,zero,820
 400cb2c:	0400d090 	cmplti	r16,zero,834
 400cb30:	2404b03a 	or	r2,r4,r16
 400cb34:	1000711e 	bne	r2,zero,400ccfc <__muldf3+0x300>
 400cb38:	05400204 	movi	r21,8
 400cb3c:	0021883a 	mov	r16,zero
 400cb40:	002d883a 	mov	r22,zero
 400cb44:	01400084 	movi	r5,2
 400cb48:	003fcb06 	br	400ca78 <__ram_exceptions_end+0xfbf847dc>
 400cb4c:	500d883a 	mov	r6,r10
 400cb50:	00800084 	movi	r2,2
 400cb54:	38805926 	beq	r7,r2,400ccbc <__muldf3+0x2c0>
 400cb58:	008000c4 	movi	r2,3
 400cb5c:	3881bb26 	beq	r7,r2,400d24c <__muldf3+0x850>
 400cb60:	00800044 	movi	r2,1
 400cb64:	3881961e 	bne	r7,r2,400d1c0 <__muldf3+0x7c4>
 400cb68:	3027883a 	mov	r19,r6
 400cb6c:	0005883a 	mov	r2,zero
 400cb70:	0021883a 	mov	r16,zero
 400cb74:	002d883a 	mov	r22,zero
 400cb78:	1004953a 	slli	r2,r2,20
 400cb7c:	98c03fcc 	andi	r3,r19,255
 400cb80:	04400434 	movhi	r17,16
 400cb84:	8c7fffc4 	addi	r17,r17,-1
 400cb88:	180697fa 	slli	r3,r3,31
 400cb8c:	8460703a 	and	r16,r16,r17
 400cb90:	80a0b03a 	or	r16,r16,r2
 400cb94:	80c6b03a 	or	r3,r16,r3
 400cb98:	b005883a 	mov	r2,r22
 400cb9c:	dfc01117 	ldw	ra,68(sp)
 400cba0:	df001017 	ldw	fp,64(sp)
 400cba4:	ddc00f17 	ldw	r23,60(sp)
 400cba8:	dd800e17 	ldw	r22,56(sp)
 400cbac:	dd400d17 	ldw	r21,52(sp)
 400cbb0:	dd000c17 	ldw	r20,48(sp)
 400cbb4:	dcc00b17 	ldw	r19,44(sp)
 400cbb8:	dc800a17 	ldw	r18,40(sp)
 400cbbc:	dc400917 	ldw	r17,36(sp)
 400cbc0:	dc000817 	ldw	r16,32(sp)
 400cbc4:	dec01204 	addi	sp,sp,72
 400cbc8:	f800283a 	ret
 400cbcc:	2404b03a 	or	r2,r4,r16
 400cbd0:	202b883a 	mov	r21,r4
 400cbd4:	10004426 	beq	r2,zero,400cce8 <__muldf3+0x2ec>
 400cbd8:	80015126 	beq	r16,zero,400d120 <__muldf3+0x724>
 400cbdc:	8009883a 	mov	r4,r16
 400cbe0:	d9800715 	stw	r6,28(sp)
 400cbe4:	d9c00215 	stw	r7,8(sp)
 400cbe8:	da400415 	stw	r9,16(sp)
 400cbec:	400dd680 	call	400dd68 <__clzsi2>
 400cbf0:	d9800717 	ldw	r6,28(sp)
 400cbf4:	d9c00217 	ldw	r7,8(sp)
 400cbf8:	da400417 	ldw	r9,16(sp)
 400cbfc:	113ffd44 	addi	r4,r2,-11
 400cc00:	00c00704 	movi	r3,28
 400cc04:	19014216 	blt	r3,r4,400d110 <__muldf3+0x714>
 400cc08:	00c00744 	movi	r3,29
 400cc0c:	15bffe04 	addi	r22,r2,-8
 400cc10:	1907c83a 	sub	r3,r3,r4
 400cc14:	85a0983a 	sll	r16,r16,r22
 400cc18:	a8c6d83a 	srl	r3,r21,r3
 400cc1c:	adac983a 	sll	r22,r21,r22
 400cc20:	1c20b03a 	or	r16,r3,r16
 400cc24:	1080fcc4 	addi	r2,r2,1011
 400cc28:	00a9c83a 	sub	r20,zero,r2
 400cc2c:	002b883a 	mov	r21,zero
 400cc30:	000b883a 	mov	r5,zero
 400cc34:	003f9006 	br	400ca78 <__ram_exceptions_end+0xfbf847dc>
 400cc38:	3446b03a 	or	r3,r6,r17
 400cc3c:	1800281e 	bne	r3,zero,400cce0 <__muldf3+0x2e4>
 400cc40:	0023883a 	mov	r17,zero
 400cc44:	0025883a 	mov	r18,zero
 400cc48:	01c00084 	movi	r7,2
 400cc4c:	003f9c06 	br	400cac0 <__ram_exceptions_end+0xfbf84824>
 400cc50:	3446b03a 	or	r3,r6,r17
 400cc54:	18001e26 	beq	r3,zero,400ccd0 <__muldf3+0x2d4>
 400cc58:	88012126 	beq	r17,zero,400d0e0 <__muldf3+0x6e4>
 400cc5c:	8809883a 	mov	r4,r17
 400cc60:	d9400215 	stw	r5,8(sp)
 400cc64:	d9800715 	stw	r6,28(sp)
 400cc68:	da400415 	stw	r9,16(sp)
 400cc6c:	da800315 	stw	r10,12(sp)
 400cc70:	400dd680 	call	400dd68 <__clzsi2>
 400cc74:	d9400217 	ldw	r5,8(sp)
 400cc78:	d9800717 	ldw	r6,28(sp)
 400cc7c:	da400417 	ldw	r9,16(sp)
 400cc80:	da800317 	ldw	r10,12(sp)
 400cc84:	113ffd44 	addi	r4,r2,-11
 400cc88:	00c00704 	movi	r3,28
 400cc8c:	19011016 	blt	r3,r4,400d0d0 <__muldf3+0x6d4>
 400cc90:	00c00744 	movi	r3,29
 400cc94:	14bffe04 	addi	r18,r2,-8
 400cc98:	1907c83a 	sub	r3,r3,r4
 400cc9c:	8ca2983a 	sll	r17,r17,r18
 400cca0:	30c6d83a 	srl	r3,r6,r3
 400cca4:	34a4983a 	sll	r18,r6,r18
 400cca8:	1c62b03a 	or	r17,r3,r17
 400ccac:	1080fcc4 	addi	r2,r2,1011
 400ccb0:	0085c83a 	sub	r2,zero,r2
 400ccb4:	000f883a 	mov	r7,zero
 400ccb8:	003f8106 	br	400cac0 <__ram_exceptions_end+0xfbf84824>
 400ccbc:	3027883a 	mov	r19,r6
 400ccc0:	0081ffc4 	movi	r2,2047
 400ccc4:	0021883a 	mov	r16,zero
 400ccc8:	002d883a 	mov	r22,zero
 400cccc:	003faa06 	br	400cb78 <__ram_exceptions_end+0xfbf848dc>
 400ccd0:	0023883a 	mov	r17,zero
 400ccd4:	0025883a 	mov	r18,zero
 400ccd8:	01c00044 	movi	r7,1
 400ccdc:	003f7806 	br	400cac0 <__ram_exceptions_end+0xfbf84824>
 400cce0:	01c000c4 	movi	r7,3
 400cce4:	003f7606 	br	400cac0 <__ram_exceptions_end+0xfbf84824>
 400cce8:	05400104 	movi	r21,4
 400ccec:	0021883a 	mov	r16,zero
 400ccf0:	002d883a 	mov	r22,zero
 400ccf4:	01400044 	movi	r5,1
 400ccf8:	003f5f06 	br	400ca78 <__ram_exceptions_end+0xfbf847dc>
 400ccfc:	05400304 	movi	r21,12
 400cd00:	014000c4 	movi	r5,3
 400cd04:	003f5c06 	br	400ca78 <__ram_exceptions_end+0xfbf847dc>
 400cd08:	04000434 	movhi	r16,16
 400cd0c:	0027883a 	mov	r19,zero
 400cd10:	843fffc4 	addi	r16,r16,-1
 400cd14:	05bfffc4 	movi	r22,-1
 400cd18:	0081ffc4 	movi	r2,2047
 400cd1c:	003f9606 	br	400cb78 <__ram_exceptions_end+0xfbf848dc>
 400cd20:	8023883a 	mov	r17,r16
 400cd24:	b025883a 	mov	r18,r22
 400cd28:	280f883a 	mov	r7,r5
 400cd2c:	003f8806 	br	400cb50 <__ram_exceptions_end+0xfbf848b4>
 400cd30:	8023883a 	mov	r17,r16
 400cd34:	b025883a 	mov	r18,r22
 400cd38:	480d883a 	mov	r6,r9
 400cd3c:	280f883a 	mov	r7,r5
 400cd40:	003f8306 	br	400cb50 <__ram_exceptions_end+0xfbf848b4>
 400cd44:	b026d43a 	srli	r19,r22,16
 400cd48:	902ed43a 	srli	r23,r18,16
 400cd4c:	b5bfffcc 	andi	r22,r22,65535
 400cd50:	94bfffcc 	andi	r18,r18,65535
 400cd54:	b00b883a 	mov	r5,r22
 400cd58:	9009883a 	mov	r4,r18
 400cd5c:	d8c00515 	stw	r3,20(sp)
 400cd60:	d9800715 	stw	r6,28(sp)
 400cd64:	da000615 	stw	r8,24(sp)
 400cd68:	40011140 	call	4001114 <__mulsi3>
 400cd6c:	980b883a 	mov	r5,r19
 400cd70:	9009883a 	mov	r4,r18
 400cd74:	1029883a 	mov	r20,r2
 400cd78:	40011140 	call	4001114 <__mulsi3>
 400cd7c:	b80b883a 	mov	r5,r23
 400cd80:	9809883a 	mov	r4,r19
 400cd84:	102b883a 	mov	r21,r2
 400cd88:	40011140 	call	4001114 <__mulsi3>
 400cd8c:	b809883a 	mov	r4,r23
 400cd90:	b00b883a 	mov	r5,r22
 400cd94:	1039883a 	mov	fp,r2
 400cd98:	40011140 	call	4001114 <__mulsi3>
 400cd9c:	a008d43a 	srli	r4,r20,16
 400cda0:	1545883a 	add	r2,r2,r21
 400cda4:	d8c00517 	ldw	r3,20(sp)
 400cda8:	2085883a 	add	r2,r4,r2
 400cdac:	d9800717 	ldw	r6,28(sp)
 400cdb0:	da000617 	ldw	r8,24(sp)
 400cdb4:	1540022e 	bgeu	r2,r21,400cdc0 <__muldf3+0x3c4>
 400cdb8:	01000074 	movhi	r4,1
 400cdbc:	e139883a 	add	fp,fp,r4
 400cdc0:	100e943a 	slli	r7,r2,16
 400cdc4:	1004d43a 	srli	r2,r2,16
 400cdc8:	882ad43a 	srli	r21,r17,16
 400cdcc:	a53fffcc 	andi	r20,r20,65535
 400cdd0:	8c7fffcc 	andi	r17,r17,65535
 400cdd4:	3d29883a 	add	r20,r7,r20
 400cdd8:	b00b883a 	mov	r5,r22
 400cddc:	8809883a 	mov	r4,r17
 400cde0:	d8c00515 	stw	r3,20(sp)
 400cde4:	d9800715 	stw	r6,28(sp)
 400cde8:	da000615 	stw	r8,24(sp)
 400cdec:	dd000115 	stw	r20,4(sp)
 400cdf0:	d8800015 	stw	r2,0(sp)
 400cdf4:	40011140 	call	4001114 <__mulsi3>
 400cdf8:	980b883a 	mov	r5,r19
 400cdfc:	8809883a 	mov	r4,r17
 400ce00:	d8800215 	stw	r2,8(sp)
 400ce04:	40011140 	call	4001114 <__mulsi3>
 400ce08:	9809883a 	mov	r4,r19
 400ce0c:	a80b883a 	mov	r5,r21
 400ce10:	1029883a 	mov	r20,r2
 400ce14:	40011140 	call	4001114 <__mulsi3>
 400ce18:	b00b883a 	mov	r5,r22
 400ce1c:	a809883a 	mov	r4,r21
 400ce20:	d8800415 	stw	r2,16(sp)
 400ce24:	40011140 	call	4001114 <__mulsi3>
 400ce28:	d9c00217 	ldw	r7,8(sp)
 400ce2c:	1505883a 	add	r2,r2,r20
 400ce30:	d8c00517 	ldw	r3,20(sp)
 400ce34:	3826d43a 	srli	r19,r7,16
 400ce38:	d9800717 	ldw	r6,28(sp)
 400ce3c:	da000617 	ldw	r8,24(sp)
 400ce40:	9885883a 	add	r2,r19,r2
 400ce44:	da400417 	ldw	r9,16(sp)
 400ce48:	1500022e 	bgeu	r2,r20,400ce54 <__muldf3+0x458>
 400ce4c:	01000074 	movhi	r4,1
 400ce50:	4913883a 	add	r9,r9,r4
 400ce54:	1028d43a 	srli	r20,r2,16
 400ce58:	1004943a 	slli	r2,r2,16
 400ce5c:	802cd43a 	srli	r22,r16,16
 400ce60:	843fffcc 	andi	r16,r16,65535
 400ce64:	3cffffcc 	andi	r19,r7,65535
 400ce68:	9009883a 	mov	r4,r18
 400ce6c:	800b883a 	mov	r5,r16
 400ce70:	a269883a 	add	r20,r20,r9
 400ce74:	d8c00515 	stw	r3,20(sp)
 400ce78:	d9800715 	stw	r6,28(sp)
 400ce7c:	da000615 	stw	r8,24(sp)
 400ce80:	14e7883a 	add	r19,r2,r19
 400ce84:	40011140 	call	4001114 <__mulsi3>
 400ce88:	9009883a 	mov	r4,r18
 400ce8c:	b00b883a 	mov	r5,r22
 400ce90:	d8800315 	stw	r2,12(sp)
 400ce94:	40011140 	call	4001114 <__mulsi3>
 400ce98:	b809883a 	mov	r4,r23
 400ce9c:	b00b883a 	mov	r5,r22
 400cea0:	d8800215 	stw	r2,8(sp)
 400cea4:	40011140 	call	4001114 <__mulsi3>
 400cea8:	b80b883a 	mov	r5,r23
 400ceac:	8009883a 	mov	r4,r16
 400ceb0:	d8800415 	stw	r2,16(sp)
 400ceb4:	40011140 	call	4001114 <__mulsi3>
 400ceb8:	da800317 	ldw	r10,12(sp)
 400cebc:	d9c00217 	ldw	r7,8(sp)
 400cec0:	d9000017 	ldw	r4,0(sp)
 400cec4:	502ed43a 	srli	r23,r10,16
 400cec8:	11c5883a 	add	r2,r2,r7
 400cecc:	24e5883a 	add	r18,r4,r19
 400ced0:	b885883a 	add	r2,r23,r2
 400ced4:	d8c00517 	ldw	r3,20(sp)
 400ced8:	d9800717 	ldw	r6,28(sp)
 400cedc:	da000617 	ldw	r8,24(sp)
 400cee0:	da400417 	ldw	r9,16(sp)
 400cee4:	11c0022e 	bgeu	r2,r7,400cef0 <__muldf3+0x4f4>
 400cee8:	01000074 	movhi	r4,1
 400ceec:	4913883a 	add	r9,r9,r4
 400cef0:	100ed43a 	srli	r7,r2,16
 400cef4:	1004943a 	slli	r2,r2,16
 400cef8:	55ffffcc 	andi	r23,r10,65535
 400cefc:	3a53883a 	add	r9,r7,r9
 400cf00:	8809883a 	mov	r4,r17
 400cf04:	800b883a 	mov	r5,r16
 400cf08:	d8c00515 	stw	r3,20(sp)
 400cf0c:	d9800715 	stw	r6,28(sp)
 400cf10:	da000615 	stw	r8,24(sp)
 400cf14:	da400415 	stw	r9,16(sp)
 400cf18:	15ef883a 	add	r23,r2,r23
 400cf1c:	40011140 	call	4001114 <__mulsi3>
 400cf20:	8809883a 	mov	r4,r17
 400cf24:	b00b883a 	mov	r5,r22
 400cf28:	d8800215 	stw	r2,8(sp)
 400cf2c:	40011140 	call	4001114 <__mulsi3>
 400cf30:	b00b883a 	mov	r5,r22
 400cf34:	a809883a 	mov	r4,r21
 400cf38:	d8800315 	stw	r2,12(sp)
 400cf3c:	40011140 	call	4001114 <__mulsi3>
 400cf40:	8009883a 	mov	r4,r16
 400cf44:	a80b883a 	mov	r5,r21
 400cf48:	1023883a 	mov	r17,r2
 400cf4c:	40011140 	call	4001114 <__mulsi3>
 400cf50:	d9c00217 	ldw	r7,8(sp)
 400cf54:	da800317 	ldw	r10,12(sp)
 400cf58:	d8c00517 	ldw	r3,20(sp)
 400cf5c:	3808d43a 	srli	r4,r7,16
 400cf60:	1285883a 	add	r2,r2,r10
 400cf64:	d9800717 	ldw	r6,28(sp)
 400cf68:	2085883a 	add	r2,r4,r2
 400cf6c:	da000617 	ldw	r8,24(sp)
 400cf70:	da400417 	ldw	r9,16(sp)
 400cf74:	1280022e 	bgeu	r2,r10,400cf80 <__muldf3+0x584>
 400cf78:	01000074 	movhi	r4,1
 400cf7c:	8923883a 	add	r17,r17,r4
 400cf80:	1008943a 	slli	r4,r2,16
 400cf84:	39ffffcc 	andi	r7,r7,65535
 400cf88:	e4b9883a 	add	fp,fp,r18
 400cf8c:	21cf883a 	add	r7,r4,r7
 400cf90:	e4e7803a 	cmpltu	r19,fp,r19
 400cf94:	3d0f883a 	add	r7,r7,r20
 400cf98:	bf39883a 	add	fp,r23,fp
 400cf9c:	99c9883a 	add	r4,r19,r7
 400cfa0:	e5ef803a 	cmpltu	r23,fp,r23
 400cfa4:	490b883a 	add	r5,r9,r4
 400cfa8:	1004d43a 	srli	r2,r2,16
 400cfac:	b965883a 	add	r18,r23,r5
 400cfb0:	24c9803a 	cmpltu	r4,r4,r19
 400cfb4:	3d29803a 	cmpltu	r20,r7,r20
 400cfb8:	a128b03a 	or	r20,r20,r4
 400cfbc:	95ef803a 	cmpltu	r23,r18,r23
 400cfc0:	2a53803a 	cmpltu	r9,r5,r9
 400cfc4:	a0a9883a 	add	r20,r20,r2
 400cfc8:	4deeb03a 	or	r23,r9,r23
 400cfcc:	a5ef883a 	add	r23,r20,r23
 400cfd0:	bc63883a 	add	r17,r23,r17
 400cfd4:	e004927a 	slli	r2,fp,9
 400cfd8:	d9000117 	ldw	r4,4(sp)
 400cfdc:	882e927a 	slli	r23,r17,9
 400cfe0:	9022d5fa 	srli	r17,r18,23
 400cfe4:	e038d5fa 	srli	fp,fp,23
 400cfe8:	1104b03a 	or	r2,r2,r4
 400cfec:	9024927a 	slli	r18,r18,9
 400cff0:	1004c03a 	cmpne	r2,r2,zero
 400cff4:	bc62b03a 	or	r17,r23,r17
 400cff8:	1738b03a 	or	fp,r2,fp
 400cffc:	8880402c 	andhi	r2,r17,256
 400d000:	e4a4b03a 	or	r18,fp,r18
 400d004:	10000726 	beq	r2,zero,400d024 <__muldf3+0x628>
 400d008:	9006d07a 	srli	r3,r18,1
 400d00c:	880497fa 	slli	r2,r17,31
 400d010:	9480004c 	andi	r18,r18,1
 400d014:	8822d07a 	srli	r17,r17,1
 400d018:	1ca4b03a 	or	r18,r3,r18
 400d01c:	14a4b03a 	or	r18,r2,r18
 400d020:	4007883a 	mov	r3,r8
 400d024:	1880ffc4 	addi	r2,r3,1023
 400d028:	0080460e 	bge	zero,r2,400d144 <__muldf3+0x748>
 400d02c:	910001cc 	andi	r4,r18,7
 400d030:	20000726 	beq	r4,zero,400d050 <__muldf3+0x654>
 400d034:	910003cc 	andi	r4,r18,15
 400d038:	01400104 	movi	r5,4
 400d03c:	21400426 	beq	r4,r5,400d050 <__muldf3+0x654>
 400d040:	9149883a 	add	r4,r18,r5
 400d044:	24a5803a 	cmpltu	r18,r4,r18
 400d048:	8ca3883a 	add	r17,r17,r18
 400d04c:	2025883a 	mov	r18,r4
 400d050:	8900402c 	andhi	r4,r17,256
 400d054:	20000426 	beq	r4,zero,400d068 <__muldf3+0x66c>
 400d058:	18810004 	addi	r2,r3,1024
 400d05c:	00ffc034 	movhi	r3,65280
 400d060:	18ffffc4 	addi	r3,r3,-1
 400d064:	88e2703a 	and	r17,r17,r3
 400d068:	00c1ff84 	movi	r3,2046
 400d06c:	18bf1316 	blt	r3,r2,400ccbc <__ram_exceptions_end+0xfbf84a20>
 400d070:	882c977a 	slli	r22,r17,29
 400d074:	9024d0fa 	srli	r18,r18,3
 400d078:	8822927a 	slli	r17,r17,9
 400d07c:	1081ffcc 	andi	r2,r2,2047
 400d080:	b4acb03a 	or	r22,r22,r18
 400d084:	8820d33a 	srli	r16,r17,12
 400d088:	3027883a 	mov	r19,r6
 400d08c:	003eba06 	br	400cb78 <__ram_exceptions_end+0xfbf848dc>
 400d090:	8080022c 	andhi	r2,r16,8
 400d094:	10000926 	beq	r2,zero,400d0bc <__muldf3+0x6c0>
 400d098:	8880022c 	andhi	r2,r17,8
 400d09c:	1000071e 	bne	r2,zero,400d0bc <__muldf3+0x6c0>
 400d0a0:	00800434 	movhi	r2,16
 400d0a4:	8c000234 	orhi	r16,r17,8
 400d0a8:	10bfffc4 	addi	r2,r2,-1
 400d0ac:	e027883a 	mov	r19,fp
 400d0b0:	80a0703a 	and	r16,r16,r2
 400d0b4:	902d883a 	mov	r22,r18
 400d0b8:	003f1706 	br	400cd18 <__ram_exceptions_end+0xfbf84a7c>
 400d0bc:	00800434 	movhi	r2,16
 400d0c0:	84000234 	orhi	r16,r16,8
 400d0c4:	10bfffc4 	addi	r2,r2,-1
 400d0c8:	80a0703a 	and	r16,r16,r2
 400d0cc:	003f1206 	br	400cd18 <__ram_exceptions_end+0xfbf84a7c>
 400d0d0:	147ff604 	addi	r17,r2,-40
 400d0d4:	3462983a 	sll	r17,r6,r17
 400d0d8:	0025883a 	mov	r18,zero
 400d0dc:	003ef306 	br	400ccac <__ram_exceptions_end+0xfbf84a10>
 400d0e0:	3009883a 	mov	r4,r6
 400d0e4:	d9400215 	stw	r5,8(sp)
 400d0e8:	d9800715 	stw	r6,28(sp)
 400d0ec:	da400415 	stw	r9,16(sp)
 400d0f0:	da800315 	stw	r10,12(sp)
 400d0f4:	400dd680 	call	400dd68 <__clzsi2>
 400d0f8:	10800804 	addi	r2,r2,32
 400d0fc:	da800317 	ldw	r10,12(sp)
 400d100:	da400417 	ldw	r9,16(sp)
 400d104:	d9800717 	ldw	r6,28(sp)
 400d108:	d9400217 	ldw	r5,8(sp)
 400d10c:	003edd06 	br	400cc84 <__ram_exceptions_end+0xfbf849e8>
 400d110:	143ff604 	addi	r16,r2,-40
 400d114:	ac20983a 	sll	r16,r21,r16
 400d118:	002d883a 	mov	r22,zero
 400d11c:	003ec106 	br	400cc24 <__ram_exceptions_end+0xfbf84988>
 400d120:	d9800715 	stw	r6,28(sp)
 400d124:	d9c00215 	stw	r7,8(sp)
 400d128:	da400415 	stw	r9,16(sp)
 400d12c:	400dd680 	call	400dd68 <__clzsi2>
 400d130:	10800804 	addi	r2,r2,32
 400d134:	da400417 	ldw	r9,16(sp)
 400d138:	d9c00217 	ldw	r7,8(sp)
 400d13c:	d9800717 	ldw	r6,28(sp)
 400d140:	003eae06 	br	400cbfc <__ram_exceptions_end+0xfbf84960>
 400d144:	00c00044 	movi	r3,1
 400d148:	1887c83a 	sub	r3,r3,r2
 400d14c:	01000e04 	movi	r4,56
 400d150:	20fe8516 	blt	r4,r3,400cb68 <__ram_exceptions_end+0xfbf848cc>
 400d154:	010007c4 	movi	r4,31
 400d158:	20c01b16 	blt	r4,r3,400d1c8 <__muldf3+0x7cc>
 400d15c:	00800804 	movi	r2,32
 400d160:	10c5c83a 	sub	r2,r2,r3
 400d164:	888a983a 	sll	r5,r17,r2
 400d168:	90c8d83a 	srl	r4,r18,r3
 400d16c:	9084983a 	sll	r2,r18,r2
 400d170:	88e2d83a 	srl	r17,r17,r3
 400d174:	2906b03a 	or	r3,r5,r4
 400d178:	1004c03a 	cmpne	r2,r2,zero
 400d17c:	1886b03a 	or	r3,r3,r2
 400d180:	188001cc 	andi	r2,r3,7
 400d184:	10000726 	beq	r2,zero,400d1a4 <__muldf3+0x7a8>
 400d188:	188003cc 	andi	r2,r3,15
 400d18c:	01000104 	movi	r4,4
 400d190:	11000426 	beq	r2,r4,400d1a4 <__muldf3+0x7a8>
 400d194:	1805883a 	mov	r2,r3
 400d198:	10c00104 	addi	r3,r2,4
 400d19c:	1885803a 	cmpltu	r2,r3,r2
 400d1a0:	88a3883a 	add	r17,r17,r2
 400d1a4:	8880202c 	andhi	r2,r17,128
 400d1a8:	10001c26 	beq	r2,zero,400d21c <__muldf3+0x820>
 400d1ac:	3027883a 	mov	r19,r6
 400d1b0:	00800044 	movi	r2,1
 400d1b4:	0021883a 	mov	r16,zero
 400d1b8:	002d883a 	mov	r22,zero
 400d1bc:	003e6e06 	br	400cb78 <__ram_exceptions_end+0xfbf848dc>
 400d1c0:	4007883a 	mov	r3,r8
 400d1c4:	003f9706 	br	400d024 <__ram_exceptions_end+0xfbf84d88>
 400d1c8:	017ff844 	movi	r5,-31
 400d1cc:	2885c83a 	sub	r2,r5,r2
 400d1d0:	888ad83a 	srl	r5,r17,r2
 400d1d4:	00800804 	movi	r2,32
 400d1d8:	18801a26 	beq	r3,r2,400d244 <__muldf3+0x848>
 400d1dc:	01001004 	movi	r4,64
 400d1e0:	20c7c83a 	sub	r3,r4,r3
 400d1e4:	88e2983a 	sll	r17,r17,r3
 400d1e8:	8ca4b03a 	or	r18,r17,r18
 400d1ec:	9004c03a 	cmpne	r2,r18,zero
 400d1f0:	2884b03a 	or	r2,r5,r2
 400d1f4:	144001cc 	andi	r17,r2,7
 400d1f8:	88000d1e 	bne	r17,zero,400d230 <__muldf3+0x834>
 400d1fc:	0021883a 	mov	r16,zero
 400d200:	102cd0fa 	srli	r22,r2,3
 400d204:	3027883a 	mov	r19,r6
 400d208:	0005883a 	mov	r2,zero
 400d20c:	b46cb03a 	or	r22,r22,r17
 400d210:	003e5906 	br	400cb78 <__ram_exceptions_end+0xfbf848dc>
 400d214:	1007883a 	mov	r3,r2
 400d218:	0023883a 	mov	r17,zero
 400d21c:	8820927a 	slli	r16,r17,9
 400d220:	1805883a 	mov	r2,r3
 400d224:	8822977a 	slli	r17,r17,29
 400d228:	8020d33a 	srli	r16,r16,12
 400d22c:	003ff406 	br	400d200 <__ram_exceptions_end+0xfbf84f64>
 400d230:	10c003cc 	andi	r3,r2,15
 400d234:	01000104 	movi	r4,4
 400d238:	193ff626 	beq	r3,r4,400d214 <__ram_exceptions_end+0xfbf84f78>
 400d23c:	0023883a 	mov	r17,zero
 400d240:	003fd506 	br	400d198 <__ram_exceptions_end+0xfbf84efc>
 400d244:	0023883a 	mov	r17,zero
 400d248:	003fe706 	br	400d1e8 <__ram_exceptions_end+0xfbf84f4c>
 400d24c:	00800434 	movhi	r2,16
 400d250:	8c000234 	orhi	r16,r17,8
 400d254:	10bfffc4 	addi	r2,r2,-1
 400d258:	3027883a 	mov	r19,r6
 400d25c:	80a0703a 	and	r16,r16,r2
 400d260:	902d883a 	mov	r22,r18
 400d264:	003eac06 	br	400cd18 <__ram_exceptions_end+0xfbf84a7c>

0400d268 <__subdf3>:
 400d268:	02000434 	movhi	r8,16
 400d26c:	423fffc4 	addi	r8,r8,-1
 400d270:	defffb04 	addi	sp,sp,-20
 400d274:	2a14703a 	and	r10,r5,r8
 400d278:	3812d53a 	srli	r9,r7,20
 400d27c:	3a10703a 	and	r8,r7,r8
 400d280:	2006d77a 	srli	r3,r4,29
 400d284:	3004d77a 	srli	r2,r6,29
 400d288:	dc000015 	stw	r16,0(sp)
 400d28c:	501490fa 	slli	r10,r10,3
 400d290:	2820d53a 	srli	r16,r5,20
 400d294:	401090fa 	slli	r8,r8,3
 400d298:	dc800215 	stw	r18,8(sp)
 400d29c:	dc400115 	stw	r17,4(sp)
 400d2a0:	dfc00415 	stw	ra,16(sp)
 400d2a4:	202290fa 	slli	r17,r4,3
 400d2a8:	dcc00315 	stw	r19,12(sp)
 400d2ac:	4a41ffcc 	andi	r9,r9,2047
 400d2b0:	0101ffc4 	movi	r4,2047
 400d2b4:	2824d7fa 	srli	r18,r5,31
 400d2b8:	8401ffcc 	andi	r16,r16,2047
 400d2bc:	50c6b03a 	or	r3,r10,r3
 400d2c0:	380ed7fa 	srli	r7,r7,31
 400d2c4:	408ab03a 	or	r5,r8,r2
 400d2c8:	300c90fa 	slli	r6,r6,3
 400d2cc:	49009626 	beq	r9,r4,400d528 <__subdf3+0x2c0>
 400d2d0:	39c0005c 	xori	r7,r7,1
 400d2d4:	8245c83a 	sub	r2,r16,r9
 400d2d8:	3c807426 	beq	r7,r18,400d4ac <__subdf3+0x244>
 400d2dc:	0080af0e 	bge	zero,r2,400d59c <__subdf3+0x334>
 400d2e0:	48002a1e 	bne	r9,zero,400d38c <__subdf3+0x124>
 400d2e4:	2988b03a 	or	r4,r5,r6
 400d2e8:	20009a1e 	bne	r4,zero,400d554 <__subdf3+0x2ec>
 400d2ec:	888001cc 	andi	r2,r17,7
 400d2f0:	10000726 	beq	r2,zero,400d310 <__subdf3+0xa8>
 400d2f4:	888003cc 	andi	r2,r17,15
 400d2f8:	01000104 	movi	r4,4
 400d2fc:	11000426 	beq	r2,r4,400d310 <__subdf3+0xa8>
 400d300:	890b883a 	add	r5,r17,r4
 400d304:	2c63803a 	cmpltu	r17,r5,r17
 400d308:	1c47883a 	add	r3,r3,r17
 400d30c:	2823883a 	mov	r17,r5
 400d310:	1880202c 	andhi	r2,r3,128
 400d314:	10005926 	beq	r2,zero,400d47c <__subdf3+0x214>
 400d318:	84000044 	addi	r16,r16,1
 400d31c:	0081ffc4 	movi	r2,2047
 400d320:	8080be26 	beq	r16,r2,400d61c <__subdf3+0x3b4>
 400d324:	017fe034 	movhi	r5,65408
 400d328:	297fffc4 	addi	r5,r5,-1
 400d32c:	1946703a 	and	r3,r3,r5
 400d330:	1804977a 	slli	r2,r3,29
 400d334:	1806927a 	slli	r3,r3,9
 400d338:	8822d0fa 	srli	r17,r17,3
 400d33c:	8401ffcc 	andi	r16,r16,2047
 400d340:	180ad33a 	srli	r5,r3,12
 400d344:	9100004c 	andi	r4,r18,1
 400d348:	1444b03a 	or	r2,r2,r17
 400d34c:	80c1ffcc 	andi	r3,r16,2047
 400d350:	1820953a 	slli	r16,r3,20
 400d354:	20c03fcc 	andi	r3,r4,255
 400d358:	180897fa 	slli	r4,r3,31
 400d35c:	00c00434 	movhi	r3,16
 400d360:	18ffffc4 	addi	r3,r3,-1
 400d364:	28c6703a 	and	r3,r5,r3
 400d368:	1c06b03a 	or	r3,r3,r16
 400d36c:	1906b03a 	or	r3,r3,r4
 400d370:	dfc00417 	ldw	ra,16(sp)
 400d374:	dcc00317 	ldw	r19,12(sp)
 400d378:	dc800217 	ldw	r18,8(sp)
 400d37c:	dc400117 	ldw	r17,4(sp)
 400d380:	dc000017 	ldw	r16,0(sp)
 400d384:	dec00504 	addi	sp,sp,20
 400d388:	f800283a 	ret
 400d38c:	0101ffc4 	movi	r4,2047
 400d390:	813fd626 	beq	r16,r4,400d2ec <__ram_exceptions_end+0xfbf85050>
 400d394:	29402034 	orhi	r5,r5,128
 400d398:	01000e04 	movi	r4,56
 400d39c:	2080a316 	blt	r4,r2,400d62c <__subdf3+0x3c4>
 400d3a0:	010007c4 	movi	r4,31
 400d3a4:	2080c616 	blt	r4,r2,400d6c0 <__subdf3+0x458>
 400d3a8:	01000804 	movi	r4,32
 400d3ac:	2089c83a 	sub	r4,r4,r2
 400d3b0:	2910983a 	sll	r8,r5,r4
 400d3b4:	308ed83a 	srl	r7,r6,r2
 400d3b8:	3108983a 	sll	r4,r6,r4
 400d3bc:	2884d83a 	srl	r2,r5,r2
 400d3c0:	41ccb03a 	or	r6,r8,r7
 400d3c4:	2008c03a 	cmpne	r4,r4,zero
 400d3c8:	310cb03a 	or	r6,r6,r4
 400d3cc:	898dc83a 	sub	r6,r17,r6
 400d3d0:	89a3803a 	cmpltu	r17,r17,r6
 400d3d4:	1887c83a 	sub	r3,r3,r2
 400d3d8:	1c47c83a 	sub	r3,r3,r17
 400d3dc:	3023883a 	mov	r17,r6
 400d3e0:	1880202c 	andhi	r2,r3,128
 400d3e4:	10002326 	beq	r2,zero,400d474 <__subdf3+0x20c>
 400d3e8:	04c02034 	movhi	r19,128
 400d3ec:	9cffffc4 	addi	r19,r19,-1
 400d3f0:	1ce6703a 	and	r19,r3,r19
 400d3f4:	98007a26 	beq	r19,zero,400d5e0 <__subdf3+0x378>
 400d3f8:	9809883a 	mov	r4,r19
 400d3fc:	400dd680 	call	400dd68 <__clzsi2>
 400d400:	113ffe04 	addi	r4,r2,-8
 400d404:	00c007c4 	movi	r3,31
 400d408:	19007b16 	blt	r3,r4,400d5f8 <__subdf3+0x390>
 400d40c:	00800804 	movi	r2,32
 400d410:	1105c83a 	sub	r2,r2,r4
 400d414:	8884d83a 	srl	r2,r17,r2
 400d418:	9906983a 	sll	r3,r19,r4
 400d41c:	8922983a 	sll	r17,r17,r4
 400d420:	10c4b03a 	or	r2,r2,r3
 400d424:	24007816 	blt	r4,r16,400d608 <__subdf3+0x3a0>
 400d428:	2421c83a 	sub	r16,r4,r16
 400d42c:	80c00044 	addi	r3,r16,1
 400d430:	010007c4 	movi	r4,31
 400d434:	20c09516 	blt	r4,r3,400d68c <__subdf3+0x424>
 400d438:	01400804 	movi	r5,32
 400d43c:	28cbc83a 	sub	r5,r5,r3
 400d440:	88c8d83a 	srl	r4,r17,r3
 400d444:	8962983a 	sll	r17,r17,r5
 400d448:	114a983a 	sll	r5,r2,r5
 400d44c:	10c6d83a 	srl	r3,r2,r3
 400d450:	8804c03a 	cmpne	r2,r17,zero
 400d454:	290ab03a 	or	r5,r5,r4
 400d458:	28a2b03a 	or	r17,r5,r2
 400d45c:	0021883a 	mov	r16,zero
 400d460:	003fa206 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400d464:	2090b03a 	or	r8,r4,r2
 400d468:	40018e26 	beq	r8,zero,400daa4 <__subdf3+0x83c>
 400d46c:	1007883a 	mov	r3,r2
 400d470:	2023883a 	mov	r17,r4
 400d474:	888001cc 	andi	r2,r17,7
 400d478:	103f9e1e 	bne	r2,zero,400d2f4 <__ram_exceptions_end+0xfbf85058>
 400d47c:	1804977a 	slli	r2,r3,29
 400d480:	8822d0fa 	srli	r17,r17,3
 400d484:	1810d0fa 	srli	r8,r3,3
 400d488:	9100004c 	andi	r4,r18,1
 400d48c:	1444b03a 	or	r2,r2,r17
 400d490:	00c1ffc4 	movi	r3,2047
 400d494:	80c02826 	beq	r16,r3,400d538 <__subdf3+0x2d0>
 400d498:	01400434 	movhi	r5,16
 400d49c:	297fffc4 	addi	r5,r5,-1
 400d4a0:	80e0703a 	and	r16,r16,r3
 400d4a4:	414a703a 	and	r5,r8,r5
 400d4a8:	003fa806 	br	400d34c <__ram_exceptions_end+0xfbf850b0>
 400d4ac:	0080630e 	bge	zero,r2,400d63c <__subdf3+0x3d4>
 400d4b0:	48003026 	beq	r9,zero,400d574 <__subdf3+0x30c>
 400d4b4:	0101ffc4 	movi	r4,2047
 400d4b8:	813f8c26 	beq	r16,r4,400d2ec <__ram_exceptions_end+0xfbf85050>
 400d4bc:	29402034 	orhi	r5,r5,128
 400d4c0:	01000e04 	movi	r4,56
 400d4c4:	2080a90e 	bge	r4,r2,400d76c <__subdf3+0x504>
 400d4c8:	298cb03a 	or	r6,r5,r6
 400d4cc:	3012c03a 	cmpne	r9,r6,zero
 400d4d0:	0005883a 	mov	r2,zero
 400d4d4:	4c53883a 	add	r9,r9,r17
 400d4d8:	4c63803a 	cmpltu	r17,r9,r17
 400d4dc:	10c7883a 	add	r3,r2,r3
 400d4e0:	88c7883a 	add	r3,r17,r3
 400d4e4:	4823883a 	mov	r17,r9
 400d4e8:	1880202c 	andhi	r2,r3,128
 400d4ec:	1000d026 	beq	r2,zero,400d830 <__subdf3+0x5c8>
 400d4f0:	84000044 	addi	r16,r16,1
 400d4f4:	0081ffc4 	movi	r2,2047
 400d4f8:	8080fe26 	beq	r16,r2,400d8f4 <__subdf3+0x68c>
 400d4fc:	00bfe034 	movhi	r2,65408
 400d500:	10bfffc4 	addi	r2,r2,-1
 400d504:	1886703a 	and	r3,r3,r2
 400d508:	880ad07a 	srli	r5,r17,1
 400d50c:	180497fa 	slli	r2,r3,31
 400d510:	8900004c 	andi	r4,r17,1
 400d514:	2922b03a 	or	r17,r5,r4
 400d518:	1806d07a 	srli	r3,r3,1
 400d51c:	1462b03a 	or	r17,r2,r17
 400d520:	3825883a 	mov	r18,r7
 400d524:	003f7106 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400d528:	2984b03a 	or	r2,r5,r6
 400d52c:	103f6826 	beq	r2,zero,400d2d0 <__ram_exceptions_end+0xfbf85034>
 400d530:	39c03fcc 	andi	r7,r7,255
 400d534:	003f6706 	br	400d2d4 <__ram_exceptions_end+0xfbf85038>
 400d538:	4086b03a 	or	r3,r8,r2
 400d53c:	18015226 	beq	r3,zero,400da88 <__subdf3+0x820>
 400d540:	00c00434 	movhi	r3,16
 400d544:	41400234 	orhi	r5,r8,8
 400d548:	18ffffc4 	addi	r3,r3,-1
 400d54c:	28ca703a 	and	r5,r5,r3
 400d550:	003f7e06 	br	400d34c <__ram_exceptions_end+0xfbf850b0>
 400d554:	10bfffc4 	addi	r2,r2,-1
 400d558:	1000491e 	bne	r2,zero,400d680 <__subdf3+0x418>
 400d55c:	898fc83a 	sub	r7,r17,r6
 400d560:	89e3803a 	cmpltu	r17,r17,r7
 400d564:	1947c83a 	sub	r3,r3,r5
 400d568:	1c47c83a 	sub	r3,r3,r17
 400d56c:	3823883a 	mov	r17,r7
 400d570:	003f9b06 	br	400d3e0 <__ram_exceptions_end+0xfbf85144>
 400d574:	2988b03a 	or	r4,r5,r6
 400d578:	203f5c26 	beq	r4,zero,400d2ec <__ram_exceptions_end+0xfbf85050>
 400d57c:	10bfffc4 	addi	r2,r2,-1
 400d580:	1000931e 	bne	r2,zero,400d7d0 <__subdf3+0x568>
 400d584:	898d883a 	add	r6,r17,r6
 400d588:	3463803a 	cmpltu	r17,r6,r17
 400d58c:	1947883a 	add	r3,r3,r5
 400d590:	88c7883a 	add	r3,r17,r3
 400d594:	3023883a 	mov	r17,r6
 400d598:	003fd306 	br	400d4e8 <__ram_exceptions_end+0xfbf8524c>
 400d59c:	1000541e 	bne	r2,zero,400d6f0 <__subdf3+0x488>
 400d5a0:	80800044 	addi	r2,r16,1
 400d5a4:	1081ffcc 	andi	r2,r2,2047
 400d5a8:	01000044 	movi	r4,1
 400d5ac:	2080a20e 	bge	r4,r2,400d838 <__subdf3+0x5d0>
 400d5b0:	8989c83a 	sub	r4,r17,r6
 400d5b4:	8905803a 	cmpltu	r2,r17,r4
 400d5b8:	1967c83a 	sub	r19,r3,r5
 400d5bc:	98a7c83a 	sub	r19,r19,r2
 400d5c0:	9880202c 	andhi	r2,r19,128
 400d5c4:	10006326 	beq	r2,zero,400d754 <__subdf3+0x4ec>
 400d5c8:	3463c83a 	sub	r17,r6,r17
 400d5cc:	28c7c83a 	sub	r3,r5,r3
 400d5d0:	344d803a 	cmpltu	r6,r6,r17
 400d5d4:	19a7c83a 	sub	r19,r3,r6
 400d5d8:	3825883a 	mov	r18,r7
 400d5dc:	983f861e 	bne	r19,zero,400d3f8 <__ram_exceptions_end+0xfbf8515c>
 400d5e0:	8809883a 	mov	r4,r17
 400d5e4:	400dd680 	call	400dd68 <__clzsi2>
 400d5e8:	10800804 	addi	r2,r2,32
 400d5ec:	113ffe04 	addi	r4,r2,-8
 400d5f0:	00c007c4 	movi	r3,31
 400d5f4:	193f850e 	bge	r3,r4,400d40c <__ram_exceptions_end+0xfbf85170>
 400d5f8:	10bff604 	addi	r2,r2,-40
 400d5fc:	8884983a 	sll	r2,r17,r2
 400d600:	0023883a 	mov	r17,zero
 400d604:	243f880e 	bge	r4,r16,400d428 <__ram_exceptions_end+0xfbf8518c>
 400d608:	00ffe034 	movhi	r3,65408
 400d60c:	18ffffc4 	addi	r3,r3,-1
 400d610:	8121c83a 	sub	r16,r16,r4
 400d614:	10c6703a 	and	r3,r2,r3
 400d618:	003f3406 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400d61c:	9100004c 	andi	r4,r18,1
 400d620:	000b883a 	mov	r5,zero
 400d624:	0005883a 	mov	r2,zero
 400d628:	003f4806 	br	400d34c <__ram_exceptions_end+0xfbf850b0>
 400d62c:	298cb03a 	or	r6,r5,r6
 400d630:	300cc03a 	cmpne	r6,r6,zero
 400d634:	0005883a 	mov	r2,zero
 400d638:	003f6406 	br	400d3cc <__ram_exceptions_end+0xfbf85130>
 400d63c:	10009a1e 	bne	r2,zero,400d8a8 <__subdf3+0x640>
 400d640:	82400044 	addi	r9,r16,1
 400d644:	4881ffcc 	andi	r2,r9,2047
 400d648:	02800044 	movi	r10,1
 400d64c:	5080670e 	bge	r10,r2,400d7ec <__subdf3+0x584>
 400d650:	0081ffc4 	movi	r2,2047
 400d654:	4880af26 	beq	r9,r2,400d914 <__subdf3+0x6ac>
 400d658:	898d883a 	add	r6,r17,r6
 400d65c:	1945883a 	add	r2,r3,r5
 400d660:	3447803a 	cmpltu	r3,r6,r17
 400d664:	1887883a 	add	r3,r3,r2
 400d668:	182297fa 	slli	r17,r3,31
 400d66c:	300cd07a 	srli	r6,r6,1
 400d670:	1806d07a 	srli	r3,r3,1
 400d674:	4821883a 	mov	r16,r9
 400d678:	89a2b03a 	or	r17,r17,r6
 400d67c:	003f1b06 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400d680:	0101ffc4 	movi	r4,2047
 400d684:	813f441e 	bne	r16,r4,400d398 <__ram_exceptions_end+0xfbf850fc>
 400d688:	003f1806 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400d68c:	843ff844 	addi	r16,r16,-31
 400d690:	01400804 	movi	r5,32
 400d694:	1408d83a 	srl	r4,r2,r16
 400d698:	19405026 	beq	r3,r5,400d7dc <__subdf3+0x574>
 400d69c:	01401004 	movi	r5,64
 400d6a0:	28c7c83a 	sub	r3,r5,r3
 400d6a4:	10c4983a 	sll	r2,r2,r3
 400d6a8:	88a2b03a 	or	r17,r17,r2
 400d6ac:	8822c03a 	cmpne	r17,r17,zero
 400d6b0:	2462b03a 	or	r17,r4,r17
 400d6b4:	0007883a 	mov	r3,zero
 400d6b8:	0021883a 	mov	r16,zero
 400d6bc:	003f6d06 	br	400d474 <__ram_exceptions_end+0xfbf851d8>
 400d6c0:	11fff804 	addi	r7,r2,-32
 400d6c4:	01000804 	movi	r4,32
 400d6c8:	29ced83a 	srl	r7,r5,r7
 400d6cc:	11004526 	beq	r2,r4,400d7e4 <__subdf3+0x57c>
 400d6d0:	01001004 	movi	r4,64
 400d6d4:	2089c83a 	sub	r4,r4,r2
 400d6d8:	2904983a 	sll	r2,r5,r4
 400d6dc:	118cb03a 	or	r6,r2,r6
 400d6e0:	300cc03a 	cmpne	r6,r6,zero
 400d6e4:	398cb03a 	or	r6,r7,r6
 400d6e8:	0005883a 	mov	r2,zero
 400d6ec:	003f3706 	br	400d3cc <__ram_exceptions_end+0xfbf85130>
 400d6f0:	80002a26 	beq	r16,zero,400d79c <__subdf3+0x534>
 400d6f4:	0101ffc4 	movi	r4,2047
 400d6f8:	49006626 	beq	r9,r4,400d894 <__subdf3+0x62c>
 400d6fc:	0085c83a 	sub	r2,zero,r2
 400d700:	18c02034 	orhi	r3,r3,128
 400d704:	01000e04 	movi	r4,56
 400d708:	20807e16 	blt	r4,r2,400d904 <__subdf3+0x69c>
 400d70c:	010007c4 	movi	r4,31
 400d710:	2080e716 	blt	r4,r2,400dab0 <__subdf3+0x848>
 400d714:	01000804 	movi	r4,32
 400d718:	2089c83a 	sub	r4,r4,r2
 400d71c:	1914983a 	sll	r10,r3,r4
 400d720:	8890d83a 	srl	r8,r17,r2
 400d724:	8908983a 	sll	r4,r17,r4
 400d728:	1884d83a 	srl	r2,r3,r2
 400d72c:	5222b03a 	or	r17,r10,r8
 400d730:	2006c03a 	cmpne	r3,r4,zero
 400d734:	88e2b03a 	or	r17,r17,r3
 400d738:	3463c83a 	sub	r17,r6,r17
 400d73c:	2885c83a 	sub	r2,r5,r2
 400d740:	344d803a 	cmpltu	r6,r6,r17
 400d744:	1187c83a 	sub	r3,r2,r6
 400d748:	4821883a 	mov	r16,r9
 400d74c:	3825883a 	mov	r18,r7
 400d750:	003f2306 	br	400d3e0 <__ram_exceptions_end+0xfbf85144>
 400d754:	24d0b03a 	or	r8,r4,r19
 400d758:	40001b1e 	bne	r8,zero,400d7c8 <__subdf3+0x560>
 400d75c:	0005883a 	mov	r2,zero
 400d760:	0009883a 	mov	r4,zero
 400d764:	0021883a 	mov	r16,zero
 400d768:	003f4906 	br	400d490 <__ram_exceptions_end+0xfbf851f4>
 400d76c:	010007c4 	movi	r4,31
 400d770:	20803a16 	blt	r4,r2,400d85c <__subdf3+0x5f4>
 400d774:	01000804 	movi	r4,32
 400d778:	2089c83a 	sub	r4,r4,r2
 400d77c:	2912983a 	sll	r9,r5,r4
 400d780:	3090d83a 	srl	r8,r6,r2
 400d784:	3108983a 	sll	r4,r6,r4
 400d788:	2884d83a 	srl	r2,r5,r2
 400d78c:	4a12b03a 	or	r9,r9,r8
 400d790:	2008c03a 	cmpne	r4,r4,zero
 400d794:	4912b03a 	or	r9,r9,r4
 400d798:	003f4e06 	br	400d4d4 <__ram_exceptions_end+0xfbf85238>
 400d79c:	1c48b03a 	or	r4,r3,r17
 400d7a0:	20003c26 	beq	r4,zero,400d894 <__subdf3+0x62c>
 400d7a4:	0084303a 	nor	r2,zero,r2
 400d7a8:	1000381e 	bne	r2,zero,400d88c <__subdf3+0x624>
 400d7ac:	3463c83a 	sub	r17,r6,r17
 400d7b0:	28c5c83a 	sub	r2,r5,r3
 400d7b4:	344d803a 	cmpltu	r6,r6,r17
 400d7b8:	1187c83a 	sub	r3,r2,r6
 400d7bc:	4821883a 	mov	r16,r9
 400d7c0:	3825883a 	mov	r18,r7
 400d7c4:	003f0606 	br	400d3e0 <__ram_exceptions_end+0xfbf85144>
 400d7c8:	2023883a 	mov	r17,r4
 400d7cc:	003f0906 	br	400d3f4 <__ram_exceptions_end+0xfbf85158>
 400d7d0:	0101ffc4 	movi	r4,2047
 400d7d4:	813f3a1e 	bne	r16,r4,400d4c0 <__ram_exceptions_end+0xfbf85224>
 400d7d8:	003ec406 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400d7dc:	0005883a 	mov	r2,zero
 400d7e0:	003fb106 	br	400d6a8 <__ram_exceptions_end+0xfbf8540c>
 400d7e4:	0005883a 	mov	r2,zero
 400d7e8:	003fbc06 	br	400d6dc <__ram_exceptions_end+0xfbf85440>
 400d7ec:	1c44b03a 	or	r2,r3,r17
 400d7f0:	80008e1e 	bne	r16,zero,400da2c <__subdf3+0x7c4>
 400d7f4:	1000c826 	beq	r2,zero,400db18 <__subdf3+0x8b0>
 400d7f8:	2984b03a 	or	r2,r5,r6
 400d7fc:	103ebb26 	beq	r2,zero,400d2ec <__ram_exceptions_end+0xfbf85050>
 400d800:	8989883a 	add	r4,r17,r6
 400d804:	1945883a 	add	r2,r3,r5
 400d808:	2447803a 	cmpltu	r3,r4,r17
 400d80c:	1887883a 	add	r3,r3,r2
 400d810:	1880202c 	andhi	r2,r3,128
 400d814:	2023883a 	mov	r17,r4
 400d818:	103f1626 	beq	r2,zero,400d474 <__ram_exceptions_end+0xfbf851d8>
 400d81c:	00bfe034 	movhi	r2,65408
 400d820:	10bfffc4 	addi	r2,r2,-1
 400d824:	5021883a 	mov	r16,r10
 400d828:	1886703a 	and	r3,r3,r2
 400d82c:	003eaf06 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400d830:	3825883a 	mov	r18,r7
 400d834:	003f0f06 	br	400d474 <__ram_exceptions_end+0xfbf851d8>
 400d838:	1c44b03a 	or	r2,r3,r17
 400d83c:	8000251e 	bne	r16,zero,400d8d4 <__subdf3+0x66c>
 400d840:	1000661e 	bne	r2,zero,400d9dc <__subdf3+0x774>
 400d844:	2990b03a 	or	r8,r5,r6
 400d848:	40009626 	beq	r8,zero,400daa4 <__subdf3+0x83c>
 400d84c:	2807883a 	mov	r3,r5
 400d850:	3023883a 	mov	r17,r6
 400d854:	3825883a 	mov	r18,r7
 400d858:	003ea406 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400d85c:	127ff804 	addi	r9,r2,-32
 400d860:	01000804 	movi	r4,32
 400d864:	2a52d83a 	srl	r9,r5,r9
 400d868:	11008c26 	beq	r2,r4,400da9c <__subdf3+0x834>
 400d86c:	01001004 	movi	r4,64
 400d870:	2085c83a 	sub	r2,r4,r2
 400d874:	2884983a 	sll	r2,r5,r2
 400d878:	118cb03a 	or	r6,r2,r6
 400d87c:	300cc03a 	cmpne	r6,r6,zero
 400d880:	4992b03a 	or	r9,r9,r6
 400d884:	0005883a 	mov	r2,zero
 400d888:	003f1206 	br	400d4d4 <__ram_exceptions_end+0xfbf85238>
 400d88c:	0101ffc4 	movi	r4,2047
 400d890:	493f9c1e 	bne	r9,r4,400d704 <__ram_exceptions_end+0xfbf85468>
 400d894:	2807883a 	mov	r3,r5
 400d898:	3023883a 	mov	r17,r6
 400d89c:	4821883a 	mov	r16,r9
 400d8a0:	3825883a 	mov	r18,r7
 400d8a4:	003e9106 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400d8a8:	80001f1e 	bne	r16,zero,400d928 <__subdf3+0x6c0>
 400d8ac:	1c48b03a 	or	r4,r3,r17
 400d8b0:	20005a26 	beq	r4,zero,400da1c <__subdf3+0x7b4>
 400d8b4:	0084303a 	nor	r2,zero,r2
 400d8b8:	1000561e 	bne	r2,zero,400da14 <__subdf3+0x7ac>
 400d8bc:	89a3883a 	add	r17,r17,r6
 400d8c0:	1945883a 	add	r2,r3,r5
 400d8c4:	898d803a 	cmpltu	r6,r17,r6
 400d8c8:	3087883a 	add	r3,r6,r2
 400d8cc:	4821883a 	mov	r16,r9
 400d8d0:	003f0506 	br	400d4e8 <__ram_exceptions_end+0xfbf8524c>
 400d8d4:	10002b1e 	bne	r2,zero,400d984 <__subdf3+0x71c>
 400d8d8:	2984b03a 	or	r2,r5,r6
 400d8dc:	10008026 	beq	r2,zero,400dae0 <__subdf3+0x878>
 400d8e0:	2807883a 	mov	r3,r5
 400d8e4:	3023883a 	mov	r17,r6
 400d8e8:	3825883a 	mov	r18,r7
 400d8ec:	0401ffc4 	movi	r16,2047
 400d8f0:	003e7e06 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400d8f4:	3809883a 	mov	r4,r7
 400d8f8:	0011883a 	mov	r8,zero
 400d8fc:	0005883a 	mov	r2,zero
 400d900:	003ee306 	br	400d490 <__ram_exceptions_end+0xfbf851f4>
 400d904:	1c62b03a 	or	r17,r3,r17
 400d908:	8822c03a 	cmpne	r17,r17,zero
 400d90c:	0005883a 	mov	r2,zero
 400d910:	003f8906 	br	400d738 <__ram_exceptions_end+0xfbf8549c>
 400d914:	3809883a 	mov	r4,r7
 400d918:	4821883a 	mov	r16,r9
 400d91c:	0011883a 	mov	r8,zero
 400d920:	0005883a 	mov	r2,zero
 400d924:	003eda06 	br	400d490 <__ram_exceptions_end+0xfbf851f4>
 400d928:	0101ffc4 	movi	r4,2047
 400d92c:	49003b26 	beq	r9,r4,400da1c <__subdf3+0x7b4>
 400d930:	0085c83a 	sub	r2,zero,r2
 400d934:	18c02034 	orhi	r3,r3,128
 400d938:	01000e04 	movi	r4,56
 400d93c:	20806e16 	blt	r4,r2,400daf8 <__subdf3+0x890>
 400d940:	010007c4 	movi	r4,31
 400d944:	20807716 	blt	r4,r2,400db24 <__subdf3+0x8bc>
 400d948:	01000804 	movi	r4,32
 400d94c:	2089c83a 	sub	r4,r4,r2
 400d950:	1914983a 	sll	r10,r3,r4
 400d954:	8890d83a 	srl	r8,r17,r2
 400d958:	8908983a 	sll	r4,r17,r4
 400d95c:	1884d83a 	srl	r2,r3,r2
 400d960:	5222b03a 	or	r17,r10,r8
 400d964:	2006c03a 	cmpne	r3,r4,zero
 400d968:	88e2b03a 	or	r17,r17,r3
 400d96c:	89a3883a 	add	r17,r17,r6
 400d970:	1145883a 	add	r2,r2,r5
 400d974:	898d803a 	cmpltu	r6,r17,r6
 400d978:	3087883a 	add	r3,r6,r2
 400d97c:	4821883a 	mov	r16,r9
 400d980:	003ed906 	br	400d4e8 <__ram_exceptions_end+0xfbf8524c>
 400d984:	2984b03a 	or	r2,r5,r6
 400d988:	10004226 	beq	r2,zero,400da94 <__subdf3+0x82c>
 400d98c:	1808d0fa 	srli	r4,r3,3
 400d990:	8822d0fa 	srli	r17,r17,3
 400d994:	1806977a 	slli	r3,r3,29
 400d998:	2080022c 	andhi	r2,r4,8
 400d99c:	1c62b03a 	or	r17,r3,r17
 400d9a0:	10000826 	beq	r2,zero,400d9c4 <__subdf3+0x75c>
 400d9a4:	2812d0fa 	srli	r9,r5,3
 400d9a8:	4880022c 	andhi	r2,r9,8
 400d9ac:	1000051e 	bne	r2,zero,400d9c4 <__subdf3+0x75c>
 400d9b0:	300cd0fa 	srli	r6,r6,3
 400d9b4:	2804977a 	slli	r2,r5,29
 400d9b8:	4809883a 	mov	r4,r9
 400d9bc:	3825883a 	mov	r18,r7
 400d9c0:	11a2b03a 	or	r17,r2,r6
 400d9c4:	8806d77a 	srli	r3,r17,29
 400d9c8:	200890fa 	slli	r4,r4,3
 400d9cc:	882290fa 	slli	r17,r17,3
 400d9d0:	0401ffc4 	movi	r16,2047
 400d9d4:	1906b03a 	or	r3,r3,r4
 400d9d8:	003e4406 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400d9dc:	2984b03a 	or	r2,r5,r6
 400d9e0:	103e4226 	beq	r2,zero,400d2ec <__ram_exceptions_end+0xfbf85050>
 400d9e4:	8989c83a 	sub	r4,r17,r6
 400d9e8:	8911803a 	cmpltu	r8,r17,r4
 400d9ec:	1945c83a 	sub	r2,r3,r5
 400d9f0:	1205c83a 	sub	r2,r2,r8
 400d9f4:	1200202c 	andhi	r8,r2,128
 400d9f8:	403e9a26 	beq	r8,zero,400d464 <__ram_exceptions_end+0xfbf851c8>
 400d9fc:	3463c83a 	sub	r17,r6,r17
 400da00:	28c5c83a 	sub	r2,r5,r3
 400da04:	344d803a 	cmpltu	r6,r6,r17
 400da08:	1187c83a 	sub	r3,r2,r6
 400da0c:	3825883a 	mov	r18,r7
 400da10:	003e3606 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400da14:	0101ffc4 	movi	r4,2047
 400da18:	493fc71e 	bne	r9,r4,400d938 <__ram_exceptions_end+0xfbf8569c>
 400da1c:	2807883a 	mov	r3,r5
 400da20:	3023883a 	mov	r17,r6
 400da24:	4821883a 	mov	r16,r9
 400da28:	003e3006 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400da2c:	10003626 	beq	r2,zero,400db08 <__subdf3+0x8a0>
 400da30:	2984b03a 	or	r2,r5,r6
 400da34:	10001726 	beq	r2,zero,400da94 <__subdf3+0x82c>
 400da38:	1808d0fa 	srli	r4,r3,3
 400da3c:	8822d0fa 	srli	r17,r17,3
 400da40:	1806977a 	slli	r3,r3,29
 400da44:	2080022c 	andhi	r2,r4,8
 400da48:	1c62b03a 	or	r17,r3,r17
 400da4c:	10000726 	beq	r2,zero,400da6c <__subdf3+0x804>
 400da50:	2812d0fa 	srli	r9,r5,3
 400da54:	4880022c 	andhi	r2,r9,8
 400da58:	1000041e 	bne	r2,zero,400da6c <__subdf3+0x804>
 400da5c:	300cd0fa 	srli	r6,r6,3
 400da60:	2804977a 	slli	r2,r5,29
 400da64:	4809883a 	mov	r4,r9
 400da68:	11a2b03a 	or	r17,r2,r6
 400da6c:	8806d77a 	srli	r3,r17,29
 400da70:	200890fa 	slli	r4,r4,3
 400da74:	882290fa 	slli	r17,r17,3
 400da78:	3825883a 	mov	r18,r7
 400da7c:	1906b03a 	or	r3,r3,r4
 400da80:	0401ffc4 	movi	r16,2047
 400da84:	003e1906 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400da88:	000b883a 	mov	r5,zero
 400da8c:	0005883a 	mov	r2,zero
 400da90:	003e2e06 	br	400d34c <__ram_exceptions_end+0xfbf850b0>
 400da94:	0401ffc4 	movi	r16,2047
 400da98:	003e1406 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400da9c:	0005883a 	mov	r2,zero
 400daa0:	003f7506 	br	400d878 <__ram_exceptions_end+0xfbf855dc>
 400daa4:	0005883a 	mov	r2,zero
 400daa8:	0009883a 	mov	r4,zero
 400daac:	003e7806 	br	400d490 <__ram_exceptions_end+0xfbf851f4>
 400dab0:	123ff804 	addi	r8,r2,-32
 400dab4:	01000804 	movi	r4,32
 400dab8:	1a10d83a 	srl	r8,r3,r8
 400dabc:	11002526 	beq	r2,r4,400db54 <__subdf3+0x8ec>
 400dac0:	01001004 	movi	r4,64
 400dac4:	2085c83a 	sub	r2,r4,r2
 400dac8:	1884983a 	sll	r2,r3,r2
 400dacc:	1444b03a 	or	r2,r2,r17
 400dad0:	1004c03a 	cmpne	r2,r2,zero
 400dad4:	40a2b03a 	or	r17,r8,r2
 400dad8:	0005883a 	mov	r2,zero
 400dadc:	003f1606 	br	400d738 <__ram_exceptions_end+0xfbf8549c>
 400dae0:	02000434 	movhi	r8,16
 400dae4:	0009883a 	mov	r4,zero
 400dae8:	423fffc4 	addi	r8,r8,-1
 400daec:	00bfffc4 	movi	r2,-1
 400daf0:	0401ffc4 	movi	r16,2047
 400daf4:	003e6606 	br	400d490 <__ram_exceptions_end+0xfbf851f4>
 400daf8:	1c62b03a 	or	r17,r3,r17
 400dafc:	8822c03a 	cmpne	r17,r17,zero
 400db00:	0005883a 	mov	r2,zero
 400db04:	003f9906 	br	400d96c <__ram_exceptions_end+0xfbf856d0>
 400db08:	2807883a 	mov	r3,r5
 400db0c:	3023883a 	mov	r17,r6
 400db10:	0401ffc4 	movi	r16,2047
 400db14:	003df506 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400db18:	2807883a 	mov	r3,r5
 400db1c:	3023883a 	mov	r17,r6
 400db20:	003df206 	br	400d2ec <__ram_exceptions_end+0xfbf85050>
 400db24:	123ff804 	addi	r8,r2,-32
 400db28:	01000804 	movi	r4,32
 400db2c:	1a10d83a 	srl	r8,r3,r8
 400db30:	11000a26 	beq	r2,r4,400db5c <__subdf3+0x8f4>
 400db34:	01001004 	movi	r4,64
 400db38:	2085c83a 	sub	r2,r4,r2
 400db3c:	1884983a 	sll	r2,r3,r2
 400db40:	1444b03a 	or	r2,r2,r17
 400db44:	1004c03a 	cmpne	r2,r2,zero
 400db48:	40a2b03a 	or	r17,r8,r2
 400db4c:	0005883a 	mov	r2,zero
 400db50:	003f8606 	br	400d96c <__ram_exceptions_end+0xfbf856d0>
 400db54:	0005883a 	mov	r2,zero
 400db58:	003fdc06 	br	400dacc <__ram_exceptions_end+0xfbf85830>
 400db5c:	0005883a 	mov	r2,zero
 400db60:	003ff706 	br	400db40 <__ram_exceptions_end+0xfbf858a4>

0400db64 <__fixdfsi>:
 400db64:	280cd53a 	srli	r6,r5,20
 400db68:	00c00434 	movhi	r3,16
 400db6c:	18ffffc4 	addi	r3,r3,-1
 400db70:	3181ffcc 	andi	r6,r6,2047
 400db74:	01c0ff84 	movi	r7,1022
 400db78:	28c6703a 	and	r3,r5,r3
 400db7c:	280ad7fa 	srli	r5,r5,31
 400db80:	3980120e 	bge	r7,r6,400dbcc <__fixdfsi+0x68>
 400db84:	00810744 	movi	r2,1053
 400db88:	11800c16 	blt	r2,r6,400dbbc <__fixdfsi+0x58>
 400db8c:	00810cc4 	movi	r2,1075
 400db90:	1185c83a 	sub	r2,r2,r6
 400db94:	01c007c4 	movi	r7,31
 400db98:	18c00434 	orhi	r3,r3,16
 400db9c:	38800d16 	blt	r7,r2,400dbd4 <__fixdfsi+0x70>
 400dba0:	31befb44 	addi	r6,r6,-1043
 400dba4:	2084d83a 	srl	r2,r4,r2
 400dba8:	1986983a 	sll	r3,r3,r6
 400dbac:	1884b03a 	or	r2,r3,r2
 400dbb0:	28000726 	beq	r5,zero,400dbd0 <__fixdfsi+0x6c>
 400dbb4:	0085c83a 	sub	r2,zero,r2
 400dbb8:	f800283a 	ret
 400dbbc:	00a00034 	movhi	r2,32768
 400dbc0:	10bfffc4 	addi	r2,r2,-1
 400dbc4:	2885883a 	add	r2,r5,r2
 400dbc8:	f800283a 	ret
 400dbcc:	0005883a 	mov	r2,zero
 400dbd0:	f800283a 	ret
 400dbd4:	008104c4 	movi	r2,1043
 400dbd8:	1185c83a 	sub	r2,r2,r6
 400dbdc:	1884d83a 	srl	r2,r3,r2
 400dbe0:	003ff306 	br	400dbb0 <__ram_exceptions_end+0xfbf85914>

0400dbe4 <__floatsidf>:
 400dbe4:	defffd04 	addi	sp,sp,-12
 400dbe8:	dfc00215 	stw	ra,8(sp)
 400dbec:	dc400115 	stw	r17,4(sp)
 400dbf0:	dc000015 	stw	r16,0(sp)
 400dbf4:	20002b26 	beq	r4,zero,400dca4 <__floatsidf+0xc0>
 400dbf8:	2023883a 	mov	r17,r4
 400dbfc:	2020d7fa 	srli	r16,r4,31
 400dc00:	20002d16 	blt	r4,zero,400dcb8 <__floatsidf+0xd4>
 400dc04:	8809883a 	mov	r4,r17
 400dc08:	400dd680 	call	400dd68 <__clzsi2>
 400dc0c:	01410784 	movi	r5,1054
 400dc10:	288bc83a 	sub	r5,r5,r2
 400dc14:	01010cc4 	movi	r4,1075
 400dc18:	2149c83a 	sub	r4,r4,r5
 400dc1c:	00c007c4 	movi	r3,31
 400dc20:	1900160e 	bge	r3,r4,400dc7c <__floatsidf+0x98>
 400dc24:	00c104c4 	movi	r3,1043
 400dc28:	1947c83a 	sub	r3,r3,r5
 400dc2c:	88c6983a 	sll	r3,r17,r3
 400dc30:	00800434 	movhi	r2,16
 400dc34:	10bfffc4 	addi	r2,r2,-1
 400dc38:	1886703a 	and	r3,r3,r2
 400dc3c:	2941ffcc 	andi	r5,r5,2047
 400dc40:	800d883a 	mov	r6,r16
 400dc44:	0005883a 	mov	r2,zero
 400dc48:	280a953a 	slli	r5,r5,20
 400dc4c:	31803fcc 	andi	r6,r6,255
 400dc50:	01000434 	movhi	r4,16
 400dc54:	300c97fa 	slli	r6,r6,31
 400dc58:	213fffc4 	addi	r4,r4,-1
 400dc5c:	1906703a 	and	r3,r3,r4
 400dc60:	1946b03a 	or	r3,r3,r5
 400dc64:	1986b03a 	or	r3,r3,r6
 400dc68:	dfc00217 	ldw	ra,8(sp)
 400dc6c:	dc400117 	ldw	r17,4(sp)
 400dc70:	dc000017 	ldw	r16,0(sp)
 400dc74:	dec00304 	addi	sp,sp,12
 400dc78:	f800283a 	ret
 400dc7c:	00c002c4 	movi	r3,11
 400dc80:	1887c83a 	sub	r3,r3,r2
 400dc84:	88c6d83a 	srl	r3,r17,r3
 400dc88:	8904983a 	sll	r2,r17,r4
 400dc8c:	01000434 	movhi	r4,16
 400dc90:	213fffc4 	addi	r4,r4,-1
 400dc94:	2941ffcc 	andi	r5,r5,2047
 400dc98:	1906703a 	and	r3,r3,r4
 400dc9c:	800d883a 	mov	r6,r16
 400dca0:	003fe906 	br	400dc48 <__ram_exceptions_end+0xfbf859ac>
 400dca4:	000d883a 	mov	r6,zero
 400dca8:	000b883a 	mov	r5,zero
 400dcac:	0007883a 	mov	r3,zero
 400dcb0:	0005883a 	mov	r2,zero
 400dcb4:	003fe406 	br	400dc48 <__ram_exceptions_end+0xfbf859ac>
 400dcb8:	0123c83a 	sub	r17,zero,r4
 400dcbc:	003fd106 	br	400dc04 <__ram_exceptions_end+0xfbf85968>

0400dcc0 <__floatunsidf>:
 400dcc0:	defffe04 	addi	sp,sp,-8
 400dcc4:	dc000015 	stw	r16,0(sp)
 400dcc8:	dfc00115 	stw	ra,4(sp)
 400dccc:	2021883a 	mov	r16,r4
 400dcd0:	20002226 	beq	r4,zero,400dd5c <__floatunsidf+0x9c>
 400dcd4:	400dd680 	call	400dd68 <__clzsi2>
 400dcd8:	01010784 	movi	r4,1054
 400dcdc:	2089c83a 	sub	r4,r4,r2
 400dce0:	01810cc4 	movi	r6,1075
 400dce4:	310dc83a 	sub	r6,r6,r4
 400dce8:	00c007c4 	movi	r3,31
 400dcec:	1980120e 	bge	r3,r6,400dd38 <__floatunsidf+0x78>
 400dcf0:	00c104c4 	movi	r3,1043
 400dcf4:	1907c83a 	sub	r3,r3,r4
 400dcf8:	80ca983a 	sll	r5,r16,r3
 400dcfc:	00800434 	movhi	r2,16
 400dd00:	10bfffc4 	addi	r2,r2,-1
 400dd04:	2101ffcc 	andi	r4,r4,2047
 400dd08:	0021883a 	mov	r16,zero
 400dd0c:	288a703a 	and	r5,r5,r2
 400dd10:	2008953a 	slli	r4,r4,20
 400dd14:	00c00434 	movhi	r3,16
 400dd18:	18ffffc4 	addi	r3,r3,-1
 400dd1c:	28c6703a 	and	r3,r5,r3
 400dd20:	8005883a 	mov	r2,r16
 400dd24:	1906b03a 	or	r3,r3,r4
 400dd28:	dfc00117 	ldw	ra,4(sp)
 400dd2c:	dc000017 	ldw	r16,0(sp)
 400dd30:	dec00204 	addi	sp,sp,8
 400dd34:	f800283a 	ret
 400dd38:	00c002c4 	movi	r3,11
 400dd3c:	188bc83a 	sub	r5,r3,r2
 400dd40:	814ad83a 	srl	r5,r16,r5
 400dd44:	00c00434 	movhi	r3,16
 400dd48:	18ffffc4 	addi	r3,r3,-1
 400dd4c:	81a0983a 	sll	r16,r16,r6
 400dd50:	2101ffcc 	andi	r4,r4,2047
 400dd54:	28ca703a 	and	r5,r5,r3
 400dd58:	003fed06 	br	400dd10 <__ram_exceptions_end+0xfbf85a74>
 400dd5c:	0009883a 	mov	r4,zero
 400dd60:	000b883a 	mov	r5,zero
 400dd64:	003fea06 	br	400dd10 <__ram_exceptions_end+0xfbf85a74>

0400dd68 <__clzsi2>:
 400dd68:	00bfffd4 	movui	r2,65535
 400dd6c:	11000536 	bltu	r2,r4,400dd84 <__clzsi2+0x1c>
 400dd70:	00803fc4 	movi	r2,255
 400dd74:	11000f36 	bltu	r2,r4,400ddb4 <__clzsi2+0x4c>
 400dd78:	00800804 	movi	r2,32
 400dd7c:	0007883a 	mov	r3,zero
 400dd80:	00000506 	br	400dd98 <__clzsi2+0x30>
 400dd84:	00804034 	movhi	r2,256
 400dd88:	10bfffc4 	addi	r2,r2,-1
 400dd8c:	11000c2e 	bgeu	r2,r4,400ddc0 <__clzsi2+0x58>
 400dd90:	00800204 	movi	r2,8
 400dd94:	00c00604 	movi	r3,24
 400dd98:	20c8d83a 	srl	r4,r4,r3
 400dd9c:	00c10074 	movhi	r3,1025
 400dda0:	18d68504 	addi	r3,r3,23060
 400dda4:	1909883a 	add	r4,r3,r4
 400dda8:	20c00003 	ldbu	r3,0(r4)
 400ddac:	10c5c83a 	sub	r2,r2,r3
 400ddb0:	f800283a 	ret
 400ddb4:	00800604 	movi	r2,24
 400ddb8:	00c00204 	movi	r3,8
 400ddbc:	003ff606 	br	400dd98 <__ram_exceptions_end+0xfbf85afc>
 400ddc0:	00800404 	movi	r2,16
 400ddc4:	1007883a 	mov	r3,r2
 400ddc8:	003ff306 	br	400dd98 <__ram_exceptions_end+0xfbf85afc>

0400ddcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ddcc:	defffe04 	addi	sp,sp,-8
 400ddd0:	dfc00115 	stw	ra,4(sp)
 400ddd4:	df000015 	stw	fp,0(sp)
 400ddd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400dddc:	d0a00c17 	ldw	r2,-32720(gp)
 400dde0:	10000326 	beq	r2,zero,400ddf0 <alt_get_errno+0x24>
 400dde4:	d0a00c17 	ldw	r2,-32720(gp)
 400dde8:	103ee83a 	callr	r2
 400ddec:	00000106 	br	400ddf4 <alt_get_errno+0x28>
 400ddf0:	d0a34604 	addi	r2,gp,-29416
}
 400ddf4:	e037883a 	mov	sp,fp
 400ddf8:	dfc00117 	ldw	ra,4(sp)
 400ddfc:	df000017 	ldw	fp,0(sp)
 400de00:	dec00204 	addi	sp,sp,8
 400de04:	f800283a 	ret

0400de08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400de08:	defffb04 	addi	sp,sp,-20
 400de0c:	dfc00415 	stw	ra,16(sp)
 400de10:	df000315 	stw	fp,12(sp)
 400de14:	df000304 	addi	fp,sp,12
 400de18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400de1c:	e0bfff17 	ldw	r2,-4(fp)
 400de20:	10000816 	blt	r2,zero,400de44 <close+0x3c>
 400de24:	01400304 	movi	r5,12
 400de28:	e13fff17 	ldw	r4,-4(fp)
 400de2c:	40011140 	call	4001114 <__mulsi3>
 400de30:	1007883a 	mov	r3,r2
 400de34:	00810074 	movhi	r2,1025
 400de38:	109a3504 	addi	r2,r2,26836
 400de3c:	1885883a 	add	r2,r3,r2
 400de40:	00000106 	br	400de48 <close+0x40>
 400de44:	0005883a 	mov	r2,zero
 400de48:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400de4c:	e0bffd17 	ldw	r2,-12(fp)
 400de50:	10001926 	beq	r2,zero,400deb8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400de54:	e0bffd17 	ldw	r2,-12(fp)
 400de58:	10800017 	ldw	r2,0(r2)
 400de5c:	10800417 	ldw	r2,16(r2)
 400de60:	10000626 	beq	r2,zero,400de7c <close+0x74>
 400de64:	e0bffd17 	ldw	r2,-12(fp)
 400de68:	10800017 	ldw	r2,0(r2)
 400de6c:	10800417 	ldw	r2,16(r2)
 400de70:	e13ffd17 	ldw	r4,-12(fp)
 400de74:	103ee83a 	callr	r2
 400de78:	00000106 	br	400de80 <close+0x78>
 400de7c:	0005883a 	mov	r2,zero
 400de80:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400de84:	e13fff17 	ldw	r4,-4(fp)
 400de88:	400e4e00 	call	400e4e0 <alt_release_fd>
    if (rval < 0)
 400de8c:	e0bffe17 	ldw	r2,-8(fp)
 400de90:	1000070e 	bge	r2,zero,400deb0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 400de94:	400ddcc0 	call	400ddcc <alt_get_errno>
 400de98:	1007883a 	mov	r3,r2
 400de9c:	e0bffe17 	ldw	r2,-8(fp)
 400dea0:	0085c83a 	sub	r2,zero,r2
 400dea4:	18800015 	stw	r2,0(r3)
      return -1;
 400dea8:	00bfffc4 	movi	r2,-1
 400deac:	00000706 	br	400decc <close+0xc4>
    }
    return 0;
 400deb0:	0005883a 	mov	r2,zero
 400deb4:	00000506 	br	400decc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400deb8:	400ddcc0 	call	400ddcc <alt_get_errno>
 400debc:	1007883a 	mov	r3,r2
 400dec0:	00801444 	movi	r2,81
 400dec4:	18800015 	stw	r2,0(r3)
    return -1;
 400dec8:	00bfffc4 	movi	r2,-1
  }
}
 400decc:	e037883a 	mov	sp,fp
 400ded0:	dfc00117 	ldw	ra,4(sp)
 400ded4:	df000017 	ldw	fp,0(sp)
 400ded8:	dec00204 	addi	sp,sp,8
 400dedc:	f800283a 	ret

0400dee0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400dee0:	defffc04 	addi	sp,sp,-16
 400dee4:	df000315 	stw	fp,12(sp)
 400dee8:	df000304 	addi	fp,sp,12
 400deec:	e13ffd15 	stw	r4,-12(fp)
 400def0:	e17ffe15 	stw	r5,-8(fp)
 400def4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400def8:	e0bfff17 	ldw	r2,-4(fp)
}
 400defc:	e037883a 	mov	sp,fp
 400df00:	df000017 	ldw	fp,0(sp)
 400df04:	dec00104 	addi	sp,sp,4
 400df08:	f800283a 	ret

0400df0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400df0c:	defffe04 	addi	sp,sp,-8
 400df10:	dfc00115 	stw	ra,4(sp)
 400df14:	df000015 	stw	fp,0(sp)
 400df18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400df1c:	d0a00c17 	ldw	r2,-32720(gp)
 400df20:	10000326 	beq	r2,zero,400df30 <alt_get_errno+0x24>
 400df24:	d0a00c17 	ldw	r2,-32720(gp)
 400df28:	103ee83a 	callr	r2
 400df2c:	00000106 	br	400df34 <alt_get_errno+0x28>
 400df30:	d0a34604 	addi	r2,gp,-29416
}
 400df34:	e037883a 	mov	sp,fp
 400df38:	dfc00117 	ldw	ra,4(sp)
 400df3c:	df000017 	ldw	fp,0(sp)
 400df40:	dec00204 	addi	sp,sp,8
 400df44:	f800283a 	ret

0400df48 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400df48:	defffb04 	addi	sp,sp,-20
 400df4c:	dfc00415 	stw	ra,16(sp)
 400df50:	df000315 	stw	fp,12(sp)
 400df54:	df000304 	addi	fp,sp,12
 400df58:	e13ffe15 	stw	r4,-8(fp)
 400df5c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400df60:	e0bffe17 	ldw	r2,-8(fp)
 400df64:	10000816 	blt	r2,zero,400df88 <fstat+0x40>
 400df68:	01400304 	movi	r5,12
 400df6c:	e13ffe17 	ldw	r4,-8(fp)
 400df70:	40011140 	call	4001114 <__mulsi3>
 400df74:	1007883a 	mov	r3,r2
 400df78:	00810074 	movhi	r2,1025
 400df7c:	109a3504 	addi	r2,r2,26836
 400df80:	1885883a 	add	r2,r3,r2
 400df84:	00000106 	br	400df8c <fstat+0x44>
 400df88:	0005883a 	mov	r2,zero
 400df8c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400df90:	e0bffd17 	ldw	r2,-12(fp)
 400df94:	10001026 	beq	r2,zero,400dfd8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400df98:	e0bffd17 	ldw	r2,-12(fp)
 400df9c:	10800017 	ldw	r2,0(r2)
 400dfa0:	10800817 	ldw	r2,32(r2)
 400dfa4:	10000726 	beq	r2,zero,400dfc4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 400dfa8:	e0bffd17 	ldw	r2,-12(fp)
 400dfac:	10800017 	ldw	r2,0(r2)
 400dfb0:	10800817 	ldw	r2,32(r2)
 400dfb4:	e17fff17 	ldw	r5,-4(fp)
 400dfb8:	e13ffd17 	ldw	r4,-12(fp)
 400dfbc:	103ee83a 	callr	r2
 400dfc0:	00000a06 	br	400dfec <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400dfc4:	e0bfff17 	ldw	r2,-4(fp)
 400dfc8:	00c80004 	movi	r3,8192
 400dfcc:	10c00115 	stw	r3,4(r2)
      return 0;
 400dfd0:	0005883a 	mov	r2,zero
 400dfd4:	00000506 	br	400dfec <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400dfd8:	400df0c0 	call	400df0c <alt_get_errno>
 400dfdc:	1007883a 	mov	r3,r2
 400dfe0:	00801444 	movi	r2,81
 400dfe4:	18800015 	stw	r2,0(r3)
    return -1;
 400dfe8:	00bfffc4 	movi	r2,-1
  }
}
 400dfec:	e037883a 	mov	sp,fp
 400dff0:	dfc00117 	ldw	ra,4(sp)
 400dff4:	df000017 	ldw	fp,0(sp)
 400dff8:	dec00204 	addi	sp,sp,8
 400dffc:	f800283a 	ret

0400e000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e000:	defffe04 	addi	sp,sp,-8
 400e004:	dfc00115 	stw	ra,4(sp)
 400e008:	df000015 	stw	fp,0(sp)
 400e00c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e010:	d0a00c17 	ldw	r2,-32720(gp)
 400e014:	10000326 	beq	r2,zero,400e024 <alt_get_errno+0x24>
 400e018:	d0a00c17 	ldw	r2,-32720(gp)
 400e01c:	103ee83a 	callr	r2
 400e020:	00000106 	br	400e028 <alt_get_errno+0x28>
 400e024:	d0a34604 	addi	r2,gp,-29416
}
 400e028:	e037883a 	mov	sp,fp
 400e02c:	dfc00117 	ldw	ra,4(sp)
 400e030:	df000017 	ldw	fp,0(sp)
 400e034:	dec00204 	addi	sp,sp,8
 400e038:	f800283a 	ret

0400e03c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400e03c:	deffed04 	addi	sp,sp,-76
 400e040:	dfc01215 	stw	ra,72(sp)
 400e044:	df001115 	stw	fp,68(sp)
 400e048:	df001104 	addi	fp,sp,68
 400e04c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e050:	e0bfff17 	ldw	r2,-4(fp)
 400e054:	10000816 	blt	r2,zero,400e078 <isatty+0x3c>
 400e058:	01400304 	movi	r5,12
 400e05c:	e13fff17 	ldw	r4,-4(fp)
 400e060:	40011140 	call	4001114 <__mulsi3>
 400e064:	1007883a 	mov	r3,r2
 400e068:	00810074 	movhi	r2,1025
 400e06c:	109a3504 	addi	r2,r2,26836
 400e070:	1885883a 	add	r2,r3,r2
 400e074:	00000106 	br	400e07c <isatty+0x40>
 400e078:	0005883a 	mov	r2,zero
 400e07c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400e080:	e0bfef17 	ldw	r2,-68(fp)
 400e084:	10000e26 	beq	r2,zero,400e0c0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400e088:	e0bfef17 	ldw	r2,-68(fp)
 400e08c:	10800017 	ldw	r2,0(r2)
 400e090:	10800817 	ldw	r2,32(r2)
 400e094:	1000021e 	bne	r2,zero,400e0a0 <isatty+0x64>
    {
      return 1;
 400e098:	00800044 	movi	r2,1
 400e09c:	00000d06 	br	400e0d4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400e0a0:	e0bff004 	addi	r2,fp,-64
 400e0a4:	100b883a 	mov	r5,r2
 400e0a8:	e13fff17 	ldw	r4,-4(fp)
 400e0ac:	400df480 	call	400df48 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400e0b0:	e0bff117 	ldw	r2,-60(fp)
 400e0b4:	10880020 	cmpeqi	r2,r2,8192
 400e0b8:	10803fcc 	andi	r2,r2,255
 400e0bc:	00000506 	br	400e0d4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400e0c0:	400e0000 	call	400e000 <alt_get_errno>
 400e0c4:	1007883a 	mov	r3,r2
 400e0c8:	00801444 	movi	r2,81
 400e0cc:	18800015 	stw	r2,0(r3)
    return 0;
 400e0d0:	0005883a 	mov	r2,zero
  }
}
 400e0d4:	e037883a 	mov	sp,fp
 400e0d8:	dfc00117 	ldw	ra,4(sp)
 400e0dc:	df000017 	ldw	fp,0(sp)
 400e0e0:	dec00204 	addi	sp,sp,8
 400e0e4:	f800283a 	ret

0400e0e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400e0e8:	defffc04 	addi	sp,sp,-16
 400e0ec:	df000315 	stw	fp,12(sp)
 400e0f0:	df000304 	addi	fp,sp,12
 400e0f4:	e13ffd15 	stw	r4,-12(fp)
 400e0f8:	e17ffe15 	stw	r5,-8(fp)
 400e0fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400e100:	e0fffe17 	ldw	r3,-8(fp)
 400e104:	e0bffd17 	ldw	r2,-12(fp)
 400e108:	18800c26 	beq	r3,r2,400e13c <alt_load_section+0x54>
  {
    while( to != end )
 400e10c:	00000806 	br	400e130 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400e110:	e0bffe17 	ldw	r2,-8(fp)
 400e114:	10c00104 	addi	r3,r2,4
 400e118:	e0fffe15 	stw	r3,-8(fp)
 400e11c:	e0fffd17 	ldw	r3,-12(fp)
 400e120:	19000104 	addi	r4,r3,4
 400e124:	e13ffd15 	stw	r4,-12(fp)
 400e128:	18c00017 	ldw	r3,0(r3)
 400e12c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400e130:	e0fffe17 	ldw	r3,-8(fp)
 400e134:	e0bfff17 	ldw	r2,-4(fp)
 400e138:	18bff51e 	bne	r3,r2,400e110 <__ram_exceptions_end+0xfbf85e74>
    {
      *to++ = *from++;
    }
  }
}
 400e13c:	0001883a 	nop
 400e140:	e037883a 	mov	sp,fp
 400e144:	df000017 	ldw	fp,0(sp)
 400e148:	dec00104 	addi	sp,sp,4
 400e14c:	f800283a 	ret

0400e150 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400e150:	defffe04 	addi	sp,sp,-8
 400e154:	dfc00115 	stw	ra,4(sp)
 400e158:	df000015 	stw	fp,0(sp)
 400e15c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400e160:	01810074 	movhi	r6,1025
 400e164:	319b2904 	addi	r6,r6,27812
 400e168:	01410074 	movhi	r5,1025
 400e16c:	29580204 	addi	r5,r5,24584
 400e170:	01010074 	movhi	r4,1025
 400e174:	211b2904 	addi	r4,r4,27812
 400e178:	400e0e80 	call	400e0e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400e17c:	01820274 	movhi	r6,2057
 400e180:	31a0a704 	addi	r6,r6,-32100
 400e184:	01420274 	movhi	r5,2057
 400e188:	29600804 	addi	r5,r5,-32736
 400e18c:	01010034 	movhi	r4,1024
 400e190:	21000004 	addi	r4,r4,0
 400e194:	400e0e80 	call	400e0e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400e198:	01810074 	movhi	r6,1025
 400e19c:	31980204 	addi	r6,r6,24584
 400e1a0:	01410074 	movhi	r5,1025
 400e1a4:	2955c304 	addi	r5,r5,22284
 400e1a8:	01010074 	movhi	r4,1025
 400e1ac:	2115c304 	addi	r4,r4,22284
 400e1b0:	400e0e80 	call	400e0e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400e1b4:	4013a0c0 	call	4013a0c <alt_dcache_flush_all>
  alt_icache_flush_all();
 400e1b8:	4013b9c0 	call	4013b9c <alt_icache_flush_all>
}
 400e1bc:	0001883a 	nop
 400e1c0:	e037883a 	mov	sp,fp
 400e1c4:	dfc00117 	ldw	ra,4(sp)
 400e1c8:	df000017 	ldw	fp,0(sp)
 400e1cc:	dec00204 	addi	sp,sp,8
 400e1d0:	f800283a 	ret

0400e1d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e1d4:	defffe04 	addi	sp,sp,-8
 400e1d8:	dfc00115 	stw	ra,4(sp)
 400e1dc:	df000015 	stw	fp,0(sp)
 400e1e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e1e4:	d0a00c17 	ldw	r2,-32720(gp)
 400e1e8:	10000326 	beq	r2,zero,400e1f8 <alt_get_errno+0x24>
 400e1ec:	d0a00c17 	ldw	r2,-32720(gp)
 400e1f0:	103ee83a 	callr	r2
 400e1f4:	00000106 	br	400e1fc <alt_get_errno+0x28>
 400e1f8:	d0a34604 	addi	r2,gp,-29416
}
 400e1fc:	e037883a 	mov	sp,fp
 400e200:	dfc00117 	ldw	ra,4(sp)
 400e204:	df000017 	ldw	fp,0(sp)
 400e208:	dec00204 	addi	sp,sp,8
 400e20c:	f800283a 	ret

0400e210 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400e210:	defff904 	addi	sp,sp,-28
 400e214:	dfc00615 	stw	ra,24(sp)
 400e218:	df000515 	stw	fp,20(sp)
 400e21c:	df000504 	addi	fp,sp,20
 400e220:	e13ffd15 	stw	r4,-12(fp)
 400e224:	e17ffe15 	stw	r5,-8(fp)
 400e228:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400e22c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e230:	e0bffd17 	ldw	r2,-12(fp)
 400e234:	10000816 	blt	r2,zero,400e258 <lseek+0x48>
 400e238:	01400304 	movi	r5,12
 400e23c:	e13ffd17 	ldw	r4,-12(fp)
 400e240:	40011140 	call	4001114 <__mulsi3>
 400e244:	1007883a 	mov	r3,r2
 400e248:	00810074 	movhi	r2,1025
 400e24c:	109a3504 	addi	r2,r2,26836
 400e250:	1885883a 	add	r2,r3,r2
 400e254:	00000106 	br	400e25c <lseek+0x4c>
 400e258:	0005883a 	mov	r2,zero
 400e25c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400e260:	e0bffc17 	ldw	r2,-16(fp)
 400e264:	10001026 	beq	r2,zero,400e2a8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400e268:	e0bffc17 	ldw	r2,-16(fp)
 400e26c:	10800017 	ldw	r2,0(r2)
 400e270:	10800717 	ldw	r2,28(r2)
 400e274:	10000926 	beq	r2,zero,400e29c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400e278:	e0bffc17 	ldw	r2,-16(fp)
 400e27c:	10800017 	ldw	r2,0(r2)
 400e280:	10800717 	ldw	r2,28(r2)
 400e284:	e1bfff17 	ldw	r6,-4(fp)
 400e288:	e17ffe17 	ldw	r5,-8(fp)
 400e28c:	e13ffc17 	ldw	r4,-16(fp)
 400e290:	103ee83a 	callr	r2
 400e294:	e0bffb15 	stw	r2,-20(fp)
 400e298:	00000506 	br	400e2b0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400e29c:	00bfde84 	movi	r2,-134
 400e2a0:	e0bffb15 	stw	r2,-20(fp)
 400e2a4:	00000206 	br	400e2b0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400e2a8:	00bfebc4 	movi	r2,-81
 400e2ac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400e2b0:	e0bffb17 	ldw	r2,-20(fp)
 400e2b4:	1000070e 	bge	r2,zero,400e2d4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 400e2b8:	400e1d40 	call	400e1d4 <alt_get_errno>
 400e2bc:	1007883a 	mov	r3,r2
 400e2c0:	e0bffb17 	ldw	r2,-20(fp)
 400e2c4:	0085c83a 	sub	r2,zero,r2
 400e2c8:	18800015 	stw	r2,0(r3)
    rc = -1;
 400e2cc:	00bfffc4 	movi	r2,-1
 400e2d0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400e2d4:	e0bffb17 	ldw	r2,-20(fp)
}
 400e2d8:	e037883a 	mov	sp,fp
 400e2dc:	dfc00117 	ldw	ra,4(sp)
 400e2e0:	df000017 	ldw	fp,0(sp)
 400e2e4:	dec00204 	addi	sp,sp,8
 400e2e8:	f800283a 	ret

0400e2ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400e2ec:	defffd04 	addi	sp,sp,-12
 400e2f0:	dfc00215 	stw	ra,8(sp)
 400e2f4:	df000115 	stw	fp,4(sp)
 400e2f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400e2fc:	0009883a 	mov	r4,zero
 400e300:	400e7840 	call	400e784 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400e304:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400e308:	400e7bc0 	call	400e7bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400e30c:	01810074 	movhi	r6,1025
 400e310:	3196c804 	addi	r6,r6,23328
 400e314:	01410074 	movhi	r5,1025
 400e318:	2956c804 	addi	r5,r5,23328
 400e31c:	01010074 	movhi	r4,1025
 400e320:	2116c804 	addi	r4,r4,23328
 400e324:	4013f400 	call	4013f40 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400e328:	d0a34717 	ldw	r2,-29412(gp)
 400e32c:	d0e34817 	ldw	r3,-29408(gp)
 400e330:	d1234917 	ldw	r4,-29404(gp)
 400e334:	200d883a 	mov	r6,r4
 400e338:	180b883a 	mov	r5,r3
 400e33c:	1009883a 	mov	r4,r2
 400e340:	4000de00 	call	4000de0 <main>
 400e344:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400e348:	01000044 	movi	r4,1
 400e34c:	400de080 	call	400de08 <close>
  exit (result);
 400e350:	e13fff17 	ldw	r4,-4(fp)
 400e354:	40149080 	call	4014908 <exit>

0400e358 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400e358:	defffe04 	addi	sp,sp,-8
 400e35c:	df000115 	stw	fp,4(sp)
 400e360:	df000104 	addi	fp,sp,4
 400e364:	e13fff15 	stw	r4,-4(fp)
}
 400e368:	0001883a 	nop
 400e36c:	e037883a 	mov	sp,fp
 400e370:	df000017 	ldw	fp,0(sp)
 400e374:	dec00104 	addi	sp,sp,4
 400e378:	f800283a 	ret

0400e37c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400e37c:	defffe04 	addi	sp,sp,-8
 400e380:	df000115 	stw	fp,4(sp)
 400e384:	df000104 	addi	fp,sp,4
 400e388:	e13fff15 	stw	r4,-4(fp)
}
 400e38c:	0001883a 	nop
 400e390:	e037883a 	mov	sp,fp
 400e394:	df000017 	ldw	fp,0(sp)
 400e398:	dec00104 	addi	sp,sp,4
 400e39c:	f800283a 	ret

0400e3a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e3a0:	defffe04 	addi	sp,sp,-8
 400e3a4:	dfc00115 	stw	ra,4(sp)
 400e3a8:	df000015 	stw	fp,0(sp)
 400e3ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e3b0:	d0a00c17 	ldw	r2,-32720(gp)
 400e3b4:	10000326 	beq	r2,zero,400e3c4 <alt_get_errno+0x24>
 400e3b8:	d0a00c17 	ldw	r2,-32720(gp)
 400e3bc:	103ee83a 	callr	r2
 400e3c0:	00000106 	br	400e3c8 <alt_get_errno+0x28>
 400e3c4:	d0a34604 	addi	r2,gp,-29416
}
 400e3c8:	e037883a 	mov	sp,fp
 400e3cc:	dfc00117 	ldw	ra,4(sp)
 400e3d0:	df000017 	ldw	fp,0(sp)
 400e3d4:	dec00204 	addi	sp,sp,8
 400e3d8:	f800283a 	ret

0400e3dc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400e3dc:	defff904 	addi	sp,sp,-28
 400e3e0:	dfc00615 	stw	ra,24(sp)
 400e3e4:	df000515 	stw	fp,20(sp)
 400e3e8:	df000504 	addi	fp,sp,20
 400e3ec:	e13ffd15 	stw	r4,-12(fp)
 400e3f0:	e17ffe15 	stw	r5,-8(fp)
 400e3f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e3f8:	e0bffd17 	ldw	r2,-12(fp)
 400e3fc:	10000816 	blt	r2,zero,400e420 <read+0x44>
 400e400:	01400304 	movi	r5,12
 400e404:	e13ffd17 	ldw	r4,-12(fp)
 400e408:	40011140 	call	4001114 <__mulsi3>
 400e40c:	1007883a 	mov	r3,r2
 400e410:	00810074 	movhi	r2,1025
 400e414:	109a3504 	addi	r2,r2,26836
 400e418:	1885883a 	add	r2,r3,r2
 400e41c:	00000106 	br	400e424 <read+0x48>
 400e420:	0005883a 	mov	r2,zero
 400e424:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400e428:	e0bffb17 	ldw	r2,-20(fp)
 400e42c:	10002226 	beq	r2,zero,400e4b8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400e430:	e0bffb17 	ldw	r2,-20(fp)
 400e434:	10800217 	ldw	r2,8(r2)
 400e438:	108000cc 	andi	r2,r2,3
 400e43c:	10800060 	cmpeqi	r2,r2,1
 400e440:	1000181e 	bne	r2,zero,400e4a4 <read+0xc8>
        (fd->dev->read))
 400e444:	e0bffb17 	ldw	r2,-20(fp)
 400e448:	10800017 	ldw	r2,0(r2)
 400e44c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400e450:	10001426 	beq	r2,zero,400e4a4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400e454:	e0bffb17 	ldw	r2,-20(fp)
 400e458:	10800017 	ldw	r2,0(r2)
 400e45c:	10800517 	ldw	r2,20(r2)
 400e460:	e0ffff17 	ldw	r3,-4(fp)
 400e464:	180d883a 	mov	r6,r3
 400e468:	e17ffe17 	ldw	r5,-8(fp)
 400e46c:	e13ffb17 	ldw	r4,-20(fp)
 400e470:	103ee83a 	callr	r2
 400e474:	e0bffc15 	stw	r2,-16(fp)
 400e478:	e0bffc17 	ldw	r2,-16(fp)
 400e47c:	1000070e 	bge	r2,zero,400e49c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 400e480:	400e3a00 	call	400e3a0 <alt_get_errno>
 400e484:	1007883a 	mov	r3,r2
 400e488:	e0bffc17 	ldw	r2,-16(fp)
 400e48c:	0085c83a 	sub	r2,zero,r2
 400e490:	18800015 	stw	r2,0(r3)
          return -1;
 400e494:	00bfffc4 	movi	r2,-1
 400e498:	00000c06 	br	400e4cc <read+0xf0>
        }
        return rval;
 400e49c:	e0bffc17 	ldw	r2,-16(fp)
 400e4a0:	00000a06 	br	400e4cc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400e4a4:	400e3a00 	call	400e3a0 <alt_get_errno>
 400e4a8:	1007883a 	mov	r3,r2
 400e4ac:	00800344 	movi	r2,13
 400e4b0:	18800015 	stw	r2,0(r3)
 400e4b4:	00000406 	br	400e4c8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400e4b8:	400e3a00 	call	400e3a0 <alt_get_errno>
 400e4bc:	1007883a 	mov	r3,r2
 400e4c0:	00801444 	movi	r2,81
 400e4c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400e4c8:	00bfffc4 	movi	r2,-1
}
 400e4cc:	e037883a 	mov	sp,fp
 400e4d0:	dfc00117 	ldw	ra,4(sp)
 400e4d4:	df000017 	ldw	fp,0(sp)
 400e4d8:	dec00204 	addi	sp,sp,8
 400e4dc:	f800283a 	ret

0400e4e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400e4e0:	defffc04 	addi	sp,sp,-16
 400e4e4:	dfc00315 	stw	ra,12(sp)
 400e4e8:	df000215 	stw	fp,8(sp)
 400e4ec:	dc000115 	stw	r16,4(sp)
 400e4f0:	df000204 	addi	fp,sp,8
 400e4f4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 400e4f8:	e0bffe17 	ldw	r2,-8(fp)
 400e4fc:	108000d0 	cmplti	r2,r2,3
 400e500:	1000111e 	bne	r2,zero,400e548 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 400e504:	04010074 	movhi	r16,1025
 400e508:	841a3504 	addi	r16,r16,26836
 400e50c:	e0bffe17 	ldw	r2,-8(fp)
 400e510:	01400304 	movi	r5,12
 400e514:	1009883a 	mov	r4,r2
 400e518:	40011140 	call	4001114 <__mulsi3>
 400e51c:	8085883a 	add	r2,r16,r2
 400e520:	10800204 	addi	r2,r2,8
 400e524:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400e528:	04010074 	movhi	r16,1025
 400e52c:	841a3504 	addi	r16,r16,26836
 400e530:	e0bffe17 	ldw	r2,-8(fp)
 400e534:	01400304 	movi	r5,12
 400e538:	1009883a 	mov	r4,r2
 400e53c:	40011140 	call	4001114 <__mulsi3>
 400e540:	8085883a 	add	r2,r16,r2
 400e544:	10000015 	stw	zero,0(r2)
  }
}
 400e548:	0001883a 	nop
 400e54c:	e6ffff04 	addi	sp,fp,-4
 400e550:	dfc00217 	ldw	ra,8(sp)
 400e554:	df000117 	ldw	fp,4(sp)
 400e558:	dc000017 	ldw	r16,0(sp)
 400e55c:	dec00304 	addi	sp,sp,12
 400e560:	f800283a 	ret

0400e564 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400e564:	defff904 	addi	sp,sp,-28
 400e568:	df000615 	stw	fp,24(sp)
 400e56c:	df000604 	addi	fp,sp,24
 400e570:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e574:	0005303a 	rdctl	r2,status
 400e578:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e57c:	e0fffe17 	ldw	r3,-8(fp)
 400e580:	00bfff84 	movi	r2,-2
 400e584:	1884703a 	and	r2,r3,r2
 400e588:	1001703a 	wrctl	status,r2
  
  return context;
 400e58c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400e590:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400e594:	d0a00d17 	ldw	r2,-32716(gp)
 400e598:	10c000c4 	addi	r3,r2,3
 400e59c:	00bfff04 	movi	r2,-4
 400e5a0:	1884703a 	and	r2,r3,r2
 400e5a4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400e5a8:	d0e00d17 	ldw	r3,-32716(gp)
 400e5ac:	e0bfff17 	ldw	r2,-4(fp)
 400e5b0:	1887883a 	add	r3,r3,r2
 400e5b4:	00820034 	movhi	r2,2048
 400e5b8:	10800004 	addi	r2,r2,0
 400e5bc:	10c0062e 	bgeu	r2,r3,400e5d8 <sbrk+0x74>
 400e5c0:	e0bffb17 	ldw	r2,-20(fp)
 400e5c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e5c8:	e0bffa17 	ldw	r2,-24(fp)
 400e5cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400e5d0:	00bfffc4 	movi	r2,-1
 400e5d4:	00000b06 	br	400e604 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400e5d8:	d0a00d17 	ldw	r2,-32716(gp)
 400e5dc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400e5e0:	d0e00d17 	ldw	r3,-32716(gp)
 400e5e4:	e0bfff17 	ldw	r2,-4(fp)
 400e5e8:	1885883a 	add	r2,r3,r2
 400e5ec:	d0a00d15 	stw	r2,-32716(gp)
 400e5f0:	e0bffb17 	ldw	r2,-20(fp)
 400e5f4:	e0bffc15 	stw	r2,-16(fp)
 400e5f8:	e0bffc17 	ldw	r2,-16(fp)
 400e5fc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400e600:	e0bffd17 	ldw	r2,-12(fp)
} 
 400e604:	e037883a 	mov	sp,fp
 400e608:	df000017 	ldw	fp,0(sp)
 400e60c:	dec00104 	addi	sp,sp,4
 400e610:	f800283a 	ret

0400e614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e614:	defffe04 	addi	sp,sp,-8
 400e618:	dfc00115 	stw	ra,4(sp)
 400e61c:	df000015 	stw	fp,0(sp)
 400e620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e624:	d0a00c17 	ldw	r2,-32720(gp)
 400e628:	10000326 	beq	r2,zero,400e638 <alt_get_errno+0x24>
 400e62c:	d0a00c17 	ldw	r2,-32720(gp)
 400e630:	103ee83a 	callr	r2
 400e634:	00000106 	br	400e63c <alt_get_errno+0x28>
 400e638:	d0a34604 	addi	r2,gp,-29416
}
 400e63c:	e037883a 	mov	sp,fp
 400e640:	dfc00117 	ldw	ra,4(sp)
 400e644:	df000017 	ldw	fp,0(sp)
 400e648:	dec00204 	addi	sp,sp,8
 400e64c:	f800283a 	ret

0400e650 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400e650:	defff904 	addi	sp,sp,-28
 400e654:	dfc00615 	stw	ra,24(sp)
 400e658:	df000515 	stw	fp,20(sp)
 400e65c:	df000504 	addi	fp,sp,20
 400e660:	e13ffd15 	stw	r4,-12(fp)
 400e664:	e17ffe15 	stw	r5,-8(fp)
 400e668:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e66c:	e0bffd17 	ldw	r2,-12(fp)
 400e670:	10000816 	blt	r2,zero,400e694 <write+0x44>
 400e674:	01400304 	movi	r5,12
 400e678:	e13ffd17 	ldw	r4,-12(fp)
 400e67c:	40011140 	call	4001114 <__mulsi3>
 400e680:	1007883a 	mov	r3,r2
 400e684:	00810074 	movhi	r2,1025
 400e688:	109a3504 	addi	r2,r2,26836
 400e68c:	1885883a 	add	r2,r3,r2
 400e690:	00000106 	br	400e698 <write+0x48>
 400e694:	0005883a 	mov	r2,zero
 400e698:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400e69c:	e0bffb17 	ldw	r2,-20(fp)
 400e6a0:	10002126 	beq	r2,zero,400e728 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400e6a4:	e0bffb17 	ldw	r2,-20(fp)
 400e6a8:	10800217 	ldw	r2,8(r2)
 400e6ac:	108000cc 	andi	r2,r2,3
 400e6b0:	10001826 	beq	r2,zero,400e714 <write+0xc4>
 400e6b4:	e0bffb17 	ldw	r2,-20(fp)
 400e6b8:	10800017 	ldw	r2,0(r2)
 400e6bc:	10800617 	ldw	r2,24(r2)
 400e6c0:	10001426 	beq	r2,zero,400e714 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400e6c4:	e0bffb17 	ldw	r2,-20(fp)
 400e6c8:	10800017 	ldw	r2,0(r2)
 400e6cc:	10800617 	ldw	r2,24(r2)
 400e6d0:	e0ffff17 	ldw	r3,-4(fp)
 400e6d4:	180d883a 	mov	r6,r3
 400e6d8:	e17ffe17 	ldw	r5,-8(fp)
 400e6dc:	e13ffb17 	ldw	r4,-20(fp)
 400e6e0:	103ee83a 	callr	r2
 400e6e4:	e0bffc15 	stw	r2,-16(fp)
 400e6e8:	e0bffc17 	ldw	r2,-16(fp)
 400e6ec:	1000070e 	bge	r2,zero,400e70c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 400e6f0:	400e6140 	call	400e614 <alt_get_errno>
 400e6f4:	1007883a 	mov	r3,r2
 400e6f8:	e0bffc17 	ldw	r2,-16(fp)
 400e6fc:	0085c83a 	sub	r2,zero,r2
 400e700:	18800015 	stw	r2,0(r3)
        return -1;
 400e704:	00bfffc4 	movi	r2,-1
 400e708:	00000c06 	br	400e73c <write+0xec>
      }
      return rval;
 400e70c:	e0bffc17 	ldw	r2,-16(fp)
 400e710:	00000a06 	br	400e73c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400e714:	400e6140 	call	400e614 <alt_get_errno>
 400e718:	1007883a 	mov	r3,r2
 400e71c:	00800344 	movi	r2,13
 400e720:	18800015 	stw	r2,0(r3)
 400e724:	00000406 	br	400e738 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400e728:	400e6140 	call	400e614 <alt_get_errno>
 400e72c:	1007883a 	mov	r3,r2
 400e730:	00801444 	movi	r2,81
 400e734:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400e738:	00bfffc4 	movi	r2,-1
}
 400e73c:	e037883a 	mov	sp,fp
 400e740:	dfc00117 	ldw	ra,4(sp)
 400e744:	df000017 	ldw	fp,0(sp)
 400e748:	dec00204 	addi	sp,sp,8
 400e74c:	f800283a 	ret

0400e750 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400e750:	defffd04 	addi	sp,sp,-12
 400e754:	dfc00215 	stw	ra,8(sp)
 400e758:	df000115 	stw	fp,4(sp)
 400e75c:	df000104 	addi	fp,sp,4
 400e760:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400e764:	d1600904 	addi	r5,gp,-32732
 400e768:	e13fff17 	ldw	r4,-4(fp)
 400e76c:	4013a680 	call	4013a68 <alt_dev_llist_insert>
}
 400e770:	e037883a 	mov	sp,fp
 400e774:	dfc00117 	ldw	ra,4(sp)
 400e778:	df000017 	ldw	fp,0(sp)
 400e77c:	dec00204 	addi	sp,sp,8
 400e780:	f800283a 	ret

0400e784 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400e784:	defffd04 	addi	sp,sp,-12
 400e788:	dfc00215 	stw	ra,8(sp)
 400e78c:	df000115 	stw	fp,4(sp)
 400e790:	df000104 	addi	fp,sp,4
 400e794:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 400e798:	40146280 	call	4014628 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400e79c:	00800044 	movi	r2,1
 400e7a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400e7a4:	0001883a 	nop
 400e7a8:	e037883a 	mov	sp,fp
 400e7ac:	dfc00117 	ldw	ra,4(sp)
 400e7b0:	df000017 	ldw	fp,0(sp)
 400e7b4:	dec00204 	addi	sp,sp,8
 400e7b8:	f800283a 	ret

0400e7bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400e7bc:	defffe04 	addi	sp,sp,-8
 400e7c0:	dfc00115 	stw	ra,4(sp)
 400e7c4:	df000015 	stw	fp,0(sp)
 400e7c8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_I2C_INIT ( ACCELEROMETER_I2C, accelerometer_i2c);
 400e7cc:	01010074 	movhi	r4,1025
 400e7d0:	211a9504 	addi	r4,r4,27220
 400e7d4:	400f2bc0 	call	400f2bc <alt_avalon_i2c_init>
    ALTERA_AVALON_I2C_INIT ( ARDUINO_I2C, arduino_i2c);
 400e7d8:	01010074 	movhi	r4,1025
 400e7dc:	211aa304 	addi	r4,r4,27276
 400e7e0:	400f2bc0 	call	400f2bc <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400e7e4:	01010074 	movhi	r4,1025
 400e7e8:	211ab104 	addi	r4,r4,27332
 400e7ec:	400e7500 	call	400e750 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 400e7f0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 400e7f4:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 400e7f8:	01010074 	movhi	r4,1025
 400e7fc:	211abc04 	addi	r4,r4,27376
 400e800:	400e7500 	call	400e750 <alt_dev_reg>
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
 400e804:	01800184 	movi	r6,6
 400e808:	000b883a 	mov	r5,zero
 400e80c:	01010074 	movhi	r4,1025
 400e810:	211ac704 	addi	r4,r4,27420
 400e814:	40114f00 	call	40114f0 <altera_modular_adc_init>
}
 400e818:	0001883a 	nop
 400e81c:	e037883a 	mov	sp,fp
 400e820:	dfc00117 	ldw	ra,4(sp)
 400e824:	df000017 	ldw	fp,0(sp)
 400e828:	dec00204 	addi	sp,sp,8
 400e82c:	f800283a 	ret

0400e830 <arduino_uart_enable>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
static alt_u32 sequencer;
static alt_u32 sample_store;

// Enable Arduino pin D0 and D1 as UART
void arduino_uart_enable(alt_u8 value) {
 400e830:	defffe04 	addi	sp,sp,-8
 400e834:	df000115 	stw	fp,4(sp)
 400e838:	df000104 	addi	fp,sp,4
 400e83c:	2005883a 	mov	r2,r4
 400e840:	e0bfff05 	stb	r2,-4(fp)
	IOWR_32DIRECT(DE10_LITE_ARDUINO_IP_0_BASE, 8, (value & 0x1));
 400e844:	e0bfff03 	ldbu	r2,-4(fp)
 400e848:	10c0004c 	andi	r3,r2,1
 400e84c:	00820274 	movhi	r2,2057
 400e850:	10858204 	addi	r2,r2,5640
 400e854:	10c00035 	stwio	r3,0(r2)
}
 400e858:	0001883a 	nop
 400e85c:	e037883a 	mov	sp,fp
 400e860:	df000017 	ldw	fp,0(sp)
 400e864:	dec00104 	addi	sp,sp,4
 400e868:	f800283a 	ret

0400e86c <arduino_spi_enable>:

// Enable Arduino pin D10-D13 as SPI
void arduino_spi_enable(alt_u8 value) {
 400e86c:	defffe04 	addi	sp,sp,-8
 400e870:	df000115 	stw	fp,4(sp)
 400e874:	df000104 	addi	fp,sp,4
 400e878:	2005883a 	mov	r2,r4
 400e87c:	e0bfff05 	stb	r2,-4(fp)
	IOWR_32DIRECT(DE10_LITE_ARDUINO_IP_0_BASE, 8, (value & 0x1)<<1);
 400e880:	e0bfff03 	ldbu	r2,-4(fp)
 400e884:	1080004c 	andi	r2,r2,1
 400e888:	1085883a 	add	r2,r2,r2
 400e88c:	1007883a 	mov	r3,r2
 400e890:	00820274 	movhi	r2,2057
 400e894:	10858204 	addi	r2,r2,5640
 400e898:	10c00035 	stwio	r3,0(r2)
}
 400e89c:	0001883a 	nop
 400e8a0:	e037883a 	mov	sp,fp
 400e8a4:	df000017 	ldw	fp,0(sp)
 400e8a8:	dec00104 	addi	sp,sp,4
 400e8ac:	f800283a 	ret

0400e8b0 <arduino_pin_mode>:

// Set Arduino pin to output or input
void arduino_pin_mode(alt_u8 pin,alt_u8 mode) {
 400e8b0:	defffc04 	addi	sp,sp,-16
 400e8b4:	df000315 	stw	fp,12(sp)
 400e8b8:	df000304 	addi	fp,sp,12
 400e8bc:	2007883a 	mov	r3,r4
 400e8c0:	2805883a 	mov	r2,r5
 400e8c4:	e0fffe05 	stb	r3,-8(fp)
 400e8c8:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 output_register = 0;
 400e8cc:	e03ffd15 	stw	zero,-12(fp)
	output_register = IORD_32DIRECT(DE10_LITE_ARDUINO_IP_0_BASE, 0);
 400e8d0:	00820274 	movhi	r2,2057
 400e8d4:	10858004 	addi	r2,r2,5632
 400e8d8:	10800037 	ldwio	r2,0(r2)
 400e8dc:	e0bffd15 	stw	r2,-12(fp)
	output_register = (output_register & ~(1UL << pin)) | (mode << pin);
 400e8e0:	e0bffe03 	ldbu	r2,-8(fp)
 400e8e4:	00c00044 	movi	r3,1
 400e8e8:	1884983a 	sll	r2,r3,r2
 400e8ec:	0086303a 	nor	r3,zero,r2
 400e8f0:	e0bffd17 	ldw	r2,-12(fp)
 400e8f4:	1884703a 	and	r2,r3,r2
 400e8f8:	e13fff03 	ldbu	r4,-4(fp)
 400e8fc:	e0fffe03 	ldbu	r3,-8(fp)
 400e900:	20c6983a 	sll	r3,r4,r3
 400e904:	10c4b03a 	or	r2,r2,r3
 400e908:	e0bffd15 	stw	r2,-12(fp)
	IOWR_32DIRECT(DE10_LITE_ARDUINO_IP_0_BASE, 0, output_register);
 400e90c:	e0fffd17 	ldw	r3,-12(fp)
 400e910:	00820274 	movhi	r2,2057
 400e914:	10858004 	addi	r2,r2,5632
 400e918:	10c00035 	stwio	r3,0(r2)
}
 400e91c:	0001883a 	nop
 400e920:	e037883a 	mov	sp,fp
 400e924:	df000017 	ldw	fp,0(sp)
 400e928:	dec00104 	addi	sp,sp,4
 400e92c:	f800283a 	ret

0400e930 <arduino_digital_write>:

// Write to Arduino pin
void arduino_digital_write(alt_u8 pin,alt_u8 value) {
 400e930:	defffc04 	addi	sp,sp,-16
 400e934:	df000315 	stw	fp,12(sp)
 400e938:	df000304 	addi	fp,sp,12
 400e93c:	2007883a 	mov	r3,r4
 400e940:	2805883a 	mov	r2,r5
 400e944:	e0fffe05 	stb	r3,-8(fp)
 400e948:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 output_register = 0;
 400e94c:	e03ffd15 	stw	zero,-12(fp)
	output_register = IORD_32DIRECT(DE10_LITE_ARDUINO_IP_0_BASE, 4);
 400e950:	00820274 	movhi	r2,2057
 400e954:	10858104 	addi	r2,r2,5636
 400e958:	10800037 	ldwio	r2,0(r2)
 400e95c:	e0bffd15 	stw	r2,-12(fp)
	output_register = (output_register & ~(1UL << pin)) | (value << pin);
 400e960:	e0bffe03 	ldbu	r2,-8(fp)
 400e964:	00c00044 	movi	r3,1
 400e968:	1884983a 	sll	r2,r3,r2
 400e96c:	0086303a 	nor	r3,zero,r2
 400e970:	e0bffd17 	ldw	r2,-12(fp)
 400e974:	1884703a 	and	r2,r3,r2
 400e978:	e13fff03 	ldbu	r4,-4(fp)
 400e97c:	e0fffe03 	ldbu	r3,-8(fp)
 400e980:	20c6983a 	sll	r3,r4,r3
 400e984:	10c4b03a 	or	r2,r2,r3
 400e988:	e0bffd15 	stw	r2,-12(fp)
	IOWR_32DIRECT(DE10_LITE_ARDUINO_IP_0_BASE, 4, output_register);
 400e98c:	e0fffd17 	ldw	r3,-12(fp)
 400e990:	00820274 	movhi	r2,2057
 400e994:	10858104 	addi	r2,r2,5636
 400e998:	10c00035 	stwio	r3,0(r2)
}
 400e99c:	0001883a 	nop
 400e9a0:	e037883a 	mov	sp,fp
 400e9a4:	df000017 	ldw	fp,0(sp)
 400e9a8:	dec00104 	addi	sp,sp,4
 400e9ac:	f800283a 	ret

0400e9b0 <arduino_digital_read>:

// Read Arduino pin
alt_u8 arduino_digital_read(alt_u8 pin) {
 400e9b0:	defffe04 	addi	sp,sp,-8
 400e9b4:	df000115 	stw	fp,4(sp)
 400e9b8:	df000104 	addi	fp,sp,4
 400e9bc:	2005883a 	mov	r2,r4
 400e9c0:	e0bfff05 	stb	r2,-4(fp)
	return (IORD_32DIRECT(DE10_LITE_ARDUINO_IP_0_BASE, 4) >> pin) & 1;
 400e9c4:	00820274 	movhi	r2,2057
 400e9c8:	10858104 	addi	r2,r2,5636
 400e9cc:	10c00037 	ldwio	r3,0(r2)
 400e9d0:	e0bfff03 	ldbu	r2,-4(fp)
 400e9d4:	1885d83a 	sra	r2,r3,r2
 400e9d8:	1080004c 	andi	r2,r2,1
}
 400e9dc:	e037883a 	mov	sp,fp
 400e9e0:	df000017 	ldw	fp,0(sp)
 400e9e4:	dec00104 	addi	sp,sp,4
 400e9e8:	f800283a 	ret

0400e9ec <arduino_analog_init>:

// Start ADC in continuous mode
void arduino_analog_init(alt_u32 sequencer_base,alt_u32 sample_store_base) {
 400e9ec:	defffc04 	addi	sp,sp,-16
 400e9f0:	dfc00315 	stw	ra,12(sp)
 400e9f4:	df000215 	stw	fp,8(sp)
 400e9f8:	df000204 	addi	fp,sp,8
 400e9fc:	e13ffe15 	stw	r4,-8(fp)
 400ea00:	e17fff15 	stw	r5,-4(fp)
	sequencer=sequencer_base;
 400ea04:	e0bffe17 	ldw	r2,-8(fp)
 400ea08:	d0a34a15 	stw	r2,-29400(gp)
	sample_store=sample_store_base;
 400ea0c:	e0bfff17 	ldw	r2,-4(fp)
 400ea10:	d0a34b15 	stw	r2,-29396(gp)
	adc_interrupt_disable(sample_store); // Disable IRQ until user knows how to write the correct code to make it work
 400ea14:	d0a34b17 	ldw	r2,-29396(gp)
 400ea18:	1009883a 	mov	r4,r2
 400ea1c:	40118000 	call	4011800 <adc_interrupt_disable>
	adc_stop(sequencer);
 400ea20:	d0a34a17 	ldw	r2,-29400(gp)
 400ea24:	1009883a 	mov	r4,r2
 400ea28:	401163c0 	call	401163c <adc_stop>
	adc_set_mode_run_continuously(sequencer);
 400ea2c:	d0a34a17 	ldw	r2,-29400(gp)
 400ea30:	1009883a 	mov	r4,r2
 400ea34:	40117040 	call	4011704 <adc_set_mode_run_continuously>
	adc_start(sequencer);
 400ea38:	d0a34a17 	ldw	r2,-29400(gp)
 400ea3c:	1009883a 	mov	r4,r2
 400ea40:	401168c0 	call	401168c <adc_start>
}
 400ea44:	0001883a 	nop
 400ea48:	e037883a 	mov	sp,fp
 400ea4c:	dfc00117 	ldw	ra,4(sp)
 400ea50:	df000017 	ldw	fp,0(sp)
 400ea54:	dec00204 	addi	sp,sp,8
 400ea58:	f800283a 	ret

0400ea5c <arduino_analog_read>:

// Read analog pin, DE10-Lite accepts up to 5.0v as input.
// Downscaled internally to max 2.5v. See voltage read function
// below for info on how to use values.
alt_u32 arduino_analog_read(alt_u8 pin) {
 400ea5c:	defffc04 	addi	sp,sp,-16
 400ea60:	dfc00315 	stw	ra,12(sp)
 400ea64:	df000215 	stw	fp,8(sp)
 400ea68:	df000204 	addi	fp,sp,8
 400ea6c:	2005883a 	mov	r2,r4
 400ea70:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 reading;
	alt_adc_word_read(sample_store+(pin*4),&reading,1);
 400ea74:	e0bfff03 	ldbu	r2,-4(fp)
 400ea78:	1085883a 	add	r2,r2,r2
 400ea7c:	1085883a 	add	r2,r2,r2
 400ea80:	1007883a 	mov	r3,r2
 400ea84:	d0a34b17 	ldw	r2,-29396(gp)
 400ea88:	1885883a 	add	r2,r3,r2
 400ea8c:	01800044 	movi	r6,1
 400ea90:	e17ffe04 	addi	r5,fp,-8
 400ea94:	1009883a 	mov	r4,r2
 400ea98:	40114440 	call	4011444 <alt_adc_word_read>
	return reading;
 400ea9c:	e0bffe17 	ldw	r2,-8(fp)
}
 400eaa0:	e037883a 	mov	sp,fp
 400eaa4:	dfc00117 	ldw	ra,4(sp)
 400eaa8:	df000017 	ldw	fp,0(sp)
 400eaac:	dec00204 	addi	sp,sp,8
 400eab0:	f800283a 	ret

0400eab4 <arduino_analog_read_voltage>:

// Read analog pin and convert to voltage level
float arduino_analog_read_voltage(alt_u8 pin) {
 400eab4:	defffc04 	addi	sp,sp,-16
 400eab8:	dfc00315 	stw	ra,12(sp)
 400eabc:	df000215 	stw	fp,8(sp)
 400eac0:	df000204 	addi	fp,sp,8
 400eac4:	2005883a 	mov	r2,r4
 400eac8:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 reading;
	alt_adc_word_read(sample_store+(pin*4),&reading,1);
 400eacc:	e0bfff03 	ldbu	r2,-4(fp)
 400ead0:	1085883a 	add	r2,r2,r2
 400ead4:	1085883a 	add	r2,r2,r2
 400ead8:	1007883a 	mov	r3,r2
 400eadc:	d0a34b17 	ldw	r2,-29396(gp)
 400eae0:	1885883a 	add	r2,r3,r2
 400eae4:	01800044 	movi	r6,1
 400eae8:	e17ffe04 	addi	r5,fp,-8
 400eaec:	1009883a 	mov	r4,r2
 400eaf0:	40114440 	call	4011444 <alt_adc_word_read>
	return ((((float)(reading<<1))*ANALOG_VOLTAGE_REFERENCE)/4096.0f);
 400eaf4:	e0bffe17 	ldw	r2,-8(fp)
 400eaf8:	1085883a 	add	r2,r2,r2
 400eafc:	1009883a 	mov	r4,r2
 400eb00:	40155e80 	call	40155e8 <__floatunsisf>
 400eb04:	1007883a 	mov	r3,r2
 400eb08:	01500834 	movhi	r5,16416
 400eb0c:	1809883a 	mov	r4,r3
 400eb10:	40151b80 	call	40151b8 <__mulsf3>
 400eb14:	1007883a 	mov	r3,r2
 400eb18:	1805883a 	mov	r2,r3
 400eb1c:	01516034 	movhi	r5,17792
 400eb20:	1009883a 	mov	r4,r2
 400eb24:	4014d780 	call	4014d78 <__divsf3>
 400eb28:	1009883a 	mov	r4,r2
 400eb2c:	2007883a 	mov	r3,r4
 400eb30:	1805883a 	mov	r2,r3
}
 400eb34:	e037883a 	mov	sp,fp
 400eb38:	dfc00117 	ldw	ra,4(sp)
 400eb3c:	df000017 	ldw	fp,0(sp)
 400eb40:	dec00204 	addi	sp,sp,8
 400eb44:	f800283a 	ret

0400eb48 <accelerometer_open_dev>:

static ALT_AVALON_I2C_DEV_t *accelerometer_dev; //pointer to instance structure
static ALT_AVALON_I2C_STATUS_CODE accelerometer_status; // Variable to hold status codes

void accelerometer_open_dev(void)
{
 400eb48:	defffe04 	addi	sp,sp,-8
 400eb4c:	dfc00115 	stw	ra,4(sp)
 400eb50:	df000015 	stw	fp,0(sp)
 400eb54:	d839883a 	mov	fp,sp
	accelerometer_dev = alt_avalon_i2c_open("/dev/accelerometer_i2c");
 400eb58:	01010074 	movhi	r4,1025
 400eb5c:	2116e704 	addi	r4,r4,23452
 400eb60:	400f3a80 	call	400f3a8 <alt_avalon_i2c_open>
 400eb64:	d0a34c15 	stw	r2,-29392(gp)
	if (!accelerometer_dev)
 400eb68:	d0a34c17 	ldw	r2,-29392(gp)
 400eb6c:	1000031e 	bne	r2,zero,400eb7c <accelerometer_open_dev+0x34>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 400eb70:	01010074 	movhi	r4,1025
 400eb74:	2116ed04 	addi	r4,r4,23476
 400eb78:	4014be40 	call	4014be4 <puts>
	}
}
 400eb7c:	0001883a 	nop
 400eb80:	e037883a 	mov	sp,fp
 400eb84:	dfc00117 	ldw	ra,4(sp)
 400eb88:	df000017 	ldw	fp,0(sp)
 400eb8c:	dec00204 	addi	sp,sp,8
 400eb90:	f800283a 	ret

0400eb94 <accelerometer_init>:

void accelerometer_init(void)
{
 400eb94:	defffd04 	addi	sp,sp,-12
 400eb98:	dfc00215 	stw	ra,8(sp)
 400eb9c:	df000115 	stw	fp,4(sp)
 400eba0:	df000104 	addi	fp,sp,4
	alt_u8 txbuffer[2];

	// Set the address of the accelerometer
	alt_avalon_i2c_master_target_set(accelerometer_dev, ACCELEROMETER_ADDRESS);
 400eba4:	d0a34c17 	ldw	r2,-29392(gp)
 400eba8:	014014c4 	movi	r5,83
 400ebac:	1009883a 	mov	r4,r2
 400ebb0:	400fb780 	call	400fb78 <alt_avalon_i2c_master_target_set>


	// Write data to accelerometer
	txbuffer[0]=0x2D; // POWER_CTL Register
 400ebb4:	00800b44 	movi	r2,45
 400ebb8:	e0bfff05 	stb	r2,-4(fp)
	txbuffer[1]=0x08; // Measuring enable
 400ebbc:	00800204 	movi	r2,8
 400ebc0:	e0bfff45 	stb	r2,-3(fp)

	accelerometer_status = alt_avalon_i2c_master_tx(
 400ebc4:	d0a34c17 	ldw	r2,-29392(gp)
 400ebc8:	000f883a 	mov	r7,zero
 400ebcc:	01800084 	movi	r6,2
 400ebd0:	e17fff04 	addi	r5,fp,-4
 400ebd4:	1009883a 	mov	r4,r2
 400ebd8:	400fd800 	call	400fd80 <alt_avalon_i2c_master_tx>
 400ebdc:	d0a34d15 	stw	r2,-29388(gp)
			accelerometer_dev,
			txbuffer,
			2,
			ALT_AVALON_I2C_NO_INTERRUPTS);

	if (accelerometer_status != ALT_AVALON_I2C_SUCCESS)
 400ebe0:	d0a34d17 	ldw	r2,-29388(gp)
 400ebe4:	10000326 	beq	r2,zero,400ebf4 <accelerometer_init+0x60>
	{
		printf("ACCELEROMETER_I2C TX ERROR!");
 400ebe8:	01010074 	movhi	r4,1025
 400ebec:	2116f504 	addi	r4,r4,23508
 400ebf0:	400116c0 	call	400116c <printf>
	}
}
 400ebf4:	0001883a 	nop
 400ebf8:	e037883a 	mov	sp,fp
 400ebfc:	dfc00117 	ldw	ra,4(sp)
 400ec00:	df000017 	ldw	fp,0(sp)
 400ec04:	dec00204 	addi	sp,sp,8
 400ec08:	f800283a 	ret

0400ec0c <accelerometer_read>:

void accelerometer_read(alt_u32 *accelerometer_x, alt_u32 *accelerometer_y, alt_u32 *accelerometer_z)
{
 400ec0c:	defff704 	addi	sp,sp,-36
 400ec10:	dfc00815 	stw	ra,32(sp)
 400ec14:	df000715 	stw	fp,28(sp)
 400ec18:	df000704 	addi	fp,sp,28
 400ec1c:	e13ffd15 	stw	r4,-12(fp)
 400ec20:	e17ffe15 	stw	r5,-8(fp)
 400ec24:	e1bfff15 	stw	r6,-4(fp)
	alt_u8 txbuffer[1];
	txbuffer[0] = 0x32; // Start with register 0x32 (ACCEL_XOUT_H)
 400ec28:	00800c84 	movi	r2,50
 400ec2c:	e0bffb05 	stb	r2,-20(fp)
	alt_u8 rxbuffer[6];
	accelerometer_status = alt_avalon_i2c_master_tx_rx(
 400ec30:	d0e34c17 	ldw	r3,-29392(gp)
 400ec34:	e13ffb44 	addi	r4,fp,-19
 400ec38:	d8000115 	stw	zero,4(sp)
 400ec3c:	00800184 	movi	r2,6
 400ec40:	d8800015 	stw	r2,0(sp)
 400ec44:	200f883a 	mov	r7,r4
 400ec48:	01800044 	movi	r6,1
 400ec4c:	e17ffb04 	addi	r5,fp,-20
 400ec50:	1809883a 	mov	r4,r3
 400ec54:	400ffa40 	call	400ffa4 <alt_avalon_i2c_master_tx_rx>
 400ec58:	d0a34d15 	stw	r2,-29388(gp)
			1,									// TX size
			rxbuffer,
			6,									// RX size
			ALT_AVALON_I2C_NO_INTERRUPTS);

	if (accelerometer_status!=ALT_AVALON_I2C_SUCCESS)
 400ec5c:	d0a34d17 	ldw	r2,-29388(gp)
 400ec60:	10000326 	beq	r2,zero,400ec70 <accelerometer_read+0x64>
	{
		printf("ACCELEROMETER_I2C RX ERROR!");
 400ec64:	01010074 	movhi	r4,1025
 400ec68:	2116fc04 	addi	r4,r4,23536
 400ec6c:	400116c0 	call	400116c <printf>
	}

	*(accelerometer_x) = ( rxbuffer[0]| rxbuffer[1] << 8); // X-axis value
 400ec70:	e0bffb43 	ldbu	r2,-19(fp)
 400ec74:	10c03fcc 	andi	r3,r2,255
 400ec78:	e0bffb83 	ldbu	r2,-18(fp)
 400ec7c:	10803fcc 	andi	r2,r2,255
 400ec80:	1004923a 	slli	r2,r2,8
 400ec84:	1884b03a 	or	r2,r3,r2
 400ec88:	1007883a 	mov	r3,r2
 400ec8c:	e0bffd17 	ldw	r2,-12(fp)
 400ec90:	10c00015 	stw	r3,0(r2)
	if (*(accelerometer_x) & 0x00008000)
 400ec94:	e0bffd17 	ldw	r2,-12(fp)
 400ec98:	10800017 	ldw	r2,0(r2)
 400ec9c:	10a0000c 	andi	r2,r2,32768
 400eca0:	10000526 	beq	r2,zero,400ecb8 <accelerometer_read+0xac>
	{
		*(accelerometer_x) |= 0xFFFF0000;
 400eca4:	e0bffd17 	ldw	r2,-12(fp)
 400eca8:	10800017 	ldw	r2,0(r2)
 400ecac:	10fffff4 	orhi	r3,r2,65535
 400ecb0:	e0bffd17 	ldw	r2,-12(fp)
 400ecb4:	10c00015 	stw	r3,0(r2)
	}

	*(accelerometer_y) = ( rxbuffer[2]| rxbuffer[3] << 8); // Y-axis value
 400ecb8:	e0bffbc3 	ldbu	r2,-17(fp)
 400ecbc:	10c03fcc 	andi	r3,r2,255
 400ecc0:	e0bffc03 	ldbu	r2,-16(fp)
 400ecc4:	10803fcc 	andi	r2,r2,255
 400ecc8:	1004923a 	slli	r2,r2,8
 400eccc:	1884b03a 	or	r2,r3,r2
 400ecd0:	1007883a 	mov	r3,r2
 400ecd4:	e0bffe17 	ldw	r2,-8(fp)
 400ecd8:	10c00015 	stw	r3,0(r2)
	if (*(accelerometer_y) & 0x00008000)
 400ecdc:	e0bffe17 	ldw	r2,-8(fp)
 400ece0:	10800017 	ldw	r2,0(r2)
 400ece4:	10a0000c 	andi	r2,r2,32768
 400ece8:	10000526 	beq	r2,zero,400ed00 <accelerometer_read+0xf4>
	{
		*(accelerometer_y) |= 0xFFFF0000;
 400ecec:	e0bffe17 	ldw	r2,-8(fp)
 400ecf0:	10800017 	ldw	r2,0(r2)
 400ecf4:	10fffff4 	orhi	r3,r2,65535
 400ecf8:	e0bffe17 	ldw	r2,-8(fp)
 400ecfc:	10c00015 	stw	r3,0(r2)
	}

	*(accelerometer_z) = ( rxbuffer[4]| rxbuffer[5] << 8); // Z-axis value
 400ed00:	e0bffc43 	ldbu	r2,-15(fp)
 400ed04:	10c03fcc 	andi	r3,r2,255
 400ed08:	e0bffc83 	ldbu	r2,-14(fp)
 400ed0c:	10803fcc 	andi	r2,r2,255
 400ed10:	1004923a 	slli	r2,r2,8
 400ed14:	1884b03a 	or	r2,r3,r2
 400ed18:	1007883a 	mov	r3,r2
 400ed1c:	e0bfff17 	ldw	r2,-4(fp)
 400ed20:	10c00015 	stw	r3,0(r2)
	if (*(accelerometer_z) & 0x00008000)
 400ed24:	e0bfff17 	ldw	r2,-4(fp)
 400ed28:	10800017 	ldw	r2,0(r2)
 400ed2c:	10a0000c 	andi	r2,r2,32768
 400ed30:	10000526 	beq	r2,zero,400ed48 <accelerometer_read+0x13c>
	{
		*(accelerometer_z) |= 0xFFFF0000;
 400ed34:	e0bfff17 	ldw	r2,-4(fp)
 400ed38:	10800017 	ldw	r2,0(r2)
 400ed3c:	10fffff4 	orhi	r3,r2,65535
 400ed40:	e0bfff17 	ldw	r2,-4(fp)
 400ed44:	10c00015 	stw	r3,0(r2)
	}
}
 400ed48:	0001883a 	nop
 400ed4c:	e037883a 	mov	sp,fp
 400ed50:	dfc00117 	ldw	ra,4(sp)
 400ed54:	df000017 	ldw	fp,0(sp)
 400ed58:	dec00204 	addi	sp,sp,8
 400ed5c:	f800283a 	ret

0400ed60 <i2c_open_dev>:

static ALT_AVALON_I2C_DEV_t *arduino_i2c_dev; // Pointer to instance structure
static ALT_AVALON_I2C_STATUS_CODE i2c_status; // Variable to hold status codes

void i2c_open_dev(void)
{
 400ed60:	defffe04 	addi	sp,sp,-8
 400ed64:	dfc00115 	stw	ra,4(sp)
 400ed68:	df000015 	stw	fp,0(sp)
 400ed6c:	d839883a 	mov	fp,sp
	// Get a pointer to the avalon i2c instance
	arduino_i2c_dev = alt_avalon_i2c_open("/dev/arduino_i2c");
 400ed70:	01010074 	movhi	r4,1025
 400ed74:	21170304 	addi	r4,r4,23564
 400ed78:	400f3a80 	call	400f3a8 <alt_avalon_i2c_open>
 400ed7c:	d0a34e15 	stw	r2,-29384(gp)
}
 400ed80:	0001883a 	nop
 400ed84:	e037883a 	mov	sp,fp
 400ed88:	dfc00117 	ldw	ra,4(sp)
 400ed8c:	df000017 	ldw	fp,0(sp)
 400ed90:	dec00204 	addi	sp,sp,8
 400ed94:	f800283a 	ret

0400ed98 <i2c_set_slave_address>:

void i2c_set_slave_address(alt_u32 slaveAddress)
{
 400ed98:	defffd04 	addi	sp,sp,-12
 400ed9c:	dfc00215 	stw	ra,8(sp)
 400eda0:	df000115 	stw	fp,4(sp)
 400eda4:	df000104 	addi	fp,sp,4
 400eda8:	e13fff15 	stw	r4,-4(fp)
	// Set the address of the device using
	alt_avalon_i2c_master_target_set(arduino_i2c_dev, slaveAddress);
 400edac:	d0a34e17 	ldw	r2,-29384(gp)
 400edb0:	e17fff17 	ldw	r5,-4(fp)
 400edb4:	1009883a 	mov	r4,r2
 400edb8:	400fb780 	call	400fb78 <alt_avalon_i2c_master_target_set>
}
 400edbc:	0001883a 	nop
 400edc0:	e037883a 	mov	sp,fp
 400edc4:	dfc00117 	ldw	ra,4(sp)
 400edc8:	df000017 	ldw	fp,0(sp)
 400edcc:	dec00204 	addi	sp,sp,8
 400edd0:	f800283a 	ret

0400edd4 <i2c_transmit>:

void i2c_transmit(alt_u8 numBytes, alt_u8 *data)
{
 400edd4:	defffc04 	addi	sp,sp,-16
 400edd8:	dfc00315 	stw	ra,12(sp)
 400eddc:	df000215 	stw	fp,8(sp)
 400ede0:	df000204 	addi	fp,sp,8
 400ede4:	2005883a 	mov	r2,r4
 400ede8:	e17fff15 	stw	r5,-4(fp)
 400edec:	e0bffe05 	stb	r2,-8(fp)
	i2c_status = alt_avalon_i2c_master_tx(
 400edf0:	d0a34e17 	ldw	r2,-29384(gp)
 400edf4:	e0fffe03 	ldbu	r3,-8(fp)
 400edf8:	000f883a 	mov	r7,zero
 400edfc:	180d883a 	mov	r6,r3
 400ee00:	e17fff17 	ldw	r5,-4(fp)
 400ee04:	1009883a 	mov	r4,r2
 400ee08:	400fd800 	call	400fd80 <alt_avalon_i2c_master_tx>
 400ee0c:	d0a34f15 	stw	r2,-29380(gp)
			arduino_i2c_dev,
			data,
			numBytes,
			ALT_AVALON_I2C_NO_INTERRUPTS);

	if (i2c_status != ALT_AVALON_I2C_SUCCESS)
 400ee10:	d0a34f17 	ldw	r2,-29380(gp)
 400ee14:	10000326 	beq	r2,zero,400ee24 <i2c_transmit+0x50>
	{
		printf("I2C: TX error!\n");
 400ee18:	01010074 	movhi	r4,1025
 400ee1c:	21170804 	addi	r4,r4,23584
 400ee20:	4014be40 	call	4014be4 <puts>
	}
}
 400ee24:	0001883a 	nop
 400ee28:	e037883a 	mov	sp,fp
 400ee2c:	dfc00117 	ldw	ra,4(sp)
 400ee30:	df000017 	ldw	fp,0(sp)
 400ee34:	dec00204 	addi	sp,sp,8
 400ee38:	f800283a 	ret

0400ee3c <i2c_receive>:

void i2c_receive(alt_u8 numBytes, alt_u8 *data)
{
 400ee3c:	defff904 	addi	sp,sp,-28
 400ee40:	dfc00615 	stw	ra,24(sp)
 400ee44:	df000515 	stw	fp,20(sp)
 400ee48:	dc000415 	stw	r16,16(sp)
 400ee4c:	df000504 	addi	fp,sp,20
 400ee50:	e17ffe15 	stw	r5,-8(fp)
 400ee54:	e13ffd05 	stb	r4,-12(fp)
 400ee58:	d809883a 	mov	r4,sp
 400ee5c:	2021883a 	mov	r16,r4
	alt_u8 rxbuffer[numBytes];
 400ee60:	e13ffd03 	ldbu	r4,-12(fp)
 400ee64:	21403fcc 	andi	r5,r4,255
 400ee68:	297fffc4 	addi	r5,r5,-1
 400ee6c:	e17ffb15 	stw	r5,-20(fp)
 400ee70:	21403fcc 	andi	r5,r4,255
 400ee74:	2815883a 	mov	r10,r5
 400ee78:	0017883a 	mov	r11,zero
 400ee7c:	500ad77a 	srli	r5,r10,29
 400ee80:	580e90fa 	slli	r7,r11,3
 400ee84:	29ceb03a 	or	r7,r5,r7
 400ee88:	500c90fa 	slli	r6,r10,3
 400ee8c:	21403fcc 	andi	r5,r4,255
 400ee90:	2811883a 	mov	r8,r5
 400ee94:	0013883a 	mov	r9,zero
 400ee98:	400ad77a 	srli	r5,r8,29
 400ee9c:	480690fa 	slli	r3,r9,3
 400eea0:	28c6b03a 	or	r3,r5,r3
 400eea4:	400490fa 	slli	r2,r8,3
 400eea8:	20803fcc 	andi	r2,r4,255
 400eeac:	108000c4 	addi	r2,r2,3
 400eeb0:	1004d0ba 	srli	r2,r2,2
 400eeb4:	1085883a 	add	r2,r2,r2
 400eeb8:	1085883a 	add	r2,r2,r2
 400eebc:	d8b7c83a 	sub	sp,sp,r2
 400eec0:	d805883a 	mov	r2,sp
 400eec4:	1005883a 	mov	r2,r2
 400eec8:	e0bffc15 	stw	r2,-16(fp)
	i2c_status = alt_avalon_i2c_master_rx (
 400eecc:	d0a34e17 	ldw	r2,-29384(gp)
 400eed0:	e0fffd03 	ldbu	r3,-12(fp)
 400eed4:	000f883a 	mov	r7,zero
 400eed8:	180d883a 	mov	r6,r3
 400eedc:	e17ffe17 	ldw	r5,-8(fp)
 400eee0:	1009883a 	mov	r4,r2
 400eee4:	400fe680 	call	400fe68 <alt_avalon_i2c_master_rx>
 400eee8:	d0a34f15 	stw	r2,-29380(gp)
			arduino_i2c_dev,
			data,
			numBytes,
			ALT_AVALON_I2C_NO_INTERRUPTS);

	if (i2c_status != ALT_AVALON_I2C_SUCCESS)
 400eeec:	d0a34f17 	ldw	r2,-29380(gp)
 400eef0:	10000326 	beq	r2,zero,400ef00 <i2c_receive+0xc4>
	{
		printf("I2C: RX error!\n");
 400eef4:	01010074 	movhi	r4,1025
 400eef8:	21170c04 	addi	r4,r4,23600
 400eefc:	4014be40 	call	4014be4 <puts>
	}
	*data = (alt_u8)rxbuffer;
 400ef00:	e0bffc17 	ldw	r2,-16(fp)
 400ef04:	1007883a 	mov	r3,r2
 400ef08:	e0bffe17 	ldw	r2,-8(fp)
 400ef0c:	10c00005 	stb	r3,0(r2)
 400ef10:	8037883a 	mov	sp,r16
}
 400ef14:	0001883a 	nop
 400ef18:	e6ffff04 	addi	sp,fp,-4
 400ef1c:	dfc00217 	ldw	ra,8(sp)
 400ef20:	df000117 	ldw	fp,4(sp)
 400ef24:	dc000017 	ldw	r16,0(sp)
 400ef28:	dec00304 	addi	sp,sp,12
 400ef2c:	f800283a 	ret

0400ef30 <i2c_set_normal_mode>:

void i2c_set_normal_mode(void)
{
 400ef30:	defffe04 	addi	sp,sp,-8
 400ef34:	df000115 	stw	fp,4(sp)
 400ef38:	df000104 	addi	fp,sp,4
	alt_u32 status_register;
	status_register = IORD_32DIRECT(ARDUINO_I2C_BASE, 8);
 400ef3c:	00820274 	movhi	r2,2057
 400ef40:	10859204 	addi	r2,r2,5704
 400ef44:	10800037 	ldwio	r2,0(r2)
 400ef48:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(ARDUINO_I2C_BASE, 8, status_register & (0 << 1));
 400ef4c:	0007883a 	mov	r3,zero
 400ef50:	00820274 	movhi	r2,2057
 400ef54:	10859204 	addi	r2,r2,5704
 400ef58:	10c00035 	stwio	r3,0(r2)
}
 400ef5c:	0001883a 	nop
 400ef60:	e037883a 	mov	sp,fp
 400ef64:	df000017 	ldw	fp,0(sp)
 400ef68:	dec00104 	addi	sp,sp,4
 400ef6c:	f800283a 	ret

0400ef70 <i2c_set_fast_mode>:
void i2c_set_fast_mode(void)
{
 400ef70:	defffe04 	addi	sp,sp,-8
 400ef74:	df000115 	stw	fp,4(sp)
 400ef78:	df000104 	addi	fp,sp,4
	alt_u32 status_register;
	status_register = IORD_32DIRECT(ARDUINO_I2C_BASE, 8);
 400ef7c:	00820274 	movhi	r2,2057
 400ef80:	10859204 	addi	r2,r2,5704
 400ef84:	10800037 	ldwio	r2,0(r2)
 400ef88:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(ARDUINO_I2C_BASE, 8, status_register | (1 << 1));
 400ef8c:	e0bfff17 	ldw	r2,-4(fp)
 400ef90:	10800094 	ori	r2,r2,2
 400ef94:	1007883a 	mov	r3,r2
 400ef98:	00820274 	movhi	r2,2057
 400ef9c:	10859204 	addi	r2,r2,5704
 400efa0:	10c00035 	stwio	r3,0(r2)
}
 400efa4:	0001883a 	nop
 400efa8:	e037883a 	mov	sp,fp
 400efac:	df000017 	ldw	fp,0(sp)
 400efb0:	dec00104 	addi	sp,sp,4
 400efb4:	f800283a 	ret

0400efb8 <spi_command>:
// SPI
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Arduino function to send and receive SPI data
int spi_command(alt_u32 write_length, const alt_u8 * wdata, alt_u32 read_length, alt_u8 * read_data)
{
 400efb8:	defff704 	addi	sp,sp,-36
 400efbc:	dfc00815 	stw	ra,32(sp)
 400efc0:	df000715 	stw	fp,28(sp)
 400efc4:	df000704 	addi	fp,sp,28
 400efc8:	e13ffc15 	stw	r4,-16(fp)
 400efcc:	e17ffd15 	stw	r5,-12(fp)
 400efd0:	e1bffe15 	stw	r6,-8(fp)
 400efd4:	e1ffff15 	stw	r7,-4(fp)
	return alt_avalon_spi_command(SPI_0_BASE, 0 , write_length, &wdata, read_length, &read_data, 0);
 400efd8:	e0fffd04 	addi	r3,fp,-12
 400efdc:	d8000215 	stw	zero,8(sp)
 400efe0:	e0bfff04 	addi	r2,fp,-4
 400efe4:	d8800115 	stw	r2,4(sp)
 400efe8:	e0bffe17 	ldw	r2,-8(fp)
 400efec:	d8800015 	stw	r2,0(sp)
 400eff0:	180f883a 	mov	r7,r3
 400eff4:	e1bffc17 	ldw	r6,-16(fp)
 400eff8:	000b883a 	mov	r5,zero
 400effc:	01020274 	movhi	r4,2057
 400f000:	2105b004 	addi	r4,r4,5824
 400f004:	4010ec40 	call	4010ec4 <alt_avalon_spi_command>
}
 400f008:	e037883a 	mov	sp,fp
 400f00c:	dfc00117 	ldw	ra,4(sp)
 400f010:	df000017 	ldw	fp,0(sp)
 400f014:	dec00204 	addi	sp,sp,8
 400f018:	f800283a 	ret

0400f01c <spi_tx>:

// Fast function to transmit SPI data
void spi_tx(alt_u8 data)
{
 400f01c:	defffe04 	addi	sp,sp,-8
 400f020:	df000115 	stw	fp,4(sp)
 400f024:	df000104 	addi	fp,sp,4
 400f028:	2005883a 	mov	r2,r4
 400f02c:	e0bfff05 	stb	r2,-4(fp)
	while (IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & 0x20) // Wait until transmission end
 400f030:	00000406 	br	400f044 <spi_tx+0x28>
	{
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, data);
 400f034:	e0ffff03 	ldbu	r3,-4(fp)
 400f038:	00820274 	movhi	r2,2057
 400f03c:	1085b104 	addi	r2,r2,5828
 400f040:	10c00035 	stwio	r3,0(r2)
}

// Fast function to transmit SPI data
void spi_tx(alt_u8 data)
{
	while (IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & 0x20) // Wait until transmission end
 400f044:	00820274 	movhi	r2,2057
 400f048:	1085b204 	addi	r2,r2,5832
 400f04c:	10800037 	ldwio	r2,0(r2)
 400f050:	1080080c 	andi	r2,r2,32
 400f054:	103ff71e 	bne	r2,zero,400f034 <__ram_exceptions_end+0xfbf86d98>
	{
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, data);
	}
}
 400f058:	0001883a 	nop
 400f05c:	e037883a 	mov	sp,fp
 400f060:	df000017 	ldw	fp,0(sp)
 400f064:	dec00104 	addi	sp,sp,4
 400f068:	f800283a 	ret

0400f06c <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 400f06c:	defff904 	addi	sp,sp,-28
 400f070:	dfc00615 	stw	ra,24(sp)
 400f074:	df000515 	stw	fp,20(sp)
 400f078:	df000504 	addi	fp,sp,20
 400f07c:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 400f080:	008000b4 	movhi	r2,2
 400f084:	10a1a804 	addi	r2,r2,-31072
 400f088:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 400f08c:	e0bfff17 	ldw	r2,-4(fp)
 400f090:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 400f094:	e0bffc17 	ldw	r2,-16(fp)
 400f098:	10800717 	ldw	r2,28(r2)
 400f09c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 400f0a0:	e0bffd17 	ldw	r2,-12(fp)
 400f0a4:	10800217 	ldw	r2,8(r2)
 400f0a8:	10800098 	cmpnei	r2,r2,2
 400f0ac:	1000251e 	bne	r2,zero,400f144 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 400f0b0:	e0bffd17 	ldw	r2,-12(fp)
 400f0b4:	10c00017 	ldw	r3,0(r2)
 400f0b8:	e0bffd17 	ldw	r2,-12(fp)
 400f0bc:	10800117 	ldw	r2,4(r2)
 400f0c0:	e13ffe04 	addi	r4,fp,-8
 400f0c4:	200f883a 	mov	r7,r4
 400f0c8:	100d883a 	mov	r6,r2
 400f0cc:	180b883a 	mov	r5,r3
 400f0d0:	e13ffc17 	ldw	r4,-16(fp)
 400f0d4:	400f81c0 	call	400f81c <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 400f0d8:	e0bffd17 	ldw	r2,-12(fp)
 400f0dc:	10c00117 	ldw	r3,4(r2)
 400f0e0:	e0bffe17 	ldw	r2,-8(fp)
 400f0e4:	1887c83a 	sub	r3,r3,r2
 400f0e8:	e0bffd17 	ldw	r2,-12(fp)
 400f0ec:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 400f0f0:	e0bffd17 	ldw	r2,-12(fp)
 400f0f4:	10c00017 	ldw	r3,0(r2)
 400f0f8:	e0bffe17 	ldw	r2,-8(fp)
 400f0fc:	1887883a 	add	r3,r3,r2
 400f100:	e0bffd17 	ldw	r2,-12(fp)
 400f104:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 400f108:	e0bffd17 	ldw	r2,-12(fp)
 400f10c:	10800117 	ldw	r2,4(r2)
 400f110:	10000c26 	beq	r2,zero,400f144 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 400f114:	01400704 	movi	r5,28
 400f118:	e13ffc17 	ldw	r4,-16(fp)
 400f11c:	40109d40 	call	40109d4 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 400f120:	01400084 	movi	r5,2
 400f124:	e13ffc17 	ldw	r4,-16(fp)
 400f128:	4010a780 	call	4010a78 <alt_avalon_i2c_int_enable>
 400f12c:	00000e06 	br	400f168 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 400f130:	e0bffb17 	ldw	r2,-20(fp)
 400f134:	10bfffc4 	addi	r2,r2,-1
 400f138:	e0bffb15 	stw	r2,-20(fp)
 400f13c:	e0bffb17 	ldw	r2,-20(fp)
 400f140:	10000426 	beq	r2,zero,400f154 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 400f144:	e13ffc17 	ldw	r4,-16(fp)
 400f148:	400f7d80 	call	400f7d8 <alt_avalon_i2c_is_busy>
 400f14c:	103ff81e 	bne	r2,zero,400f130 <__ram_exceptions_end+0xfbf86e94>
 400f150:	00000106 	br	400f158 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 400f154:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 400f158:	e13ffc17 	ldw	r4,-16(fp)
 400f15c:	400f4800 	call	400f480 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 400f160:	e0bffd17 	ldw	r2,-12(fp)
 400f164:	10000215 	stw	zero,8(r2)
}
 400f168:	e037883a 	mov	sp,fp
 400f16c:	dfc00117 	ldw	ra,4(sp)
 400f170:	df000017 	ldw	fp,0(sp)
 400f174:	dec00204 	addi	sp,sp,8
 400f178:	f800283a 	ret

0400f17c <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 400f17c:	defffc04 	addi	sp,sp,-16
 400f180:	dfc00315 	stw	ra,12(sp)
 400f184:	df000215 	stw	fp,8(sp)
 400f188:	df000204 	addi	fp,sp,8
 400f18c:	e13ffe15 	stw	r4,-8(fp)
 400f190:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 400f194:	e0bfff17 	ldw	r2,-4(fp)
 400f198:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 400f19c:	e1ffff17 	ldw	r7,-4(fp)
 400f1a0:	000d883a 	mov	r6,zero
 400f1a4:	01410074 	movhi	r5,1025
 400f1a8:	297c1b04 	addi	r5,r5,-3988
 400f1ac:	e13ffe17 	ldw	r4,-8(fp)
 400f1b0:	400f2680 	call	400f268 <alt_avalon_i2c_register_callback>
}
 400f1b4:	0001883a 	nop
 400f1b8:	e037883a 	mov	sp,fp
 400f1bc:	dfc00117 	ldw	ra,4(sp)
 400f1c0:	df000017 	ldw	fp,0(sp)
 400f1c4:	dec00204 	addi	sp,sp,8
 400f1c8:	f800283a 	ret

0400f1cc <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 400f1cc:	defff904 	addi	sp,sp,-28
 400f1d0:	dfc00615 	stw	ra,24(sp)
 400f1d4:	df000515 	stw	fp,20(sp)
 400f1d8:	df000504 	addi	fp,sp,20
 400f1dc:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 400f1e0:	e0bfff17 	ldw	r2,-4(fp)
 400f1e4:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 400f1e8:	014007c4 	movi	r5,31
 400f1ec:	e13ffb17 	ldw	r4,-20(fp)
 400f1f0:	4010a100 	call	4010a10 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 400f1f4:	01400704 	movi	r5,28
 400f1f8:	e13ffb17 	ldw	r4,-20(fp)
 400f1fc:	40109d40 	call	40109d4 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 400f200:	e0bffb17 	ldw	r2,-20(fp)
 400f204:	10800617 	ldw	r2,24(r2)
 400f208:	10001126 	beq	r2,zero,400f250 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f20c:	0005303a 	rdctl	r2,status
 400f210:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f214:	e0fffd17 	ldw	r3,-12(fp)
 400f218:	00bfff84 	movi	r2,-2
 400f21c:	1884703a 	and	r2,r3,r2
 400f220:	1001703a 	wrctl	status,r2
  
  return context;
 400f224:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 400f228:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 400f22c:	e0bffb17 	ldw	r2,-20(fp)
 400f230:	10800617 	ldw	r2,24(r2)
 400f234:	e13ffb17 	ldw	r4,-20(fp)
 400f238:	103ee83a 	callr	r2
 400f23c:	e0bffc17 	ldw	r2,-16(fp)
 400f240:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f244:	e0bffe17 	ldw	r2,-8(fp)
 400f248:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 400f24c:	0001883a 	nop
 400f250:	0001883a 	nop
}
 400f254:	e037883a 	mov	sp,fp
 400f258:	dfc00117 	ldw	ra,4(sp)
 400f25c:	df000017 	ldw	fp,0(sp)
 400f260:	dec00204 	addi	sp,sp,8
 400f264:	f800283a 	ret

0400f268 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 400f268:	defffb04 	addi	sp,sp,-20
 400f26c:	df000415 	stw	fp,16(sp)
 400f270:	df000404 	addi	fp,sp,16
 400f274:	e13ffc15 	stw	r4,-16(fp)
 400f278:	e17ffd15 	stw	r5,-12(fp)
 400f27c:	e1bffe15 	stw	r6,-8(fp)
 400f280:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 400f284:	e0bffc17 	ldw	r2,-16(fp)
 400f288:	e0fffd17 	ldw	r3,-12(fp)
 400f28c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 400f290:	e0bffc17 	ldw	r2,-16(fp)
 400f294:	e0ffff17 	ldw	r3,-4(fp)
 400f298:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 400f29c:	e0bffc17 	ldw	r2,-16(fp)
 400f2a0:	e0fffe17 	ldw	r3,-8(fp)
 400f2a4:	10c00815 	stw	r3,32(r2)

    return ;
 400f2a8:	0001883a 	nop
}
 400f2ac:	e037883a 	mov	sp,fp
 400f2b0:	df000017 	ldw	fp,0(sp)
 400f2b4:	dec00104 	addi	sp,sp,4
 400f2b8:	f800283a 	ret

0400f2bc <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 400f2bc:	defff704 	addi	sp,sp,-36
 400f2c0:	dfc00815 	stw	ra,32(sp)
 400f2c4:	df000715 	stw	fp,28(sp)
 400f2c8:	df000704 	addi	fp,sp,28
 400f2cc:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 400f2d0:	e13fff17 	ldw	r4,-4(fp)
 400f2d4:	400f4800 	call	400f480 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 400f2d8:	014007c4 	movi	r5,31
 400f2dc:	e13fff17 	ldw	r4,-4(fp)
 400f2e0:	4010a100 	call	4010a10 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 400f2e4:	01400704 	movi	r5,28
 400f2e8:	e13fff17 	ldw	r4,-4(fp)
 400f2ec:	40109d40 	call	40109d4 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 400f2f0:	014000c4 	movi	r5,3
 400f2f4:	e13fff17 	ldw	r4,-4(fp)
 400f2f8:	4010c1c0 	call	4010c1c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 400f2fc:	014000c4 	movi	r5,3
 400f300:	e13fff17 	ldw	r4,-4(fp)
 400f304:	4010b6c0 	call	4010b6c <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 400f308:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 400f30c:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 400f310:	e0bffb04 	addi	r2,fp,-20
 400f314:	018000b4 	movhi	r6,2
 400f318:	31a1a804 	addi	r6,r6,-31072
 400f31c:	100b883a 	mov	r5,r2
 400f320:	e13fff17 	ldw	r4,-4(fp)
 400f324:	400f6dc0 	call	400f6dc <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 400f328:	e0bffb04 	addi	r2,fp,-20
 400f32c:	100b883a 	mov	r5,r2
 400f330:	e13fff17 	ldw	r4,-4(fp)
 400f334:	400f57c0 	call	400f57c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 400f338:	d1600e04 	addi	r5,gp,-32712
 400f33c:	e13fff17 	ldw	r4,-4(fp)
 400f340:	4013a680 	call	4013a68 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 400f344:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 400f348:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 400f34c:	e0bffa17 	ldw	r2,-24(fp)
 400f350:	10000c1e 	bne	r2,zero,400f384 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 400f354:	e0bfff17 	ldw	r2,-4(fp)
 400f358:	10c00417 	ldw	r3,16(r2)
 400f35c:	e0bfff17 	ldw	r2,-4(fp)
 400f360:	10800517 	ldw	r2,20(r2)
 400f364:	d8000015 	stw	zero,0(sp)
 400f368:	e1ffff17 	ldw	r7,-4(fp)
 400f36c:	01810074 	movhi	r6,1025
 400f370:	31bc7304 	addi	r6,r6,-3636
 400f374:	100b883a 	mov	r5,r2
 400f378:	1809883a 	mov	r4,r3
 400f37c:	4013bbc0 	call	4013bbc <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 400f380:	00000406 	br	400f394 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 400f384:	01010074 	movhi	r4,1025
 400f388:	21171004 	addi	r4,r4,23616
 400f38c:	40143c00 	call	40143c0 <alt_printf>
    }

    return;
 400f390:	0001883a 	nop

}
 400f394:	e037883a 	mov	sp,fp
 400f398:	dfc00117 	ldw	ra,4(sp)
 400f39c:	df000017 	ldw	fp,0(sp)
 400f3a0:	dec00204 	addi	sp,sp,8
 400f3a4:	f800283a 	ret

0400f3a8 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 400f3a8:	defffc04 	addi	sp,sp,-16
 400f3ac:	dfc00315 	stw	ra,12(sp)
 400f3b0:	df000215 	stw	fp,8(sp)
 400f3b4:	df000204 	addi	fp,sp,8
 400f3b8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 400f3bc:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 400f3c0:	d1600e04 	addi	r5,gp,-32712
 400f3c4:	e13fff17 	ldw	r4,-4(fp)
 400f3c8:	4013b0c0 	call	4013b0c <alt_find_dev>
 400f3cc:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 400f3d0:	e0bffe17 	ldw	r2,-8(fp)
}
 400f3d4:	e037883a 	mov	sp,fp
 400f3d8:	dfc00117 	ldw	ra,4(sp)
 400f3dc:	df000017 	ldw	fp,0(sp)
 400f3e0:	dec00204 	addi	sp,sp,8
 400f3e4:	f800283a 	ret

0400f3e8 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 400f3e8:	defffc04 	addi	sp,sp,-16
 400f3ec:	df000315 	stw	fp,12(sp)
 400f3f0:	df000304 	addi	fp,sp,12
 400f3f4:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 400f3f8:	e0bfff17 	ldw	r2,-4(fp)
 400f3fc:	10800717 	ldw	r2,28(r2)
 400f400:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 400f404:	e0bfff17 	ldw	r2,-4(fp)
 400f408:	10800317 	ldw	r2,12(r2)
 400f40c:	10800204 	addi	r2,r2,8
 400f410:	10800037 	ldwio	r2,0(r2)
 400f414:	1080004c 	andi	r2,r2,1
 400f418:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 400f41c:	e0bffe17 	ldw	r2,-8(fp)
 400f420:	10000226 	beq	r2,zero,400f42c <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 400f424:	00bffe44 	movi	r2,-7
 400f428:	00001106 	br	400f470 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 400f42c:	e0bfff17 	ldw	r2,-4(fp)
 400f430:	10c00617 	ldw	r3,24(r2)
 400f434:	00810074 	movhi	r2,1025
 400f438:	10bc1b04 	addi	r2,r2,-3988
 400f43c:	1880021e 	bne	r3,r2,400f448 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 400f440:	e0bffd17 	ldw	r2,-12(fp)
 400f444:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 400f448:	e0bfff17 	ldw	r2,-4(fp)
 400f44c:	10800317 	ldw	r2,12(r2)
 400f450:	10800204 	addi	r2,r2,8
 400f454:	e0ffff17 	ldw	r3,-4(fp)
 400f458:	18c00317 	ldw	r3,12(r3)
 400f45c:	18c00204 	addi	r3,r3,8
 400f460:	18c00037 	ldwio	r3,0(r3)
 400f464:	18c00054 	ori	r3,r3,1
 400f468:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 400f46c:	0005883a 	mov	r2,zero
}
 400f470:	e037883a 	mov	sp,fp
 400f474:	df000017 	ldw	fp,0(sp)
 400f478:	dec00104 	addi	sp,sp,4
 400f47c:	f800283a 	ret

0400f480 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 400f480:	defffe04 	addi	sp,sp,-8
 400f484:	df000115 	stw	fp,4(sp)
 400f488:	df000104 	addi	fp,sp,4
 400f48c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 400f490:	e0bfff17 	ldw	r2,-4(fp)
 400f494:	10800317 	ldw	r2,12(r2)
 400f498:	10800204 	addi	r2,r2,8
 400f49c:	e0ffff17 	ldw	r3,-4(fp)
 400f4a0:	18c00317 	ldw	r3,12(r3)
 400f4a4:	18c00204 	addi	r3,r3,8
 400f4a8:	19000037 	ldwio	r4,0(r3)
 400f4ac:	00ffff84 	movi	r3,-2
 400f4b0:	20c6703a 	and	r3,r4,r3
 400f4b4:	10c00035 	stwio	r3,0(r2)

}
 400f4b8:	0001883a 	nop
 400f4bc:	e037883a 	mov	sp,fp
 400f4c0:	df000017 	ldw	fp,0(sp)
 400f4c4:	dec00104 	addi	sp,sp,4
 400f4c8:	f800283a 	ret

0400f4cc <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 400f4cc:	defffd04 	addi	sp,sp,-12
 400f4d0:	df000215 	stw	fp,8(sp)
 400f4d4:	df000204 	addi	fp,sp,8
 400f4d8:	e13ffe15 	stw	r4,-8(fp)
 400f4dc:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 400f4e0:	e0bffe17 	ldw	r2,-8(fp)
 400f4e4:	10c00d17 	ldw	r3,52(r2)
 400f4e8:	e0bfff17 	ldw	r2,-4(fp)
 400f4ec:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 400f4f0:	e0bffe17 	ldw	r2,-8(fp)
 400f4f4:	10800317 	ldw	r2,12(r2)
 400f4f8:	10800204 	addi	r2,r2,8
 400f4fc:	10800037 	ldwio	r2,0(r2)
 400f500:	1080008c 	andi	r2,r2,2
 400f504:	1005d07a 	srai	r2,r2,1
 400f508:	1007883a 	mov	r3,r2
 400f50c:	e0bfff17 	ldw	r2,-4(fp)
 400f510:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 400f514:	e0bffe17 	ldw	r2,-8(fp)
 400f518:	10800317 	ldw	r2,12(r2)
 400f51c:	10800904 	addi	r2,r2,36
 400f520:	10800037 	ldwio	r2,0(r2)
 400f524:	1007883a 	mov	r3,r2
 400f528:	e0bfff17 	ldw	r2,-4(fp)
 400f52c:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 400f530:	e0bffe17 	ldw	r2,-8(fp)
 400f534:	10800317 	ldw	r2,12(r2)
 400f538:	10800804 	addi	r2,r2,32
 400f53c:	10800037 	ldwio	r2,0(r2)
 400f540:	1007883a 	mov	r3,r2
 400f544:	e0bfff17 	ldw	r2,-4(fp)
 400f548:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 400f54c:	e0bffe17 	ldw	r2,-8(fp)
 400f550:	10800317 	ldw	r2,12(r2)
 400f554:	10800a04 	addi	r2,r2,40
 400f558:	10800037 	ldwio	r2,0(r2)
 400f55c:	1007883a 	mov	r3,r2
 400f560:	e0bfff17 	ldw	r2,-4(fp)
 400f564:	10c0030d 	sth	r3,12(r2)
}
 400f568:	0001883a 	nop
 400f56c:	e037883a 	mov	sp,fp
 400f570:	df000017 	ldw	fp,0(sp)
 400f574:	dec00104 	addi	sp,sp,4
 400f578:	f800283a 	ret

0400f57c <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 400f57c:	defffd04 	addi	sp,sp,-12
 400f580:	df000215 	stw	fp,8(sp)
 400f584:	df000204 	addi	fp,sp,8
 400f588:	e13ffe15 	stw	r4,-8(fp)
 400f58c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 400f590:	e0bfff17 	ldw	r2,-4(fp)
 400f594:	10c00017 	ldw	r3,0(r2)
 400f598:	e0bffe17 	ldw	r2,-8(fp)
 400f59c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 400f5a0:	e0bffe17 	ldw	r2,-8(fp)
 400f5a4:	10800317 	ldw	r2,12(r2)
 400f5a8:	10c00204 	addi	r3,r2,8
 400f5ac:	e0bffe17 	ldw	r2,-8(fp)
 400f5b0:	10800317 	ldw	r2,12(r2)
 400f5b4:	10800204 	addi	r2,r2,8
 400f5b8:	10800037 	ldwio	r2,0(r2)
 400f5bc:	1009883a 	mov	r4,r2
 400f5c0:	00bfff44 	movi	r2,-3
 400f5c4:	2088703a 	and	r4,r4,r2
 400f5c8:	e0bfff17 	ldw	r2,-4(fp)
 400f5cc:	10800117 	ldw	r2,4(r2)
 400f5d0:	1085883a 	add	r2,r2,r2
 400f5d4:	1080008c 	andi	r2,r2,2
 400f5d8:	2084b03a 	or	r2,r4,r2
 400f5dc:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 400f5e0:	e0bffe17 	ldw	r2,-8(fp)
 400f5e4:	10800317 	ldw	r2,12(r2)
 400f5e8:	10800904 	addi	r2,r2,36
 400f5ec:	e0ffff17 	ldw	r3,-4(fp)
 400f5f0:	18c0020b 	ldhu	r3,8(r3)
 400f5f4:	18ffffcc 	andi	r3,r3,65535
 400f5f8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 400f5fc:	e0bffe17 	ldw	r2,-8(fp)
 400f600:	10800317 	ldw	r2,12(r2)
 400f604:	10800804 	addi	r2,r2,32
 400f608:	e0ffff17 	ldw	r3,-4(fp)
 400f60c:	18c0028b 	ldhu	r3,10(r3)
 400f610:	18ffffcc 	andi	r3,r3,65535
 400f614:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 400f618:	e0bffe17 	ldw	r2,-8(fp)
 400f61c:	10800317 	ldw	r2,12(r2)
 400f620:	10800a04 	addi	r2,r2,40
 400f624:	e0ffff17 	ldw	r3,-4(fp)
 400f628:	18c0030b 	ldhu	r3,12(r3)
 400f62c:	18ffffcc 	andi	r3,r3,65535
 400f630:	10c00035 	stwio	r3,0(r2)
}
 400f634:	0001883a 	nop
 400f638:	e037883a 	mov	sp,fp
 400f63c:	df000017 	ldw	fp,0(sp)
 400f640:	dec00104 	addi	sp,sp,4
 400f644:	f800283a 	ret

0400f648 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 400f648:	defffb04 	addi	sp,sp,-20
 400f64c:	dfc00415 	stw	ra,16(sp)
 400f650:	df000315 	stw	fp,12(sp)
 400f654:	df000304 	addi	fp,sp,12
 400f658:	e13ffd15 	stw	r4,-12(fp)
 400f65c:	e17ffe15 	stw	r5,-8(fp)
 400f660:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 400f664:	e0bffe17 	ldw	r2,-8(fp)
 400f668:	1080028b 	ldhu	r2,10(r2)
 400f66c:	10bfffcc 	andi	r2,r2,65535
 400f670:	10000426 	beq	r2,zero,400f684 <alt_avalon_i2c_master_config_speed_get+0x3c>
 400f674:	e0bffe17 	ldw	r2,-8(fp)
 400f678:	1080020b 	ldhu	r2,8(r2)
 400f67c:	10bfffcc 	andi	r2,r2,65535
 400f680:	1000021e 	bne	r2,zero,400f68c <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 400f684:	00bfff44 	movi	r2,-3
 400f688:	00000f06 	br	400f6c8 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 400f68c:	e0bffd17 	ldw	r2,-12(fp)
 400f690:	11000c17 	ldw	r4,48(r2)
 400f694:	e0bffe17 	ldw	r2,-8(fp)
 400f698:	1080028b 	ldhu	r2,10(r2)
 400f69c:	10ffffcc 	andi	r3,r2,65535
 400f6a0:	e0bffe17 	ldw	r2,-8(fp)
 400f6a4:	1080020b 	ldhu	r2,8(r2)
 400f6a8:	10bfffcc 	andi	r2,r2,65535
 400f6ac:	1885883a 	add	r2,r3,r2
 400f6b0:	100b883a 	mov	r5,r2
 400f6b4:	40010580 	call	4001058 <__udivsi3>
 400f6b8:	1007883a 	mov	r3,r2
 400f6bc:	e0bfff17 	ldw	r2,-4(fp)
 400f6c0:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 400f6c4:	0005883a 	mov	r2,zero
}
 400f6c8:	e037883a 	mov	sp,fp
 400f6cc:	dfc00117 	ldw	ra,4(sp)
 400f6d0:	df000017 	ldw	fp,0(sp)
 400f6d4:	dec00204 	addi	sp,sp,8
 400f6d8:	f800283a 	ret

0400f6dc <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 400f6dc:	defff904 	addi	sp,sp,-28
 400f6e0:	dfc00615 	stw	ra,24(sp)
 400f6e4:	df000515 	stw	fp,20(sp)
 400f6e8:	df000504 	addi	fp,sp,20
 400f6ec:	e13ffd15 	stw	r4,-12(fp)
 400f6f0:	e17ffe15 	stw	r5,-8(fp)
 400f6f4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 400f6f8:	e0ffff17 	ldw	r3,-4(fp)
 400f6fc:	008001b4 	movhi	r2,6
 400f700:	1086a004 	addi	r2,r2,6784
 400f704:	10c00436 	bltu	r2,r3,400f718 <alt_avalon_i2c_master_config_speed_set+0x3c>
 400f708:	e0bfff17 	ldw	r2,-4(fp)
 400f70c:	10000226 	beq	r2,zero,400f718 <alt_avalon_i2c_master_config_speed_set+0x3c>
 400f710:	e0bfff17 	ldw	r2,-4(fp)
 400f714:	1000021e 	bne	r2,zero,400f720 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 400f718:	00bfff04 	movi	r2,-4
 400f71c:	00002906 	br	400f7c4 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 400f720:	e0bffd17 	ldw	r2,-12(fp)
 400f724:	10c00c17 	ldw	r3,48(r2)
 400f728:	e0bfff17 	ldw	r2,-4(fp)
 400f72c:	1085883a 	add	r2,r2,r2
 400f730:	100b883a 	mov	r5,r2
 400f734:	1809883a 	mov	r4,r3
 400f738:	40010580 	call	4001058 <__udivsi3>
 400f73c:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 400f740:	e0bffb17 	ldw	r2,-20(fp)
 400f744:	10800f04 	addi	r2,r2,60
 400f748:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 400f74c:	e0bffb17 	ldw	r2,-20(fp)
 400f750:	10bff104 	addi	r2,r2,-60
 400f754:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 400f758:	e0ffff17 	ldw	r3,-4(fp)
 400f75c:	008000b4 	movhi	r2,2
 400f760:	10a1a804 	addi	r2,r2,-31072
 400f764:	10c0042e 	bgeu	r2,r3,400f778 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 400f768:	e0bffe17 	ldw	r2,-8(fp)
 400f76c:	00c00044 	movi	r3,1
 400f770:	10c00115 	stw	r3,4(r2)
 400f774:	00000206 	br	400f780 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 400f778:	e0bffe17 	ldw	r2,-8(fp)
 400f77c:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 400f780:	e0bffb17 	ldw	r2,-20(fp)
 400f784:	1007883a 	mov	r3,r2
 400f788:	e0bffe17 	ldw	r2,-8(fp)
 400f78c:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 400f790:	e0bffc17 	ldw	r2,-16(fp)
 400f794:	1007883a 	mov	r3,r2
 400f798:	e0bffe17 	ldw	r2,-8(fp)
 400f79c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 400f7a0:	e0bffb17 	ldw	r2,-20(fp)
 400f7a4:	1007883a 	mov	r3,r2
 400f7a8:	e0bffb17 	ldw	r2,-20(fp)
 400f7ac:	1004d07a 	srli	r2,r2,1
 400f7b0:	1885c83a 	sub	r2,r3,r2
 400f7b4:	1007883a 	mov	r3,r2
 400f7b8:	e0bffe17 	ldw	r2,-8(fp)
 400f7bc:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 400f7c0:	0005883a 	mov	r2,zero

}
 400f7c4:	e037883a 	mov	sp,fp
 400f7c8:	dfc00117 	ldw	ra,4(sp)
 400f7cc:	df000017 	ldw	fp,0(sp)
 400f7d0:	dec00204 	addi	sp,sp,8
 400f7d4:	f800283a 	ret

0400f7d8 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 400f7d8:	defffe04 	addi	sp,sp,-8
 400f7dc:	df000115 	stw	fp,4(sp)
 400f7e0:	df000104 	addi	fp,sp,4
 400f7e4:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 400f7e8:	e0bfff17 	ldw	r2,-4(fp)
 400f7ec:	10800317 	ldw	r2,12(r2)
 400f7f0:	10800504 	addi	r2,r2,20
 400f7f4:	10800037 	ldwio	r2,0(r2)
 400f7f8:	1080004c 	andi	r2,r2,1
 400f7fc:	10000226 	beq	r2,zero,400f808 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 400f800:	00800044 	movi	r2,1
 400f804:	00000106 	br	400f80c <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 400f808:	0005883a 	mov	r2,zero
}
 400f80c:	e037883a 	mov	sp,fp
 400f810:	df000017 	ldw	fp,0(sp)
 400f814:	dec00104 	addi	sp,sp,4
 400f818:	f800283a 	ret

0400f81c <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 400f81c:	defffb04 	addi	sp,sp,-20
 400f820:	df000415 	stw	fp,16(sp)
 400f824:	df000404 	addi	fp,sp,16
 400f828:	e13ffc15 	stw	r4,-16(fp)
 400f82c:	e17ffd15 	stw	r5,-12(fp)
 400f830:	e1bffe15 	stw	r6,-8(fp)
 400f834:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 400f838:	e0bfff17 	ldw	r2,-4(fp)
 400f83c:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 400f840:	00001406 	br	400f894 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 400f844:	e0bfff17 	ldw	r2,-4(fp)
 400f848:	10800017 	ldw	r2,0(r2)
 400f84c:	e0fffd17 	ldw	r3,-12(fp)
 400f850:	1885883a 	add	r2,r3,r2
 400f854:	e0fffc17 	ldw	r3,-16(fp)
 400f858:	18c00317 	ldw	r3,12(r3)
 400f85c:	18c00104 	addi	r3,r3,4
 400f860:	18c00037 	ldwio	r3,0(r3)
 400f864:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 400f868:	e0bfff17 	ldw	r2,-4(fp)
 400f86c:	10800017 	ldw	r2,0(r2)
 400f870:	10c00044 	addi	r3,r2,1
 400f874:	e0bfff17 	ldw	r2,-4(fp)
 400f878:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 400f87c:	e0bfff17 	ldw	r2,-4(fp)
 400f880:	10c00017 	ldw	r3,0(r2)
 400f884:	e0bffe17 	ldw	r2,-8(fp)
 400f888:	1880021e 	bne	r3,r2,400f894 <alt_avalon_i2c_rx_read_available+0x78>
 400f88c:	e0bffe17 	ldw	r2,-8(fp)
 400f890:	1000061e 	bne	r2,zero,400f8ac <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 400f894:	e0bffc17 	ldw	r2,-16(fp)
 400f898:	10800317 	ldw	r2,12(r2)
 400f89c:	10800704 	addi	r2,r2,28
 400f8a0:	10800037 	ldwio	r2,0(r2)
 400f8a4:	103fe71e 	bne	r2,zero,400f844 <__ram_exceptions_end+0xfbf875a8>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 400f8a8:	00000106 	br	400f8b0 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 400f8ac:	0001883a 	nop
    }
}
 400f8b0:	0001883a 	nop
 400f8b4:	e037883a 	mov	sp,fp
 400f8b8:	df000017 	ldw	fp,0(sp)
 400f8bc:	dec00104 	addi	sp,sp,4
 400f8c0:	f800283a 	ret

0400f8c4 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 400f8c4:	defffa04 	addi	sp,sp,-24
 400f8c8:	dfc00515 	stw	ra,20(sp)
 400f8cc:	df000415 	stw	fp,16(sp)
 400f8d0:	df000404 	addi	fp,sp,16
 400f8d4:	e13ffe15 	stw	r4,-8(fp)
 400f8d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 400f8dc:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 400f8e0:	008000b4 	movhi	r2,2
 400f8e4:	10a1a804 	addi	r2,r2,-31072
 400f8e8:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 400f8ec:	00000d06 	br	400f924 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 400f8f0:	e0bffd17 	ldw	r2,-12(fp)
 400f8f4:	108002a8 	cmpgeui	r2,r2,10
 400f8f8:	1000021e 	bne	r2,zero,400f904 <alt_avalon_i2c_rx_read+0x40>
 400f8fc:	0109c404 	movi	r4,10000
 400f900:	40138b40 	call	40138b4 <alt_busy_sleep>
      if (--timeout == 0)
 400f904:	e0bffd17 	ldw	r2,-12(fp)
 400f908:	10bfffc4 	addi	r2,r2,-1
 400f90c:	e0bffd15 	stw	r2,-12(fp)
 400f910:	e0bffd17 	ldw	r2,-12(fp)
 400f914:	1000031e 	bne	r2,zero,400f924 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 400f918:	00bfff84 	movi	r2,-2
 400f91c:	e0bffc15 	stw	r2,-16(fp)
        break;
 400f920:	00000506 	br	400f938 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 400f924:	e0bffe17 	ldw	r2,-8(fp)
 400f928:	10800317 	ldw	r2,12(r2)
 400f92c:	10800704 	addi	r2,r2,28
 400f930:	10800037 	ldwio	r2,0(r2)
 400f934:	103fee26 	beq	r2,zero,400f8f0 <__ram_exceptions_end+0xfbf87654>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 400f938:	e0bffe17 	ldw	r2,-8(fp)
 400f93c:	10800317 	ldw	r2,12(r2)
 400f940:	10800104 	addi	r2,r2,4
 400f944:	10800037 	ldwio	r2,0(r2)
 400f948:	1007883a 	mov	r3,r2
 400f94c:	e0bfff17 	ldw	r2,-4(fp)
 400f950:	10c00005 	stb	r3,0(r2)
        
    return status;
 400f954:	e0bffc17 	ldw	r2,-16(fp)
}
 400f958:	e037883a 	mov	sp,fp
 400f95c:	dfc00117 	ldw	ra,4(sp)
 400f960:	df000017 	ldw	fp,0(sp)
 400f964:	dec00204 	addi	sp,sp,8
 400f968:	f800283a 	ret

0400f96c <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 400f96c:	defff804 	addi	sp,sp,-32
 400f970:	dfc00715 	stw	ra,28(sp)
 400f974:	df000615 	stw	fp,24(sp)
 400f978:	df000604 	addi	fp,sp,24
 400f97c:	e13ffc15 	stw	r4,-16(fp)
 400f980:	2809883a 	mov	r4,r5
 400f984:	3007883a 	mov	r3,r6
 400f988:	3805883a 	mov	r2,r7
 400f98c:	e13ffd05 	stb	r4,-12(fp)
 400f990:	e0fffe05 	stb	r3,-8(fp)
 400f994:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 400f998:	0089c404 	movi	r2,10000
 400f99c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 400f9a0:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 400f9a4:	00000c06 	br	400f9d8 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 400f9a8:	e0bffa17 	ldw	r2,-24(fp)
 400f9ac:	108002a8 	cmpgeui	r2,r2,10
 400f9b0:	1000021e 	bne	r2,zero,400f9bc <alt_avalon_i2c_cmd_write+0x50>
 400f9b4:	0109c404 	movi	r4,10000
 400f9b8:	40138b40 	call	40138b4 <alt_busy_sleep>
      if (--timeout == 0)
 400f9bc:	e0bffa17 	ldw	r2,-24(fp)
 400f9c0:	10bfffc4 	addi	r2,r2,-1
 400f9c4:	e0bffa15 	stw	r2,-24(fp)
 400f9c8:	e0bffa17 	ldw	r2,-24(fp)
 400f9cc:	1000021e 	bne	r2,zero,400f9d8 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 400f9d0:	00bfff84 	movi	r2,-2
 400f9d4:	00001906 	br	400fa3c <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 400f9d8:	e0bffc17 	ldw	r2,-16(fp)
 400f9dc:	10800317 	ldw	r2,12(r2)
 400f9e0:	10800404 	addi	r2,r2,16
 400f9e4:	10800037 	ldwio	r2,0(r2)
 400f9e8:	1080004c 	andi	r2,r2,1
 400f9ec:	103fee26 	beq	r2,zero,400f9a8 <__ram_exceptions_end+0xfbf8770c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 400f9f0:	e0bffc17 	ldw	r2,-16(fp)
 400f9f4:	10800317 	ldw	r2,12(r2)
 400f9f8:	e13ffd03 	ldbu	r4,-12(fp)
 400f9fc:	e0fffe03 	ldbu	r3,-8(fp)
 400fa00:	1806927a 	slli	r3,r3,9
 400fa04:	20c8b03a 	or	r4,r4,r3
 400fa08:	e0ffff03 	ldbu	r3,-4(fp)
 400fa0c:	1806923a 	slli	r3,r3,8
 400fa10:	20c6b03a 	or	r3,r4,r3
 400fa14:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 400fa18:	e0bffb04 	addi	r2,fp,-20
 400fa1c:	100b883a 	mov	r5,r2
 400fa20:	e13ffc17 	ldw	r4,-16(fp)
 400fa24:	400fbac0 	call	400fbac <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 400fa28:	e0bffb04 	addi	r2,fp,-20
 400fa2c:	100b883a 	mov	r5,r2
 400fa30:	e13ffc17 	ldw	r4,-16(fp)
 400fa34:	400fbf80 	call	400fbf8 <alt_avalon_i2c_check_arblost>
    
    return status;
 400fa38:	e0bffb17 	ldw	r2,-20(fp)
}
 400fa3c:	e037883a 	mov	sp,fp
 400fa40:	dfc00117 	ldw	ra,4(sp)
 400fa44:	df000017 	ldw	fp,0(sp)
 400fa48:	dec00204 	addi	sp,sp,8
 400fa4c:	f800283a 	ret

0400fa50 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 400fa50:	defffa04 	addi	sp,sp,-24
 400fa54:	dfc00515 	stw	ra,20(sp)
 400fa58:	df000415 	stw	fp,16(sp)
 400fa5c:	df000404 	addi	fp,sp,16
 400fa60:	e13ffd15 	stw	r4,-12(fp)
 400fa64:	e17ffe15 	stw	r5,-8(fp)
 400fa68:	3005883a 	mov	r2,r6
 400fa6c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 400fa70:	e0bffd17 	ldw	r2,-12(fp)
 400fa74:	10800d17 	ldw	r2,52(r2)
 400fa78:	10800058 	cmpnei	r2,r2,1
 400fa7c:	10001c1e 	bne	r2,zero,400faf0 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 400fa80:	e0bffd17 	ldw	r2,-12(fp)
 400fa84:	10800917 	ldw	r2,36(r2)
 400fa88:	109e0014 	ori	r2,r2,30720
 400fa8c:	1004d1fa 	srli	r2,r2,7
 400fa90:	1007883a 	mov	r3,r2
 400fa94:	00bfff84 	movi	r2,-2
 400fa98:	1884703a 	and	r2,r3,r2
 400fa9c:	1007883a 	mov	r3,r2
 400faa0:	e0bffe17 	ldw	r2,-8(fp)
 400faa4:	1884b03a 	or	r2,r3,r2
 400faa8:	10803fcc 	andi	r2,r2,255
 400faac:	e0ffff03 	ldbu	r3,-4(fp)
 400fab0:	000f883a 	mov	r7,zero
 400fab4:	180d883a 	mov	r6,r3
 400fab8:	100b883a 	mov	r5,r2
 400fabc:	e13ffd17 	ldw	r4,-12(fp)
 400fac0:	400f96c0 	call	400f96c <alt_avalon_i2c_cmd_write>
 400fac4:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 400fac8:	e0bffd17 	ldw	r2,-12(fp)
 400facc:	10800917 	ldw	r2,36(r2)
 400fad0:	10803fcc 	andi	r2,r2,255
 400fad4:	000f883a 	mov	r7,zero
 400fad8:	000d883a 	mov	r6,zero
 400fadc:	100b883a 	mov	r5,r2
 400fae0:	e13ffd17 	ldw	r4,-12(fp)
 400fae4:	400f96c0 	call	400f96c <alt_avalon_i2c_cmd_write>
 400fae8:	e0bffc15 	stw	r2,-16(fp)
 400faec:	00000e06 	br	400fb28 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 400faf0:	e0bffd17 	ldw	r2,-12(fp)
 400faf4:	10800917 	ldw	r2,36(r2)
 400faf8:	1085883a 	add	r2,r2,r2
 400fafc:	1007883a 	mov	r3,r2
 400fb00:	e0bffe17 	ldw	r2,-8(fp)
 400fb04:	1884b03a 	or	r2,r3,r2
 400fb08:	10803fcc 	andi	r2,r2,255
 400fb0c:	e0ffff03 	ldbu	r3,-4(fp)
 400fb10:	000f883a 	mov	r7,zero
 400fb14:	180d883a 	mov	r6,r3
 400fb18:	100b883a 	mov	r5,r2
 400fb1c:	e13ffd17 	ldw	r4,-12(fp)
 400fb20:	400f96c0 	call	400f96c <alt_avalon_i2c_cmd_write>
 400fb24:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 400fb28:	e0bffc17 	ldw	r2,-16(fp)
}
 400fb2c:	e037883a 	mov	sp,fp
 400fb30:	dfc00117 	ldw	ra,4(sp)
 400fb34:	df000017 	ldw	fp,0(sp)
 400fb38:	dec00204 	addi	sp,sp,8
 400fb3c:	f800283a 	ret

0400fb40 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 400fb40:	defffd04 	addi	sp,sp,-12
 400fb44:	df000215 	stw	fp,8(sp)
 400fb48:	df000204 	addi	fp,sp,8
 400fb4c:	e13ffe15 	stw	r4,-8(fp)
 400fb50:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 400fb54:	e0bffe17 	ldw	r2,-8(fp)
 400fb58:	10c00917 	ldw	r3,36(r2)
 400fb5c:	e0bfff17 	ldw	r2,-4(fp)
 400fb60:	10c00015 	stw	r3,0(r2)
}
 400fb64:	0001883a 	nop
 400fb68:	e037883a 	mov	sp,fp
 400fb6c:	df000017 	ldw	fp,0(sp)
 400fb70:	dec00104 	addi	sp,sp,4
 400fb74:	f800283a 	ret

0400fb78 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 400fb78:	defffd04 	addi	sp,sp,-12
 400fb7c:	df000215 	stw	fp,8(sp)
 400fb80:	df000204 	addi	fp,sp,8
 400fb84:	e13ffe15 	stw	r4,-8(fp)
 400fb88:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 400fb8c:	e0bffe17 	ldw	r2,-8(fp)
 400fb90:	e0ffff17 	ldw	r3,-4(fp)
 400fb94:	10c00915 	stw	r3,36(r2)
}
 400fb98:	0001883a 	nop
 400fb9c:	e037883a 	mov	sp,fp
 400fba0:	df000017 	ldw	fp,0(sp)
 400fba4:	dec00104 	addi	sp,sp,4
 400fba8:	f800283a 	ret

0400fbac <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 400fbac:	defffd04 	addi	sp,sp,-12
 400fbb0:	df000215 	stw	fp,8(sp)
 400fbb4:	df000204 	addi	fp,sp,8
 400fbb8:	e13ffe15 	stw	r4,-8(fp)
 400fbbc:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 400fbc0:	e0bffe17 	ldw	r2,-8(fp)
 400fbc4:	10800317 	ldw	r2,12(r2)
 400fbc8:	10800404 	addi	r2,r2,16
 400fbcc:	10800037 	ldwio	r2,0(r2)
 400fbd0:	1080010c 	andi	r2,r2,4
 400fbd4:	10000326 	beq	r2,zero,400fbe4 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 400fbd8:	e0bfff17 	ldw	r2,-4(fp)
 400fbdc:	00fffec4 	movi	r3,-5
 400fbe0:	10c00015 	stw	r3,0(r2)
    }
}
 400fbe4:	0001883a 	nop
 400fbe8:	e037883a 	mov	sp,fp
 400fbec:	df000017 	ldw	fp,0(sp)
 400fbf0:	dec00104 	addi	sp,sp,4
 400fbf4:	f800283a 	ret

0400fbf8 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 400fbf8:	defffd04 	addi	sp,sp,-12
 400fbfc:	df000215 	stw	fp,8(sp)
 400fc00:	df000204 	addi	fp,sp,8
 400fc04:	e13ffe15 	stw	r4,-8(fp)
 400fc08:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 400fc0c:	e0bffe17 	ldw	r2,-8(fp)
 400fc10:	10800317 	ldw	r2,12(r2)
 400fc14:	10800404 	addi	r2,r2,16
 400fc18:	10800037 	ldwio	r2,0(r2)
 400fc1c:	1080020c 	andi	r2,r2,8
 400fc20:	10000326 	beq	r2,zero,400fc30 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 400fc24:	e0bfff17 	ldw	r2,-4(fp)
 400fc28:	00fffe84 	movi	r3,-6
 400fc2c:	10c00015 	stw	r3,0(r2)
    }
}
 400fc30:	0001883a 	nop
 400fc34:	e037883a 	mov	sp,fp
 400fc38:	df000017 	ldw	fp,0(sp)
 400fc3c:	dec00104 	addi	sp,sp,4
 400fc40:	f800283a 	ret

0400fc44 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 400fc44:	defff804 	addi	sp,sp,-32
 400fc48:	dfc00715 	stw	ra,28(sp)
 400fc4c:	df000615 	stw	fp,24(sp)
 400fc50:	df000604 	addi	fp,sp,24
 400fc54:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 400fc58:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 400fc5c:	e0bfff17 	ldw	r2,-4(fp)
 400fc60:	10800717 	ldw	r2,28(r2)
 400fc64:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 400fc68:	e0bffb17 	ldw	r2,-20(fp)
 400fc6c:	10800117 	ldw	r2,4(r2)
 400fc70:	10800044 	addi	r2,r2,1
 400fc74:	0149c404 	movi	r5,10000
 400fc78:	1009883a 	mov	r4,r2
 400fc7c:	40011140 	call	4001114 <__mulsi3>
 400fc80:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 400fc84:	e0bffd04 	addi	r2,fp,-12
 400fc88:	100b883a 	mov	r5,r2
 400fc8c:	e13fff17 	ldw	r4,-4(fp)
 400fc90:	4010adc0 	call	4010adc <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 400fc94:	e0bffd17 	ldw	r2,-12(fp)
 400fc98:	100b883a 	mov	r5,r2
 400fc9c:	e13fff17 	ldw	r4,-4(fp)
 400fca0:	4010a100 	call	4010a10 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 400fca4:	e0bffc04 	addi	r2,fp,-16
 400fca8:	100b883a 	mov	r5,r2
 400fcac:	e13fff17 	ldw	r4,-4(fp)
 400fcb0:	400fbac0 	call	400fbac <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 400fcb4:	e0bffc17 	ldw	r2,-16(fp)
 400fcb8:	10002226 	beq	r2,zero,400fd44 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 400fcbc:	e0bffb17 	ldw	r2,-20(fp)
 400fcc0:	10800217 	ldw	r2,8(r2)
 400fcc4:	10001d26 	beq	r2,zero,400fd3c <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 400fcc8:	00000d06 	br	400fd00 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 400fccc:	e0bffa17 	ldw	r2,-24(fp)
 400fcd0:	108002a8 	cmpgeui	r2,r2,10
 400fcd4:	1000021e 	bne	r2,zero,400fce0 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 400fcd8:	0109c404 	movi	r4,10000
 400fcdc:	40138b40 	call	40138b4 <alt_busy_sleep>
              if (--timeout == 0)
 400fce0:	e0bffa17 	ldw	r2,-24(fp)
 400fce4:	10bfffc4 	addi	r2,r2,-1
 400fce8:	e0bffa15 	stw	r2,-24(fp)
 400fcec:	e0bffa17 	ldw	r2,-24(fp)
 400fcf0:	1000031e 	bne	r2,zero,400fd00 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 400fcf4:	00bfff84 	movi	r2,-2
 400fcf8:	e0bffc15 	stw	r2,-16(fp)
                 break;
 400fcfc:	00000306 	br	400fd0c <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 400fd00:	e13fff17 	ldw	r4,-4(fp)
 400fd04:	400f7d80 	call	400f7d8 <alt_avalon_i2c_is_busy>
 400fd08:	103ff01e 	bne	r2,zero,400fccc <__ram_exceptions_end+0xfbf87a30>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 400fd0c:	e0bffb17 	ldw	r2,-20(fp)
 400fd10:	10800017 	ldw	r2,0(r2)
 400fd14:	e0fffe04 	addi	r3,fp,-8
 400fd18:	180f883a 	mov	r7,r3
 400fd1c:	000d883a 	mov	r6,zero
 400fd20:	100b883a 	mov	r5,r2
 400fd24:	e13fff17 	ldw	r4,-4(fp)
 400fd28:	400f81c0 	call	400f81c <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 400fd2c:	e13fff17 	ldw	r4,-4(fp)
 400fd30:	400f4800 	call	400f480 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 400fd34:	e0bffb17 	ldw	r2,-20(fp)
 400fd38:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 400fd3c:	e0bffc17 	ldw	r2,-16(fp)
 400fd40:	00000a06 	br	400fd6c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 400fd44:	e0bffb17 	ldw	r2,-20(fp)
 400fd48:	10800217 	ldw	r2,8(r2)
 400fd4c:	10000626 	beq	r2,zero,400fd68 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 400fd50:	e0bffd17 	ldw	r2,-12(fp)
 400fd54:	100b883a 	mov	r5,r2
 400fd58:	e13fff17 	ldw	r4,-4(fp)
 400fd5c:	4010a780 	call	4010a78 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 400fd60:	00bffe44 	movi	r2,-7
 400fd64:	00000106 	br	400fd6c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 400fd68:	0005883a 	mov	r2,zero
}
 400fd6c:	e037883a 	mov	sp,fp
 400fd70:	dfc00117 	ldw	ra,4(sp)
 400fd74:	df000017 	ldw	fp,0(sp)
 400fd78:	dec00204 	addi	sp,sp,8
 400fd7c:	f800283a 	ret

0400fd80 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 400fd80:	defff704 	addi	sp,sp,-36
 400fd84:	dfc00815 	stw	ra,32(sp)
 400fd88:	df000715 	stw	fp,28(sp)
 400fd8c:	df000704 	addi	fp,sp,28
 400fd90:	e13ffc15 	stw	r4,-16(fp)
 400fd94:	e17ffd15 	stw	r5,-12(fp)
 400fd98:	e1bffe15 	stw	r6,-8(fp)
 400fd9c:	3805883a 	mov	r2,r7
 400fda0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 400fda4:	0089c404 	movi	r2,10000
 400fda8:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 400fdac:	00002206 	br	400fe38 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 400fdb0:	e0bffb17 	ldw	r2,-20(fp)
 400fdb4:	108002a8 	cmpgeui	r2,r2,10
 400fdb8:	1000021e 	bne	r2,zero,400fdc4 <alt_avalon_i2c_master_tx+0x44>
 400fdbc:	0109c404 	movi	r4,10000
 400fdc0:	40138b40 	call	40138b4 <alt_busy_sleep>
      if (use_interrupts)
 400fdc4:	e0bfff03 	ldbu	r2,-4(fp)
 400fdc8:	10000926 	beq	r2,zero,400fdf0 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 400fdcc:	00800044 	movi	r2,1
 400fdd0:	d8800015 	stw	r2,0(sp)
 400fdd4:	000f883a 	mov	r7,zero
 400fdd8:	e1bffe17 	ldw	r6,-8(fp)
 400fddc:	e17ffd17 	ldw	r5,-12(fp)
 400fde0:	e13ffc17 	ldw	r4,-16(fp)
 400fde4:	401032c0 	call	401032c <alt_avalon_i2c_master_transmit_using_interrupts>
 400fde8:	e0bffa15 	stw	r2,-24(fp)
 400fdec:	00000806 	br	400fe10 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 400fdf0:	00800044 	movi	r2,1
 400fdf4:	d8800015 	stw	r2,0(sp)
 400fdf8:	000f883a 	mov	r7,zero
 400fdfc:	e1bffe17 	ldw	r6,-8(fp)
 400fe00:	e17ffd17 	ldw	r5,-12(fp)
 400fe04:	e13ffc17 	ldw	r4,-16(fp)
 400fe08:	401016c0 	call	401016c <alt_avalon_i2c_master_transmit>
 400fe0c:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 400fe10:	e0bffa17 	ldw	r2,-24(fp)
 400fe14:	10bffea0 	cmpeqi	r2,r2,-6
 400fe18:	1000061e 	bne	r2,zero,400fe34 <alt_avalon_i2c_master_tx+0xb4>
 400fe1c:	e0bffa17 	ldw	r2,-24(fp)
 400fe20:	10bffee0 	cmpeqi	r2,r2,-5
 400fe24:	1000031e 	bne	r2,zero,400fe34 <alt_avalon_i2c_master_tx+0xb4>
 400fe28:	e0bffa17 	ldw	r2,-24(fp)
 400fe2c:	10bffe58 	cmpnei	r2,r2,-7
 400fe30:	1000061e 	bne	r2,zero,400fe4c <alt_avalon_i2c_master_tx+0xcc>
 400fe34:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 400fe38:	e0bffb17 	ldw	r2,-20(fp)
 400fe3c:	10ffffc4 	addi	r3,r2,-1
 400fe40:	e0fffb15 	stw	r3,-20(fp)
 400fe44:	103fda1e 	bne	r2,zero,400fdb0 <__ram_exceptions_end+0xfbf87b14>
 400fe48:	00000106 	br	400fe50 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 400fe4c:	0001883a 	nop
    }

    return status;
 400fe50:	e0bffa17 	ldw	r2,-24(fp)
}        
 400fe54:	e037883a 	mov	sp,fp
 400fe58:	dfc00117 	ldw	ra,4(sp)
 400fe5c:	df000017 	ldw	fp,0(sp)
 400fe60:	dec00204 	addi	sp,sp,8
 400fe64:	f800283a 	ret

0400fe68 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 400fe68:	defff704 	addi	sp,sp,-36
 400fe6c:	dfc00815 	stw	ra,32(sp)
 400fe70:	df000715 	stw	fp,28(sp)
 400fe74:	df000704 	addi	fp,sp,28
 400fe78:	e13ffc15 	stw	r4,-16(fp)
 400fe7c:	e17ffd15 	stw	r5,-12(fp)
 400fe80:	e1bffe15 	stw	r6,-8(fp)
 400fe84:	3805883a 	mov	r2,r7
 400fe88:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 400fe8c:	0089c404 	movi	r2,10000
 400fe90:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 400fe94:	e0bfff03 	ldbu	r2,-4(fp)
 400fe98:	10003426 	beq	r2,zero,400ff6c <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 400fe9c:	00001706 	br	400fefc <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 400fea0:	e0bffb17 	ldw	r2,-20(fp)
 400fea4:	108002a8 	cmpgeui	r2,r2,10
 400fea8:	1000021e 	bne	r2,zero,400feb4 <alt_avalon_i2c_master_rx+0x4c>
 400feac:	0109c404 	movi	r4,10000
 400feb0:	40138b40 	call	40138b4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 400feb4:	00800044 	movi	r2,1
 400feb8:	d8800015 	stw	r2,0(sp)
 400febc:	000f883a 	mov	r7,zero
 400fec0:	e1bffe17 	ldw	r6,-8(fp)
 400fec4:	e17ffd17 	ldw	r5,-12(fp)
 400fec8:	e13ffc17 	ldw	r4,-16(fp)
 400fecc:	40107480 	call	4010748 <alt_avalon_i2c_master_receive_using_interrupts>
 400fed0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 400fed4:	e0bffa17 	ldw	r2,-24(fp)
 400fed8:	10bffea0 	cmpeqi	r2,r2,-6
 400fedc:	1000061e 	bne	r2,zero,400fef8 <alt_avalon_i2c_master_rx+0x90>
 400fee0:	e0bffa17 	ldw	r2,-24(fp)
 400fee4:	10bffee0 	cmpeqi	r2,r2,-5
 400fee8:	1000031e 	bne	r2,zero,400fef8 <alt_avalon_i2c_master_rx+0x90>
 400feec:	e0bffa17 	ldw	r2,-24(fp)
 400fef0:	10bffe58 	cmpnei	r2,r2,-7
 400fef4:	1000221e 	bne	r2,zero,400ff80 <alt_avalon_i2c_master_rx+0x118>
 400fef8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 400fefc:	e0bffb17 	ldw	r2,-20(fp)
 400ff00:	10ffffc4 	addi	r3,r2,-1
 400ff04:	e0fffb15 	stw	r3,-20(fp)
 400ff08:	103fe51e 	bne	r2,zero,400fea0 <__ram_exceptions_end+0xfbf87c04>
 400ff0c:	00001f06 	br	400ff8c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 400ff10:	e0bffb17 	ldw	r2,-20(fp)
 400ff14:	108002a8 	cmpgeui	r2,r2,10
 400ff18:	1000021e 	bne	r2,zero,400ff24 <alt_avalon_i2c_master_rx+0xbc>
 400ff1c:	0109c404 	movi	r4,10000
 400ff20:	40138b40 	call	40138b4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 400ff24:	00800044 	movi	r2,1
 400ff28:	d8800015 	stw	r2,0(sp)
 400ff2c:	000f883a 	mov	r7,zero
 400ff30:	e1bffe17 	ldw	r6,-8(fp)
 400ff34:	e17ffd17 	ldw	r5,-12(fp)
 400ff38:	e13ffc17 	ldw	r4,-16(fp)
 400ff3c:	40105380 	call	4010538 <alt_avalon_i2c_master_receive>
 400ff40:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 400ff44:	e0bffa17 	ldw	r2,-24(fp)
 400ff48:	10bffea0 	cmpeqi	r2,r2,-6
 400ff4c:	1000061e 	bne	r2,zero,400ff68 <alt_avalon_i2c_master_rx+0x100>
 400ff50:	e0bffa17 	ldw	r2,-24(fp)
 400ff54:	10bffee0 	cmpeqi	r2,r2,-5
 400ff58:	1000031e 	bne	r2,zero,400ff68 <alt_avalon_i2c_master_rx+0x100>
 400ff5c:	e0bffa17 	ldw	r2,-24(fp)
 400ff60:	10bffe58 	cmpnei	r2,r2,-7
 400ff64:	1000081e 	bne	r2,zero,400ff88 <alt_avalon_i2c_master_rx+0x120>
 400ff68:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 400ff6c:	e0bffb17 	ldw	r2,-20(fp)
 400ff70:	10ffffc4 	addi	r3,r2,-1
 400ff74:	e0fffb15 	stw	r3,-20(fp)
 400ff78:	103fe51e 	bne	r2,zero,400ff10 <__ram_exceptions_end+0xfbf87c74>
 400ff7c:	00000306 	br	400ff8c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 400ff80:	0001883a 	nop
 400ff84:	00000106 	br	400ff8c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 400ff88:	0001883a 	nop
      }
    }
    
    return status;
 400ff8c:	e0bffa17 	ldw	r2,-24(fp)
}        
 400ff90:	e037883a 	mov	sp,fp
 400ff94:	dfc00117 	ldw	ra,4(sp)
 400ff98:	df000017 	ldw	fp,0(sp)
 400ff9c:	dec00204 	addi	sp,sp,8
 400ffa0:	f800283a 	ret

0400ffa4 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 400ffa4:	defff604 	addi	sp,sp,-40
 400ffa8:	dfc00915 	stw	ra,36(sp)
 400ffac:	df000815 	stw	fp,32(sp)
 400ffb0:	df000804 	addi	fp,sp,32
 400ffb4:	e13ffb15 	stw	r4,-20(fp)
 400ffb8:	e17ffc15 	stw	r5,-16(fp)
 400ffbc:	e1bffd15 	stw	r6,-12(fp)
 400ffc0:	e1fffe15 	stw	r7,-8(fp)
 400ffc4:	e0800317 	ldw	r2,12(fp)
 400ffc8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 400ffcc:	0089c404 	movi	r2,10000
 400ffd0:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 400ffd4:	e0bfff03 	ldbu	r2,-4(fp)
 400ffd8:	10005626 	beq	r2,zero,4010134 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 400ffdc:	00002806 	br	4010080 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 400ffe0:	e0bffa17 	ldw	r2,-24(fp)
 400ffe4:	108002a8 	cmpgeui	r2,r2,10
 400ffe8:	1000021e 	bne	r2,zero,400fff4 <alt_avalon_i2c_master_tx_rx+0x50>
 400ffec:	0109c404 	movi	r4,10000
 400fff0:	40138b40 	call	40138b4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 400fff4:	d8000015 	stw	zero,0(sp)
 400fff8:	000f883a 	mov	r7,zero
 400fffc:	e1bffd17 	ldw	r6,-12(fp)
 4010000:	e17ffc17 	ldw	r5,-16(fp)
 4010004:	e13ffb17 	ldw	r4,-20(fp)
 4010008:	401032c0 	call	401032c <alt_avalon_i2c_master_transmit_using_interrupts>
 401000c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4010010:	e0bff917 	ldw	r2,-28(fp)
 4010014:	10bffea0 	cmpeqi	r2,r2,-6
 4010018:	1000191e 	bne	r2,zero,4010080 <alt_avalon_i2c_master_tx_rx+0xdc>
 401001c:	e0bff917 	ldw	r2,-28(fp)
 4010020:	10bffee0 	cmpeqi	r2,r2,-5
 4010024:	1000161e 	bne	r2,zero,4010080 <alt_avalon_i2c_master_tx_rx+0xdc>
 4010028:	e0bff917 	ldw	r2,-28(fp)
 401002c:	10bffe58 	cmpnei	r2,r2,-7
 4010030:	1000011e 	bne	r2,zero,4010038 <alt_avalon_i2c_master_tx_rx+0x94>
 4010034:	00001206 	br	4010080 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 4010038:	00800044 	movi	r2,1
 401003c:	d8800015 	stw	r2,0(sp)
 4010040:	01c00044 	movi	r7,1
 4010044:	e1800217 	ldw	r6,8(fp)
 4010048:	e17ffe17 	ldw	r5,-8(fp)
 401004c:	e13ffb17 	ldw	r4,-20(fp)
 4010050:	40107480 	call	4010748 <alt_avalon_i2c_master_receive_using_interrupts>
 4010054:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4010058:	e0bff917 	ldw	r2,-28(fp)
 401005c:	10bffea0 	cmpeqi	r2,r2,-6
 4010060:	1000061e 	bne	r2,zero,401007c <alt_avalon_i2c_master_tx_rx+0xd8>
 4010064:	e0bff917 	ldw	r2,-28(fp)
 4010068:	10bffee0 	cmpeqi	r2,r2,-5
 401006c:	1000031e 	bne	r2,zero,401007c <alt_avalon_i2c_master_tx_rx+0xd8>
 4010070:	e0bff917 	ldw	r2,-28(fp)
 4010074:	10bffe58 	cmpnei	r2,r2,-7
 4010078:	1000331e 	bne	r2,zero,4010148 <alt_avalon_i2c_master_tx_rx+0x1a4>
 401007c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 4010080:	e0bffa17 	ldw	r2,-24(fp)
 4010084:	10ffffc4 	addi	r3,r2,-1
 4010088:	e0fffa15 	stw	r3,-24(fp)
 401008c:	103fd41e 	bne	r2,zero,400ffe0 <__ram_exceptions_end+0xfbf87d44>
 4010090:	00003006 	br	4010154 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 4010094:	e0bffa17 	ldw	r2,-24(fp)
 4010098:	108002a8 	cmpgeui	r2,r2,10
 401009c:	1000021e 	bne	r2,zero,40100a8 <alt_avalon_i2c_master_tx_rx+0x104>
 40100a0:	0109c404 	movi	r4,10000
 40100a4:	40138b40 	call	40138b4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 40100a8:	d8000015 	stw	zero,0(sp)
 40100ac:	000f883a 	mov	r7,zero
 40100b0:	e1bffd17 	ldw	r6,-12(fp)
 40100b4:	e17ffc17 	ldw	r5,-16(fp)
 40100b8:	e13ffb17 	ldw	r4,-20(fp)
 40100bc:	401016c0 	call	401016c <alt_avalon_i2c_master_transmit>
 40100c0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 40100c4:	e0bff917 	ldw	r2,-28(fp)
 40100c8:	10bffea0 	cmpeqi	r2,r2,-6
 40100cc:	1000191e 	bne	r2,zero,4010134 <alt_avalon_i2c_master_tx_rx+0x190>
 40100d0:	e0bff917 	ldw	r2,-28(fp)
 40100d4:	10bffee0 	cmpeqi	r2,r2,-5
 40100d8:	1000161e 	bne	r2,zero,4010134 <alt_avalon_i2c_master_tx_rx+0x190>
 40100dc:	e0bff917 	ldw	r2,-28(fp)
 40100e0:	10bffe58 	cmpnei	r2,r2,-7
 40100e4:	1000011e 	bne	r2,zero,40100ec <alt_avalon_i2c_master_tx_rx+0x148>
 40100e8:	00001206 	br	4010134 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 40100ec:	00800044 	movi	r2,1
 40100f0:	d8800015 	stw	r2,0(sp)
 40100f4:	01c00044 	movi	r7,1
 40100f8:	e1800217 	ldw	r6,8(fp)
 40100fc:	e17ffe17 	ldw	r5,-8(fp)
 4010100:	e13ffb17 	ldw	r4,-20(fp)
 4010104:	40105380 	call	4010538 <alt_avalon_i2c_master_receive>
 4010108:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401010c:	e0bff917 	ldw	r2,-28(fp)
 4010110:	10bffea0 	cmpeqi	r2,r2,-6
 4010114:	1000061e 	bne	r2,zero,4010130 <alt_avalon_i2c_master_tx_rx+0x18c>
 4010118:	e0bff917 	ldw	r2,-28(fp)
 401011c:	10bffee0 	cmpeqi	r2,r2,-5
 4010120:	1000031e 	bne	r2,zero,4010130 <alt_avalon_i2c_master_tx_rx+0x18c>
 4010124:	e0bff917 	ldw	r2,-28(fp)
 4010128:	10bffe58 	cmpnei	r2,r2,-7
 401012c:	1000081e 	bne	r2,zero,4010150 <alt_avalon_i2c_master_tx_rx+0x1ac>
 4010130:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 4010134:	e0bffa17 	ldw	r2,-24(fp)
 4010138:	10ffffc4 	addi	r3,r2,-1
 401013c:	e0fffa15 	stw	r3,-24(fp)
 4010140:	103fd41e 	bne	r2,zero,4010094 <__ram_exceptions_end+0xfbf87df8>
 4010144:	00000306 	br	4010154 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 4010148:	0001883a 	nop
 401014c:	00000106 	br	4010154 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 4010150:	0001883a 	nop
      }
    }
    
    return status;
 4010154:	e0bff917 	ldw	r2,-28(fp)
}                                       
 4010158:	e037883a 	mov	sp,fp
 401015c:	dfc00117 	ldw	ra,4(sp)
 4010160:	df000017 	ldw	fp,0(sp)
 4010164:	dec00204 	addi	sp,sp,8
 4010168:	f800283a 	ret

0401016c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401016c:	defff704 	addi	sp,sp,-36
 4010170:	dfc00815 	stw	ra,32(sp)
 4010174:	df000715 	stw	fp,28(sp)
 4010178:	df000704 	addi	fp,sp,28
 401017c:	e13ffb15 	stw	r4,-20(fp)
 4010180:	e17ffc15 	stw	r5,-16(fp)
 4010184:	e1bffd15 	stw	r6,-12(fp)
 4010188:	3807883a 	mov	r3,r7
 401018c:	e0800217 	ldw	r2,8(fp)
 4010190:	e0fffe05 	stb	r3,-8(fp)
 4010194:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4010198:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 401019c:	0149c404 	movi	r5,10000
 40101a0:	e13ffd17 	ldw	r4,-12(fp)
 40101a4:	40011140 	call	4001114 <__mulsi3>
 40101a8:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 40101ac:	e0bffd17 	ldw	r2,-12(fp)
 40101b0:	1000021e 	bne	r2,zero,40101bc <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 40101b4:	0005883a 	mov	r2,zero
 40101b8:	00005706 	br	4010318 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 40101bc:	e0bffe03 	ldbu	r2,-8(fp)
 40101c0:	10000a1e 	bne	r2,zero,40101ec <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 40101c4:	e13ffb17 	ldw	r4,-20(fp)
 40101c8:	400f3e80 	call	400f3e8 <alt_avalon_i2c_enable>
 40101cc:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 40101d0:	e0bffa17 	ldw	r2,-24(fp)
 40101d4:	10000226 	beq	r2,zero,40101e0 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 40101d8:	e0bffa17 	ldw	r2,-24(fp)
 40101dc:	00004e06 	br	4010318 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40101e0:	01400704 	movi	r5,28
 40101e4:	e13ffb17 	ldw	r4,-20(fp)
 40101e8:	40109d40 	call	40109d4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 40101ec:	e0bffe03 	ldbu	r2,-8(fp)
 40101f0:	100d883a 	mov	r6,r2
 40101f4:	000b883a 	mov	r5,zero
 40101f8:	e13ffb17 	ldw	r4,-20(fp)
 40101fc:	400fa500 	call	400fa50 <alt_avalon_i2c_send_address>
 4010200:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 4010204:	e0bffa17 	ldw	r2,-24(fp)
 4010208:	1000271e 	bne	r2,zero,40102a8 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401020c:	00000f06 	br	401024c <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4010210:	e0bffc17 	ldw	r2,-16(fp)
 4010214:	10800003 	ldbu	r2,0(r2)
 4010218:	10803fcc 	andi	r2,r2,255
 401021c:	000f883a 	mov	r7,zero
 4010220:	000d883a 	mov	r6,zero
 4010224:	100b883a 	mov	r5,r2
 4010228:	e13ffb17 	ldw	r4,-20(fp)
 401022c:	400f96c0 	call	400f96c <alt_avalon_i2c_cmd_write>
 4010230:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 4010234:	e0bffc17 	ldw	r2,-16(fp)
 4010238:	10800044 	addi	r2,r2,1
 401023c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 4010240:	e0bffd17 	ldw	r2,-12(fp)
 4010244:	10bfffc4 	addi	r2,r2,-1
 4010248:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401024c:	e0bffd17 	ldw	r2,-12(fp)
 4010250:	108000b0 	cmpltui	r2,r2,2
 4010254:	1000021e 	bne	r2,zero,4010260 <alt_avalon_i2c_master_transmit+0xf4>
 4010258:	e0bffa17 	ldw	r2,-24(fp)
 401025c:	103fec26 	beq	r2,zero,4010210 <__ram_exceptions_end+0xfbf87f74>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4010260:	e0bffa17 	ldw	r2,-24(fp)
 4010264:	1000101e 	bne	r2,zero,40102a8 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4010268:	e0bffc17 	ldw	r2,-16(fp)
 401026c:	10800003 	ldbu	r2,0(r2)
 4010270:	10803fcc 	andi	r2,r2,255
 4010274:	e0ffff03 	ldbu	r3,-4(fp)
 4010278:	180f883a 	mov	r7,r3
 401027c:	000d883a 	mov	r6,zero
 4010280:	100b883a 	mov	r5,r2
 4010284:	e13ffb17 	ldw	r4,-20(fp)
 4010288:	400f96c0 	call	400f96c <alt_avalon_i2c_cmd_write>
 401028c:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 4010290:	e0bffc17 	ldw	r2,-16(fp)
 4010294:	10800044 	addi	r2,r2,1
 4010298:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401029c:	e0bffd17 	ldw	r2,-12(fp)
 40102a0:	10bfffc4 	addi	r2,r2,-1
 40102a4:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 40102a8:	e0bfff03 	ldbu	r2,-4(fp)
 40102ac:	1000101e 	bne	r2,zero,40102f0 <alt_avalon_i2c_master_transmit+0x184>
 40102b0:	e0bffa17 	ldw	r2,-24(fp)
 40102b4:	10001726 	beq	r2,zero,4010314 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 40102b8:	00000d06 	br	40102f0 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 40102bc:	e0bff917 	ldw	r2,-28(fp)
 40102c0:	108002a8 	cmpgeui	r2,r2,10
 40102c4:	1000021e 	bne	r2,zero,40102d0 <alt_avalon_i2c_master_transmit+0x164>
 40102c8:	0109c404 	movi	r4,10000
 40102cc:	40138b40 	call	40138b4 <alt_busy_sleep>
            if (--timeout == 0)
 40102d0:	e0bff917 	ldw	r2,-28(fp)
 40102d4:	10bfffc4 	addi	r2,r2,-1
 40102d8:	e0bff915 	stw	r2,-28(fp)
 40102dc:	e0bff917 	ldw	r2,-28(fp)
 40102e0:	1000031e 	bne	r2,zero,40102f0 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 40102e4:	00bfff84 	movi	r2,-2
 40102e8:	e0bffa15 	stw	r2,-24(fp)
               break;
 40102ec:	00000306 	br	40102fc <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 40102f0:	e13ffb17 	ldw	r4,-20(fp)
 40102f4:	400f7d80 	call	400f7d8 <alt_avalon_i2c_is_busy>
 40102f8:	103ff01e 	bne	r2,zero,40102bc <__ram_exceptions_end+0xfbf88020>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 40102fc:	e0bffa04 	addi	r2,fp,-24
 4010300:	100b883a 	mov	r5,r2
 4010304:	e13ffb17 	ldw	r4,-20(fp)
 4010308:	400fbac0 	call	400fbac <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401030c:	e13ffb17 	ldw	r4,-20(fp)
 4010310:	400f4800 	call	400f480 <alt_avalon_i2c_disable>
    }


    return status;
 4010314:	e0bffa17 	ldw	r2,-24(fp)
}
 4010318:	e037883a 	mov	sp,fp
 401031c:	dfc00117 	ldw	ra,4(sp)
 4010320:	df000017 	ldw	fp,0(sp)
 4010324:	dec00204 	addi	sp,sp,8
 4010328:	f800283a 	ret

0401032c <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401032c:	defff604 	addi	sp,sp,-40
 4010330:	dfc00915 	stw	ra,36(sp)
 4010334:	df000815 	stw	fp,32(sp)
 4010338:	df000804 	addi	fp,sp,32
 401033c:	e13ffb15 	stw	r4,-20(fp)
 4010340:	e17ffc15 	stw	r5,-16(fp)
 4010344:	e1bffd15 	stw	r6,-12(fp)
 4010348:	3807883a 	mov	r3,r7
 401034c:	e0800217 	ldw	r2,8(fp)
 4010350:	e0fffe05 	stb	r3,-8(fp)
 4010354:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4010358:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 401035c:	0149c404 	movi	r5,10000
 4010360:	e13ffd17 	ldw	r4,-12(fp)
 4010364:	40011140 	call	4001114 <__mulsi3>
 4010368:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401036c:	e0bffb17 	ldw	r2,-20(fp)
 4010370:	10800717 	ldw	r2,28(r2)
 4010374:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 4010378:	e0bffd17 	ldw	r2,-12(fp)
 401037c:	1000021e 	bne	r2,zero,4010388 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4010380:	0005883a 	mov	r2,zero
 4010384:	00006706 	br	4010524 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 4010388:	e0bffb17 	ldw	r2,-20(fp)
 401038c:	10c00617 	ldw	r3,24(r2)
 4010390:	00810074 	movhi	r2,1025
 4010394:	10bc1b04 	addi	r2,r2,-3988
 4010398:	18800226 	beq	r3,r2,40103a4 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 401039c:	00bfff44 	movi	r2,-3
 40103a0:	00006006 	br	4010524 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 40103a4:	e0bffe03 	ldbu	r2,-8(fp)
 40103a8:	10000a1e 	bne	r2,zero,40103d4 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 40103ac:	e13ffb17 	ldw	r4,-20(fp)
 40103b0:	400f3e80 	call	400f3e8 <alt_avalon_i2c_enable>
 40103b4:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 40103b8:	e0bff817 	ldw	r2,-32(fp)
 40103bc:	10000226 	beq	r2,zero,40103c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 40103c0:	e0bff817 	ldw	r2,-32(fp)
 40103c4:	00005706 	br	4010524 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40103c8:	01400704 	movi	r5,28
 40103cc:	e13ffb17 	ldw	r4,-20(fp)
 40103d0:	40109d40 	call	40109d4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 40103d4:	e0bffe03 	ldbu	r2,-8(fp)
 40103d8:	100d883a 	mov	r6,r2
 40103dc:	000b883a 	mov	r5,zero
 40103e0:	e13ffb17 	ldw	r4,-20(fp)
 40103e4:	400fa500 	call	400fa50 <alt_avalon_i2c_send_address>
 40103e8:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 40103ec:	e0bff817 	ldw	r2,-32(fp)
 40103f0:	1000271e 	bne	r2,zero,4010490 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 40103f4:	00000f06 	br	4010434 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 40103f8:	e0bffc17 	ldw	r2,-16(fp)
 40103fc:	10800003 	ldbu	r2,0(r2)
 4010400:	10803fcc 	andi	r2,r2,255
 4010404:	000f883a 	mov	r7,zero
 4010408:	000d883a 	mov	r6,zero
 401040c:	100b883a 	mov	r5,r2
 4010410:	e13ffb17 	ldw	r4,-20(fp)
 4010414:	400f96c0 	call	400f96c <alt_avalon_i2c_cmd_write>
 4010418:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 401041c:	e0bffc17 	ldw	r2,-16(fp)
 4010420:	10800044 	addi	r2,r2,1
 4010424:	e0bffc15 	stw	r2,-16(fp)
            --size;
 4010428:	e0bffd17 	ldw	r2,-12(fp)
 401042c:	10bfffc4 	addi	r2,r2,-1
 4010430:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4010434:	e0bffd17 	ldw	r2,-12(fp)
 4010438:	108000b0 	cmpltui	r2,r2,2
 401043c:	1000021e 	bne	r2,zero,4010448 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 4010440:	e0bff817 	ldw	r2,-32(fp)
 4010444:	103fec26 	beq	r2,zero,40103f8 <__ram_exceptions_end+0xfbf8815c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4010448:	e0bff817 	ldw	r2,-32(fp)
 401044c:	1000101e 	bne	r2,zero,4010490 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4010450:	e0bffc17 	ldw	r2,-16(fp)
 4010454:	10800003 	ldbu	r2,0(r2)
 4010458:	10803fcc 	andi	r2,r2,255
 401045c:	e0ffff03 	ldbu	r3,-4(fp)
 4010460:	180f883a 	mov	r7,r3
 4010464:	000d883a 	mov	r6,zero
 4010468:	100b883a 	mov	r5,r2
 401046c:	e13ffb17 	ldw	r4,-20(fp)
 4010470:	400f96c0 	call	400f96c <alt_avalon_i2c_cmd_write>
 4010474:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 4010478:	e0bffc17 	ldw	r2,-16(fp)
 401047c:	10800044 	addi	r2,r2,1
 4010480:	e0bffc15 	stw	r2,-16(fp)
            --size;
 4010484:	e0bffd17 	ldw	r2,-12(fp)
 4010488:	10bfffc4 	addi	r2,r2,-1
 401048c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 4010490:	e0bff817 	ldw	r2,-32(fp)
 4010494:	10001426 	beq	r2,zero,40104e8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4010498:	00000d06 	br	40104d0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 401049c:	e0bff917 	ldw	r2,-28(fp)
 40104a0:	108002a8 	cmpgeui	r2,r2,10
 40104a4:	1000021e 	bne	r2,zero,40104b0 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 40104a8:	0109c404 	movi	r4,10000
 40104ac:	40138b40 	call	40138b4 <alt_busy_sleep>
            if (--timeout == 0)
 40104b0:	e0bff917 	ldw	r2,-28(fp)
 40104b4:	10bfffc4 	addi	r2,r2,-1
 40104b8:	e0bff915 	stw	r2,-28(fp)
 40104bc:	e0bff917 	ldw	r2,-28(fp)
 40104c0:	1000031e 	bne	r2,zero,40104d0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 40104c4:	00bfff84 	movi	r2,-2
 40104c8:	e0bff815 	stw	r2,-32(fp)
               break;
 40104cc:	00000306 	br	40104dc <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 40104d0:	e13ffb17 	ldw	r4,-20(fp)
 40104d4:	400f7d80 	call	400f7d8 <alt_avalon_i2c_is_busy>
 40104d8:	103ff01e 	bne	r2,zero,401049c <__ram_exceptions_end+0xfbf88200>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 40104dc:	e13ffb17 	ldw	r4,-20(fp)
 40104e0:	400f4800 	call	400f480 <alt_avalon_i2c_disable>
 40104e4:	00000e06 	br	4010520 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 40104e8:	e0bfff03 	ldbu	r2,-4(fp)
 40104ec:	10000c26 	beq	r2,zero,4010520 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40104f0:	01400704 	movi	r5,28
 40104f4:	e13ffb17 	ldw	r4,-20(fp)
 40104f8:	40109d40 	call	40109d4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 40104fc:	000b883a 	mov	r5,zero
 4010500:	e13ffb17 	ldw	r4,-20(fp)
 4010504:	4010c1c0 	call	4010c1c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 4010508:	e0bffa17 	ldw	r2,-24(fp)
 401050c:	00c00044 	movi	r3,1
 4010510:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 4010514:	01400044 	movi	r5,1
 4010518:	e13ffb17 	ldw	r4,-20(fp)
 401051c:	4010a780 	call	4010a78 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 4010520:	e0bff817 	ldw	r2,-32(fp)
}
 4010524:	e037883a 	mov	sp,fp
 4010528:	dfc00117 	ldw	ra,4(sp)
 401052c:	df000017 	ldw	fp,0(sp)
 4010530:	dec00204 	addi	sp,sp,8
 4010534:	f800283a 	ret

04010538 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 4010538:	defff404 	addi	sp,sp,-48
 401053c:	dfc00b15 	stw	ra,44(sp)
 4010540:	df000a15 	stw	fp,40(sp)
 4010544:	df000a04 	addi	fp,sp,40
 4010548:	e13ffb15 	stw	r4,-20(fp)
 401054c:	e17ffc15 	stw	r5,-16(fp)
 4010550:	e1bffd15 	stw	r6,-12(fp)
 4010554:	3807883a 	mov	r3,r7
 4010558:	e0800217 	ldw	r2,8(fp)
 401055c:	e0fffe05 	stb	r3,-8(fp)
 4010560:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4010564:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 4010568:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 401056c:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 4010570:	e0bffd17 	ldw	r2,-12(fp)
 4010574:	1000021e 	bne	r2,zero,4010580 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4010578:	0005883a 	mov	r2,zero
 401057c:	00006d06 	br	4010734 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4010580:	e0bffe03 	ldbu	r2,-8(fp)
 4010584:	10000a1e 	bne	r2,zero,40105b0 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4010588:	e13ffb17 	ldw	r4,-20(fp)
 401058c:	400f3e80 	call	400f3e8 <alt_avalon_i2c_enable>
 4010590:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 4010594:	e0bff917 	ldw	r2,-28(fp)
 4010598:	10000226 	beq	r2,zero,40105a4 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 401059c:	e0bff917 	ldw	r2,-28(fp)
 40105a0:	00006406 	br	4010734 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40105a4:	01400704 	movi	r5,28
 40105a8:	e13ffb17 	ldw	r4,-20(fp)
 40105ac:	40109d40 	call	40109d4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 40105b0:	e0bffe03 	ldbu	r2,-8(fp)
 40105b4:	100d883a 	mov	r6,r2
 40105b8:	01400044 	movi	r5,1
 40105bc:	e13ffb17 	ldw	r4,-20(fp)
 40105c0:	400fa500 	call	400fa50 <alt_avalon_i2c_send_address>
 40105c4:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 40105c8:	e0bff917 	ldw	r2,-28(fp)
 40105cc:	1000341e 	bne	r2,zero,40106a0 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 40105d0:	00001906 	br	4010638 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 40105d4:	000f883a 	mov	r7,zero
 40105d8:	000d883a 	mov	r6,zero
 40105dc:	000b883a 	mov	r5,zero
 40105e0:	e13ffb17 	ldw	r4,-20(fp)
 40105e4:	400f96c0 	call	400f96c <alt_avalon_i2c_cmd_write>
 40105e8:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 40105ec:	e0bff817 	ldw	r2,-32(fp)
 40105f0:	10800044 	addi	r2,r2,1
 40105f4:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 40105f8:	e0bff917 	ldw	r2,-28(fp)
 40105fc:	10000e1e 	bne	r2,zero,4010638 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 4010600:	e0bffa04 	addi	r2,fp,-24
 4010604:	100f883a 	mov	r7,r2
 4010608:	000d883a 	mov	r6,zero
 401060c:	e17ffc17 	ldw	r5,-16(fp)
 4010610:	e13ffb17 	ldw	r4,-20(fp)
 4010614:	400f81c0 	call	400f81c <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 4010618:	e0bffa17 	ldw	r2,-24(fp)
 401061c:	e0fffc17 	ldw	r3,-16(fp)
 4010620:	1885883a 	add	r2,r3,r2
 4010624:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 4010628:	e0bffa17 	ldw	r2,-24(fp)
 401062c:	e0fff717 	ldw	r3,-36(fp)
 4010630:	1885883a 	add	r2,r3,r2
 4010634:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4010638:	e0bffd17 	ldw	r2,-12(fp)
 401063c:	10bfffc4 	addi	r2,r2,-1
 4010640:	e0fff817 	ldw	r3,-32(fp)
 4010644:	1880022e 	bgeu	r3,r2,4010650 <alt_avalon_i2c_master_receive+0x118>
 4010648:	e0bff917 	ldw	r2,-28(fp)
 401064c:	103fe126 	beq	r2,zero,40105d4 <__ram_exceptions_end+0xfbf88338>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4010650:	e0bff917 	ldw	r2,-28(fp)
 4010654:	1000121e 	bne	r2,zero,40106a0 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4010658:	e0bfff03 	ldbu	r2,-4(fp)
 401065c:	100f883a 	mov	r7,r2
 4010660:	000d883a 	mov	r6,zero
 4010664:	000b883a 	mov	r5,zero
 4010668:	e13ffb17 	ldw	r4,-20(fp)
 401066c:	400f96c0 	call	400f96c <alt_avalon_i2c_cmd_write>
 4010670:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 4010674:	00000a06 	br	40106a0 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 4010678:	e17ffc17 	ldw	r5,-16(fp)
 401067c:	e13ffb17 	ldw	r4,-20(fp)
 4010680:	400f8c40 	call	400f8c4 <alt_avalon_i2c_rx_read>
 4010684:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 4010688:	e0bffc17 	ldw	r2,-16(fp)
 401068c:	10800044 	addi	r2,r2,1
 4010690:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 4010694:	e0bff717 	ldw	r2,-36(fp)
 4010698:	10800044 	addi	r2,r2,1
 401069c:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 40106a0:	e0fff717 	ldw	r3,-36(fp)
 40106a4:	e0bffd17 	ldw	r2,-12(fp)
 40106a8:	1880022e 	bgeu	r3,r2,40106b4 <alt_avalon_i2c_master_receive+0x17c>
 40106ac:	e0bff917 	ldw	r2,-28(fp)
 40106b0:	103ff126 	beq	r2,zero,4010678 <__ram_exceptions_end+0xfbf883dc>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 40106b4:	e0bfff03 	ldbu	r2,-4(fp)
 40106b8:	1000021e 	bne	r2,zero,40106c4 <alt_avalon_i2c_master_receive+0x18c>
 40106bc:	e0bff917 	ldw	r2,-28(fp)
 40106c0:	10001b26 	beq	r2,zero,4010730 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 40106c4:	0149c404 	movi	r5,10000
 40106c8:	e13ffd17 	ldw	r4,-12(fp)
 40106cc:	40011140 	call	4001114 <__mulsi3>
 40106d0:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 40106d4:	00000d06 	br	401070c <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 40106d8:	e0bff617 	ldw	r2,-40(fp)
 40106dc:	108002a8 	cmpgeui	r2,r2,10
 40106e0:	1000021e 	bne	r2,zero,40106ec <alt_avalon_i2c_master_receive+0x1b4>
 40106e4:	0109c404 	movi	r4,10000
 40106e8:	40138b40 	call	40138b4 <alt_busy_sleep>
            if (--timeout == 0)
 40106ec:	e0bff617 	ldw	r2,-40(fp)
 40106f0:	10bfffc4 	addi	r2,r2,-1
 40106f4:	e0bff615 	stw	r2,-40(fp)
 40106f8:	e0bff617 	ldw	r2,-40(fp)
 40106fc:	1000031e 	bne	r2,zero,401070c <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4010700:	00bfff84 	movi	r2,-2
 4010704:	e0bff915 	stw	r2,-28(fp)
               break;
 4010708:	00000306 	br	4010718 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401070c:	e13ffb17 	ldw	r4,-20(fp)
 4010710:	400f7d80 	call	400f7d8 <alt_avalon_i2c_is_busy>
 4010714:	103ff01e 	bne	r2,zero,40106d8 <__ram_exceptions_end+0xfbf8843c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 4010718:	e0bff904 	addi	r2,fp,-28
 401071c:	100b883a 	mov	r5,r2
 4010720:	e13ffb17 	ldw	r4,-20(fp)
 4010724:	400fbac0 	call	400fbac <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 4010728:	e13ffb17 	ldw	r4,-20(fp)
 401072c:	400f4800 	call	400f480 <alt_avalon_i2c_disable>
    }

    return status;
 4010730:	e0bff917 	ldw	r2,-28(fp)
}
 4010734:	e037883a 	mov	sp,fp
 4010738:	dfc00117 	ldw	ra,4(sp)
 401073c:	df000017 	ldw	fp,0(sp)
 4010740:	dec00204 	addi	sp,sp,8
 4010744:	f800283a 	ret

04010748 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 4010748:	defff504 	addi	sp,sp,-44
 401074c:	dfc00a15 	stw	ra,40(sp)
 4010750:	df000915 	stw	fp,36(sp)
 4010754:	df000904 	addi	fp,sp,36
 4010758:	e13ffb15 	stw	r4,-20(fp)
 401075c:	e17ffc15 	stw	r5,-16(fp)
 4010760:	e1bffd15 	stw	r6,-12(fp)
 4010764:	3807883a 	mov	r3,r7
 4010768:	e0800217 	ldw	r2,8(fp)
 401076c:	e0fffe05 	stb	r3,-8(fp)
 4010770:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4010774:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 4010778:	e0bffb17 	ldw	r2,-20(fp)
 401077c:	10800717 	ldw	r2,28(r2)
 4010780:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 4010784:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 4010788:	e0bffd17 	ldw	r2,-12(fp)
 401078c:	1000021e 	bne	r2,zero,4010798 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4010790:	0005883a 	mov	r2,zero
 4010794:	00006306 	br	4010924 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 4010798:	e0bffb17 	ldw	r2,-20(fp)
 401079c:	10c00617 	ldw	r3,24(r2)
 40107a0:	00810074 	movhi	r2,1025
 40107a4:	10bc1b04 	addi	r2,r2,-3988
 40107a8:	18800226 	beq	r3,r2,40107b4 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 40107ac:	00bfff44 	movi	r2,-3
 40107b0:	00005c06 	br	4010924 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 40107b4:	e0bffe03 	ldbu	r2,-8(fp)
 40107b8:	10000a1e 	bne	r2,zero,40107e4 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 40107bc:	e13ffb17 	ldw	r4,-20(fp)
 40107c0:	400f3e80 	call	400f3e8 <alt_avalon_i2c_enable>
 40107c4:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 40107c8:	e0bff717 	ldw	r2,-36(fp)
 40107cc:	10000226 	beq	r2,zero,40107d8 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 40107d0:	e0bff717 	ldw	r2,-36(fp)
 40107d4:	00005306 	br	4010924 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40107d8:	01400704 	movi	r5,28
 40107dc:	e13ffb17 	ldw	r4,-20(fp)
 40107e0:	40109d40 	call	40109d4 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 40107e4:	e0bffe03 	ldbu	r2,-8(fp)
 40107e8:	100d883a 	mov	r6,r2
 40107ec:	01400044 	movi	r5,1
 40107f0:	e13ffb17 	ldw	r4,-20(fp)
 40107f4:	400fa500 	call	400fa50 <alt_avalon_i2c_send_address>
 40107f8:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 40107fc:	e0bff717 	ldw	r2,-36(fp)
 4010800:	1000191e 	bne	r2,zero,4010868 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4010804:	00000906 	br	401082c <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4010808:	000f883a 	mov	r7,zero
 401080c:	000d883a 	mov	r6,zero
 4010810:	000b883a 	mov	r5,zero
 4010814:	e13ffb17 	ldw	r4,-20(fp)
 4010818:	400f96c0 	call	400f96c <alt_avalon_i2c_cmd_write>
 401081c:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 4010820:	e0bff917 	ldw	r2,-28(fp)
 4010824:	10800044 	addi	r2,r2,1
 4010828:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401082c:	e0bffd17 	ldw	r2,-12(fp)
 4010830:	10bfffc4 	addi	r2,r2,-1
 4010834:	e0fff917 	ldw	r3,-28(fp)
 4010838:	1880022e 	bgeu	r3,r2,4010844 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 401083c:	e0bff717 	ldw	r2,-36(fp)
 4010840:	103ff126 	beq	r2,zero,4010808 <__ram_exceptions_end+0xfbf8856c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4010844:	e0bff717 	ldw	r2,-36(fp)
 4010848:	1000071e 	bne	r2,zero,4010868 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401084c:	e0bfff03 	ldbu	r2,-4(fp)
 4010850:	100f883a 	mov	r7,r2
 4010854:	000d883a 	mov	r6,zero
 4010858:	000b883a 	mov	r5,zero
 401085c:	e13ffb17 	ldw	r4,-20(fp)
 4010860:	400f96c0 	call	400f96c <alt_avalon_i2c_cmd_write>
 4010864:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 4010868:	e0bff717 	ldw	r2,-36(fp)
 401086c:	10001826 	beq	r2,zero,40108d0 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 4010870:	0149c404 	movi	r5,10000
 4010874:	e13ffd17 	ldw	r4,-12(fp)
 4010878:	40011140 	call	4001114 <__mulsi3>
 401087c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4010880:	00000d06 	br	40108b8 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 4010884:	e0bff817 	ldw	r2,-32(fp)
 4010888:	108002a8 	cmpgeui	r2,r2,10
 401088c:	1000021e 	bne	r2,zero,4010898 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 4010890:	0109c404 	movi	r4,10000
 4010894:	40138b40 	call	40138b4 <alt_busy_sleep>
            if (--timeout == 0)
 4010898:	e0bff817 	ldw	r2,-32(fp)
 401089c:	10bfffc4 	addi	r2,r2,-1
 40108a0:	e0bff815 	stw	r2,-32(fp)
 40108a4:	e0bff817 	ldw	r2,-32(fp)
 40108a8:	1000031e 	bne	r2,zero,40108b8 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 40108ac:	00bfff84 	movi	r2,-2
 40108b0:	e0bff715 	stw	r2,-36(fp)
               break;
 40108b4:	00000306 	br	40108c4 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 40108b8:	e13ffb17 	ldw	r4,-20(fp)
 40108bc:	400f7d80 	call	400f7d8 <alt_avalon_i2c_is_busy>
 40108c0:	103ff01e 	bne	r2,zero,4010884 <__ram_exceptions_end+0xfbf885e8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 40108c4:	e13ffb17 	ldw	r4,-20(fp)
 40108c8:	400f4800 	call	400f480 <alt_avalon_i2c_disable>
 40108cc:	00001406 	br	4010920 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 40108d0:	e0bfff03 	ldbu	r2,-4(fp)
 40108d4:	10001226 	beq	r2,zero,4010920 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40108d8:	01400704 	movi	r5,28
 40108dc:	e13ffb17 	ldw	r4,-20(fp)
 40108e0:	40109d40 	call	40109d4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 40108e4:	000b883a 	mov	r5,zero
 40108e8:	e13ffb17 	ldw	r4,-20(fp)
 40108ec:	4010b6c0 	call	4010b6c <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 40108f0:	e0bffa17 	ldw	r2,-24(fp)
 40108f4:	00c00084 	movi	r3,2
 40108f8:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 40108fc:	e0bffa17 	ldw	r2,-24(fp)
 4010900:	e0fffc17 	ldw	r3,-16(fp)
 4010904:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 4010908:	e0bffa17 	ldw	r2,-24(fp)
 401090c:	e0fffd17 	ldw	r3,-12(fp)
 4010910:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 4010914:	01400084 	movi	r5,2
 4010918:	e13ffb17 	ldw	r4,-20(fp)
 401091c:	4010a780 	call	4010a78 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 4010920:	e0bff717 	ldw	r2,-36(fp)
}
 4010924:	e037883a 	mov	sp,fp
 4010928:	dfc00117 	ldw	ra,4(sp)
 401092c:	df000017 	ldw	fp,0(sp)
 4010930:	dec00204 	addi	sp,sp,8
 4010934:	f800283a 	ret

04010938 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 4010938:	defffd04 	addi	sp,sp,-12
 401093c:	df000215 	stw	fp,8(sp)
 4010940:	df000204 	addi	fp,sp,8
 4010944:	e13ffe15 	stw	r4,-8(fp)
 4010948:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 401094c:	e0bffe17 	ldw	r2,-8(fp)
 4010950:	10800317 	ldw	r2,12(r2)
 4010954:	10800404 	addi	r2,r2,16
 4010958:	10c00037 	ldwio	r3,0(r2)
 401095c:	e0bffe17 	ldw	r2,-8(fp)
 4010960:	10800317 	ldw	r2,12(r2)
 4010964:	10800304 	addi	r2,r2,12
 4010968:	10800037 	ldwio	r2,0(r2)
 401096c:	1884703a 	and	r2,r3,r2
 4010970:	1007883a 	mov	r3,r2
 4010974:	e0bfff17 	ldw	r2,-4(fp)
 4010978:	10c00015 	stw	r3,0(r2)
}
 401097c:	0001883a 	nop
 4010980:	e037883a 	mov	sp,fp
 4010984:	df000017 	ldw	fp,0(sp)
 4010988:	dec00104 	addi	sp,sp,4
 401098c:	f800283a 	ret

04010990 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 4010990:	defffd04 	addi	sp,sp,-12
 4010994:	df000215 	stw	fp,8(sp)
 4010998:	df000204 	addi	fp,sp,8
 401099c:	e13ffe15 	stw	r4,-8(fp)
 40109a0:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 40109a4:	e0bffe17 	ldw	r2,-8(fp)
 40109a8:	10800317 	ldw	r2,12(r2)
 40109ac:	10800404 	addi	r2,r2,16
 40109b0:	10800037 	ldwio	r2,0(r2)
 40109b4:	1007883a 	mov	r3,r2
 40109b8:	e0bfff17 	ldw	r2,-4(fp)
 40109bc:	10c00015 	stw	r3,0(r2)
}
 40109c0:	0001883a 	nop
 40109c4:	e037883a 	mov	sp,fp
 40109c8:	df000017 	ldw	fp,0(sp)
 40109cc:	dec00104 	addi	sp,sp,4
 40109d0:	f800283a 	ret

040109d4 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 40109d4:	defffd04 	addi	sp,sp,-12
 40109d8:	df000215 	stw	fp,8(sp)
 40109dc:	df000204 	addi	fp,sp,8
 40109e0:	e13ffe15 	stw	r4,-8(fp)
 40109e4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 40109e8:	e0bffe17 	ldw	r2,-8(fp)
 40109ec:	10800317 	ldw	r2,12(r2)
 40109f0:	10800404 	addi	r2,r2,16
 40109f4:	e0ffff17 	ldw	r3,-4(fp)
 40109f8:	10c00035 	stwio	r3,0(r2)
}
 40109fc:	0001883a 	nop
 4010a00:	e037883a 	mov	sp,fp
 4010a04:	df000017 	ldw	fp,0(sp)
 4010a08:	dec00104 	addi	sp,sp,4
 4010a0c:	f800283a 	ret

04010a10 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 4010a10:	defffb04 	addi	sp,sp,-20
 4010a14:	dfc00415 	stw	ra,16(sp)
 4010a18:	df000315 	stw	fp,12(sp)
 4010a1c:	df000304 	addi	fp,sp,12
 4010a20:	e13ffe15 	stw	r4,-8(fp)
 4010a24:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 4010a28:	e17ffd04 	addi	r5,fp,-12
 4010a2c:	e13ffe17 	ldw	r4,-8(fp)
 4010a30:	4010adc0 	call	4010adc <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 4010a34:	e0bfff17 	ldw	r2,-4(fp)
 4010a38:	0086303a 	nor	r3,zero,r2
 4010a3c:	e0bffd17 	ldw	r2,-12(fp)
 4010a40:	1884703a 	and	r2,r3,r2
 4010a44:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4010a48:	e0bffe17 	ldw	r2,-8(fp)
 4010a4c:	10800317 	ldw	r2,12(r2)
 4010a50:	10800304 	addi	r2,r2,12
 4010a54:	e0fffd17 	ldw	r3,-12(fp)
 4010a58:	18c007cc 	andi	r3,r3,31
 4010a5c:	10c00035 	stwio	r3,0(r2)
}
 4010a60:	0001883a 	nop
 4010a64:	e037883a 	mov	sp,fp
 4010a68:	dfc00117 	ldw	ra,4(sp)
 4010a6c:	df000017 	ldw	fp,0(sp)
 4010a70:	dec00204 	addi	sp,sp,8
 4010a74:	f800283a 	ret

04010a78 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 4010a78:	defffb04 	addi	sp,sp,-20
 4010a7c:	dfc00415 	stw	ra,16(sp)
 4010a80:	df000315 	stw	fp,12(sp)
 4010a84:	df000304 	addi	fp,sp,12
 4010a88:	e13ffe15 	stw	r4,-8(fp)
 4010a8c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 4010a90:	e17ffd04 	addi	r5,fp,-12
 4010a94:	e13ffe17 	ldw	r4,-8(fp)
 4010a98:	4010adc0 	call	4010adc <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 4010a9c:	e0fffd17 	ldw	r3,-12(fp)
 4010aa0:	e0bfff17 	ldw	r2,-4(fp)
 4010aa4:	1884b03a 	or	r2,r3,r2
 4010aa8:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4010aac:	e0bffe17 	ldw	r2,-8(fp)
 4010ab0:	10800317 	ldw	r2,12(r2)
 4010ab4:	10800304 	addi	r2,r2,12
 4010ab8:	e0fffd17 	ldw	r3,-12(fp)
 4010abc:	18c007cc 	andi	r3,r3,31
 4010ac0:	10c00035 	stwio	r3,0(r2)
}
 4010ac4:	0001883a 	nop
 4010ac8:	e037883a 	mov	sp,fp
 4010acc:	dfc00117 	ldw	ra,4(sp)
 4010ad0:	df000017 	ldw	fp,0(sp)
 4010ad4:	dec00204 	addi	sp,sp,8
 4010ad8:	f800283a 	ret

04010adc <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 4010adc:	defffd04 	addi	sp,sp,-12
 4010ae0:	df000215 	stw	fp,8(sp)
 4010ae4:	df000204 	addi	fp,sp,8
 4010ae8:	e13ffe15 	stw	r4,-8(fp)
 4010aec:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 4010af0:	e0bffe17 	ldw	r2,-8(fp)
 4010af4:	10800317 	ldw	r2,12(r2)
 4010af8:	10800304 	addi	r2,r2,12
 4010afc:	10800037 	ldwio	r2,0(r2)
 4010b00:	10c007cc 	andi	r3,r2,31
 4010b04:	e0bfff17 	ldw	r2,-4(fp)
 4010b08:	10c00015 	stw	r3,0(r2)
}
 4010b0c:	0001883a 	nop
 4010b10:	e037883a 	mov	sp,fp
 4010b14:	df000017 	ldw	fp,0(sp)
 4010b18:	dec00104 	addi	sp,sp,4
 4010b1c:	f800283a 	ret

04010b20 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 4010b20:	defffd04 	addi	sp,sp,-12
 4010b24:	df000215 	stw	fp,8(sp)
 4010b28:	df000204 	addi	fp,sp,8
 4010b2c:	e13ffe15 	stw	r4,-8(fp)
 4010b30:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 4010b34:	e0bffe17 	ldw	r2,-8(fp)
 4010b38:	10800317 	ldw	r2,12(r2)
 4010b3c:	10800204 	addi	r2,r2,8
 4010b40:	10800037 	ldwio	r2,0(r2)
 4010b44:	10800c0c 	andi	r2,r2,48
 4010b48:	1005d13a 	srai	r2,r2,4
 4010b4c:	1007883a 	mov	r3,r2
 4010b50:	e0bfff17 	ldw	r2,-4(fp)
 4010b54:	10c00015 	stw	r3,0(r2)
}
 4010b58:	0001883a 	nop
 4010b5c:	e037883a 	mov	sp,fp
 4010b60:	df000017 	ldw	fp,0(sp)
 4010b64:	dec00104 	addi	sp,sp,4
 4010b68:	f800283a 	ret

04010b6c <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 4010b6c:	defffd04 	addi	sp,sp,-12
 4010b70:	df000215 	stw	fp,8(sp)
 4010b74:	df000204 	addi	fp,sp,8
 4010b78:	e13ffe15 	stw	r4,-8(fp)
 4010b7c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 4010b80:	e0bffe17 	ldw	r2,-8(fp)
 4010b84:	10800317 	ldw	r2,12(r2)
 4010b88:	10800204 	addi	r2,r2,8
 4010b8c:	e0fffe17 	ldw	r3,-8(fp)
 4010b90:	18c00317 	ldw	r3,12(r3)
 4010b94:	18c00204 	addi	r3,r3,8
 4010b98:	18c00037 	ldwio	r3,0(r3)
 4010b9c:	1809883a 	mov	r4,r3
 4010ba0:	00fff3c4 	movi	r3,-49
 4010ba4:	20c8703a 	and	r4,r4,r3
 4010ba8:	e0ffff17 	ldw	r3,-4(fp)
 4010bac:	1806913a 	slli	r3,r3,4
 4010bb0:	18c00c0c 	andi	r3,r3,48
 4010bb4:	20c6b03a 	or	r3,r4,r3
 4010bb8:	10c00035 	stwio	r3,0(r2)
}
 4010bbc:	0001883a 	nop
 4010bc0:	e037883a 	mov	sp,fp
 4010bc4:	df000017 	ldw	fp,0(sp)
 4010bc8:	dec00104 	addi	sp,sp,4
 4010bcc:	f800283a 	ret

04010bd0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 4010bd0:	defffd04 	addi	sp,sp,-12
 4010bd4:	df000215 	stw	fp,8(sp)
 4010bd8:	df000204 	addi	fp,sp,8
 4010bdc:	e13ffe15 	stw	r4,-8(fp)
 4010be0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 4010be4:	e0bffe17 	ldw	r2,-8(fp)
 4010be8:	10800317 	ldw	r2,12(r2)
 4010bec:	10800204 	addi	r2,r2,8
 4010bf0:	10800037 	ldwio	r2,0(r2)
 4010bf4:	1080030c 	andi	r2,r2,12
 4010bf8:	1005d0ba 	srai	r2,r2,2
 4010bfc:	1007883a 	mov	r3,r2
 4010c00:	e0bfff17 	ldw	r2,-4(fp)
 4010c04:	10c00015 	stw	r3,0(r2)
}
 4010c08:	0001883a 	nop
 4010c0c:	e037883a 	mov	sp,fp
 4010c10:	df000017 	ldw	fp,0(sp)
 4010c14:	dec00104 	addi	sp,sp,4
 4010c18:	f800283a 	ret

04010c1c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 4010c1c:	defffd04 	addi	sp,sp,-12
 4010c20:	df000215 	stw	fp,8(sp)
 4010c24:	df000204 	addi	fp,sp,8
 4010c28:	e13ffe15 	stw	r4,-8(fp)
 4010c2c:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 4010c30:	e0bffe17 	ldw	r2,-8(fp)
 4010c34:	10800317 	ldw	r2,12(r2)
 4010c38:	10c00204 	addi	r3,r2,8
 4010c3c:	e0bffe17 	ldw	r2,-8(fp)
 4010c40:	10800317 	ldw	r2,12(r2)
 4010c44:	10800204 	addi	r2,r2,8
 4010c48:	10800037 	ldwio	r2,0(r2)
 4010c4c:	1009883a 	mov	r4,r2
 4010c50:	00bffcc4 	movi	r2,-13
 4010c54:	2088703a 	and	r4,r4,r2
 4010c58:	e0bfff17 	ldw	r2,-4(fp)
 4010c5c:	1085883a 	add	r2,r2,r2
 4010c60:	1085883a 	add	r2,r2,r2
 4010c64:	1080030c 	andi	r2,r2,12
 4010c68:	2084b03a 	or	r2,r4,r2
 4010c6c:	18800035 	stwio	r2,0(r3)
}
 4010c70:	0001883a 	nop
 4010c74:	e037883a 	mov	sp,fp
 4010c78:	df000017 	ldw	fp,0(sp)
 4010c7c:	dec00104 	addi	sp,sp,4
 4010c80:	f800283a 	ret

04010c84 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4010c84:	defffa04 	addi	sp,sp,-24
 4010c88:	dfc00515 	stw	ra,20(sp)
 4010c8c:	df000415 	stw	fp,16(sp)
 4010c90:	df000404 	addi	fp,sp,16
 4010c94:	e13ffd15 	stw	r4,-12(fp)
 4010c98:	e17ffe15 	stw	r5,-8(fp)
 4010c9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4010ca0:	e0bffd17 	ldw	r2,-12(fp)
 4010ca4:	10800017 	ldw	r2,0(r2)
 4010ca8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4010cac:	e0bffc17 	ldw	r2,-16(fp)
 4010cb0:	10c00a04 	addi	r3,r2,40
 4010cb4:	e0bffd17 	ldw	r2,-12(fp)
 4010cb8:	10800217 	ldw	r2,8(r2)
 4010cbc:	100f883a 	mov	r7,r2
 4010cc0:	e1bfff17 	ldw	r6,-4(fp)
 4010cc4:	e17ffe17 	ldw	r5,-8(fp)
 4010cc8:	1809883a 	mov	r4,r3
 4010ccc:	4010d440 	call	4010d44 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4010cd0:	e037883a 	mov	sp,fp
 4010cd4:	dfc00117 	ldw	ra,4(sp)
 4010cd8:	df000017 	ldw	fp,0(sp)
 4010cdc:	dec00204 	addi	sp,sp,8
 4010ce0:	f800283a 	ret

04010ce4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4010ce4:	defffa04 	addi	sp,sp,-24
 4010ce8:	dfc00515 	stw	ra,20(sp)
 4010cec:	df000415 	stw	fp,16(sp)
 4010cf0:	df000404 	addi	fp,sp,16
 4010cf4:	e13ffd15 	stw	r4,-12(fp)
 4010cf8:	e17ffe15 	stw	r5,-8(fp)
 4010cfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4010d00:	e0bffd17 	ldw	r2,-12(fp)
 4010d04:	10800017 	ldw	r2,0(r2)
 4010d08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4010d0c:	e0bffc17 	ldw	r2,-16(fp)
 4010d10:	10c00a04 	addi	r3,r2,40
 4010d14:	e0bffd17 	ldw	r2,-12(fp)
 4010d18:	10800217 	ldw	r2,8(r2)
 4010d1c:	100f883a 	mov	r7,r2
 4010d20:	e1bfff17 	ldw	r6,-4(fp)
 4010d24:	e17ffe17 	ldw	r5,-8(fp)
 4010d28:	1809883a 	mov	r4,r3
 4010d2c:	4010e300 	call	4010e30 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4010d30:	e037883a 	mov	sp,fp
 4010d34:	dfc00117 	ldw	ra,4(sp)
 4010d38:	df000017 	ldw	fp,0(sp)
 4010d3c:	dec00204 	addi	sp,sp,8
 4010d40:	f800283a 	ret

04010d44 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 4010d44:	defff704 	addi	sp,sp,-36
 4010d48:	df000815 	stw	fp,32(sp)
 4010d4c:	df000804 	addi	fp,sp,32
 4010d50:	e13ffc15 	stw	r4,-16(fp)
 4010d54:	e17ffd15 	stw	r5,-12(fp)
 4010d58:	e1bffe15 	stw	r6,-8(fp)
 4010d5c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4010d60:	e0bffc17 	ldw	r2,-16(fp)
 4010d64:	10800017 	ldw	r2,0(r2)
 4010d68:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 4010d6c:	e0bffd17 	ldw	r2,-12(fp)
 4010d70:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 4010d74:	e0bffe17 	ldw	r2,-8(fp)
 4010d78:	e0fffd17 	ldw	r3,-12(fp)
 4010d7c:	1885883a 	add	r2,r3,r2
 4010d80:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 4010d84:	00001206 	br	4010dd0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4010d88:	e0bff917 	ldw	r2,-28(fp)
 4010d8c:	10800037 	ldwio	r2,0(r2)
 4010d90:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4010d94:	e0bffb17 	ldw	r2,-20(fp)
 4010d98:	10a0000c 	andi	r2,r2,32768
 4010d9c:	10000626 	beq	r2,zero,4010db8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4010da0:	e0bff817 	ldw	r2,-32(fp)
 4010da4:	10c00044 	addi	r3,r2,1
 4010da8:	e0fff815 	stw	r3,-32(fp)
 4010dac:	e0fffb17 	ldw	r3,-20(fp)
 4010db0:	10c00005 	stb	r3,0(r2)
 4010db4:	00000606 	br	4010dd0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 4010db8:	e0fff817 	ldw	r3,-32(fp)
 4010dbc:	e0bffd17 	ldw	r2,-12(fp)
 4010dc0:	1880071e 	bne	r3,r2,4010de0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 4010dc4:	e0bfff17 	ldw	r2,-4(fp)
 4010dc8:	1090000c 	andi	r2,r2,16384
 4010dcc:	1000061e 	bne	r2,zero,4010de8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4010dd0:	e0fff817 	ldw	r3,-32(fp)
 4010dd4:	e0bffa17 	ldw	r2,-24(fp)
 4010dd8:	18bfeb36 	bltu	r3,r2,4010d88 <__ram_exceptions_end+0xfbf88aec>
 4010ddc:	00000306 	br	4010dec <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 4010de0:	0001883a 	nop
 4010de4:	00000106 	br	4010dec <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 4010de8:	0001883a 	nop
    
  }

  if (ptr != buffer)
 4010dec:	e0fff817 	ldw	r3,-32(fp)
 4010df0:	e0bffd17 	ldw	r2,-12(fp)
 4010df4:	18800426 	beq	r3,r2,4010e08 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 4010df8:	e0fff817 	ldw	r3,-32(fp)
 4010dfc:	e0bffd17 	ldw	r2,-12(fp)
 4010e00:	1885c83a 	sub	r2,r3,r2
 4010e04:	00000606 	br	4010e20 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 4010e08:	e0bfff17 	ldw	r2,-4(fp)
 4010e0c:	1090000c 	andi	r2,r2,16384
 4010e10:	10000226 	beq	r2,zero,4010e1c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 4010e14:	00bffd44 	movi	r2,-11
 4010e18:	00000106 	br	4010e20 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 4010e1c:	00bffec4 	movi	r2,-5
}
 4010e20:	e037883a 	mov	sp,fp
 4010e24:	df000017 	ldw	fp,0(sp)
 4010e28:	dec00104 	addi	sp,sp,4
 4010e2c:	f800283a 	ret

04010e30 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4010e30:	defff904 	addi	sp,sp,-28
 4010e34:	df000615 	stw	fp,24(sp)
 4010e38:	df000604 	addi	fp,sp,24
 4010e3c:	e13ffc15 	stw	r4,-16(fp)
 4010e40:	e17ffd15 	stw	r5,-12(fp)
 4010e44:	e1bffe15 	stw	r6,-8(fp)
 4010e48:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4010e4c:	e0bffc17 	ldw	r2,-16(fp)
 4010e50:	10800017 	ldw	r2,0(r2)
 4010e54:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 4010e58:	e0bffe17 	ldw	r2,-8(fp)
 4010e5c:	e0fffd17 	ldw	r3,-12(fp)
 4010e60:	1885883a 	add	r2,r3,r2
 4010e64:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 4010e68:	00000e06 	br	4010ea4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4010e6c:	e0bffa17 	ldw	r2,-24(fp)
 4010e70:	10800104 	addi	r2,r2,4
 4010e74:	10800037 	ldwio	r2,0(r2)
 4010e78:	10bfffec 	andhi	r2,r2,65535
 4010e7c:	10000926 	beq	r2,zero,4010ea4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4010e80:	e0fffa17 	ldw	r3,-24(fp)
 4010e84:	e0bffd17 	ldw	r2,-12(fp)
 4010e88:	11000044 	addi	r4,r2,1
 4010e8c:	e13ffd15 	stw	r4,-12(fp)
 4010e90:	10800003 	ldbu	r2,0(r2)
 4010e94:	10803fcc 	andi	r2,r2,255
 4010e98:	1080201c 	xori	r2,r2,128
 4010e9c:	10bfe004 	addi	r2,r2,-128
 4010ea0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4010ea4:	e0fffd17 	ldw	r3,-12(fp)
 4010ea8:	e0bffb17 	ldw	r2,-20(fp)
 4010eac:	18bfef36 	bltu	r3,r2,4010e6c <__ram_exceptions_end+0xfbf88bd0>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 4010eb0:	e0bffe17 	ldw	r2,-8(fp)
}
 4010eb4:	e037883a 	mov	sp,fp
 4010eb8:	df000017 	ldw	fp,0(sp)
 4010ebc:	dec00104 	addi	sp,sp,4
 4010ec0:	f800283a 	ret

04010ec4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4010ec4:	defff404 	addi	sp,sp,-48
 4010ec8:	df000b15 	stw	fp,44(sp)
 4010ecc:	df000b04 	addi	fp,sp,44
 4010ed0:	e13ffc15 	stw	r4,-16(fp)
 4010ed4:	e17ffd15 	stw	r5,-12(fp)
 4010ed8:	e1bffe15 	stw	r6,-8(fp)
 4010edc:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 4010ee0:	e0ffff17 	ldw	r3,-4(fp)
 4010ee4:	e0bffe17 	ldw	r2,-8(fp)
 4010ee8:	1885883a 	add	r2,r3,r2
 4010eec:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 4010ef0:	e0c00217 	ldw	r3,8(fp)
 4010ef4:	e0800117 	ldw	r2,4(fp)
 4010ef8:	1885883a 	add	r2,r3,r2
 4010efc:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 4010f00:	e0800117 	ldw	r2,4(fp)
 4010f04:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 4010f08:	e0bffe17 	ldw	r2,-8(fp)
 4010f0c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4010f10:	00800044 	movi	r2,1
 4010f14:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4010f18:	e0bffc17 	ldw	r2,-16(fp)
 4010f1c:	10800504 	addi	r2,r2,20
 4010f20:	1009883a 	mov	r4,r2
 4010f24:	00c00044 	movi	r3,1
 4010f28:	e0bffd17 	ldw	r2,-12(fp)
 4010f2c:	1884983a 	sll	r2,r3,r2
 4010f30:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4010f34:	e0800317 	ldw	r2,12(fp)
 4010f38:	1080008c 	andi	r2,r2,2
 4010f3c:	1000051e 	bne	r2,zero,4010f54 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4010f40:	e0bffc17 	ldw	r2,-16(fp)
 4010f44:	10800304 	addi	r2,r2,12
 4010f48:	1007883a 	mov	r3,r2
 4010f4c:	00810004 	movi	r2,1024
 4010f50:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4010f54:	e0bffc17 	ldw	r2,-16(fp)
 4010f58:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4010f5c:	e0bffc17 	ldw	r2,-16(fp)
 4010f60:	10800204 	addi	r2,r2,8
 4010f64:	10800037 	ldwio	r2,0(r2)
 4010f68:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4010f6c:	e0bffa17 	ldw	r2,-24(fp)
 4010f70:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4010f74:	10000226 	beq	r2,zero,4010f80 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4010f78:	e0bff717 	ldw	r2,-36(fp)
 4010f7c:	1000031e 	bne	r2,zero,4010f8c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4010f80:	e0bffa17 	ldw	r2,-24(fp)
 4010f84:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4010f88:	103ff426 	beq	r2,zero,4010f5c <__ram_exceptions_end+0xfbf88cc0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4010f8c:	e0bffa17 	ldw	r2,-24(fp)
 4010f90:	1080100c 	andi	r2,r2,64
 4010f94:	10001e26 	beq	r2,zero,4011010 <alt_avalon_spi_command+0x14c>
 4010f98:	e0bff717 	ldw	r2,-36(fp)
 4010f9c:	00801c0e 	bge	zero,r2,4011010 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 4010fa0:	e0bff717 	ldw	r2,-36(fp)
 4010fa4:	10bfffc4 	addi	r2,r2,-1
 4010fa8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 4010fac:	e0ffff17 	ldw	r3,-4(fp)
 4010fb0:	e0bff817 	ldw	r2,-32(fp)
 4010fb4:	18800a2e 	bgeu	r3,r2,4010fe0 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4010fb8:	e0bffc17 	ldw	r2,-16(fp)
 4010fbc:	10800104 	addi	r2,r2,4
 4010fc0:	1009883a 	mov	r4,r2
 4010fc4:	e0bfff17 	ldw	r2,-4(fp)
 4010fc8:	10c00044 	addi	r3,r2,1
 4010fcc:	e0ffff15 	stw	r3,-4(fp)
 4010fd0:	10800003 	ldbu	r2,0(r2)
 4010fd4:	10803fcc 	andi	r2,r2,255
 4010fd8:	20800035 	stwio	r2,0(r4)
 4010fdc:	00000c06 	br	4011010 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 4010fe0:	e0bff517 	ldw	r2,-44(fp)
 4010fe4:	10000826 	beq	r2,zero,4011008 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 4010fe8:	e0bff517 	ldw	r2,-44(fp)
 4010fec:	10bfffc4 	addi	r2,r2,-1
 4010ff0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4010ff4:	e0bffc17 	ldw	r2,-16(fp)
 4010ff8:	10800104 	addi	r2,r2,4
 4010ffc:	0007883a 	mov	r3,zero
 4011000:	10c00035 	stwio	r3,0(r2)
 4011004:	00000206 	br	4011010 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 4011008:	00bf0004 	movi	r2,-1024
 401100c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4011010:	e0bffa17 	ldw	r2,-24(fp)
 4011014:	1080200c 	andi	r2,r2,128
 4011018:	103fd026 	beq	r2,zero,4010f5c <__ram_exceptions_end+0xfbf88cc0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401101c:	e0bffc17 	ldw	r2,-16(fp)
 4011020:	10800037 	ldwio	r2,0(r2)
 4011024:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4011028:	e0bff617 	ldw	r2,-40(fp)
 401102c:	10000426 	beq	r2,zero,4011040 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4011030:	e0bff617 	ldw	r2,-40(fp)
 4011034:	10bfffc4 	addi	r2,r2,-1
 4011038:	e0bff615 	stw	r2,-40(fp)
 401103c:	00000506 	br	4011054 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 4011040:	e0800217 	ldw	r2,8(fp)
 4011044:	10c00044 	addi	r3,r2,1
 4011048:	e0c00215 	stw	r3,8(fp)
 401104c:	e0fffb17 	ldw	r3,-20(fp)
 4011050:	10c00005 	stb	r3,0(r2)
      credits++;
 4011054:	e0bff717 	ldw	r2,-36(fp)
 4011058:	10800044 	addi	r2,r2,1
 401105c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 4011060:	e0bff617 	ldw	r2,-40(fp)
 4011064:	103fbd1e 	bne	r2,zero,4010f5c <__ram_exceptions_end+0xfbf88cc0>
 4011068:	e0c00217 	ldw	r3,8(fp)
 401106c:	e0bff917 	ldw	r2,-28(fp)
 4011070:	18bfba1e 	bne	r3,r2,4010f5c <__ram_exceptions_end+0xfbf88cc0>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4011074:	e0bffc17 	ldw	r2,-16(fp)
 4011078:	10800204 	addi	r2,r2,8
 401107c:	10800037 	ldwio	r2,0(r2)
 4011080:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4011084:	e0bffa17 	ldw	r2,-24(fp)
 4011088:	1080080c 	andi	r2,r2,32
 401108c:	103ff926 	beq	r2,zero,4011074 <__ram_exceptions_end+0xfbf88dd8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4011090:	e0800317 	ldw	r2,12(fp)
 4011094:	1080004c 	andi	r2,r2,1
 4011098:	1000041e 	bne	r2,zero,40110ac <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 401109c:	e0bffc17 	ldw	r2,-16(fp)
 40110a0:	10800304 	addi	r2,r2,12
 40110a4:	0007883a 	mov	r3,zero
 40110a8:	10c00035 	stwio	r3,0(r2)

  return read_length;
 40110ac:	e0800117 	ldw	r2,4(fp)
}
 40110b0:	e037883a 	mov	sp,fp
 40110b4:	df000017 	ldw	fp,0(sp)
 40110b8:	dec00104 	addi	sp,sp,4
 40110bc:	f800283a 	ret

040110c0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40110c0:	defffa04 	addi	sp,sp,-24
 40110c4:	dfc00515 	stw	ra,20(sp)
 40110c8:	df000415 	stw	fp,16(sp)
 40110cc:	df000404 	addi	fp,sp,16
 40110d0:	e13ffd15 	stw	r4,-12(fp)
 40110d4:	e17ffe15 	stw	r5,-8(fp)
 40110d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 40110dc:	e0bffd17 	ldw	r2,-12(fp)
 40110e0:	10800017 	ldw	r2,0(r2)
 40110e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 40110e8:	e0bffc17 	ldw	r2,-16(fp)
 40110ec:	10c00a04 	addi	r3,r2,40
 40110f0:	e0bffd17 	ldw	r2,-12(fp)
 40110f4:	10800217 	ldw	r2,8(r2)
 40110f8:	100f883a 	mov	r7,r2
 40110fc:	e1bfff17 	ldw	r6,-4(fp)
 4011100:	e17ffe17 	ldw	r5,-8(fp)
 4011104:	1809883a 	mov	r4,r3
 4011108:	40111bc0 	call	40111bc <altera_avalon_uart_read>
      fd->fd_flags);
}
 401110c:	e037883a 	mov	sp,fp
 4011110:	dfc00117 	ldw	ra,4(sp)
 4011114:	df000017 	ldw	fp,0(sp)
 4011118:	dec00204 	addi	sp,sp,8
 401111c:	f800283a 	ret

04011120 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4011120:	defffa04 	addi	sp,sp,-24
 4011124:	dfc00515 	stw	ra,20(sp)
 4011128:	df000415 	stw	fp,16(sp)
 401112c:	df000404 	addi	fp,sp,16
 4011130:	e13ffd15 	stw	r4,-12(fp)
 4011134:	e17ffe15 	stw	r5,-8(fp)
 4011138:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 401113c:	e0bffd17 	ldw	r2,-12(fp)
 4011140:	10800017 	ldw	r2,0(r2)
 4011144:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 4011148:	e0bffc17 	ldw	r2,-16(fp)
 401114c:	10c00a04 	addi	r3,r2,40
 4011150:	e0bffd17 	ldw	r2,-12(fp)
 4011154:	10800217 	ldw	r2,8(r2)
 4011158:	100f883a 	mov	r7,r2
 401115c:	e1bfff17 	ldw	r6,-4(fp)
 4011160:	e17ffe17 	ldw	r5,-8(fp)
 4011164:	1809883a 	mov	r4,r3
 4011168:	40112bc0 	call	40112bc <altera_avalon_uart_write>
      fd->fd_flags);
}
 401116c:	e037883a 	mov	sp,fp
 4011170:	dfc00117 	ldw	ra,4(sp)
 4011174:	df000017 	ldw	fp,0(sp)
 4011178:	dec00204 	addi	sp,sp,8
 401117c:	f800283a 	ret

04011180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011180:	defffe04 	addi	sp,sp,-8
 4011184:	dfc00115 	stw	ra,4(sp)
 4011188:	df000015 	stw	fp,0(sp)
 401118c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011190:	d0a00c17 	ldw	r2,-32720(gp)
 4011194:	10000326 	beq	r2,zero,40111a4 <alt_get_errno+0x24>
 4011198:	d0a00c17 	ldw	r2,-32720(gp)
 401119c:	103ee83a 	callr	r2
 40111a0:	00000106 	br	40111a8 <alt_get_errno+0x28>
 40111a4:	d0a34604 	addi	r2,gp,-29416
}
 40111a8:	e037883a 	mov	sp,fp
 40111ac:	dfc00117 	ldw	ra,4(sp)
 40111b0:	df000017 	ldw	fp,0(sp)
 40111b4:	dec00204 	addi	sp,sp,8
 40111b8:	f800283a 	ret

040111bc <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 40111bc:	defff804 	addi	sp,sp,-32
 40111c0:	dfc00715 	stw	ra,28(sp)
 40111c4:	df000615 	stw	fp,24(sp)
 40111c8:	df000604 	addi	fp,sp,24
 40111cc:	e13ffc15 	stw	r4,-16(fp)
 40111d0:	e17ffd15 	stw	r5,-12(fp)
 40111d4:	e1bffe15 	stw	r6,-8(fp)
 40111d8:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
 40111dc:	e0bfff17 	ldw	r2,-4(fp)
 40111e0:	1090000c 	andi	r2,r2,16384
 40111e4:	1005003a 	cmpeq	r2,r2,zero
 40111e8:	10803fcc 	andi	r2,r2,255
 40111ec:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
 40111f0:	e0bffc17 	ldw	r2,-16(fp)
 40111f4:	10800017 	ldw	r2,0(r2)
 40111f8:	10800204 	addi	r2,r2,8
 40111fc:	10800037 	ldwio	r2,0(r2)
 4011200:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
 4011204:	e0bffc17 	ldw	r2,-16(fp)
 4011208:	10800017 	ldw	r2,0(r2)
 401120c:	10800204 	addi	r2,r2,8
 4011210:	0007883a 	mov	r3,zero
 4011214:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
 4011218:	e0bffb17 	ldw	r2,-20(fp)
 401121c:	1080200c 	andi	r2,r2,128
 4011220:	10000b26 	beq	r2,zero,4011250 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 4011224:	e0bffc17 	ldw	r2,-16(fp)
 4011228:	10800017 	ldw	r2,0(r2)
 401122c:	10800037 	ldwio	r2,0(r2)
 4011230:	1007883a 	mov	r3,r2
 4011234:	e0bffd17 	ldw	r2,-12(fp)
 4011238:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 401123c:	e0bffb17 	ldw	r2,-20(fp)
 4011240:	108000cc 	andi	r2,r2,3
 4011244:	1000021e 	bne	r2,zero,4011250 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
 4011248:	00800044 	movi	r2,1
 401124c:	00000706 	br	401126c <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
 4011250:	e0bffa17 	ldw	r2,-24(fp)
 4011254:	103fe61e 	bne	r2,zero,40111f0 <__ram_exceptions_end+0xfbf88f54>

  ALT_ERRNO = EWOULDBLOCK;
 4011258:	40111800 	call	4011180 <alt_get_errno>
 401125c:	1007883a 	mov	r3,r2
 4011260:	008002c4 	movi	r2,11
 4011264:	18800015 	stw	r2,0(r3)
 
  return 0;
 4011268:	0005883a 	mov	r2,zero
}
 401126c:	e037883a 	mov	sp,fp
 4011270:	dfc00117 	ldw	ra,4(sp)
 4011274:	df000017 	ldw	fp,0(sp)
 4011278:	dec00204 	addi	sp,sp,8
 401127c:	f800283a 	ret

04011280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011280:	defffe04 	addi	sp,sp,-8
 4011284:	dfc00115 	stw	ra,4(sp)
 4011288:	df000015 	stw	fp,0(sp)
 401128c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011290:	d0a00c17 	ldw	r2,-32720(gp)
 4011294:	10000326 	beq	r2,zero,40112a4 <alt_get_errno+0x24>
 4011298:	d0a00c17 	ldw	r2,-32720(gp)
 401129c:	103ee83a 	callr	r2
 40112a0:	00000106 	br	40112a8 <alt_get_errno+0x28>
 40112a4:	d0a34604 	addi	r2,gp,-29416
}
 40112a8:	e037883a 	mov	sp,fp
 40112ac:	dfc00117 	ldw	ra,4(sp)
 40112b0:	df000017 	ldw	fp,0(sp)
 40112b4:	dec00204 	addi	sp,sp,8
 40112b8:	f800283a 	ret

040112bc <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 40112bc:	defff704 	addi	sp,sp,-36
 40112c0:	dfc00815 	stw	ra,32(sp)
 40112c4:	df000715 	stw	fp,28(sp)
 40112c8:	df000704 	addi	fp,sp,28
 40112cc:	e13ffc15 	stw	r4,-16(fp)
 40112d0:	e17ffd15 	stw	r5,-12(fp)
 40112d4:	e1bffe15 	stw	r6,-8(fp)
 40112d8:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
 40112dc:	e0bfff17 	ldw	r2,-4(fp)
 40112e0:	1090000c 	andi	r2,r2,16384
 40112e4:	1005003a 	cmpeq	r2,r2,zero
 40112e8:	10803fcc 	andi	r2,r2,255
 40112ec:	e0bffa15 	stw	r2,-24(fp)
  count = len;
 40112f0:	e0bffe17 	ldw	r2,-8(fp)
 40112f4:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
 40112f8:	e0bffc17 	ldw	r2,-16(fp)
 40112fc:	10800017 	ldw	r2,0(r2)
 4011300:	10800204 	addi	r2,r2,8
 4011304:	10800037 	ldwio	r2,0(r2)
 4011308:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
 401130c:	e0bffb17 	ldw	r2,-20(fp)
 4011310:	1080100c 	andi	r2,r2,64
 4011314:	10000f26 	beq	r2,zero,4011354 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
 4011318:	e0bffc17 	ldw	r2,-16(fp)
 401131c:	10800017 	ldw	r2,0(r2)
 4011320:	10800104 	addi	r2,r2,4
 4011324:	1009883a 	mov	r4,r2
 4011328:	e0bffd17 	ldw	r2,-12(fp)
 401132c:	10c00044 	addi	r3,r2,1
 4011330:	e0fffd15 	stw	r3,-12(fp)
 4011334:	10800003 	ldbu	r2,0(r2)
 4011338:	10803fcc 	andi	r2,r2,255
 401133c:	1080201c 	xori	r2,r2,128
 4011340:	10bfe004 	addi	r2,r2,-128
 4011344:	20800035 	stwio	r2,0(r4)
      count--;
 4011348:	e0bff917 	ldw	r2,-28(fp)
 401134c:	10bfffc4 	addi	r2,r2,-1
 4011350:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
 4011354:	e0bffa17 	ldw	r2,-24(fp)
 4011358:	10000226 	beq	r2,zero,4011364 <altera_avalon_uart_write+0xa8>
 401135c:	e0bff917 	ldw	r2,-28(fp)
 4011360:	103fe51e 	bne	r2,zero,40112f8 <__ram_exceptions_end+0xfbf8905c>

  if (count)
 4011364:	e0bff917 	ldw	r2,-28(fp)
 4011368:	10000426 	beq	r2,zero,401137c <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
 401136c:	40112800 	call	4011280 <alt_get_errno>
 4011370:	1007883a 	mov	r3,r2
 4011374:	008002c4 	movi	r2,11
 4011378:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
 401137c:	e0fffe17 	ldw	r3,-8(fp)
 4011380:	e0bff917 	ldw	r2,-28(fp)
 4011384:	1885c83a 	sub	r2,r3,r2
}
 4011388:	e037883a 	mov	sp,fp
 401138c:	dfc00117 	ldw	ra,4(sp)
 4011390:	df000017 	ldw	fp,0(sp)
 4011394:	dec00204 	addi	sp,sp,8
 4011398:	f800283a 	ret

0401139c <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
 401139c:	defff904 	addi	sp,sp,-28
 40113a0:	dfc00615 	stw	ra,24(sp)
 40113a4:	df000515 	stw	fp,20(sp)
 40113a8:	df000504 	addi	fp,sp,20
 40113ac:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
 40113b0:	e0bfff17 	ldw	r2,-4(fp)
 40113b4:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
 40113b8:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
 40113bc:	e0bffb17 	ldw	r2,-20(fp)
 40113c0:	10001a26 	beq	r2,zero,401142c <alt_adc_irq+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40113c4:	0005303a 	rdctl	r2,status
 40113c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40113cc:	e0fffe17 	ldw	r3,-8(fp)
 40113d0:	00bfff84 	movi	r2,-2
 40113d4:	1884703a 	and	r2,r3,r2
 40113d8:	1001703a 	wrctl	status,r2
  
  return context;
 40113dc:	e0bffe17 	ldw	r2,-8(fp)
	{
	    cpu_sr = alt_irq_disable_all();
 40113e0:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
 40113e4:	e0bffb17 	ldw	r2,-20(fp)
 40113e8:	10800a17 	ldw	r2,40(r2)
 40113ec:	10000626 	beq	r2,zero,4011408 <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
 40113f0:	e0bffb17 	ldw	r2,-20(fp)
 40113f4:	10800a17 	ldw	r2,40(r2)
 40113f8:	e0fffb17 	ldw	r3,-20(fp)
 40113fc:	18c00b17 	ldw	r3,44(r3)
 4011400:	1809883a 	mov	r4,r3
 4011404:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
 4011408:	e0bffb17 	ldw	r2,-20(fp)
 401140c:	10800c17 	ldw	r2,48(r2)
 4011410:	1009883a 	mov	r4,r2
 4011414:	40118480 	call	4011848 <adc_clear_interrupt_status>
 4011418:	e0bffc17 	ldw	r2,-16(fp)
 401141c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011420:	e0bffd17 	ldw	r2,-12(fp)
 4011424:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
 4011428:	0001883a 	nop
 401142c:	0001883a 	nop
}
 4011430:	e037883a 	mov	sp,fp
 4011434:	dfc00117 	ldw	ra,4(sp)
 4011438:	df000017 	ldw	fp,0(sp)
 401143c:	dec00204 	addi	sp,sp,8
 4011440:	f800283a 	ret

04011444 <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
 4011444:	defff804 	addi	sp,sp,-32
 4011448:	df000715 	stw	fp,28(sp)
 401144c:	df000704 	addi	fp,sp,28
 4011450:	e13ffd15 	stw	r4,-12(fp)
 4011454:	e17ffe15 	stw	r5,-8(fp)
 4011458:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
 401145c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
 4011460:	e0bfff17 	ldw	r2,-4(fp)
 4011464:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
 4011468:	e0bffe17 	ldw	r2,-8(fp)
 401146c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
 4011470:	e0bffd17 	ldw	r2,-12(fp)
 4011474:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
 4011478:	e0bffa17 	ldw	r2,-24(fp)
 401147c:	1000021e 	bne	r2,zero,4011488 <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
 4011480:	00bffa84 	movi	r2,-22
 4011484:	00001606 	br	40114e0 <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
 4011488:	e03ff915 	stw	zero,-28(fp)
 401148c:	00001006 	br	40114d0 <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
 4011490:	e0bff917 	ldw	r2,-28(fp)
 4011494:	1085883a 	add	r2,r2,r2
 4011498:	1085883a 	add	r2,r2,r2
 401149c:	1007883a 	mov	r3,r2
 40114a0:	e0bffc17 	ldw	r2,-16(fp)
 40114a4:	1885883a 	add	r2,r3,r2
 40114a8:	10800037 	ldwio	r2,0(r2)
 40114ac:	1007883a 	mov	r3,r2
 40114b0:	e0bffa17 	ldw	r2,-24(fp)
 40114b4:	10c00015 	stw	r3,0(r2)

       dest_buf++;
 40114b8:	e0bffa17 	ldw	r2,-24(fp)
 40114bc:	10800104 	addi	r2,r2,4
 40114c0:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 40114c4:	e0bff917 	ldw	r2,-28(fp)
 40114c8:	10800044 	addi	r2,r2,1
 40114cc:	e0bff915 	stw	r2,-28(fp)
 40114d0:	e0fff917 	ldw	r3,-28(fp)
 40114d4:	e0bffb17 	ldw	r2,-20(fp)
 40114d8:	18bfed36 	bltu	r3,r2,4011490 <__ram_exceptions_end+0xfbf891f4>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
 40114dc:	0005883a 	mov	r2,zero

}
 40114e0:	e037883a 	mov	sp,fp
 40114e4:	df000017 	ldw	fp,0(sp)
 40114e8:	dec00104 	addi	sp,sp,4
 40114ec:	f800283a 	ret

040114f0 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
 40114f0:	defffa04 	addi	sp,sp,-24
 40114f4:	dfc00515 	stw	ra,20(sp)
 40114f8:	df000415 	stw	fp,16(sp)
 40114fc:	df000404 	addi	fp,sp,16
 4011500:	e13ffd15 	stw	r4,-12(fp)
 4011504:	e17ffe15 	stw	r5,-8(fp)
 4011508:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
 401150c:	d1601004 	addi	r5,gp,-32704
 4011510:	e13ffd17 	ldw	r4,-12(fp)
 4011514:	4013a680 	call	4013a68 <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
 4011518:	e0bffe17 	ldw	r2,-8(fp)
 401151c:	10000b16 	blt	r2,zero,401154c <altera_modular_adc_init+0x5c>
 4011520:	e0bfff17 	ldw	r2,-4(fp)
 4011524:	10000916 	blt	r2,zero,401154c <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
 4011528:	e0bffe17 	ldw	r2,-8(fp)
 401152c:	e0ffff17 	ldw	r3,-4(fp)
 4011530:	d8000015 	stw	zero,0(sp)
 4011534:	e1fffd17 	ldw	r7,-12(fp)
 4011538:	01810074 	movhi	r6,1025
 401153c:	3184e704 	addi	r6,r6,5020
 4011540:	180b883a 	mov	r5,r3
 4011544:	1009883a 	mov	r4,r2
 4011548:	4013bbc0 	call	4013bbc <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
 401154c:	0001883a 	nop
 4011550:	e037883a 	mov	sp,fp
 4011554:	dfc00117 	ldw	ra,4(sp)
 4011558:	df000017 	ldw	fp,0(sp)
 401155c:	dec00204 	addi	sp,sp,8
 4011560:	f800283a 	ret

04011564 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
 4011564:	defffa04 	addi	sp,sp,-24
 4011568:	dfc00515 	stw	ra,20(sp)
 401156c:	df000415 	stw	fp,16(sp)
 4011570:	df000404 	addi	fp,sp,16
 4011574:	e13ffc15 	stw	r4,-16(fp)
 4011578:	e17ffd15 	stw	r5,-12(fp)
 401157c:	e1bffe15 	stw	r6,-8(fp)
 4011580:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 4011584:	e0bffc17 	ldw	r2,-16(fp)
 4011588:	e0fffd17 	ldw	r3,-12(fp)
 401158c:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
 4011590:	e0bffc17 	ldw	r2,-16(fp)
 4011594:	e0fffe17 	ldw	r3,-8(fp)
 4011598:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
 401159c:	e0bffc17 	ldw	r2,-16(fp)
 40115a0:	e0ffff17 	ldw	r3,-4(fp)
 40115a4:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
 40115a8:	e0bffd17 	ldw	r2,-12(fp)
 40115ac:	10000726 	beq	r2,zero,40115cc <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
 40115b0:	e0bfff17 	ldw	r2,-4(fp)
 40115b4:	1009883a 	mov	r4,r2
 40115b8:	40118480 	call	4011848 <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
 40115bc:	e0bfff17 	ldw	r2,-4(fp)
 40115c0:	1009883a 	mov	r4,r2
 40115c4:	40117bc0 	call	40117bc <adc_interrupt_enable>
                adc_clear_interrupt_status(sample_store_base);
	}
	
    
	
    return ;
 40115c8:	00000706 	br	40115e8 <alt_adc_register_callback+0x84>
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
 40115cc:	e0bfff17 	ldw	r2,-4(fp)
 40115d0:	1009883a 	mov	r4,r2
 40115d4:	40118000 	call	4011800 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
 40115d8:	e0bfff17 	ldw	r2,-4(fp)
 40115dc:	1009883a 	mov	r4,r2
 40115e0:	40118480 	call	4011848 <adc_clear_interrupt_status>
	}
	
    
	
    return ;
 40115e4:	0001883a 	nop
}
 40115e8:	e037883a 	mov	sp,fp
 40115ec:	dfc00117 	ldw	ra,4(sp)
 40115f0:	df000017 	ldw	fp,0(sp)
 40115f4:	dec00204 	addi	sp,sp,8
 40115f8:	f800283a 	ret

040115fc <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
 40115fc:	defffc04 	addi	sp,sp,-16
 4011600:	dfc00315 	stw	ra,12(sp)
 4011604:	df000215 	stw	fp,8(sp)
 4011608:	df000204 	addi	fp,sp,8
 401160c:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
 4011610:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
 4011614:	d1601004 	addi	r5,gp,-32704
 4011618:	e13fff17 	ldw	r4,-4(fp)
 401161c:	4013b0c0 	call	4013b0c <alt_find_dev>
 4011620:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 4011624:	e0bffe17 	ldw	r2,-8(fp)
}
 4011628:	e037883a 	mov	sp,fp
 401162c:	dfc00117 	ldw	ra,4(sp)
 4011630:	df000017 	ldw	fp,0(sp)
 4011634:	dec00204 	addi	sp,sp,8
 4011638:	f800283a 	ret

0401163c <adc_stop>:

void adc_stop(int sequencer_base)
{
 401163c:	defffe04 	addi	sp,sp,-8
 4011640:	df000115 	stw	fp,4(sp)
 4011644:	df000104 	addi	fp,sp,4
 4011648:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
 401164c:	e0bfff17 	ldw	r2,-4(fp)
 4011650:	e0ffff17 	ldw	r3,-4(fp)
 4011654:	19000037 	ldwio	r4,0(r3)
 4011658:	00ffff84 	movi	r3,-2
 401165c:	20c6703a 	and	r3,r4,r3
 4011660:	10c00035 	stwio	r3,0(r2)
 4011664:	0001883a 	nop
 4011668:	e0bfff17 	ldw	r2,-4(fp)
 401166c:	10800037 	ldwio	r2,0(r2)
 4011670:	1080004c 	andi	r2,r2,1
 4011674:	103ffc1e 	bne	r2,zero,4011668 <__ram_exceptions_end+0xfbf893cc>
}
 4011678:	0001883a 	nop
 401167c:	e037883a 	mov	sp,fp
 4011680:	df000017 	ldw	fp,0(sp)
 4011684:	dec00104 	addi	sp,sp,4
 4011688:	f800283a 	ret

0401168c <adc_start>:

void adc_start(int sequencer_base)
{
 401168c:	defffe04 	addi	sp,sp,-8
 4011690:	df000115 	stw	fp,4(sp)
 4011694:	df000104 	addi	fp,sp,4
 4011698:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
 401169c:	e0bfff17 	ldw	r2,-4(fp)
 40116a0:	e0ffff17 	ldw	r3,-4(fp)
 40116a4:	18c00037 	ldwio	r3,0(r3)
 40116a8:	18c00054 	ori	r3,r3,1
 40116ac:	10c00035 	stwio	r3,0(r2)
}
 40116b0:	0001883a 	nop
 40116b4:	e037883a 	mov	sp,fp
 40116b8:	df000017 	ldw	fp,0(sp)
 40116bc:	dec00104 	addi	sp,sp,4
 40116c0:	f800283a 	ret

040116c4 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
 40116c4:	defffe04 	addi	sp,sp,-8
 40116c8:	df000115 	stw	fp,4(sp)
 40116cc:	df000104 	addi	fp,sp,4
 40116d0:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
 40116d4:	e0bfff17 	ldw	r2,-4(fp)
 40116d8:	e0ffff17 	ldw	r3,-4(fp)
 40116dc:	19000037 	ldwio	r4,0(r3)
 40116e0:	00fffc44 	movi	r3,-15
 40116e4:	20c6703a 	and	r3,r4,r3
 40116e8:	18c00094 	ori	r3,r3,2
 40116ec:	10c00035 	stwio	r3,0(r2)
}
 40116f0:	0001883a 	nop
 40116f4:	e037883a 	mov	sp,fp
 40116f8:	df000017 	ldw	fp,0(sp)
 40116fc:	dec00104 	addi	sp,sp,4
 4011700:	f800283a 	ret

04011704 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
 4011704:	defffe04 	addi	sp,sp,-8
 4011708:	df000115 	stw	fp,4(sp)
 401170c:	df000104 	addi	fp,sp,4
 4011710:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
 4011714:	e0bfff17 	ldw	r2,-4(fp)
 4011718:	e0ffff17 	ldw	r3,-4(fp)
 401171c:	19000037 	ldwio	r4,0(r3)
 4011720:	00fffc44 	movi	r3,-15
 4011724:	20c6703a 	and	r3,r4,r3
 4011728:	10c00035 	stwio	r3,0(r2)
}
 401172c:	0001883a 	nop
 4011730:	e037883a 	mov	sp,fp
 4011734:	df000017 	ldw	fp,0(sp)
 4011738:	dec00104 	addi	sp,sp,4
 401173c:	f800283a 	ret

04011740 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
 4011740:	defffc04 	addi	sp,sp,-16
 4011744:	dfc00315 	stw	ra,12(sp)
 4011748:	df000215 	stw	fp,8(sp)
 401174c:	df000204 	addi	fp,sp,8
 4011750:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
 4011754:	e0bfff17 	ldw	r2,-4(fp)
 4011758:	10800037 	ldwio	r2,0(r2)
 401175c:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
 4011760:	e13fff17 	ldw	r4,-4(fp)
 4011764:	401163c0 	call	401163c <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
 4011768:	e0bfff17 	ldw	r2,-4(fp)
 401176c:	e0ffff17 	ldw	r3,-4(fp)
 4011770:	18c00037 	ldwio	r3,0(r3)
 4011774:	18c00394 	ori	r3,r3,14
 4011778:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
 401177c:	e13fff17 	ldw	r4,-4(fp)
 4011780:	401168c0 	call	401168c <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 4011784:	0001883a 	nop
 4011788:	e0bfff17 	ldw	r2,-4(fp)
 401178c:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
 4011790:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 4011794:	103ffc1e 	bne	r2,zero,4011788 <__ram_exceptions_end+0xfbf894ec>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
 4011798:	e0bfff17 	ldw	r2,-4(fp)
 401179c:	e0fffe17 	ldw	r3,-8(fp)
 40117a0:	10c00035 	stwio	r3,0(r2)
}
 40117a4:	0001883a 	nop
 40117a8:	e037883a 	mov	sp,fp
 40117ac:	dfc00117 	ldw	ra,4(sp)
 40117b0:	df000017 	ldw	fp,0(sp)
 40117b4:	dec00204 	addi	sp,sp,8
 40117b8:	f800283a 	ret

040117bc <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
 40117bc:	defffe04 	addi	sp,sp,-8
 40117c0:	df000115 	stw	fp,4(sp)
 40117c4:	df000104 	addi	fp,sp,4
 40117c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
 40117cc:	e0bfff17 	ldw	r2,-4(fp)
 40117d0:	10804004 	addi	r2,r2,256
 40117d4:	1007883a 	mov	r3,r2
 40117d8:	e0bfff17 	ldw	r2,-4(fp)
 40117dc:	10804004 	addi	r2,r2,256
 40117e0:	10800037 	ldwio	r2,0(r2)
 40117e4:	10800054 	ori	r2,r2,1
 40117e8:	18800035 	stwio	r2,0(r3)
}
 40117ec:	0001883a 	nop
 40117f0:	e037883a 	mov	sp,fp
 40117f4:	df000017 	ldw	fp,0(sp)
 40117f8:	dec00104 	addi	sp,sp,4
 40117fc:	f800283a 	ret

04011800 <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
 4011800:	defffe04 	addi	sp,sp,-8
 4011804:	df000115 	stw	fp,4(sp)
 4011808:	df000104 	addi	fp,sp,4
 401180c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
 4011810:	e0bfff17 	ldw	r2,-4(fp)
 4011814:	10804004 	addi	r2,r2,256
 4011818:	1009883a 	mov	r4,r2
 401181c:	e0bfff17 	ldw	r2,-4(fp)
 4011820:	10804004 	addi	r2,r2,256
 4011824:	10c00037 	ldwio	r3,0(r2)
 4011828:	00bfff84 	movi	r2,-2
 401182c:	1884703a 	and	r2,r3,r2
 4011830:	20800035 	stwio	r2,0(r4)
}
 4011834:	0001883a 	nop
 4011838:	e037883a 	mov	sp,fp
 401183c:	df000017 	ldw	fp,0(sp)
 4011840:	dec00104 	addi	sp,sp,4
 4011844:	f800283a 	ret

04011848 <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
 4011848:	defffe04 	addi	sp,sp,-8
 401184c:	df000115 	stw	fp,4(sp)
 4011850:	df000104 	addi	fp,sp,4
 4011854:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 4011858:	e0bfff17 	ldw	r2,-4(fp)
 401185c:	10804104 	addi	r2,r2,260
 4011860:	1007883a 	mov	r3,r2
 4011864:	e0bfff17 	ldw	r2,-4(fp)
 4011868:	10804104 	addi	r2,r2,260
 401186c:	10800037 	ldwio	r2,0(r2)
 4011870:	10800054 	ori	r2,r2,1
 4011874:	18800035 	stwio	r2,0(r3)
}
 4011878:	0001883a 	nop
 401187c:	e037883a 	mov	sp,fp
 4011880:	df000017 	ldw	fp,0(sp)
 4011884:	dec00104 	addi	sp,sp,4
 4011888:	f800283a 	ret

0401188c <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
 401188c:	defffe04 	addi	sp,sp,-8
 4011890:	df000115 	stw	fp,4(sp)
 4011894:	df000104 	addi	fp,sp,4
 4011898:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
 401189c:	e0bfff17 	ldw	r2,-4(fp)
 40118a0:	10804104 	addi	r2,r2,260
 40118a4:	10800037 	ldwio	r2,0(r2)
 40118a8:	1080004c 	andi	r2,r2,1
 40118ac:	10000226 	beq	r2,zero,40118b8 <adc_interrupt_asserted+0x2c>
 40118b0:	00bfffc4 	movi	r2,-1
 40118b4:	00000106 	br	40118bc <adc_interrupt_asserted+0x30>
 40118b8:	0005883a 	mov	r2,zero
}
 40118bc:	e037883a 	mov	sp,fp
 40118c0:	df000017 	ldw	fp,0(sp)
 40118c4:	dec00104 	addi	sp,sp,4
 40118c8:	f800283a 	ret

040118cc <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
 40118cc:	defffe04 	addi	sp,sp,-8
 40118d0:	df000115 	stw	fp,4(sp)
 40118d4:	df000104 	addi	fp,sp,4
 40118d8:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
 40118dc:	0001883a 	nop
 40118e0:	e0bfff17 	ldw	r2,-4(fp)
 40118e4:	10804104 	addi	r2,r2,260
 40118e8:	10800037 	ldwio	r2,0(r2)
 40118ec:	1080004c 	andi	r2,r2,1
 40118f0:	103ffb26 	beq	r2,zero,40118e0 <__ram_exceptions_end+0xfbf89644>
}
 40118f4:	0001883a 	nop
 40118f8:	e037883a 	mov	sp,fp
 40118fc:	df000017 	ldw	fp,0(sp)
 4011900:	dec00104 	addi	sp,sp,4
 4011904:	f800283a 	ret

04011908 <clear_screen>:
#include "DE10_Lite_VGA_Driver.h"

void clear_screen(alt_u32 color)
{
	// Author's note: This function offers a lot of opportunities for optimization
	for (size_t y = 0; y < CANVAS_HEIGHT; ++y)
 4011908:	01420174 	movhi	r5,2053
#include "char_map.h"
#include "draw_vga.h"
#include "DE10_Lite_VGA_Driver.h"

void clear_screen(alt_u32 color)
{
 401190c:	00820034 	movhi	r2,2048
	// Author's note: This function offers a lot of opportunities for optimization
	for (size_t y = 0; y < CANVAS_HEIGHT; ++y)
 4011910:	296c0004 	addi	r5,r5,-20480
 4011914:	10c14004 	addi	r3,r2,1280
	{
		for (size_t x = 0; x < CANVAS_WIDTH; ++x)
		{
			write_pixel(x, y, color);
 4011918:	11000035 	stwio	r4,0(r2)
 401191c:	10800104 	addi	r2,r2,4
void clear_screen(alt_u32 color)
{
	// Author's note: This function offers a lot of opportunities for optimization
	for (size_t y = 0; y < CANVAS_HEIGHT; ++y)
	{
		for (size_t x = 0; x < CANVAS_WIDTH; ++x)
 4011920:	10fffd1e 	bne	r2,r3,4011918 <__ram_exceptions_end+0xfbf8967c>
#include "DE10_Lite_VGA_Driver.h"

void clear_screen(alt_u32 color)
{
	// Author's note: This function offers a lot of opportunities for optimization
	for (size_t y = 0; y < CANVAS_HEIGHT; ++y)
 4011924:	117ffb1e 	bne	r2,r5,4011914 <__ram_exceptions_end+0xfbf89678>
 4011928:	f800283a 	ret

0401192c <draw_hline>:
		}
	}
}

void draw_hline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
 401192c:	defffc04 	addi	sp,sp,-16
 4011930:	2805883a 	mov	r2,r5
 4011934:	dc000015 	stw	r16,0(sp)
	const size_t start_addr = pixel_addr(x0, y0);
 4011938:	01405004 	movi	r5,320
		}
	}
}

void draw_hline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
 401193c:	2021883a 	mov	r16,r4
	const size_t start_addr = pixel_addr(x0, y0);
 4011940:	1009883a 	mov	r4,r2
		}
	}
}

void draw_hline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
 4011944:	dc800215 	stw	r18,8(sp)
 4011948:	dc400115 	stw	r17,4(sp)
 401194c:	dfc00315 	stw	ra,12(sp)
 4011950:	3023883a 	mov	r17,r6
 4011954:	3825883a 	mov	r18,r7
	const size_t start_addr = pixel_addr(x0, y0);
 4011958:	40011140 	call	4001114 <__mulsi3>
 401195c:	1405883a 	add	r2,r2,r16
 4011960:	1085883a 	add	r2,r2,r2
	const size_t end_addr = start_addr + length * 4;
 4011964:	8c63883a 	add	r17,r17,r17
	}
}

void draw_hline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
	const size_t start_addr = pixel_addr(x0, y0);
 4011968:	1085883a 	add	r2,r2,r2
	const size_t end_addr = start_addr + length * 4;
 401196c:	8c63883a 	add	r17,r17,r17
 4011970:	8889883a 	add	r4,r17,r2
	for (size_t pixel = start_addr; pixel < end_addr; pixel += 4)
 4011974:	1100052e 	bgeu	r2,r4,401198c <draw_hline+0x60>
		IOWR_32DIRECT(DE10_LITE_VGA_IP_0_BASE, pixel, color);
 4011978:	01420034 	movhi	r5,2048
 401197c:	1147883a 	add	r3,r2,r5
 4011980:	1c800035 	stwio	r18,0(r3)

void draw_hline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
	const size_t start_addr = pixel_addr(x0, y0);
	const size_t end_addr = start_addr + length * 4;
	for (size_t pixel = start_addr; pixel < end_addr; pixel += 4)
 4011984:	10800104 	addi	r2,r2,4
 4011988:	113ffc36 	bltu	r2,r4,401197c <__ram_exceptions_end+0xfbf896e0>
		IOWR_32DIRECT(DE10_LITE_VGA_IP_0_BASE, pixel, color);
}
 401198c:	dfc00317 	ldw	ra,12(sp)
 4011990:	dc800217 	ldw	r18,8(sp)
 4011994:	dc400117 	ldw	r17,4(sp)
 4011998:	dc000017 	ldw	r16,0(sp)
 401199c:	dec00404 	addi	sp,sp,16
 40119a0:	f800283a 	ret

040119a4 <draw_vline>:

void draw_vline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
 40119a4:	defffc04 	addi	sp,sp,-16
 40119a8:	2805883a 	mov	r2,r5
 40119ac:	dc000015 	stw	r16,0(sp)
	const size_t start_addr = pixel_addr(x0, y0);
 40119b0:	01405004 	movi	r5,320
	for (size_t pixel = start_addr; pixel < end_addr; pixel += 4)
		IOWR_32DIRECT(DE10_LITE_VGA_IP_0_BASE, pixel, color);
}

void draw_vline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
 40119b4:	2021883a 	mov	r16,r4
	const size_t start_addr = pixel_addr(x0, y0);
 40119b8:	1009883a 	mov	r4,r2
	for (size_t pixel = start_addr; pixel < end_addr; pixel += 4)
		IOWR_32DIRECT(DE10_LITE_VGA_IP_0_BASE, pixel, color);
}

void draw_vline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
 40119bc:	dfc00315 	stw	ra,12(sp)
 40119c0:	dc800215 	stw	r18,8(sp)
 40119c4:	dc400115 	stw	r17,4(sp)
 40119c8:	3025883a 	mov	r18,r6
 40119cc:	3823883a 	mov	r17,r7
	const size_t start_addr = pixel_addr(x0, y0);
 40119d0:	40011140 	call	4001114 <__mulsi3>
 40119d4:	1405883a 	add	r2,r2,r16
 40119d8:	10a1883a 	add	r16,r2,r2
	const size_t row_bytes = 4 * CANVAS_WIDTH;
	const size_t end_addr = start_addr + length * row_bytes;
 40119dc:	01414004 	movi	r5,1280
 40119e0:	9009883a 	mov	r4,r18
		IOWR_32DIRECT(DE10_LITE_VGA_IP_0_BASE, pixel, color);
}

void draw_vline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
	const size_t start_addr = pixel_addr(x0, y0);
 40119e4:	8421883a 	add	r16,r16,r16
	const size_t row_bytes = 4 * CANVAS_WIDTH;
	const size_t end_addr = start_addr + length * row_bytes;
 40119e8:	40011140 	call	4001114 <__mulsi3>
 40119ec:	1405883a 	add	r2,r2,r16
	for (size_t pixel = start_addr; pixel < end_addr; pixel += row_bytes)
 40119f0:	8080052e 	bgeu	r16,r2,4011a08 <draw_vline+0x64>
		IOWR_32DIRECT(DE10_LITE_VGA_IP_0_BASE, pixel, color);
 40119f4:	01020034 	movhi	r4,2048
 40119f8:	8107883a 	add	r3,r16,r4
 40119fc:	1c400035 	stwio	r17,0(r3)
void draw_vline(alt_u32 x0, alt_u32 y0, alt_u32 length, alt_u32 color)
{
	const size_t start_addr = pixel_addr(x0, y0);
	const size_t row_bytes = 4 * CANVAS_WIDTH;
	const size_t end_addr = start_addr + length * row_bytes;
	for (size_t pixel = start_addr; pixel < end_addr; pixel += row_bytes)
 4011a00:	84014004 	addi	r16,r16,1280
 4011a04:	80bffc36 	bltu	r16,r2,40119f8 <__ram_exceptions_end+0xfbf8975c>
		IOWR_32DIRECT(DE10_LITE_VGA_IP_0_BASE, pixel, color);
}
 4011a08:	dfc00317 	ldw	ra,12(sp)
 4011a0c:	dc800217 	ldw	r18,8(sp)
 4011a10:	dc400117 	ldw	r17,4(sp)
 4011a14:	dc000017 	ldw	r16,0(sp)
 4011a18:	dec00404 	addi	sp,sp,16
 4011a1c:	f800283a 	ret

04011a20 <swap>:

void swap(alt_u32* p1, alt_u32* p2)
{
	alt_u32 temp = *p1;
	*p1 = *p2;
 4011a20:	28c00017 	ldw	r3,0(r5)
		IOWR_32DIRECT(DE10_LITE_VGA_IP_0_BASE, pixel, color);
}

void swap(alt_u32* p1, alt_u32* p2)
{
	alt_u32 temp = *p1;
 4011a24:	20800017 	ldw	r2,0(r4)
	*p1 = *p2;
 4011a28:	20c00015 	stw	r3,0(r4)
	*p2 = temp;
 4011a2c:	28800015 	stw	r2,0(r5)
 4011a30:	f800283a 	ret

04011a34 <draw_angled_line>:
}

void draw_angled_line(alt_u32 x0, alt_u32 y0, alt_u32 x1, alt_u32 y1, alt_u32 color)
{
 4011a34:	defff604 	addi	sp,sp,-40
 4011a38:	dd000415 	stw	r20,16(sp)
 4011a3c:	dc000015 	stw	r16,0(sp)
 4011a40:	dfc00915 	stw	ra,36(sp)
 4011a44:	df000815 	stw	fp,32(sp)
 4011a48:	ddc00715 	stw	r23,28(sp)
 4011a4c:	dd800615 	stw	r22,24(sp)
 4011a50:	dd400515 	stw	r21,20(sp)
 4011a54:	dcc00315 	stw	r19,12(sp)
 4011a58:	dc800215 	stw	r18,8(sp)
 4011a5c:	dc400115 	stw	r17,4(sp)
	alt_u32 steep = 0;

	// Adjust angles
	if (abs(x0-x1) < abs(y0-y1))
 4011a60:	2185c83a 	sub	r2,r4,r6
	*p1 = *p2;
	*p2 = temp;
}

void draw_angled_line(alt_u32 x0, alt_u32 y0, alt_u32 x1, alt_u32 y1, alt_u32 color)
{
 4011a64:	3029883a 	mov	r20,r6
 4011a68:	dc000a17 	ldw	r16,40(sp)
	alt_u32 steep = 0;

	// Adjust angles
	if (abs(x0-x1) < abs(y0-y1))
 4011a6c:	10006516 	blt	r2,zero,4011c04 <draw_angled_line+0x1d0>
 4011a70:	1007883a 	mov	r3,r2
 4011a74:	29efc83a 	sub	r23,r5,r7
 4011a78:	1839883a 	mov	fp,r3
 4011a7c:	b811883a 	mov	r8,r23
 4011a80:	b8005e16 	blt	r23,zero,4011bfc <draw_angled_line+0x1c8>
 4011a84:	1a002b0e 	bge	r3,r8,4011b34 <draw_angled_line+0x100>
	{
		if (y0 > y1)
 4011a88:	3940512e 	bgeu	r7,r5,4011bd0 <draw_angled_line+0x19c>
 4011a8c:	2005883a 	mov	r2,r4
 4011a90:	2807883a 	mov	r3,r5
 4011a94:	3809883a 	mov	r4,r7
 4011a98:	a00b883a 	mov	r5,r20
 4011a9c:	100f883a 	mov	r7,r2
 4011aa0:	1829883a 	mov	r20,r3
		else
		{
			swap(&x0, &y0);
			swap(&x1, &y1);
		}
		steep = 1;
 4011aa4:	00800044 	movi	r2,1

	const alt_32 dx = x1-x0;
	const alt_32 dy = y1-y0;
	const alt_32 derror = abs(dy)*2;
	alt_32 error = 0;
	alt_32 y = y0;
 4011aa8:	282b883a 	mov	r21,r5
		swap(&y0, &y1);
	}

	const alt_32 dx = x1-x0;
	const alt_32 dy = y1-y0;
	const alt_32 derror = abs(dy)*2;
 4011aac:	e739883a 	add	fp,fp,fp
	alt_32 error = 0;
	alt_32 y = y0;
	for (alt_32 x = x0; x <= x1; ++x)
 4011ab0:	2027883a 	mov	r19,r4
 4011ab4:	29c02d36 	bltu	r5,r7,4011b6c <draw_angled_line+0x138>
 4011ab8:	04bfffc4 	movi	r18,-1
 4011abc:	bde3883a 	add	r17,r23,r23
 4011ac0:	10002d26 	beq	r2,zero,4011b78 <draw_angled_line+0x144>
 4011ac4:	01405004 	movi	r5,320
 4011ac8:	40011140 	call	4001114 <__mulsi3>

		error += derror;
		if (error > dx)
		{
			y += (y1 > y0 ? 1 : -1);
			error -= dx*2;
 4011acc:	0009883a 	mov	r4,zero
	alt_32 error = 0;
	alt_32 y = y0;
	for (alt_32 x = x0; x <= x1; ++x)
	{
		if (steep)
			write_pixel(y, x, color);
 4011ad0:	01420034 	movhi	r5,2048
 4011ad4:	1547883a 	add	r3,r2,r21
 4011ad8:	18c7883a 	add	r3,r3,r3
 4011adc:	18c7883a 	add	r3,r3,r3
 4011ae0:	1947883a 	add	r3,r3,r5
 4011ae4:	1c000035 	stwio	r16,0(r3)
		else
			write_pixel(x, y, color);

		error += derror;
 4011ae8:	2709883a 	add	r4,r4,fp
	const alt_32 dx = x1-x0;
	const alt_32 dy = y1-y0;
	const alt_32 derror = abs(dy)*2;
	alt_32 error = 0;
	alt_32 y = y0;
	for (alt_32 x = x0; x <= x1; ++x)
 4011aec:	9cc00044 	addi	r19,r19,1
			write_pixel(y, x, color);
		else
			write_pixel(x, y, color);

		error += derror;
		if (error > dx)
 4011af0:	b900020e 	bge	r23,r4,4011afc <draw_angled_line+0xc8>
		{
			y += (y1 > y0 ? 1 : -1);
 4011af4:	acab883a 	add	r21,r21,r18
			error -= dx*2;
 4011af8:	2449c83a 	sub	r4,r4,r17
 4011afc:	10805004 	addi	r2,r2,320
	const alt_32 dx = x1-x0;
	const alt_32 dy = y1-y0;
	const alt_32 derror = abs(dy)*2;
	alt_32 error = 0;
	alt_32 y = y0;
	for (alt_32 x = x0; x <= x1; ++x)
 4011b00:	a4fff42e 	bgeu	r20,r19,4011ad4 <__ram_exceptions_end+0xfbf89838>
		{
			y += (y1 > y0 ? 1 : -1);
			error -= dx*2;
		}
	}
}
 4011b04:	dfc00917 	ldw	ra,36(sp)
 4011b08:	df000817 	ldw	fp,32(sp)
 4011b0c:	ddc00717 	ldw	r23,28(sp)
 4011b10:	dd800617 	ldw	r22,24(sp)
 4011b14:	dd400517 	ldw	r21,20(sp)
 4011b18:	dd000417 	ldw	r20,16(sp)
 4011b1c:	dcc00317 	ldw	r19,12(sp)
 4011b20:	dc800217 	ldw	r18,8(sp)
 4011b24:	dc400117 	ldw	r17,4(sp)
 4011b28:	dc000017 	ldw	r16,0(sp)
 4011b2c:	dec00a04 	addi	sp,sp,40
 4011b30:	f800283a 	ret
			swap(&x0, &y0);
			swap(&x1, &y1);
		}
		steep = 1;
	}
	else if (x0 > x1)
 4011b34:	a100212e 	bgeu	r20,r4,4011bbc <draw_angled_line+0x188>
 4011b38:	2813883a 	mov	r9,r5
 4011b3c:	2007883a 	mov	r3,r4
 4011b40:	380b883a 	mov	r5,r7
 4011b44:	a009883a 	mov	r4,r20
 4011b48:	4039883a 	mov	fp,r8
 4011b4c:	102f883a 	mov	r23,r2
 4011b50:	480f883a 	mov	r7,r9
 4011b54:	1829883a 	mov	r20,r3
	*p2 = temp;
}

void draw_angled_line(alt_u32 x0, alt_u32 y0, alt_u32 x1, alt_u32 y1, alt_u32 color)
{
	alt_u32 steep = 0;
 4011b58:	0005883a 	mov	r2,zero

	const alt_32 dx = x1-x0;
	const alt_32 dy = y1-y0;
	const alt_32 derror = abs(dy)*2;
	alt_32 error = 0;
	alt_32 y = y0;
 4011b5c:	282b883a 	mov	r21,r5
		swap(&y0, &y1);
	}

	const alt_32 dx = x1-x0;
	const alt_32 dy = y1-y0;
	const alt_32 derror = abs(dy)*2;
 4011b60:	e739883a 	add	fp,fp,fp
	alt_32 error = 0;
	alt_32 y = y0;
	for (alt_32 x = x0; x <= x1; ++x)
 4011b64:	2027883a 	mov	r19,r4
 4011b68:	29ffd32e 	bgeu	r5,r7,4011ab8 <__ram_exceptions_end+0xfbf8981c>
 4011b6c:	04800044 	movi	r18,1
 4011b70:	bde3883a 	add	r17,r23,r23
 4011b74:	103fd31e 	bne	r2,zero,4011ac4 <__ram_exceptions_end+0xfbf89828>

		error += derror;
		if (error > dx)
		{
			y += (y1 > y0 ? 1 : -1);
			error -= dx*2;
 4011b78:	002d883a 	mov	r22,zero
	for (alt_32 x = x0; x <= x1; ++x)
	{
		if (steep)
			write_pixel(y, x, color);
		else
			write_pixel(x, y, color);
 4011b7c:	01405004 	movi	r5,320
 4011b80:	a809883a 	mov	r4,r21
 4011b84:	40011140 	call	4001114 <__mulsi3>
 4011b88:	14c5883a 	add	r2,r2,r19
 4011b8c:	1085883a 	add	r2,r2,r2
 4011b90:	00c20034 	movhi	r3,2048
 4011b94:	1085883a 	add	r2,r2,r2
 4011b98:	10c5883a 	add	r2,r2,r3
 4011b9c:	14000035 	stwio	r16,0(r2)

		error += derror;
 4011ba0:	b72d883a 	add	r22,r22,fp
	const alt_32 dx = x1-x0;
	const alt_32 dy = y1-y0;
	const alt_32 derror = abs(dy)*2;
	alt_32 error = 0;
	alt_32 y = y0;
	for (alt_32 x = x0; x <= x1; ++x)
 4011ba4:	9cc00044 	addi	r19,r19,1
			write_pixel(y, x, color);
		else
			write_pixel(x, y, color);

		error += derror;
		if (error > dx)
 4011ba8:	bd80020e 	bge	r23,r22,4011bb4 <draw_angled_line+0x180>
		{
			y += (y1 > y0 ? 1 : -1);
 4011bac:	acab883a 	add	r21,r21,r18
			error -= dx*2;
 4011bb0:	b46dc83a 	sub	r22,r22,r17
	const alt_32 dx = x1-x0;
	const alt_32 dy = y1-y0;
	const alt_32 derror = abs(dy)*2;
	alt_32 error = 0;
	alt_32 y = y0;
	for (alt_32 x = x0; x <= x1; ++x)
 4011bb4:	a4fff12e 	bgeu	r20,r19,4011b7c <__ram_exceptions_end+0xfbf898e0>
 4011bb8:	003fd206 	br	4011b04 <__ram_exceptions_end+0xfbf89868>
 4011bbc:	3979c83a 	sub	fp,r7,r5
 4011bc0:	a12fc83a 	sub	r23,r20,r4
 4011bc4:	e03fe40e 	bge	fp,zero,4011b58 <__ram_exceptions_end+0xfbf898bc>
 4011bc8:	0739c83a 	sub	fp,zero,fp
 4011bcc:	003fe206 	br	4011b58 <__ram_exceptions_end+0xfbf898bc>
 4011bd0:	a139c83a 	sub	fp,r20,r4
 4011bd4:	396fc83a 	sub	r23,r7,r5
 4011bd8:	e0000c16 	blt	fp,zero,4011c0c <draw_angled_line+0x1d8>
	alt_u32 steep = 0;

	// Adjust angles
	if (abs(x0-x1) < abs(y0-y1))
	{
		if (y0 > y1)
 4011bdc:	2005883a 	mov	r2,r4
 4011be0:	a007883a 	mov	r3,r20
 4011be4:	2809883a 	mov	r4,r5
 4011be8:	3829883a 	mov	r20,r7
 4011bec:	100b883a 	mov	r5,r2
 4011bf0:	180f883a 	mov	r7,r3
		else
		{
			swap(&x0, &y0);
			swap(&x1, &y1);
		}
		steep = 1;
 4011bf4:	00800044 	movi	r2,1
 4011bf8:	003fd806 	br	4011b5c <__ram_exceptions_end+0xfbf898c0>
void draw_angled_line(alt_u32 x0, alt_u32 y0, alt_u32 x1, alt_u32 y1, alt_u32 color)
{
	alt_u32 steep = 0;

	// Adjust angles
	if (abs(x0-x1) < abs(y0-y1))
 4011bfc:	05d1c83a 	sub	r8,zero,r23
 4011c00:	003fa006 	br	4011a84 <__ram_exceptions_end+0xfbf897e8>
 4011c04:	0087c83a 	sub	r3,zero,r2
 4011c08:	003f9a06 	br	4011a74 <__ram_exceptions_end+0xfbf897d8>
 4011c0c:	0739c83a 	sub	fp,zero,fp
 4011c10:	003ff206 	br	4011bdc <__ram_exceptions_end+0xfbf89940>

04011c14 <safe_write_pixel>:
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4011c14:	00804fc4 	movi	r2,319
 4011c18:	11000236 	bltu	r2,r4,4011c24 <safe_write_pixel+0x10>
 4011c1c:	00803bc4 	movi	r2,239
 4011c20:	1140012e 	bgeu	r2,r5,4011c28 <safe_write_pixel+0x14>
	{
		write_pixel(x, y, color);
	}
}
 4011c24:	f800283a 	ret
	}
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
 4011c28:	defffd04 	addi	sp,sp,-12
 4011c2c:	2805883a 	mov	r2,r5
 4011c30:	dc000015 	stw	r16,0(sp)
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
	{
		write_pixel(x, y, color);
 4011c34:	01405004 	movi	r5,320
 4011c38:	2021883a 	mov	r16,r4
 4011c3c:	1009883a 	mov	r4,r2
	}
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
 4011c40:	dc400115 	stw	r17,4(sp)
 4011c44:	dfc00215 	stw	ra,8(sp)
 4011c48:	3023883a 	mov	r17,r6
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
	{
		write_pixel(x, y, color);
 4011c4c:	40011140 	call	4001114 <__mulsi3>
 4011c50:	1405883a 	add	r2,r2,r16
 4011c54:	1085883a 	add	r2,r2,r2
 4011c58:	00c20034 	movhi	r3,2048
 4011c5c:	1085883a 	add	r2,r2,r2
 4011c60:	10c5883a 	add	r2,r2,r3
 4011c64:	14400035 	stwio	r17,0(r2)
	}
}
 4011c68:	dfc00217 	ldw	ra,8(sp)
 4011c6c:	dc400117 	ldw	r17,4(sp)
 4011c70:	dc000017 	ldw	r16,0(sp)
 4011c74:	dec00304 	addi	sp,sp,12
 4011c78:	f800283a 	ret

04011c7c <draw_circle>:

void draw_circle(alt_32 x0, alt_32 y0, alt_u32 radius, alt_u32 color)
{
 4011c7c:	deffef04 	addi	sp,sp,-68
	// Bresenham's circle algorithm
	alt_32 x = radius-1;
	alt_32 y = 0;
	alt_32 dx = 1;
	alt_32 dy = 1;
	alt_32 err = dx - (radius << 1);
 4011c80:	3187883a 	add	r3,r6,r6
		write_pixel(x, y, color);
	}
}

void draw_circle(alt_32 x0, alt_32 y0, alt_u32 radius, alt_u32 color)
{
 4011c84:	ddc00e15 	stw	r23,56(sp)
 4011c88:	dd400c15 	stw	r21,48(sp)
 4011c8c:	dc000715 	stw	r16,28(sp)
	// Bresenham's circle algorithm
	alt_32 x = radius-1;
	alt_32 y = 0;
	alt_32 dx = 1;
	alt_32 dy = 1;
	alt_32 err = dx - (radius << 1);
 4011c90:	05400044 	movi	r21,1
		write_pixel(x, y, color);
	}
}

void draw_circle(alt_32 x0, alt_32 y0, alt_u32 radius, alt_u32 color)
{
 4011c94:	dfc01015 	stw	ra,64(sp)
 4011c98:	df000f15 	stw	fp,60(sp)
 4011c9c:	dd800d15 	stw	r22,52(sp)
 4011ca0:	dd000b15 	stw	r20,44(sp)
 4011ca4:	dcc00a15 	stw	r19,40(sp)
 4011ca8:	dc800915 	stw	r18,36(sp)
 4011cac:	dc400815 	stw	r17,32(sp)
	// Bresenham's circle algorithm
	alt_32 x = radius-1;
	alt_32 y = 0;
	alt_32 dx = 1;
	alt_32 dy = 1;
	alt_32 err = dx - (radius << 1);
 4011cb0:	d8c00115 	stw	r3,4(sp)
}

void draw_circle(alt_32 x0, alt_32 y0, alt_u32 radius, alt_u32 color)
{
	// Bresenham's circle algorithm
	alt_32 x = radius-1;
 4011cb4:	343fffc4 	addi	r16,r6,-1
	alt_32 y = 0;
	alt_32 dx = 1;
	alt_32 dy = 1;
	alt_32 err = dx - (radius << 1);
 4011cb8:	a8efc83a 	sub	r23,r21,r3
	while (x >= y)
 4011cbc:	80003f16 	blt	r16,zero,4011dbc <draw_circle+0x140>
 4011cc0:	d9c00215 	stw	r7,8(sp)
 4011cc4:	2827883a 	mov	r19,r5
 4011cc8:	2029883a 	mov	r20,r4
 4011ccc:	dd400015 	stw	r21,0(sp)
 4011cd0:	a839883a 	mov	fp,r21
 4011cd4:	0025883a 	mov	r18,zero
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4011cd8:	04404fc4 	movi	r17,319
 4011cdc:	05803bc4 	movi	r22,239
	alt_32 dx = 1;
	alt_32 dy = 1;
	alt_32 err = dx - (radius << 1);
	while (x >= y)
	{
		safe_write_pixel(x0 + x, y0 + y, color);
 4011ce0:	a42b883a 	add	r21,r20,r16
 4011ce4:	9c99883a 	add	r12,r19,r18
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4011ce8:	8d400d36 	bltu	r17,r21,4011d20 <draw_circle+0xa4>
 4011cec:	b3000c36 	bltu	r22,r12,4011d20 <draw_circle+0xa4>
	{
		write_pixel(x, y, color);
 4011cf0:	01405004 	movi	r5,320
 4011cf4:	6009883a 	mov	r4,r12
 4011cf8:	db000515 	stw	r12,20(sp)
 4011cfc:	40011140 	call	4001114 <__mulsi3>
 4011d00:	1545883a 	add	r2,r2,r21
 4011d04:	1085883a 	add	r2,r2,r2
 4011d08:	00c20034 	movhi	r3,2048
 4011d0c:	1085883a 	add	r2,r2,r2
 4011d10:	10c5883a 	add	r2,r2,r3
 4011d14:	d8c00217 	ldw	r3,8(sp)
 4011d18:	10c00035 	stwio	r3,0(r2)
 4011d1c:	db000517 	ldw	r12,20(sp)
	alt_32 dy = 1;
	alt_32 err = dx - (radius << 1);
	while (x >= y)
	{
		safe_write_pixel(x0 + x, y0 + y, color);
		safe_write_pixel(x0 + y, y0 + x, color);
 4011d20:	a493883a 	add	r9,r20,r18
 4011d24:	9c09883a 	add	r4,r19,r16
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4011d28:	8a406636 	bltu	r17,r9,4011ec4 <draw_circle+0x248>
 4011d2c:	20000116 	blt	r4,zero,4011d34 <draw_circle+0xb8>
 4011d30:	b100770e 	bge	r22,r4,4011f10 <draw_circle+0x294>
	alt_32 err = dx - (radius << 1);
	while (x >= y)
	{
		safe_write_pixel(x0 + x, y0 + y, color);
		safe_write_pixel(x0 + y, y0 + x, color);
		safe_write_pixel(x0 - y, y0 + x, color);
 4011d34:	a48dc83a 	sub	r6,r20,r18
		safe_write_pixel(x0 - x, y0 + y, color);
 4011d38:	a40fc83a 	sub	r7,r20,r16
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4011d3c:	89c05f36 	bltu	r17,r7,4011ebc <draw_circle+0x240>
 4011d40:	b3001036 	bltu	r22,r12,4011d84 <draw_circle+0x108>
	{
		write_pixel(x, y, color);
 4011d44:	01405004 	movi	r5,320
 4011d48:	6009883a 	mov	r4,r12
 4011d4c:	d9c00315 	stw	r7,12(sp)
 4011d50:	d9800415 	stw	r6,16(sp)
 4011d54:	da400615 	stw	r9,24(sp)
 4011d58:	40011140 	call	4001114 <__mulsi3>
 4011d5c:	d9c00317 	ldw	r7,12(sp)
 4011d60:	00c20034 	movhi	r3,2048
 4011d64:	11c5883a 	add	r2,r2,r7
 4011d68:	1085883a 	add	r2,r2,r2
 4011d6c:	1085883a 	add	r2,r2,r2
 4011d70:	10c5883a 	add	r2,r2,r3
 4011d74:	d8c00217 	ldw	r3,8(sp)
 4011d78:	10c00035 	stwio	r3,0(r2)
 4011d7c:	d9800417 	ldw	r6,16(sp)
 4011d80:	da400617 	ldw	r9,24(sp)
	{
		safe_write_pixel(x0 + x, y0 + y, color);
		safe_write_pixel(x0 + y, y0 + x, color);
		safe_write_pixel(x0 - y, y0 + x, color);
		safe_write_pixel(x0 - x, y0 + y, color);
		safe_write_pixel(x0 - x, y0 - y, color);
 4011d84:	9c99c83a 	sub	r12,r19,r18
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4011d88:	b300712e 	bgeu	r22,r12,4011f50 <draw_circle+0x2d4>
		safe_write_pixel(x0 + x, y0 + y, color);
		safe_write_pixel(x0 + y, y0 + x, color);
		safe_write_pixel(x0 - y, y0 + x, color);
		safe_write_pixel(x0 - x, y0 + y, color);
		safe_write_pixel(x0 - x, y0 - y, color);
		safe_write_pixel(x0 - y, y0 - x, color);
 4011d8c:	9c09c83a 	sub	r4,r19,r16
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4011d90:	89804136 	bltu	r17,r6,4011e98 <draw_circle+0x21c>
 4011d94:	b100152e 	bgeu	r22,r4,4011dec <draw_circle+0x170>
 4011d98:	8d400136 	bltu	r17,r21,4011da0 <draw_circle+0x124>
 4011d9c:	b3002b2e 	bgeu	r22,r12,4011e4c <draw_circle+0x1d0>
		safe_write_pixel(x0 - x, y0 - y, color);
		safe_write_pixel(x0 - y, y0 - x, color);
		safe_write_pixel(x0 + y, y0 - x, color);
		safe_write_pixel(x0 + x, y0 - y, color);

		if (err <= 0)
 4011da0:	05c0350e 	bge	zero,r23,4011e78 <draw_circle+0x1fc>
		}
		if (err > 0)
		{
			x--;
			dx += 2;
			err += dx - (radius << 1);
 4011da4:	d8c00117 	ldw	r3,4(sp)
			dy += 2;
		}
		if (err > 0)
		{
			x--;
			dx += 2;
 4011da8:	e7000084 	addi	fp,fp,2
			err += dy;
			dy += 2;
		}
		if (err > 0)
		{
			x--;
 4011dac:	843fffc4 	addi	r16,r16,-1
			dx += 2;
			err += dx - (radius << 1);
 4011db0:	e0c5c83a 	sub	r2,fp,r3
 4011db4:	15ef883a 	add	r23,r2,r23
	alt_32 x = radius-1;
	alt_32 y = 0;
	alt_32 dx = 1;
	alt_32 dy = 1;
	alt_32 err = dx - (radius << 1);
	while (x >= y)
 4011db8:	84bfc90e 	bge	r16,r18,4011ce0 <__ram_exceptions_end+0xfbf89a44>
			x--;
			dx += 2;
			err += dx - (radius << 1);
		}
	}
}
 4011dbc:	dfc01017 	ldw	ra,64(sp)
 4011dc0:	df000f17 	ldw	fp,60(sp)
 4011dc4:	ddc00e17 	ldw	r23,56(sp)
 4011dc8:	dd800d17 	ldw	r22,52(sp)
 4011dcc:	dd400c17 	ldw	r21,48(sp)
 4011dd0:	dd000b17 	ldw	r20,44(sp)
 4011dd4:	dcc00a17 	ldw	r19,40(sp)
 4011dd8:	dc800917 	ldw	r18,36(sp)
 4011ddc:	dc400817 	ldw	r17,32(sp)
 4011de0:	dc000717 	ldw	r16,28(sp)
 4011de4:	dec01104 	addi	sp,sp,68
 4011de8:	f800283a 	ret
// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
	{
		write_pixel(x, y, color);
 4011dec:	01405004 	movi	r5,320
 4011df0:	d9800415 	stw	r6,16(sp)
 4011df4:	da400615 	stw	r9,24(sp)
 4011df8:	db000515 	stw	r12,20(sp)
 4011dfc:	40011140 	call	4001114 <__mulsi3>
 4011e00:	d9800417 	ldw	r6,16(sp)
 4011e04:	00c20034 	movhi	r3,2048
 4011e08:	118d883a 	add	r6,r2,r6
 4011e0c:	318d883a 	add	r6,r6,r6
 4011e10:	318d883a 	add	r6,r6,r6
 4011e14:	30cd883a 	add	r6,r6,r3
 4011e18:	d8c00217 	ldw	r3,8(sp)
 4011e1c:	30c00035 	stwio	r3,0(r6)
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4011e20:	da400617 	ldw	r9,24(sp)
 4011e24:	db000517 	ldw	r12,20(sp)
 4011e28:	8a7fdb36 	bltu	r17,r9,4011d98 <__ram_exceptions_end+0xfbf89afc>
	{
		write_pixel(x, y, color);
 4011e2c:	4885883a 	add	r2,r9,r2
 4011e30:	1085883a 	add	r2,r2,r2
 4011e34:	00c20034 	movhi	r3,2048
 4011e38:	1085883a 	add	r2,r2,r2
 4011e3c:	10c5883a 	add	r2,r2,r3
 4011e40:	d8c00217 	ldw	r3,8(sp)
 4011e44:	10c00035 	stwio	r3,0(r2)
 4011e48:	003fd306 	br	4011d98 <__ram_exceptions_end+0xfbf89afc>
 4011e4c:	01405004 	movi	r5,320
 4011e50:	6009883a 	mov	r4,r12
 4011e54:	40011140 	call	4001114 <__mulsi3>
 4011e58:	1545883a 	add	r2,r2,r21
 4011e5c:	1085883a 	add	r2,r2,r2
 4011e60:	00c20034 	movhi	r3,2048
 4011e64:	1085883a 	add	r2,r2,r2
 4011e68:	10c5883a 	add	r2,r2,r3
 4011e6c:	d8c00217 	ldw	r3,8(sp)
 4011e70:	10c00035 	stwio	r3,0(r2)
		safe_write_pixel(x0 - x, y0 - y, color);
		safe_write_pixel(x0 - y, y0 - x, color);
		safe_write_pixel(x0 + y, y0 - x, color);
		safe_write_pixel(x0 + x, y0 - y, color);

		if (err <= 0)
 4011e74:	05ffcb16 	blt	zero,r23,4011da4 <__ram_exceptions_end+0xfbf89b08>
		{
			y++;
			err += dy;
 4011e78:	d8c00017 	ldw	r3,0(sp)
		safe_write_pixel(x0 + y, y0 - x, color);
		safe_write_pixel(x0 + x, y0 - y, color);

		if (err <= 0)
		{
			y++;
 4011e7c:	94800044 	addi	r18,r18,1
			err += dy;
 4011e80:	b8ef883a 	add	r23,r23,r3
			dy += 2;
 4011e84:	18c00084 	addi	r3,r3,2
 4011e88:	d8c00015 	stw	r3,0(sp)
		}
		if (err > 0)
 4011e8c:	05ffc516 	blt	zero,r23,4011da4 <__ram_exceptions_end+0xfbf89b08>
	alt_32 x = radius-1;
	alt_32 y = 0;
	alt_32 dx = 1;
	alt_32 dy = 1;
	alt_32 err = dx - (radius << 1);
	while (x >= y)
 4011e90:	84bf930e 	bge	r16,r18,4011ce0 <__ram_exceptions_end+0xfbf89a44>
 4011e94:	003fc906 	br	4011dbc <__ram_exceptions_end+0xfbf89b20>
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4011e98:	8a7fbf36 	bltu	r17,r9,4011d98 <__ram_exceptions_end+0xfbf89afc>
 4011e9c:	b13fbe36 	bltu	r22,r4,4011d98 <__ram_exceptions_end+0xfbf89afc>
 4011ea0:	01405004 	movi	r5,320
 4011ea4:	da400615 	stw	r9,24(sp)
 4011ea8:	db000515 	stw	r12,20(sp)
 4011eac:	40011140 	call	4001114 <__mulsi3>
 4011eb0:	db000517 	ldw	r12,20(sp)
 4011eb4:	da400617 	ldw	r9,24(sp)
 4011eb8:	003fdc06 	br	4011e2c <__ram_exceptions_end+0xfbf89b90>
	{
		safe_write_pixel(x0 + x, y0 + y, color);
		safe_write_pixel(x0 + y, y0 + x, color);
		safe_write_pixel(x0 - y, y0 + x, color);
		safe_write_pixel(x0 - x, y0 + y, color);
		safe_write_pixel(x0 - x, y0 - y, color);
 4011ebc:	9c99c83a 	sub	r12,r19,r18
 4011ec0:	003fb206 	br	4011d8c <__ram_exceptions_end+0xfbf89af0>
	alt_32 err = dx - (radius << 1);
	while (x >= y)
	{
		safe_write_pixel(x0 + x, y0 + y, color);
		safe_write_pixel(x0 + y, y0 + x, color);
		safe_write_pixel(x0 - y, y0 + x, color);
 4011ec4:	a48dc83a 	sub	r6,r20,r18
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4011ec8:	89bf9b36 	bltu	r17,r6,4011d38 <__ram_exceptions_end+0xfbf89a9c>
 4011ecc:	b13f9a36 	bltu	r22,r4,4011d38 <__ram_exceptions_end+0xfbf89a9c>
 4011ed0:	01405004 	movi	r5,320
 4011ed4:	d9800415 	stw	r6,16(sp)
 4011ed8:	da400615 	stw	r9,24(sp)
 4011edc:	db000515 	stw	r12,20(sp)
 4011ee0:	40011140 	call	4001114 <__mulsi3>
 4011ee4:	db000517 	ldw	r12,20(sp)
 4011ee8:	da400617 	ldw	r9,24(sp)
 4011eec:	d9800417 	ldw	r6,16(sp)
	{
		write_pixel(x, y, color);
 4011ef0:	3085883a 	add	r2,r6,r2
 4011ef4:	1085883a 	add	r2,r2,r2
 4011ef8:	00c20034 	movhi	r3,2048
 4011efc:	1085883a 	add	r2,r2,r2
 4011f00:	10c5883a 	add	r2,r2,r3
 4011f04:	d8c00217 	ldw	r3,8(sp)
 4011f08:	10c00035 	stwio	r3,0(r2)
 4011f0c:	003f8a06 	br	4011d38 <__ram_exceptions_end+0xfbf89a9c>
 4011f10:	01405004 	movi	r5,320
 4011f14:	da400615 	stw	r9,24(sp)
 4011f18:	db000515 	stw	r12,20(sp)
 4011f1c:	40011140 	call	4001114 <__mulsi3>
 4011f20:	da400617 	ldw	r9,24(sp)
 4011f24:	00c20034 	movhi	r3,2048
 4011f28:	4889883a 	add	r4,r9,r2
 4011f2c:	2109883a 	add	r4,r4,r4
 4011f30:	2109883a 	add	r4,r4,r4
 4011f34:	20c9883a 	add	r4,r4,r3
 4011f38:	d8c00217 	ldw	r3,8(sp)
 4011f3c:	20c00035 	stwio	r3,0(r4)
	alt_32 err = dx - (radius << 1);
	while (x >= y)
	{
		safe_write_pixel(x0 + x, y0 + y, color);
		safe_write_pixel(x0 + y, y0 + x, color);
		safe_write_pixel(x0 - y, y0 + x, color);
 4011f40:	a48dc83a 	sub	r6,r20,r18
}

// Only write pixel if both x and y values are within canvas range
void safe_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (x >= 0 && x < CANVAS_WIDTH && y >= 0 && y < CANVAS_HEIGHT)
 4011f44:	db000517 	ldw	r12,20(sp)
 4011f48:	89bfe92e 	bgeu	r17,r6,4011ef0 <__ram_exceptions_end+0xfbf89c54>
 4011f4c:	003f7a06 	br	4011d38 <__ram_exceptions_end+0xfbf89a9c>
	{
		write_pixel(x, y, color);
 4011f50:	01405004 	movi	r5,320
 4011f54:	6009883a 	mov	r4,r12
 4011f58:	d9c00315 	stw	r7,12(sp)
 4011f5c:	d9800415 	stw	r6,16(sp)
 4011f60:	da400615 	stw	r9,24(sp)
 4011f64:	db000515 	stw	r12,20(sp)
 4011f68:	40011140 	call	4001114 <__mulsi3>
 4011f6c:	d9c00317 	ldw	r7,12(sp)
 4011f70:	00c20034 	movhi	r3,2048
 4011f74:	11c5883a 	add	r2,r2,r7
 4011f78:	1085883a 	add	r2,r2,r2
 4011f7c:	1085883a 	add	r2,r2,r2
 4011f80:	10c5883a 	add	r2,r2,r3
 4011f84:	d8c00217 	ldw	r3,8(sp)
 4011f88:	10c00035 	stwio	r3,0(r2)
 4011f8c:	db000517 	ldw	r12,20(sp)
 4011f90:	da400617 	ldw	r9,24(sp)
 4011f94:	d9800417 	ldw	r6,16(sp)
 4011f98:	003f7c06 	br	4011d8c <__ram_exceptions_end+0xfbf89af0>

04011f9c <safey_write_pixel>:
}

// Only write pixel if y value is within canvas height, x is assumed correct
void safey_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (y >= 0 && y < CANVAS_HEIGHT)
 4011f9c:	00803bc4 	movi	r2,239
 4011fa0:	11401336 	bltu	r2,r5,4011ff0 <safey_write_pixel+0x54>
	}
}

// Only write pixel if y value is within canvas height, x is assumed correct
void safey_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
 4011fa4:	defffd04 	addi	sp,sp,-12
 4011fa8:	dc000015 	stw	r16,0(sp)
 4011fac:	2021883a 	mov	r16,r4
 4011fb0:	2809883a 	mov	r4,r5
	if (y >= 0 && y < CANVAS_HEIGHT)
	{
		write_pixel(x, y, color);
 4011fb4:	01405004 	movi	r5,320
	}
}

// Only write pixel if y value is within canvas height, x is assumed correct
void safey_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
 4011fb8:	dc400115 	stw	r17,4(sp)
 4011fbc:	dfc00215 	stw	ra,8(sp)
 4011fc0:	3023883a 	mov	r17,r6
	if (y >= 0 && y < CANVAS_HEIGHT)
	{
		write_pixel(x, y, color);
 4011fc4:	40011140 	call	4001114 <__mulsi3>
 4011fc8:	1405883a 	add	r2,r2,r16
 4011fcc:	1085883a 	add	r2,r2,r2
 4011fd0:	00c20034 	movhi	r3,2048
 4011fd4:	1085883a 	add	r2,r2,r2
 4011fd8:	10c5883a 	add	r2,r2,r3
 4011fdc:	14400035 	stwio	r17,0(r2)
	}
}
 4011fe0:	dfc00217 	ldw	ra,8(sp)
 4011fe4:	dc400117 	ldw	r17,4(sp)
 4011fe8:	dc000017 	ldw	r16,0(sp)
 4011fec:	dec00304 	addi	sp,sp,12
 4011ff0:	f800283a 	ret

04011ff4 <draw_filled_circle>:

void draw_filled_circle(alt_32 x0, alt_32 y0, alt_u32 radius, alt_u32 color)
{
 4011ff4:	deffeb04 	addi	sp,sp,-84
 4011ff8:	df001315 	stw	fp,76(sp)
	alt_32 x = radius;
	alt_32 y = 0;
	alt_32 xChange = 1 - (radius << 1);
 4011ffc:	3185883a 	add	r2,r6,r6
 4012000:	07000044 	movi	fp,1
		write_pixel(x, y, color);
	}
}

void draw_filled_circle(alt_32 x0, alt_32 y0, alt_u32 radius, alt_u32 color)
{
 4012004:	dfc01415 	stw	ra,80(sp)
 4012008:	ddc01215 	stw	r23,72(sp)
 401200c:	dd801115 	stw	r22,68(sp)
 4012010:	dd401015 	stw	r21,64(sp)
 4012014:	dd000f15 	stw	r20,60(sp)
 4012018:	dcc00e15 	stw	r19,56(sp)
 401201c:	dc800d15 	stw	r18,52(sp)
 4012020:	dc400c15 	stw	r17,48(sp)
 4012024:	dc000b15 	stw	r16,44(sp)
	alt_32 x = radius;
	alt_32 y = 0;
	alt_32 xChange = 1 - (radius << 1);
 4012028:	e0b9c83a 	sub	fp,fp,r2
	alt_32 yChange = 0;
	alt_32 radiusError = 0;

	while (x >= y)
 401202c:	30005316 	blt	r6,zero,401217c <draw_filled_circle+0x188>
 4012030:	282b883a 	mov	r21,r5
 4012034:	2013883a 	mov	r9,r4
 4012038:	01405004 	movi	r5,320
 401203c:	a809883a 	mov	r4,r21
 4012040:	302d883a 	mov	r22,r6
 4012044:	3827883a 	mov	r19,r7
 4012048:	da400a15 	stw	r9,40(sp)
 401204c:	40011140 	call	4001114 <__mulsi3>
 4012050:	da400a17 	ldw	r9,40(sp)
 4012054:	1011883a 	mov	r8,r2
 4012058:	1015883a 	mov	r10,r2
 401205c:	a80f883a 	mov	r7,r21
 4012060:	482f883a 	mov	r23,r9
 4012064:	0029883a 	mov	r20,zero
 4012068:	0025883a 	mov	r18,zero
	{
		alt_32 xStart = x0 - x;
		alt_32 xEnd = x0 + x;
		if (xStart < CANVAS_WIDTH)
 401206c:	01804fc4 	movi	r6,319
 4012070:	03003bc4 	movi	r12,239
 4012074:	00c20034 	movhi	r3,2048
	alt_32 yChange = 0;
	alt_32 radiusError = 0;

	while (x >= y)
	{
		alt_32 xStart = x0 - x;
 4012078:	4da1c83a 	sub	r16,r9,r22
 401207c:	9497883a 	add	r11,r18,r18
		alt_32 xEnd = x0 + x;
		if (xStart < CANVAS_WIDTH)
 4012080:	34000816 	blt	r6,r16,40120a4 <draw_filled_circle+0xb0>
		{
			xStart = (xStart > 0 ? xStart : 0);
 4012084:	80007a16 	blt	r16,zero,4012270 <draw_filled_circle+0x27c>
	alt_32 radiusError = 0;

	while (x >= y)
	{
		alt_32 xStart = x0 - x;
		alt_32 xEnd = x0 + x;
 4012088:	4da3883a 	add	r17,r9,r22
		if (xStart < CANVAS_WIDTH)
		{
			xStart = (xStart > 0 ? xStart : 0);
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
 401208c:	3440010e 	bge	r6,r17,4012094 <draw_filled_circle+0xa0>
 4012090:	04404fc4 	movi	r17,319
			for (alt_32 i = xStart; i <= xEnd; i++)
 4012094:	8c000316 	blt	r17,r16,40120a4 <draw_filled_circle+0xb0>
 4012098:	9545883a 	add	r2,r18,r21
 401209c:	6080542e 	bgeu	r12,r2,40121f0 <draw_filled_circle+0x1fc>
 40120a0:	61c04a2e 	bgeu	r12,r7,40121cc <draw_filled_circle+0x1d8>
				safey_write_pixel(i, y0 - y, color);
			}
		}
		xStart = x0 - y;
		xEnd = x0 + y;
		if (xStart < CANVAS_WIDTH)
 40120a4:	35c02816 	blt	r6,r23,4012148 <draw_filled_circle+0x154>
		{
			xStart = (xStart > 0 ? xStart : 0);
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
			for (size_t i = xStart; i <= xEnd; i++)
 40120a8:	b821883a 	mov	r16,r23
 40120ac:	b8007216 	blt	r23,zero,4012278 <draw_filled_circle+0x284>
 40120b0:	4ca3883a 	add	r17,r9,r18
 40120b4:	3440010e 	bge	r6,r17,40120bc <draw_filled_circle+0xc8>
 40120b8:	04404fc4 	movi	r17,319
 40120bc:	8c002236 	bltu	r17,r16,4012148 <draw_filled_circle+0x154>
 40120c0:	ad9f883a 	add	r15,r21,r22
 40120c4:	7809883a 	mov	r4,r15
 40120c8:	01405004 	movi	r5,320
 40120cc:	d8c00915 	stw	r3,36(sp)
 40120d0:	d9800715 	stw	r6,28(sp)
 40120d4:	d9c00515 	stw	r7,20(sp)
 40120d8:	da000315 	stw	r8,12(sp)
 40120dc:	da400a15 	stw	r9,40(sp)
 40120e0:	da800615 	stw	r10,24(sp)
 40120e4:	dac00415 	stw	r11,16(sp)
 40120e8:	db000815 	stw	r12,32(sp)
 40120ec:	dbc00215 	stw	r15,8(sp)
 40120f0:	40011140 	call	4001114 <__mulsi3>
 40120f4:	ad9dc83a 	sub	r14,r21,r22
 40120f8:	7009883a 	mov	r4,r14
 40120fc:	01405004 	movi	r5,320
 4012100:	db800015 	stw	r14,0(sp)
 4012104:	d8800115 	stw	r2,4(sp)
 4012108:	40011140 	call	4001114 <__mulsi3>
 401210c:	db000817 	ldw	r12,32(sp)
 4012110:	dbc00217 	ldw	r15,8(sp)
 4012114:	d8c00917 	ldw	r3,36(sp)
 4012118:	d9800717 	ldw	r6,28(sp)
 401211c:	d9c00517 	ldw	r7,20(sp)
 4012120:	da000317 	ldw	r8,12(sp)
 4012124:	da400a17 	ldw	r9,40(sp)
 4012128:	da800617 	ldw	r10,24(sp)
 401212c:	dac00417 	ldw	r11,16(sp)
 4012130:	db400117 	ldw	r13,4(sp)
 4012134:	db800017 	ldw	r14,0(sp)
 4012138:	63c0372e 	bgeu	r12,r15,4012218 <draw_filled_circle+0x224>
 401213c:	63801b2e 	bgeu	r12,r14,40121ac <draw_filled_circle+0x1b8>
 4012140:	84000044 	addi	r16,r16,1
 4012144:	8c3ffe2e 	bgeu	r17,r16,4012140 <__ram_exceptions_end+0xfbf89ea4>
				safey_write_pixel(i, y0 - x, color);
			}
		}

		y++;
		radiusError += yChange;
 4012148:	a2e9883a 	add	r20,r20,r11
		yChange += 2;
		if (((radiusError << 1) + xChange) > 0)
 401214c:	a505883a 	add	r2,r20,r20
 4012150:	1705883a 	add	r2,r2,fp
				safey_write_pixel(i, y0 + x, color);
				safey_write_pixel(i, y0 - x, color);
			}
		}

		y++;
 4012154:	94800044 	addi	r18,r18,1
		radiusError += yChange;
		yChange += 2;
		if (((radiusError << 1) + xChange) > 0)
 4012158:	0080030e 	bge	zero,r2,4012168 <draw_filled_circle+0x174>
		{
			x--;
			radiusError += xChange;
 401215c:	a729883a 	add	r20,r20,fp
		y++;
		radiusError += yChange;
		yChange += 2;
		if (((radiusError << 1) + xChange) > 0)
		{
			x--;
 4012160:	b5bfffc4 	addi	r22,r22,-1
			radiusError += xChange;
			xChange += 2;
 4012164:	e7000084 	addi	fp,fp,2
 4012168:	bdffffc4 	addi	r23,r23,-1
 401216c:	42005004 	addi	r8,r8,320
 4012170:	39ffffc4 	addi	r7,r7,-1
 4012174:	52bfb004 	addi	r10,r10,-320
	alt_32 y = 0;
	alt_32 xChange = 1 - (radius << 1);
	alt_32 yChange = 0;
	alt_32 radiusError = 0;

	while (x >= y)
 4012178:	b4bfbf0e 	bge	r22,r18,4012078 <__ram_exceptions_end+0xfbf89ddc>
			x--;
			radiusError += xChange;
			xChange += 2;
		}
	}
}
 401217c:	dfc01417 	ldw	ra,80(sp)
 4012180:	df001317 	ldw	fp,76(sp)
 4012184:	ddc01217 	ldw	r23,72(sp)
 4012188:	dd801117 	ldw	r22,68(sp)
 401218c:	dd401017 	ldw	r21,64(sp)
 4012190:	dd000f17 	ldw	r20,60(sp)
 4012194:	dcc00e17 	ldw	r19,56(sp)
 4012198:	dc800d17 	ldw	r18,52(sp)
 401219c:	dc400c17 	ldw	r17,48(sp)
 40121a0:	dc000b17 	ldw	r16,44(sp)
 40121a4:	dec01504 	addi	sp,sp,84
 40121a8:	f800283a 	ret
// Only write pixel if y value is within canvas height, x is assumed correct
void safey_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (y >= 0 && y < CANVAS_HEIGHT)
	{
		write_pixel(x, y, color);
 40121ac:	8089883a 	add	r4,r16,r2
 40121b0:	2109883a 	add	r4,r4,r4
 40121b4:	2109883a 	add	r4,r4,r4
 40121b8:	20c9883a 	add	r4,r4,r3
 40121bc:	24c00035 	stwio	r19,0(r4)
		xEnd = x0 + y;
		if (xStart < CANVAS_WIDTH)
		{
			xStart = (xStart > 0 ? xStart : 0);
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
			for (size_t i = xStart; i <= xEnd; i++)
 40121c0:	84000044 	addi	r16,r16,1
 40121c4:	8c3ff92e 	bgeu	r17,r16,40121ac <__ram_exceptions_end+0xfbf89f10>
 40121c8:	003fdf06 	br	4012148 <__ram_exceptions_end+0xfbf89eac>
 40121cc:	5405883a 	add	r2,r10,r16
 40121d0:	1085883a 	add	r2,r2,r2
 40121d4:	1085883a 	add	r2,r2,r2
 40121d8:	10c5883a 	add	r2,r2,r3
// Only write pixel if y value is within canvas height, x is assumed correct
void safey_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (y >= 0 && y < CANVAS_HEIGHT)
	{
		write_pixel(x, y, color);
 40121dc:	14c00035 	stwio	r19,0(r2)
		alt_32 xEnd = x0 + x;
		if (xStart < CANVAS_WIDTH)
		{
			xStart = (xStart > 0 ? xStart : 0);
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
			for (alt_32 i = xStart; i <= xEnd; i++)
 40121e0:	84000044 	addi	r16,r16,1
 40121e4:	10800104 	addi	r2,r2,4
 40121e8:	8c3ffc0e 	bge	r17,r16,40121dc <__ram_exceptions_end+0xfbf89f40>
 40121ec:	003fad06 	br	40120a4 <__ram_exceptions_end+0xfbf89e08>
 40121f0:	61c0232e 	bgeu	r12,r7,4012280 <draw_filled_circle+0x28c>
 40121f4:	4405883a 	add	r2,r8,r16
 40121f8:	1085883a 	add	r2,r2,r2
 40121fc:	1085883a 	add	r2,r2,r2
 4012200:	10c5883a 	add	r2,r2,r3
// Only write pixel if y value is within canvas height, x is assumed correct
void safey_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (y >= 0 && y < CANVAS_HEIGHT)
	{
		write_pixel(x, y, color);
 4012204:	14c00035 	stwio	r19,0(r2)
		alt_32 xEnd = x0 + x;
		if (xStart < CANVAS_WIDTH)
		{
			xStart = (xStart > 0 ? xStart : 0);
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
			for (alt_32 i = xStart; i <= xEnd; i++)
 4012208:	84000044 	addi	r16,r16,1
 401220c:	10800104 	addi	r2,r2,4
 4012210:	8c3ffc0e 	bge	r17,r16,4012204 <__ram_exceptions_end+0xfbf89f68>
 4012214:	003fa306 	br	40120a4 <__ram_exceptions_end+0xfbf89e08>
 4012218:	6380082e 	bgeu	r12,r14,401223c <draw_filled_circle+0x248>
// Only write pixel if y value is within canvas height, x is assumed correct
void safey_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (y >= 0 && y < CANVAS_HEIGHT)
	{
		write_pixel(x, y, color);
 401221c:	8345883a 	add	r2,r16,r13
 4012220:	1085883a 	add	r2,r2,r2
 4012224:	1085883a 	add	r2,r2,r2
 4012228:	10c5883a 	add	r2,r2,r3
 401222c:	14c00035 	stwio	r19,0(r2)
		xEnd = x0 + y;
		if (xStart < CANVAS_WIDTH)
		{
			xStart = (xStart > 0 ? xStart : 0);
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
			for (size_t i = xStart; i <= xEnd; i++)
 4012230:	84000044 	addi	r16,r16,1
 4012234:	8c3ff92e 	bgeu	r17,r16,401221c <__ram_exceptions_end+0xfbf89f80>
 4012238:	003fc306 	br	4012148 <__ram_exceptions_end+0xfbf89eac>
// Only write pixel if y value is within canvas height, x is assumed correct
void safey_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (y >= 0 && y < CANVAS_HEIGHT)
	{
		write_pixel(x, y, color);
 401223c:	8349883a 	add	r4,r16,r13
 4012240:	2109883a 	add	r4,r4,r4
 4012244:	2109883a 	add	r4,r4,r4
 4012248:	20c9883a 	add	r4,r4,r3
 401224c:	24c00035 	stwio	r19,0(r4)
 4012250:	8089883a 	add	r4,r16,r2
 4012254:	2109883a 	add	r4,r4,r4
 4012258:	2109883a 	add	r4,r4,r4
 401225c:	20c9883a 	add	r4,r4,r3
 4012260:	24c00035 	stwio	r19,0(r4)
		xEnd = x0 + y;
		if (xStart < CANVAS_WIDTH)
		{
			xStart = (xStart > 0 ? xStart : 0);
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
			for (size_t i = xStart; i <= xEnd; i++)
 4012264:	84000044 	addi	r16,r16,1
 4012268:	8c3ff42e 	bgeu	r17,r16,401223c <__ram_exceptions_end+0xfbf89fa0>
 401226c:	003fb606 	br	4012148 <__ram_exceptions_end+0xfbf89eac>
	{
		alt_32 xStart = x0 - x;
		alt_32 xEnd = x0 + x;
		if (xStart < CANVAS_WIDTH)
		{
			xStart = (xStart > 0 ? xStart : 0);
 4012270:	0021883a 	mov	r16,zero
 4012274:	003f8406 	br	4012088 <__ram_exceptions_end+0xfbf89dec>
		xEnd = x0 + y;
		if (xStart < CANVAS_WIDTH)
		{
			xStart = (xStart > 0 ? xStart : 0);
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
			for (size_t i = xStart; i <= xEnd; i++)
 4012278:	0021883a 	mov	r16,zero
 401227c:	003f8c06 	br	40120b0 <__ram_exceptions_end+0xfbf89e14>
 4012280:	441b883a 	add	r13,r8,r16
 4012284:	6b5b883a 	add	r13,r13,r13
 4012288:	6b5b883a 	add	r13,r13,r13
 401228c:	68db883a 	add	r13,r13,r3
 4012290:	017d8004 	movi	r5,-2560
 4012294:	9009883a 	mov	r4,r18
 4012298:	d8c00915 	stw	r3,36(sp)
 401229c:	d9800715 	stw	r6,28(sp)
 40122a0:	d9c00515 	stw	r7,20(sp)
 40122a4:	da000315 	stw	r8,12(sp)
 40122a8:	da400a15 	stw	r9,40(sp)
 40122ac:	da800615 	stw	r10,24(sp)
 40122b0:	dac00415 	stw	r11,16(sp)
 40122b4:	db000815 	stw	r12,32(sp)
 40122b8:	db400115 	stw	r13,4(sp)
 40122bc:	40011140 	call	4001114 <__mulsi3>
 40122c0:	db400117 	ldw	r13,4(sp)
 40122c4:	db000817 	ldw	r12,32(sp)
 40122c8:	dac00417 	ldw	r11,16(sp)
 40122cc:	da800617 	ldw	r10,24(sp)
 40122d0:	da400a17 	ldw	r9,40(sp)
 40122d4:	da000317 	ldw	r8,12(sp)
 40122d8:	d9c00517 	ldw	r7,20(sp)
 40122dc:	d9800717 	ldw	r6,28(sp)
 40122e0:	d8c00917 	ldw	r3,36(sp)
// Only write pixel if y value is within canvas height, x is assumed correct
void safey_write_pixel(alt_32 x, alt_32 y, alt_u32 color)
{
	if (y >= 0 && y < CANVAS_HEIGHT)
	{
		write_pixel(x, y, color);
 40122e4:	6cc00035 	stwio	r19,0(r13)
 40122e8:	6889883a 	add	r4,r13,r2
 40122ec:	24c00035 	stwio	r19,0(r4)
		alt_32 xEnd = x0 + x;
		if (xStart < CANVAS_WIDTH)
		{
			xStart = (xStart > 0 ? xStart : 0);
			xEnd = (xEnd < CANVAS_WIDTH-1 ? xEnd : CANVAS_WIDTH-1);
			for (alt_32 i = xStart; i <= xEnd; i++)
 40122f0:	84000044 	addi	r16,r16,1
 40122f4:	6b400104 	addi	r13,r13,4
 40122f8:	8c3ffa0e 	bge	r17,r16,40122e4 <__ram_exceptions_end+0xfbf8a048>
 40122fc:	003f6906 	br	40120a4 <__ram_exceptions_end+0xfbf89e08>

04012300 <char_print>:
void char_print(alt_32 x0, alt_32 y0, const char tty_char, alt_u32 color, alt_u32 BGcolor)
{
	alt_32 pry = y0;
	// upper half
	const alt_u32 char_half_height = TTY_CHAR_HEIGHT>>1;
	alt_u32 dot = upper_char_line(tty_char - TTY_CHAR_OFFSET);
 4012300:	31bff804 	addi	r6,r6,-32
		char_print(x0 + TTY_CHAR_WIDTH*i, y0, sz_tty[i], color, BGcolor);
	}
}

void char_print(alt_32 x0, alt_32 y0, const char tty_char, alt_u32 color, alt_u32 BGcolor)
{
 4012304:	defff204 	addi	sp,sp,-56
	alt_32 pry = y0;
	// upper half
	const alt_u32 char_half_height = TTY_CHAR_HEIGHT>>1;
	alt_u32 dot = upper_char_line(tty_char - TTY_CHAR_OFFSET);
 4012308:	31803fcc 	andi	r6,r6,255
		char_print(x0 + TTY_CHAR_WIDTH*i, y0, sz_tty[i], color, BGcolor);
	}
}

void char_print(alt_32 x0, alt_32 y0, const char tty_char, alt_u32 color, alt_u32 BGcolor)
{
 401230c:	dc400515 	stw	r17,20(sp)
 4012310:	2023883a 	mov	r17,r4
	alt_32 pry = y0;
	// upper half
	const alt_u32 char_half_height = TTY_CHAR_HEIGHT>>1;
	alt_u32 dot = upper_char_line(tty_char - TTY_CHAR_OFFSET);
 4012314:	3009883a 	mov	r4,r6
 4012318:	d9800015 	stw	r6,0(sp)
		char_print(x0 + TTY_CHAR_WIDTH*i, y0, sz_tty[i], color, BGcolor);
	}
}

void char_print(alt_32 x0, alt_32 y0, const char tty_char, alt_u32 color, alt_u32 BGcolor)
{
 401231c:	dfc00d15 	stw	ra,52(sp)
 4012320:	df000c15 	stw	fp,48(sp)
 4012324:	ddc00b15 	stw	r23,44(sp)
 4012328:	dd800a15 	stw	r22,40(sp)
 401232c:	dd400915 	stw	r21,36(sp)
 4012330:	dd000815 	stw	r20,32(sp)
 4012334:	382b883a 	mov	r21,r7
 4012338:	dcc00715 	stw	r19,28(sp)
 401233c:	dc800615 	stw	r18,24(sp)
 4012340:	2827883a 	mov	r19,r5
 4012344:	dc000415 	stw	r16,16(sp)
 4012348:	dc800e17 	ldw	r18,56(sp)
	alt_32 pry = y0;
	// upper half
	const alt_u32 char_half_height = TTY_CHAR_HEIGHT>>1;
	alt_u32 dot = upper_char_line(tty_char - TTY_CHAR_OFFSET);
 401234c:	401464c0 	call	401464c <upper_char_line>
 4012350:	01405004 	movi	r5,320
 4012354:	9809883a 	mov	r4,r19
 4012358:	1021883a 	mov	r16,r2
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
					write_pixel(prx, pry, dotcolor);
				}
				dot <<= 1;
				++prx;
 401235c:	8d000184 	addi	r20,r17,6
 4012360:	40011140 	call	4001114 <__mulsi3>
 4012364:	a089883a 	add	r4,r20,r2
 4012368:	2109883a 	add	r4,r4,r4
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 401236c:	d9800017 	ldw	r6,0(sp)
 4012370:	1007883a 	mov	r3,r2
 4012374:	2109883a 	add	r4,r4,r4
 4012378:	00820034 	movhi	r2,2048
 401237c:	8a400044 	addi	r9,r17,1
 4012380:	8a000084 	addi	r8,r17,2
 4012384:	89c000c4 	addi	r7,r17,3
 4012388:	8f000104 	addi	fp,r17,4
 401238c:	8dc00144 	addi	r23,r17,5
 4012390:	8d8001c4 	addi	r22,r17,7
 4012394:	2089883a 	add	r4,r4,r2
 4012398:	9b000104 	addi	r12,r19,4
	}
}

void char_print(alt_32 x0, alt_32 y0, const char tty_char, alt_u32 color, alt_u32 BGcolor)
{
	alt_32 pry = y0;
 401239c:	980b883a 	mov	r5,r19
	const alt_u32 char_half_height = TTY_CHAR_HEIGHT>>1;
	alt_u32 dot = upper_char_line(tty_char - TTY_CHAR_OFFSET);
	for (size_t row = 0; row < char_half_height; ++row)
	{
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
 40123a0:	02c03bc4 	movi	r11,239
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 40123a4:	02804fc4 	movi	r10,319
	const alt_u32 char_half_height = TTY_CHAR_HEIGHT>>1;
	alt_u32 dot = upper_char_line(tty_char - TTY_CHAR_OFFSET);
	for (size_t row = 0; row < char_half_height; ++row)
	{
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
 40123a8:	59408e36 	bltu	r11,r5,40125e4 <char_print+0x2e4>
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 40123ac:	54400336 	bltu	r10,r17,40123bc <char_print+0xbc>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 40123b0:	80008e16 	blt	r16,zero,40125ec <char_print+0x2ec>
 40123b4:	9005883a 	mov	r2,r18
					write_pixel(prx, pry, dotcolor);
 40123b8:	20bffa35 	stwio	r2,-24(r4)
				}
				dot <<= 1;
 40123bc:	8421883a 	add	r16,r16,r16
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 40123c0:	52400336 	bltu	r10,r9,40123d0 <char_print+0xd0>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 40123c4:	8000a716 	blt	r16,zero,4012664 <char_print+0x364>
 40123c8:	9005883a 	mov	r2,r18
					write_pixel(prx, pry, dotcolor);
 40123cc:	20bffb35 	stwio	r2,-20(r4)
				}
				dot <<= 1;
 40123d0:	8421883a 	add	r16,r16,r16
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 40123d4:	52000336 	bltu	r10,r8,40123e4 <char_print+0xe4>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 40123d8:	8000a016 	blt	r16,zero,401265c <char_print+0x35c>
 40123dc:	9005883a 	mov	r2,r18
					write_pixel(prx, pry, dotcolor);
 40123e0:	20bffc35 	stwio	r2,-16(r4)
				}
				dot <<= 1;
 40123e4:	8421883a 	add	r16,r16,r16
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 40123e8:	51c00336 	bltu	r10,r7,40123f8 <char_print+0xf8>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 40123ec:	80009916 	blt	r16,zero,4012654 <char_print+0x354>
 40123f0:	9005883a 	mov	r2,r18
					write_pixel(prx, pry, dotcolor);
 40123f4:	20bffd35 	stwio	r2,-12(r4)
				}
				dot <<= 1;
 40123f8:	8421883a 	add	r16,r16,r16
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 40123fc:	57000336 	bltu	r10,fp,401240c <char_print+0x10c>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 4012400:	80009216 	blt	r16,zero,401264c <char_print+0x34c>
 4012404:	9005883a 	mov	r2,r18
					write_pixel(prx, pry, dotcolor);
 4012408:	20bffe35 	stwio	r2,-8(r4)
				}
				dot <<= 1;
 401240c:	8421883a 	add	r16,r16,r16
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 4012410:	55c00336 	bltu	r10,r23,4012420 <char_print+0x120>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 4012414:	80008b16 	blt	r16,zero,4012644 <char_print+0x344>
 4012418:	9005883a 	mov	r2,r18
					write_pixel(prx, pry, dotcolor);
 401241c:	20bfff35 	stwio	r2,-4(r4)
				}
				dot <<= 1;
 4012420:	8421883a 	add	r16,r16,r16
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 4012424:	55000336 	bltu	r10,r20,4012434 <char_print+0x134>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 4012428:	80008416 	blt	r16,zero,401263c <char_print+0x33c>
 401242c:	9005883a 	mov	r2,r18
					write_pixel(prx, pry, dotcolor);
 4012430:	20800035 	stwio	r2,0(r4)
				}
				dot <<= 1;
 4012434:	8421883a 	add	r16,r16,r16
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 4012438:	55800336 	bltu	r10,r22,4012448 <char_print+0x148>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 401243c:	80007d16 	blt	r16,zero,4012634 <char_print+0x334>
 4012440:	9005883a 	mov	r2,r18
					write_pixel(prx, pry, dotcolor);
 4012444:	20800135 	stwio	r2,4(r4)
				}
				dot <<= 1;
 4012448:	8421883a 	add	r16,r16,r16
		}
		else
		{
			dot <<= TTY_CHAR_WIDTH;
		}
		++pry;
 401244c:	29400044 	addi	r5,r5,1
 4012450:	21014004 	addi	r4,r4,1280
{
	alt_32 pry = y0;
	// upper half
	const alt_u32 char_half_height = TTY_CHAR_HEIGHT>>1;
	alt_u32 dot = upper_char_line(tty_char - TTY_CHAR_OFFSET);
	for (size_t row = 0; row < char_half_height; ++row)
 4012454:	2b3fd41e 	bne	r5,r12,40123a8 <__ram_exceptions_end+0xfbf8a10c>
			dot <<= TTY_CHAR_WIDTH;
		}
		++pry;
	}
	// lower half
	dot = lower_char_line(tty_char - TTY_CHAR_OFFSET);
 4012458:	3009883a 	mov	r4,r6
 401245c:	2821883a 	mov	r16,r5
 4012460:	d8c00015 	stw	r3,0(sp)
 4012464:	d9c00115 	stw	r7,4(sp)
 4012468:	da000215 	stw	r8,8(sp)
 401246c:	da400315 	stw	r9,12(sp)
 4012470:	401468c0 	call	401468c <lower_char_line>
 4012474:	d8c00017 	ldw	r3,0(sp)
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 4012478:	d9c00117 	ldw	r7,4(sp)
 401247c:	da000217 	ldw	r8,8(sp)
 4012480:	1c47883a 	add	r3,r3,r17
 4012484:	da400317 	ldw	r9,12(sp)
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
					write_pixel(prx, pry, dotcolor);
 4012488:	03820034 	movhi	r14,2048
 401248c:	03420034 	movhi	r13,2048
 4012490:	03020034 	movhi	r12,2048
 4012494:	02c20034 	movhi	r11,2048
 4012498:	02820034 	movhi	r10,2048
 401249c:	18c7883a 	add	r3,r3,r3
 40124a0:	73850704 	addi	r14,r14,5148
 40124a4:	6b450604 	addi	r13,r13,5144
 40124a8:	63050504 	addi	r12,r12,5140
 40124ac:	5ac50404 	addi	r11,r11,5136
 40124b0:	52850304 	addi	r10,r10,5132
 40124b4:	18c7883a 	add	r3,r3,r3
 40124b8:	9cc00204 	addi	r19,r19,8
	// lower half
	dot = lower_char_line(tty_char - TTY_CHAR_OFFSET);
	for (size_t row = 0; row < char_half_height; ++row)
	{
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
 40124bc:	01403bc4 	movi	r5,239
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 40124c0:	01004fc4 	movi	r4,319
	// lower half
	dot = lower_char_line(tty_char - TTY_CHAR_OFFSET);
	for (size_t row = 0; row < char_half_height; ++row)
	{
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
 40124c4:	2c004536 	bltu	r5,r16,40125dc <char_print+0x2dc>
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 40124c8:	24400636 	bltu	r4,r17,40124e4 <char_print+0x1e4>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 40124cc:	10005716 	blt	r2,zero,401262c <char_print+0x32c>
 40124d0:	903f883a 	mov	ra,r18
					write_pixel(prx, pry, dotcolor);
 40124d4:	01820034 	movhi	r6,2048
 40124d8:	31850004 	addi	r6,r6,5120
 40124dc:	199f883a 	add	r15,r3,r6
 40124e0:	7fc00035 	stwio	ra,0(r15)
				}
				dot <<= 1;
 40124e4:	1085883a 	add	r2,r2,r2
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 40124e8:	22400636 	bltu	r4,r9,4012504 <char_print+0x204>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 40124ec:	10004d16 	blt	r2,zero,4012624 <char_print+0x324>
 40124f0:	903f883a 	mov	ra,r18
					write_pixel(prx, pry, dotcolor);
 40124f4:	01820034 	movhi	r6,2048
 40124f8:	31850104 	addi	r6,r6,5124
 40124fc:	199f883a 	add	r15,r3,r6
 4012500:	7fc00035 	stwio	ra,0(r15)
				}
				dot <<= 1;
 4012504:	1085883a 	add	r2,r2,r2
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 4012508:	22000636 	bltu	r4,r8,4012524 <char_print+0x224>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 401250c:	10004316 	blt	r2,zero,401261c <char_print+0x31c>
 4012510:	903f883a 	mov	ra,r18
					write_pixel(prx, pry, dotcolor);
 4012514:	01820034 	movhi	r6,2048
 4012518:	31850204 	addi	r6,r6,5128
 401251c:	199f883a 	add	r15,r3,r6
 4012520:	7fc00035 	stwio	ra,0(r15)
				}
				dot <<= 1;
 4012524:	1085883a 	add	r2,r2,r2
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 4012528:	21c00436 	bltu	r4,r7,401253c <char_print+0x23c>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 401252c:	10003916 	blt	r2,zero,4012614 <char_print+0x314>
 4012530:	903f883a 	mov	ra,r18
					write_pixel(prx, pry, dotcolor);
 4012534:	1a9f883a 	add	r15,r3,r10
 4012538:	7fc00035 	stwio	ra,0(r15)
				}
				dot <<= 1;
 401253c:	1085883a 	add	r2,r2,r2
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 4012540:	27000436 	bltu	r4,fp,4012554 <char_print+0x254>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 4012544:	10003116 	blt	r2,zero,401260c <char_print+0x30c>
 4012548:	903f883a 	mov	ra,r18
					write_pixel(prx, pry, dotcolor);
 401254c:	1adf883a 	add	r15,r3,r11
 4012550:	7fc00035 	stwio	ra,0(r15)
				}
				dot <<= 1;
 4012554:	1085883a 	add	r2,r2,r2
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 4012558:	25c00436 	bltu	r4,r23,401256c <char_print+0x26c>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 401255c:	10002916 	blt	r2,zero,4012604 <char_print+0x304>
 4012560:	903f883a 	mov	ra,r18
					write_pixel(prx, pry, dotcolor);
 4012564:	1b1f883a 	add	r15,r3,r12
 4012568:	7fc00035 	stwio	ra,0(r15)
				}
				dot <<= 1;
 401256c:	1085883a 	add	r2,r2,r2
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 4012570:	25000436 	bltu	r4,r20,4012584 <char_print+0x284>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 4012574:	10002116 	blt	r2,zero,40125fc <char_print+0x2fc>
 4012578:	903f883a 	mov	ra,r18
					write_pixel(prx, pry, dotcolor);
 401257c:	1b5f883a 	add	r15,r3,r13
 4012580:	7fc00035 	stwio	ra,0(r15)
				}
				dot <<= 1;
 4012584:	1085883a 	add	r2,r2,r2
		alt_32 prx = x0;
		if (pry >= 0 && pry < CANVAS_HEIGHT)
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
 4012588:	25800436 	bltu	r4,r22,401259c <char_print+0x29c>
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 401258c:	10001916 	blt	r2,zero,40125f4 <char_print+0x2f4>
 4012590:	903f883a 	mov	ra,r18
					write_pixel(prx, pry, dotcolor);
 4012594:	1b9f883a 	add	r15,r3,r14
 4012598:	7fc00035 	stwio	ra,0(r15)
				}
				dot <<= 1;
 401259c:	1085883a 	add	r2,r2,r2
		}
		else
		{
			dot <<= TTY_CHAR_WIDTH;
		}
		++pry;
 40125a0:	84000044 	addi	r16,r16,1
 40125a4:	18c14004 	addi	r3,r3,1280
		}
		++pry;
	}
	// lower half
	dot = lower_char_line(tty_char - TTY_CHAR_OFFSET);
	for (size_t row = 0; row < char_half_height; ++row)
 40125a8:	9c3fc61e 	bne	r19,r16,40124c4 <__ram_exceptions_end+0xfbf8a228>
		{
			dot <<= TTY_CHAR_WIDTH;
		}
		++pry;
	}
}
 40125ac:	dfc00d17 	ldw	ra,52(sp)
 40125b0:	df000c17 	ldw	fp,48(sp)
 40125b4:	ddc00b17 	ldw	r23,44(sp)
 40125b8:	dd800a17 	ldw	r22,40(sp)
 40125bc:	dd400917 	ldw	r21,36(sp)
 40125c0:	dd000817 	ldw	r20,32(sp)
 40125c4:	dcc00717 	ldw	r19,28(sp)
 40125c8:	dc800617 	ldw	r18,24(sp)
 40125cc:	dc400517 	ldw	r17,20(sp)
 40125d0:	dc000417 	ldw	r16,16(sp)
 40125d4:	dec00e04 	addi	sp,sp,56
 40125d8:	f800283a 	ret
				++prx;
			}
		}
		else
		{
			dot <<= TTY_CHAR_WIDTH;
 40125dc:	1004923a 	slli	r2,r2,8
 40125e0:	003fef06 	br	40125a0 <__ram_exceptions_end+0xfbf8a304>
				++prx;
			}
		}
		else
		{
			dot <<= TTY_CHAR_WIDTH;
 40125e4:	8020923a 	slli	r16,r16,8
 40125e8:	003f9806 	br	401244c <__ram_exceptions_end+0xfbf8a1b0>
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 40125ec:	a805883a 	mov	r2,r21
 40125f0:	003f7106 	br	40123b8 <__ram_exceptions_end+0xfbf8a11c>
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 40125f4:	a83f883a 	mov	ra,r21
 40125f8:	003fe606 	br	4012594 <__ram_exceptions_end+0xfbf8a2f8>
 40125fc:	a83f883a 	mov	ra,r21
 4012600:	003fde06 	br	401257c <__ram_exceptions_end+0xfbf8a2e0>
 4012604:	a83f883a 	mov	ra,r21
 4012608:	003fd606 	br	4012564 <__ram_exceptions_end+0xfbf8a2c8>
 401260c:	a83f883a 	mov	ra,r21
 4012610:	003fce06 	br	401254c <__ram_exceptions_end+0xfbf8a2b0>
 4012614:	a83f883a 	mov	ra,r21
 4012618:	003fc606 	br	4012534 <__ram_exceptions_end+0xfbf8a298>
 401261c:	a83f883a 	mov	ra,r21
 4012620:	003fbc06 	br	4012514 <__ram_exceptions_end+0xfbf8a278>
 4012624:	a83f883a 	mov	ra,r21
 4012628:	003fb206 	br	40124f4 <__ram_exceptions_end+0xfbf8a258>
 401262c:	a83f883a 	mov	ra,r21
 4012630:	003fa806 	br	40124d4 <__ram_exceptions_end+0xfbf8a238>
		{
			for (size_t column = 0; column < TTY_CHAR_WIDTH; ++column)
			{
				if (prx >= 0 && prx < CANVAS_WIDTH)
				{
					const alt_u32 dotcolor = (0x80000000&dot) ? color : BGcolor;
 4012634:	a805883a 	mov	r2,r21
 4012638:	003f8206 	br	4012444 <__ram_exceptions_end+0xfbf8a1a8>
 401263c:	a805883a 	mov	r2,r21
 4012640:	003f7b06 	br	4012430 <__ram_exceptions_end+0xfbf8a194>
 4012644:	a805883a 	mov	r2,r21
 4012648:	003f7406 	br	401241c <__ram_exceptions_end+0xfbf8a180>
 401264c:	a805883a 	mov	r2,r21
 4012650:	003f6d06 	br	4012408 <__ram_exceptions_end+0xfbf8a16c>
 4012654:	a805883a 	mov	r2,r21
 4012658:	003f6606 	br	40123f4 <__ram_exceptions_end+0xfbf8a158>
 401265c:	a805883a 	mov	r2,r21
 4012660:	003f5f06 	br	40123e0 <__ram_exceptions_end+0xfbf8a144>
 4012664:	a805883a 	mov	r2,r21
 4012668:	003f5806 	br	40123cc <__ram_exceptions_end+0xfbf8a130>

0401266c <tty_print>:
		}
	}
}

void tty_print(alt_32 x0, alt_32 y0, const char* sz_tty, alt_u32 color, alt_u32 BGcolor)
{
 401266c:	defff804 	addi	sp,sp,-32
 4012670:	dc400215 	stw	r17,8(sp)
 4012674:	2023883a 	mov	r17,r4
	const size_t n = strlen(sz_tty);
 4012678:	3009883a 	mov	r4,r6
		}
	}
}

void tty_print(alt_32 x0, alt_32 y0, const char* sz_tty, alt_u32 color, alt_u32 BGcolor)
{
 401267c:	dd400615 	stw	r21,24(sp)
 4012680:	dd000515 	stw	r20,20(sp)
 4012684:	dcc00415 	stw	r19,16(sp)
 4012688:	dc000115 	stw	r16,4(sp)
 401268c:	dfc00715 	stw	ra,28(sp)
 4012690:	dc800315 	stw	r18,12(sp)
 4012694:	3021883a 	mov	r16,r6
 4012698:	2827883a 	mov	r19,r5
 401269c:	3829883a 	mov	r20,r7
	const size_t n = strlen(sz_tty);
 40126a0:	4007d040 	call	4007d04 <strlen>
		}
	}
}

void tty_print(alt_32 x0, alt_32 y0, const char* sz_tty, alt_u32 color, alt_u32 BGcolor)
{
 40126a4:	dd400817 	ldw	r21,32(sp)
	const size_t n = strlen(sz_tty);
	for (size_t i = 0; i < n; ++i)
 40126a8:	10000a26 	beq	r2,zero,40126d4 <tty_print+0x68>
 40126ac:	80a5883a 	add	r18,r16,r2
	{
		char_print(x0 + TTY_CHAR_WIDTH*i, y0, sz_tty[i], color, BGcolor);
 40126b0:	81800007 	ldb	r6,0(r16)
 40126b4:	8809883a 	mov	r4,r17
 40126b8:	dd400015 	stw	r21,0(sp)
 40126bc:	a00f883a 	mov	r7,r20
 40126c0:	980b883a 	mov	r5,r19
 40126c4:	84000044 	addi	r16,r16,1
 40126c8:	40123000 	call	4012300 <char_print>
 40126cc:	8c400204 	addi	r17,r17,8
}

void tty_print(alt_32 x0, alt_32 y0, const char* sz_tty, alt_u32 color, alt_u32 BGcolor)
{
	const size_t n = strlen(sz_tty);
	for (size_t i = 0; i < n; ++i)
 40126d0:	84bff71e 	bne	r16,r18,40126b0 <__ram_exceptions_end+0xfbf8a414>
	{
		char_print(x0 + TTY_CHAR_WIDTH*i, y0, sz_tty[i], color, BGcolor);
	}
}
 40126d4:	dfc00717 	ldw	ra,28(sp)
 40126d8:	dd400617 	ldw	r21,24(sp)
 40126dc:	dd000517 	ldw	r20,20(sp)
 40126e0:	dcc00417 	ldw	r19,16(sp)
 40126e4:	dc800317 	ldw	r18,12(sp)
 40126e8:	dc400217 	ldw	r17,8(sp)
 40126ec:	dc000117 	ldw	r16,4(sp)
 40126f0:	dec00804 	addi	sp,sp,32
 40126f4:	f800283a 	ret

040126f8 <int_print>:
		++pry;
	}
}

void int_print(alt_32 x0, alt_32 y0, int data, alt_u32 data_l, alt_u32 color, alt_u32 BGcolor)
{
 40126f8:	defff504 	addi	sp,sp,-44
 40126fc:	ddc00815 	stw	r23,32(sp)
 4012700:	ddc00c17 	ldw	r23,48(sp)
 4012704:	df000915 	stw	fp,36(sp)
 4012708:	dd400615 	stw	r21,24(sp)
 401270c:	dcc00415 	stw	r19,16(sp)
 4012710:	dc000115 	stw	r16,4(sp)
 4012714:	dfc00a15 	stw	ra,40(sp)
 4012718:	dd800715 	stw	r22,28(sp)
 401271c:	dd000515 	stw	r20,20(sp)
 4012720:	dc800315 	stw	r18,12(sp)
 4012724:	dc400215 	stw	r17,8(sp)
	if (data < 0)
	{
		char_print(x0, y0, '-', color, BGcolor);
 4012728:	ddc00015 	stw	r23,0(sp)
		++pry;
	}
}

void int_print(alt_32 x0, alt_32 y0, int data, alt_u32 data_l, alt_u32 color, alt_u32 BGcolor)
{
 401272c:	382b883a 	mov	r21,r7
 4012730:	3021883a 	mov	r16,r6
 4012734:	2027883a 	mov	r19,r4
 4012738:	2839883a 	mov	fp,r5
	if (data < 0)
	{
		char_print(x0, y0, '-', color, BGcolor);
 401273c:	d9c00b17 	ldw	r7,44(sp)
	}
}

void int_print(alt_32 x0, alt_32 y0, int data, alt_u32 data_l, alt_u32 color, alt_u32 BGcolor)
{
	if (data < 0)
 4012740:	30003b16 	blt	r6,zero,4012830 <int_print+0x138>
		char_print(x0, y0, '-', color, BGcolor);
		data = -data;
	}
	else
	{
		char_print(x0, y0, '+', color, BGcolor);
 4012744:	01800ac4 	movi	r6,43
 4012748:	40123000 	call	4012300 <char_print>
	}

	alt_u32 x = x0 + (TTY_CHAR_WIDTH * data_l);
 401274c:	a82290fa 	slli	r17,r21,3
	for (alt_u32 i = 0; i < data_l; ++i)
 4012750:	0025883a 	mov	r18,zero
	else
	{
		char_print(x0, y0, '+', color, BGcolor);
	}

	alt_u32 x = x0 + (TTY_CHAR_WIDTH * data_l);
 4012754:	8ce3883a 	add	r17,r17,r19
	for (alt_u32 i = 0; i < data_l; ++i)
 4012758:	a8002926 	beq	r21,zero,4012800 <int_print+0x108>
	{
		char_print(x, y0, (data % 10) + '0', color, BGcolor);
 401275c:	05010074 	movhi	r20,1025
 4012760:	a51ad604 	addi	r20,r20,27480
 4012764:	04c003c4 	movi	r19,15
 4012768:	00001606 	br	40127c4 <int_print+0xcc>
 401276c:	11000003 	ldbu	r4,0(r2)
 4012770:	01400284 	movi	r5,10
 4012774:	40011140 	call	4001114 <__mulsi3>
 4012778:	8085c83a 	sub	r2,r16,r2
 401277c:	d9c00b17 	ldw	r7,44(sp)
 4012780:	11800c04 	addi	r6,r2,48
 4012784:	8809883a 	mov	r4,r17
 4012788:	e00b883a 	mov	r5,fp
 401278c:	31803fcc 	andi	r6,r6,255
 4012790:	ddc00015 	stw	r23,0(sp)
 4012794:	40123000 	call	4012300 <char_print>
		data /= 10;
 4012798:	8004913a 	slli	r2,r16,4
 401279c:	01400284 	movi	r5,10
 40127a0:	8009883a 	mov	r4,r16
 40127a4:	1144b03a 	or	r2,r2,r5
 40127a8:	1505883a 	add	r2,r2,r20
 40127ac:	9d800f36 	bltu	r19,r22,40127ec <int_print+0xf4>
 40127b0:	10800003 	ldbu	r2,0(r2)
	{
		char_print(x0, y0, '+', color, BGcolor);
	}

	alt_u32 x = x0 + (TTY_CHAR_WIDTH * data_l);
	for (alt_u32 i = 0; i < data_l; ++i)
 40127b4:	94800044 	addi	r18,r18,1
	{
		char_print(x, y0, (data % 10) + '0', color, BGcolor);
		data /= 10;
		x -= TTY_CHAR_WIDTH;
 40127b8:	8c7ffe04 	addi	r17,r17,-8

	alt_u32 x = x0 + (TTY_CHAR_WIDTH * data_l);
	for (alt_u32 i = 0; i < data_l; ++i)
	{
		char_print(x, y0, (data % 10) + '0', color, BGcolor);
		data /= 10;
 40127bc:	1021883a 	mov	r16,r2
	{
		char_print(x0, y0, '+', color, BGcolor);
	}

	alt_u32 x = x0 + (TTY_CHAR_WIDTH * data_l);
	for (alt_u32 i = 0; i < data_l; ++i)
 40127c0:	ac800f26 	beq	r21,r18,4012800 <int_print+0x108>
	{
		char_print(x, y0, (data % 10) + '0', color, BGcolor);
 40127c4:	8004913a 	slli	r2,r16,4
 40127c8:	85800294 	ori	r22,r16,10
 40127cc:	8009883a 	mov	r4,r16
 40127d0:	10800294 	ori	r2,r2,10
 40127d4:	1505883a 	add	r2,r2,r20
 40127d8:	01400284 	movi	r5,10
 40127dc:	9dbfe32e 	bgeu	r19,r22,401276c <__ram_exceptions_end+0xfbf8a4d0>
 40127e0:	4000f600 	call	4000f60 <__divsi3>
 40127e4:	1009883a 	mov	r4,r2
 40127e8:	003fe106 	br	4012770 <__ram_exceptions_end+0xfbf8a4d4>
		data /= 10;
 40127ec:	4000f600 	call	4000f60 <__divsi3>
	{
		char_print(x0, y0, '+', color, BGcolor);
	}

	alt_u32 x = x0 + (TTY_CHAR_WIDTH * data_l);
	for (alt_u32 i = 0; i < data_l; ++i)
 40127f0:	94800044 	addi	r18,r18,1
	{
		char_print(x, y0, (data % 10) + '0', color, BGcolor);
		data /= 10;
 40127f4:	1021883a 	mov	r16,r2
		x -= TTY_CHAR_WIDTH;
 40127f8:	8c7ffe04 	addi	r17,r17,-8
	{
		char_print(x0, y0, '+', color, BGcolor);
	}

	alt_u32 x = x0 + (TTY_CHAR_WIDTH * data_l);
	for (alt_u32 i = 0; i < data_l; ++i)
 40127fc:	acbff11e 	bne	r21,r18,40127c4 <__ram_exceptions_end+0xfbf8a528>
	{
		char_print(x, y0, (data % 10) + '0', color, BGcolor);
		data /= 10;
		x -= TTY_CHAR_WIDTH;
	}
}
 4012800:	dfc00a17 	ldw	ra,40(sp)
 4012804:	df000917 	ldw	fp,36(sp)
 4012808:	ddc00817 	ldw	r23,32(sp)
 401280c:	dd800717 	ldw	r22,28(sp)
 4012810:	dd400617 	ldw	r21,24(sp)
 4012814:	dd000517 	ldw	r20,20(sp)
 4012818:	dcc00417 	ldw	r19,16(sp)
 401281c:	dc800317 	ldw	r18,12(sp)
 4012820:	dc400217 	ldw	r17,8(sp)
 4012824:	dc000117 	ldw	r16,4(sp)
 4012828:	dec00b04 	addi	sp,sp,44
 401282c:	f800283a 	ret

void int_print(alt_32 x0, alt_32 y0, int data, alt_u32 data_l, alt_u32 color, alt_u32 BGcolor)
{
	if (data < 0)
	{
		char_print(x0, y0, '-', color, BGcolor);
 4012830:	01800b44 	movi	r6,45
 4012834:	40123000 	call	4012300 <char_print>
		data = -data;
 4012838:	0421c83a 	sub	r16,zero,r16
 401283c:	003fc306 	br	401274c <__ram_exceptions_end+0xfbf8a4b0>

04012840 <vga_init>:
		x -= TTY_CHAR_WIDTH;
	}
}

void vga_init(void)
{
 4012840:	defffb04 	addi	sp,sp,-20
 4012844:	dc400215 	stw	r17,8(sp)
 4012848:	04410074 	movhi	r17,1025
 401284c:	dc800315 	stw	r18,12(sp)
 4012850:	dc000115 	stw	r16,4(sp)
 4012854:	dfc00415 	stw	ra,16(sp)
 4012858:	8c571804 	addi	r17,r17,23648
 401285c:	04002084 	movi	r16,130
}

void tty_print(alt_32 x0, alt_32 y0, const char* sz_tty, alt_u32 color, alt_u32 BGcolor)
{
	const size_t n = strlen(sz_tty);
	for (size_t i = 0; i < n; ++i)
 4012860:	04803284 	movi	r18,202
	{
		char_print(x0 + TTY_CHAR_WIDTH*i, y0, sz_tty[i], color, BGcolor);
 4012864:	89800007 	ldb	r6,0(r17)
 4012868:	8009883a 	mov	r4,r16
 401286c:	d8000015 	stw	zero,0(sp)
 4012870:	01c00104 	movi	r7,4
 4012874:	01400504 	movi	r5,20
 4012878:	84000204 	addi	r16,r16,8
 401287c:	40123000 	call	4012300 <char_print>
 4012880:	8c400044 	addi	r17,r17,1
}

void tty_print(alt_32 x0, alt_32 y0, const char* sz_tty, alt_u32 color, alt_u32 BGcolor)
{
	const size_t n = strlen(sz_tty);
	for (size_t i = 0; i < n; ++i)
 4012884:	84bff71e 	bne	r16,r18,4012864 <__ram_exceptions_end+0xfbf8a5c8>
 4012888:	04410074 	movhi	r17,1025
 401288c:	8c571b04 	addi	r17,r17,23660
 4012890:	04000644 	movi	r16,25
 4012894:	04803a44 	movi	r18,233
	{
		char_print(x0 + TTY_CHAR_WIDTH*i, y0, sz_tty[i], color, BGcolor);
 4012898:	89800007 	ldb	r6,0(r17)
 401289c:	8009883a 	mov	r4,r16
 40128a0:	d8000015 	stw	zero,0(sp)
 40128a4:	01c001c4 	movi	r7,7
 40128a8:	01400f04 	movi	r5,60
 40128ac:	84000204 	addi	r16,r16,8
 40128b0:	40123000 	call	4012300 <char_print>
 40128b4:	8c400044 	addi	r17,r17,1
}

void tty_print(alt_32 x0, alt_32 y0, const char* sz_tty, alt_u32 color, alt_u32 BGcolor)
{
	const size_t n = strlen(sz_tty);
	for (size_t i = 0; i < n; ++i)
 40128b8:	84bff71e 	bne	r16,r18,4012898 <__ram_exceptions_end+0xfbf8a5fc>
 40128bc:	04410074 	movhi	r17,1025
 40128c0:	8c572204 	addi	r17,r17,23688
 40128c4:	04000644 	movi	r16,25
 40128c8:	04804244 	movi	r18,265
	{
		char_print(x0 + TTY_CHAR_WIDTH*i, y0, sz_tty[i], color, BGcolor);
 40128cc:	89800007 	ldb	r6,0(r17)
 40128d0:	8009883a 	mov	r4,r16
 40128d4:	d8000015 	stw	zero,0(sp)
 40128d8:	01c001c4 	movi	r7,7
 40128dc:	01401404 	movi	r5,80
 40128e0:	84000204 	addi	r16,r16,8
 40128e4:	40123000 	call	4012300 <char_print>
 40128e8:	8c400044 	addi	r17,r17,1
}

void tty_print(alt_32 x0, alt_32 y0, const char* sz_tty, alt_u32 color, alt_u32 BGcolor)
{
	const size_t n = strlen(sz_tty);
	for (size_t i = 0; i < n; ++i)
 40128ec:	84bff71e 	bne	r16,r18,40128cc <__ram_exceptions_end+0xfbf8a630>
 40128f0:	04410074 	movhi	r17,1025
 40128f4:	8c572a04 	addi	r17,r17,23720
 40128f8:	04003204 	movi	r16,200
 40128fc:	04804e04 	movi	r18,312
	{
		char_print(x0 + TTY_CHAR_WIDTH*i, y0, sz_tty[i], color, BGcolor);
 4012900:	89800007 	ldb	r6,0(r17)
 4012904:	8009883a 	mov	r4,r16
 4012908:	d8000015 	stw	zero,0(sp)
 401290c:	01c001c4 	movi	r7,7
 4012910:	01403704 	movi	r5,220
 4012914:	84000204 	addi	r16,r16,8
 4012918:	40123000 	call	4012300 <char_print>
 401291c:	8c400044 	addi	r17,r17,1
}

void tty_print(alt_32 x0, alt_32 y0, const char* sz_tty, alt_u32 color, alt_u32 BGcolor)
{
	const size_t n = strlen(sz_tty);
	for (size_t i = 0; i < n; ++i)
 4012920:	84bff71e 	bne	r16,r18,4012900 <__ram_exceptions_end+0xfbf8a664>
	//prints welcome screen
	tty_print(130, 20, "TEIS 2020", Col_Red, Col_Black);
	tty_print(25, 60, "Greenhouse watering system", Col_White, Col_Black);
	tty_print(25, 80, "Press Button0 to start program", Col_White, Col_Black);
	tty_print(200, 220, "Dominik Socher", Col_White, Col_Black);
	draw_filled_circle(80,180,40,Col_Blue);
 4012924:	01c00044 	movi	r7,1
 4012928:	01800a04 	movi	r6,40
 401292c:	01402d04 	movi	r5,180
 4012930:	01001404 	movi	r4,80
}
 4012934:	dfc00417 	ldw	ra,16(sp)
 4012938:	dc800317 	ldw	r18,12(sp)
 401293c:	dc400217 	ldw	r17,8(sp)
 4012940:	dc000117 	ldw	r16,4(sp)
 4012944:	dec00504 	addi	sp,sp,20
	//prints welcome screen
	tty_print(130, 20, "TEIS 2020", Col_Red, Col_Black);
	tty_print(25, 60, "Greenhouse watering system", Col_White, Col_Black);
	tty_print(25, 80, "Press Button0 to start program", Col_White, Col_Black);
	tty_print(200, 220, "Dominik Socher", Col_White, Col_Black);
	draw_filled_circle(80,180,40,Col_Blue);
 4012948:	4011ff41 	jmpi	4011ff4 <draw_filled_circle>

0401294c <key_down_up>:
}

alt_u8 key_down_up(alt_u8 input)
{
 401294c:	defffe04 	addi	sp,sp,-8
 4012950:	dc000015 	stw	r16,0(sp)
	alt_u8 read = 0;
	alt_u8 toggle = 0;
	arduino_pin_mode(input,0);
 4012954:	24003fcc 	andi	r16,r4,255
 4012958:	000b883a 	mov	r5,zero
 401295c:	8009883a 	mov	r4,r16
	tty_print(200, 220, "Dominik Socher", Col_White, Col_Black);
	draw_filled_circle(80,180,40,Col_Blue);
}

alt_u8 key_down_up(alt_u8 input)
{
 4012960:	dfc00115 	stw	ra,4(sp)
	alt_u8 read = 0;
	alt_u8 toggle = 0;
	arduino_pin_mode(input,0);
 4012964:	400e8b00 	call	400e8b0 <arduino_pin_mode>
    if( arduino_digital_read(input))
 4012968:	8009883a 	mov	r4,r16
 401296c:	400e9b00 	call	400e9b0 <arduino_digital_read>
    {
    	toggle = 1;
    }
    else toggle = 0;

	return toggle;
 4012970:	10803fcc 	andi	r2,r2,255
 4012974:	1004c03a 	cmpne	r2,r2,zero
}
 4012978:	dfc00117 	ldw	ra,4(sp)
 401297c:	dc000017 	ldw	r16,0(sp)
 4012980:	dec00204 	addi	sp,sp,8
 4012984:	f800283a 	ret

04012988 <init_Sierra_interrupt>:
/*
 *  Register Sierra HW IRQ with NiosII ISR (HW_CTX_SWTICH in csw.S)
 */
/* #ifdef SIERRA_RTOS_BASE */
static void init_Sierra_interrupt()
{
 4012988:	defffe04 	addi	sp,sp,-8
 401298c:	dfc00115 	stw	ra,4(sp)
 4012990:	df000015 	stw	fp,0(sp)
 4012994:	d839883a 	mov	fp,sp
 // int ret=0xffffffff;
  if (alt_irq_register( SIERRA_RTOS_IRQ, NULL, HW_CTX_SWITCH )) printf("error registration Sierra irq");
 4012998:	01810074 	movhi	r6,1025
 401299c:	3191b304 	addi	r6,r6,18124
 40129a0:	000b883a 	mov	r5,zero
 40129a4:	0009883a 	mov	r4,zero
 40129a8:	4013fbc0 	call	4013fbc <alt_irq_register>
 40129ac:	10000326 	beq	r2,zero,40129bc <init_Sierra_interrupt+0x34>
 40129b0:	01010074 	movhi	r4,1025
 40129b4:	21172e04 	addi	r4,r4,23736
 40129b8:	400116c0 	call	400116c <printf>
 
}
 40129bc:	0001883a 	nop
 40129c0:	e037883a 	mov	sp,fp
 40129c4:	dfc00117 	ldw	ra,4(sp)
 40129c8:	df000017 	ldw	fp,0(sp)
 40129cc:	dec00204 	addi	sp,sp,8
 40129d0:	f800283a 	ret

040129d4 <sierra_SW_driver_version>:
  Arguments   : none

  Return      : visions number
-----------------------------------------------------------------------------*/
unsigned int sierra_SW_driver_version(void)
{
 40129d4:	defffe04 	addi	sp,sp,-8
 40129d8:	df000115 	stw	fp,4(sp)
 40129dc:	df000104 	addi	fp,sp,4
  unsigned int svar = 0;
 40129e0:	e03fff15 	stw	zero,-4(fp)
  svar = C_Sierra_SW_driver_version;
 40129e4:	008000b4 	movhi	r2,2
 40129e8:	10a1f6c4 	addi	r2,r2,-30757
 40129ec:	e0bfff15 	stw	r2,-4(fp)
return svar;
 40129f0:	e0bfff17 	ldw	r2,-4(fp)
  }
 40129f4:	e037883a 	mov	sp,fp
 40129f8:	df000017 	ldw	fp,0(sp)
 40129fc:	dec00104 	addi	sp,sp,4
 4012a00:	f800283a 	ret

04012a04 <sierra_HW_version>:
  Arguments   : none

  Return      : visions number
-----------------------------------------------------------------------------*/
unsigned int sierra_HW_version(void)
{
 4012a04:	defffe04 	addi	sp,sp,-8
 4012a08:	df000115 	stw	fp,4(sp)
 4012a0c:	df000104 	addi	fp,sp,4
  unsigned int svar = 0;
 4012a10:	e03fff15 	stw	zero,-4(fp)
  svar = M_Sierra_HW_Version_reg;
 4012a14:	00820274 	movhi	r2,2057
 4012a18:	10840004 	addi	r2,r2,4096
 4012a1c:	10800037 	ldwio	r2,0(r2)
 4012a20:	e0bfff15 	stw	r2,-4(fp)
return svar;
 4012a24:	e0bfff17 	ldw	r2,-4(fp)
  }
 4012a28:	e037883a 	mov	sp,fp
 4012a2c:	df000017 	ldw	fp,0(sp)
 4012a30:	dec00104 	addi	sp,sp,4
 4012a34:	f800283a 	ret

04012a38 <SierraTime_base_reg>:
  Arguments   : none

  Return      : none
-----------------------------------------------------------------------------*/
unsigned int SierraTime_base_reg(void)
{
 4012a38:	defffe04 	addi	sp,sp,-8
 4012a3c:	df000115 	stw	fp,4(sp)
 4012a40:	df000104 	addi	fp,sp,4
  unsigned int svar = 0;
 4012a44:	e03fff15 	stw	zero,-4(fp)
  svar = M_RD_SierraTime_base_reg;
 4012a48:	00820274 	movhi	r2,2057
 4012a4c:	10840404 	addi	r2,r2,4112
 4012a50:	10800037 	ldwio	r2,0(r2)
 4012a54:	e0bfff15 	stw	r2,-4(fp)
return svar;
 4012a58:	e0bfff17 	ldw	r2,-4(fp)
}
 4012a5c:	e037883a 	mov	sp,fp
 4012a60:	df000017 	ldw	fp,0(sp)
 4012a64:	dec00104 	addi	sp,sp,4
 4012a68:	f800283a 	ret

04012a6c <set_timebase>:
              : Wanted tick time : 10us
              : Formula gives    : 10us x 100MHz / 1000 => 1(dec) or 1(hex)
              : --> set_timebase(0x1);
-----------------------------------------------------------------------------*/
void set_timebase (unsigned int hex)
{
 4012a6c:	defffe04 	addi	sp,sp,-8
 4012a70:	df000115 	stw	fp,4(sp)
 4012a74:	df000104 	addi	fp,sp,4
 4012a78:	e13fff15 	stw	r4,-4(fp)
M_IOWR_SierraTime_base_reg(hex);
 4012a7c:	e0ffff17 	ldw	r3,-4(fp)
 4012a80:	00820274 	movhi	r2,2057
 4012a84:	10840404 	addi	r2,r2,4112
 4012a88:	10c00035 	stwio	r3,0(r2)
}
 4012a8c:	0001883a 	nop
 4012a90:	e037883a 	mov	sp,fp
 4012a94:	df000017 	ldw	fp,0(sp)
 4012a98:	dec00104 	addi	sp,sp,4
 4012a9c:	f800283a 	ret

04012aa0 <Sierra_Initiation_HW_and_SW>:
  Arguments   : none
  Return      : none

-----------------------------------------------------------------------------*/
void Sierra_Initiation_HW_and_SW(void)
{
 4012aa0:	defffc04 	addi	sp,sp,-16
 4012aa4:	dfc00315 	stw	ra,12(sp)
 4012aa8:	df000215 	stw	fp,8(sp)
 4012aac:	dc000115 	stw	r16,4(sp)
 4012ab0:	df000204 	addi	fp,sp,8
  int i;
  //SW reset of HW Sierran
  M_WD_SW_RESET_REGISTER(0x15);
 4012ab4:	00c00544 	movi	r3,21
 4012ab8:	00820274 	movhi	r2,2057
 4012abc:	10841804 	addi	r2,r2,4192
 4012ac0:	10c00035 	stwio	r3,0(r2)
  M_WD_SW_RESET_REGISTER(0x00);
 4012ac4:	0007883a 	mov	r3,zero
 4012ac8:	00820274 	movhi	r2,2057
 4012acc:	10841804 	addi	r2,r2,4192
 4012ad0:	10c00035 	stwio	r3,0(r2)
  
 /*Initialize TCBs*/
  for (i = 0; i < N_TASKS; TCB_LIST[i++].taskID = 0xff);
 4012ad4:	e03ffe15 	stw	zero,-8(fp)
 4012ad8:	00000b06 	br	4012b08 <Sierra_Initiation_HW_and_SW+0x68>
 4012adc:	e0bffe17 	ldw	r2,-8(fp)
 4012ae0:	10c00044 	addi	r3,r2,1
 4012ae4:	e0fffe15 	stw	r3,-8(fp)
 4012ae8:	040100b4 	movhi	r16,1026
 4012aec:	84245004 	addi	r16,r16,-28352
 4012af0:	01402304 	movi	r5,140
 4012af4:	1009883a 	mov	r4,r2
 4012af8:	40011140 	call	4001114 <__mulsi3>
 4012afc:	8085883a 	add	r2,r16,r2
 4012b00:	00c03fc4 	movi	r3,255
 4012b04:	10c00015 	stw	r3,0(r2)
 4012b08:	e0bffe17 	ldw	r2,-8(fp)
 4012b0c:	10800210 	cmplti	r2,r2,8
 4012b10:	103ff21e 	bne	r2,zero,4012adc <__ram_exceptions_end+0xfbf8a840>
  current_tcb=NULL;
 4012b14:	d0235115 	stw	zero,-29372(gp)
  
  /* Initiate Sierra hw irq for NiosII*/
   init_Sierra_interrupt();
 4012b18:	40129880 	call	4012988 <init_Sierra_interrupt>
#ifdef DEF_LOGGING_PRINT
	printf("\n Logging print function is active and allocate/start the timer\n");
	TIMER_RESET();
	TIMER_START();
#else
	printf("\n Logging print function NOT active and timer free\n");
 4012b1c:	01010074 	movhi	r4,1025
 4012b20:	21173604 	addi	r4,r4,23768
 4012b24:	4014be40 	call	4014be4 <puts>
#endif
}
 4012b28:	0001883a 	nop
 4012b2c:	e6ffff04 	addi	sp,fp,-4
 4012b30:	dfc00217 	ldw	ra,8(sp)
 4012b34:	df000117 	ldw	fp,4(sp)
 4012b38:	dc000017 	ldw	r16,0(sp)
 4012b3c:	dec00304 	addi	sp,sp,12
 4012b40:	f800283a 	ret

04012b44 <get_next_task>:
  Arguments   : none
 
  Return      : none
-----------------------------------------------------------------------------*/
void get_next_task(void)
{
 4012b44:	defffc04 	addi	sp,sp,-16
 4012b48:	dfc00315 	stw	ra,12(sp)
 4012b4c:	df000215 	stw	fp,8(sp)
 4012b50:	df000204 	addi	fp,sp,8
  statusB_union status;
  ctrl_union CPU_CTRL_reg;

  /* Ack. on TSW req */
  CPU_CTRL_reg.ctrl_t.tswoff_req = 0;
 4012b54:	e0ffff17 	ldw	r3,-4(fp)
 4012b58:	00bfff44 	movi	r2,-3
 4012b5c:	1884703a 	and	r2,r3,r2
 4012b60:	e0bfff15 	stw	r2,-4(fp)
  CPU_CTRL_reg.ctrl_t.tsw_req_ack = 1;
 4012b64:	e0bfff17 	ldw	r2,-4(fp)
 4012b68:	10800054 	ori	r2,r2,1
 4012b6c:	e0bfff15 	stw	r2,-4(fp)
  IOWR_ALT_CTRL_REGISTER(CPU_CTRL_reg.ctrl_integer);
 4012b70:	e0ffff17 	ldw	r3,-4(fp)
 4012b74:	00820274 	movhi	r2,2057
 4012b78:	10841404 	addi	r2,r2,4176
 4012b7c:	10c00035 	stwio	r3,0(r2)
  
  do {
    //MB: status = CPUstatusB_reg;
  //  status = *CPUstatusB_reg;
      status.statusB_reg_integer = M_RD_Sierra_statusB_reg;
 4012b80:	00820274 	movhi	r2,2057
 4012b84:	10840c04 	addi	r2,r2,4144
 4012b88:	10800037 	ldwio	r2,0(r2)
 4012b8c:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusB_t.tsw_req_flag != 0);
 4012b90:	e0bffe17 	ldw	r2,-8(fp)
 4012b94:	1080004c 	andi	r2,r2,1
 4012b98:	103ff91e 	bne	r2,zero,4012b80 <__ram_exceptions_end+0xfbf8a8e4>

  /* Get next task ID */
	RUNNING_TASKID = constant_task_mask & status.statusB_t.running_taskID;
 4012b9c:	e0bffe17 	ldw	r2,-8(fp)
 4012ba0:	1004d07a 	srli	r2,r2,1
 4012ba4:	1007883a 	mov	r3,r2
 4012ba8:	00bfffc4 	movi	r2,-1
 4012bac:	1884703a 	and	r2,r3,r2
 4012bb0:	108001cc 	andi	r2,r2,7
 4012bb4:	d0a35245 	stb	r2,-29367(gp)

#ifdef DEF_LOGGING_PRINT  
	printf("\nTSW; Task preemted, new taskid = %d, Time = %d \n", RUNNING_TASKID, ((TIMER_READ() & 0xFFFFE000)>>13));
#endif

  current_tcb = &TCB_LIST[RUNNING_TASKID];
 4012bb8:	d0a35243 	ldbu	r2,-29367(gp)
 4012bbc:	10803fcc 	andi	r2,r2,255
 4012bc0:	01402304 	movi	r5,140
 4012bc4:	1009883a 	mov	r4,r2
 4012bc8:	40011140 	call	4001114 <__mulsi3>
 4012bcc:	1007883a 	mov	r3,r2
 4012bd0:	008100b4 	movhi	r2,1026
 4012bd4:	10a45004 	addi	r2,r2,-28352
 4012bd8:	1885883a 	add	r2,r3,r2
 4012bdc:	d0a35115 	stw	r2,-29372(gp)
 
  /* Nack on TSW req */
  CPU_CTRL_reg.ctrl_t.tsw_req_ack = 0;
 4012be0:	e0ffff17 	ldw	r3,-4(fp)
 4012be4:	00bfff84 	movi	r2,-2
 4012be8:	1884703a 	and	r2,r3,r2
 4012bec:	e0bfff15 	stw	r2,-4(fp)
  IOWR_ALT_CTRL_REGISTER(CPU_CTRL_reg.ctrl_integer);
 4012bf0:	e0ffff17 	ldw	r3,-4(fp)
 4012bf4:	00820274 	movhi	r2,2057
 4012bf8:	10841404 	addi	r2,r2,4176
 4012bfc:	10c00035 	stwio	r3,0(r2)
}
 4012c00:	0001883a 	nop
 4012c04:	e037883a 	mov	sp,fp
 4012c08:	dfc00117 	ldw	ra,4(sp)
 4012c0c:	df000017 	ldw	fp,0(sp)
 4012c10:	dec00204 	addi	sp,sp,8
 4012c14:	f800283a 	ret

04012c18 <tsw_on>:
  Arguments   : none

  Return      : none
-----------------------------------------------------------------------------*/
void tsw_on(void)
{
 4012c18:	defffe04 	addi	sp,sp,-8
 4012c1c:	df000115 	stw	fp,4(sp)
 4012c20:	df000104 	addi	fp,sp,4
  /* Current CPU control status */
  ctrl_union CPU_CTRL_reg;
 
  CPU_CTRL_reg.ctrl_t.tswoff_req = 0;
 4012c24:	e0ffff17 	ldw	r3,-4(fp)
 4012c28:	00bfff44 	movi	r2,-3
 4012c2c:	1884703a 	and	r2,r3,r2
 4012c30:	e0bfff15 	stw	r2,-4(fp)
  CPU_CTRL_reg.ctrl_t.tsw_req_ack = 0;
 4012c34:	e0ffff17 	ldw	r3,-4(fp)
 4012c38:	00bfff84 	movi	r2,-2
 4012c3c:	1884703a 	and	r2,r3,r2
 4012c40:	e0bfff15 	stw	r2,-4(fp)

IOWR_ALT_CTRL_REGISTER(CPU_CTRL_reg.ctrl_integer);
 4012c44:	e0ffff17 	ldw	r3,-4(fp)
 4012c48:	00820274 	movhi	r2,2057
 4012c4c:	10841404 	addi	r2,r2,4176
 4012c50:	10c00035 	stwio	r3,0(r2)
}
 4012c54:	0001883a 	nop
 4012c58:	e037883a 	mov	sp,fp
 4012c5c:	df000017 	ldw	fp,0(sp)
 4012c60:	dec00104 	addi	sp,sp,4
 4012c64:	f800283a 	ret

04012c68 <tsw_off>:
  Arguments   : none

  Return      : none
-----------------------------------------------------------------------------*/
void tsw_off(void)
{
 4012c68:	defffe04 	addi	sp,sp,-8
 4012c6c:	df000115 	stw	fp,4(sp)
 4012c70:	df000104 	addi	fp,sp,4
  /* Current CPU control status */
  ctrl_union CPU_CTRL_reg;
  
  CPU_CTRL_reg.ctrl_t.tswoff_req = 1;
 4012c74:	e0bfff17 	ldw	r2,-4(fp)
 4012c78:	10800094 	ori	r2,r2,2
 4012c7c:	e0bfff15 	stw	r2,-4(fp)
  CPU_CTRL_reg.ctrl_t.tsw_req_ack = 0;
 4012c80:	e0ffff17 	ldw	r3,-4(fp)
 4012c84:	00bfff84 	movi	r2,-2
 4012c88:	1884703a 	and	r2,r3,r2
 4012c8c:	e0bfff15 	stw	r2,-4(fp)

  IOWR_ALT_CTRL_REGISTER(CPU_CTRL_reg.ctrl_integer);
 4012c90:	e0ffff17 	ldw	r3,-4(fp)
 4012c94:	00820274 	movhi	r2,2057
 4012c98:	10841404 	addi	r2,r2,4176
 4012c9c:	10c00035 	stwio	r3,0(r2)

}
 4012ca0:	0001883a 	nop
 4012ca4:	e037883a 	mov	sp,fp
 4012ca8:	df000017 	ldw	fp,0(sp)
 4012cac:	dec00104 	addi	sp,sp,4
 4012cb0:	f800283a 	ret

04012cb4 <get_new_task>:
                contextswitch is performed manually).
  Arguments   : none
  Return      : none
-----------------------------------------------------------------------------*/
void get_new_task(void)
{
 4012cb4:	defffe04 	addi	sp,sp,-8
 4012cb8:	dfc00115 	stw	ra,4(sp)
 4012cbc:	df000015 	stw	fp,0(sp)
 4012cc0:	d839883a 	mov	fp,sp
   /* New task to start is fetched from NEXT_TASKID */
  RUNNING_TASKID = NEXT_TASKID;
 4012cc4:	d0a35203 	ldbu	r2,-29368(gp)
 4012cc8:	d0a35245 	stb	r2,-29367(gp)
   /* Point to new tasks tcb */
  current_tcb = &TCB_LIST[RUNNING_TASKID];
 4012ccc:	d0a35243 	ldbu	r2,-29367(gp)
 4012cd0:	10803fcc 	andi	r2,r2,255
 4012cd4:	01402304 	movi	r5,140
 4012cd8:	1009883a 	mov	r4,r2
 4012cdc:	40011140 	call	4001114 <__mulsi3>
 4012ce0:	1007883a 	mov	r3,r2
 4012ce4:	008100b4 	movhi	r2,1026
 4012ce8:	10a45004 	addi	r2,r2,-28352
 4012cec:	1885883a 	add	r2,r3,r2
 4012cf0:	d0a35115 	stw	r2,-29372(gp)
	
#ifdef DEF_LOGGING_PRINT  
	printf("\nTSW; Task blocked/ready and new taskid = %d, Time = %d\n", RUNNING_TASKID, ((TIMER_READ() & 0xFFFFE000)>>13));
#endif		
}
 4012cf4:	0001883a 	nop
 4012cf8:	e037883a 	mov	sp,fp
 4012cfc:	dfc00117 	ldw	ra,4(sp)
 4012d00:	df000017 	ldw	fp,0(sp)
 4012d04:	dec00204 	addi	sp,sp,8
 4012d08:	f800283a 	ret

04012d0c <irq_wait>:
  Arguments   : int irq     - irq level

  Return      : none
-----------------------------------------------------------------------------*/
void irq_wait(int IRQ_number)
{
 4012d0c:	defffb04 	addi	sp,sp,-20
 4012d10:	dfc00415 	stw	ra,16(sp)
 4012d14:	df000315 	stw	fp,12(sp)
 4012d18:	df000304 	addi	fp,sp,12
 4012d1c:	e13fff15 	stw	r4,-4(fp)
  svc_t           svc;
  statusA_union   statusA;
  int             retval;

  tsw_off();
 4012d20:	4012c680 	call	4012c68 <tsw_off>
  svc.irq_wait_t.type =  sierra_irq_wait;
 4012d24:	e0fffd17 	ldw	r3,-12(fp)
 4012d28:	00810034 	movhi	r2,1024
 4012d2c:	10bfffc4 	addi	r2,r2,-1
 4012d30:	1884703a 	and	r2,r3,r2
 4012d34:	10890034 	orhi	r2,r2,9216
 4012d38:	e0bffd15 	stw	r2,-12(fp)
  svc.irq_wait_t.irq_type =  IRQ_number;
 4012d3c:	e0bfff17 	ldw	r2,-4(fp)
 4012d40:	100491ba 	slli	r2,r2,6
 4012d44:	10803fcc 	andi	r2,r2,255
 4012d48:	1080201c 	xori	r2,r2,128
 4012d4c:	10bfe004 	addi	r2,r2,-128
 4012d50:	1005d1ba 	srai	r2,r2,6
 4012d54:	10803fcc 	andi	r2,r2,255
 4012d58:	108000cc 	andi	r2,r2,3
 4012d5c:	e13ffd17 	ldw	r4,-12(fp)
 4012d60:	00ffff04 	movi	r3,-4
 4012d64:	20c6703a 	and	r3,r4,r3
 4012d68:	1884b03a 	or	r2,r3,r2
 4012d6c:	e0bffd15 	stw	r2,-12(fp)
  
  /* Start service call*/
  
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4012d70:	e0fffd17 	ldw	r3,-12(fp)
 4012d74:	00820274 	movhi	r2,2057
 4012d78:	10841004 	addi	r2,r2,4160
 4012d7c:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4012d80:	00820274 	movhi	r2,2057
 4012d84:	10840804 	addi	r2,r2,4128
 4012d88:	10800037 	ldwio	r2,0(r2)
 4012d8c:	e0bffe15 	stw	r2,-8(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 4012d90:	e0bffe17 	ldw	r2,-8(fp)
 4012d94:	1080004c 	andi	r2,r2,1
 4012d98:	103ff91e 	bne	r2,zero,4012d80 <__ram_exceptions_end+0xfbf8aae4>
  
   NEXT_TASKID=constant_task_mask & statusA.statusA_t.svc_return;
 4012d9c:	e0bffe17 	ldw	r2,-8(fp)
 4012da0:	1004d0ba 	srli	r2,r2,2
 4012da4:	108fffcc 	andi	r2,r2,16383
 4012da8:	108001cc 	andi	r2,r2,7
 4012dac:	d0a35205 	stb	r2,-29368(gp)
//   printf("  NEXTTASK_ID_IRQ = %d\n", NEXT_TASKID); /* testning */
   tsw_on();
 4012db0:	4012c180 	call	4012c18 <tsw_on>
   taskswitch; /* perform manual contextswitch */
 4012db4:	003b683a 	trap	0
}
 4012db8:	0001883a 	nop
 4012dbc:	e037883a 	mov	sp,fp
 4012dc0:	dfc00117 	ldw	ra,4(sp)
 4012dc4:	df000017 	ldw	fp,0(sp)
 4012dc8:	dec00204 	addi	sp,sp,8
 4012dcc:	f800283a 	ret

04012dd0 <sem_take>:
  Arguments   : int semid - Semaphore ID number

  Return      : none
-----------------------------------------------------------------------------*/
void sem_take(int semid)
{
 4012dd0:	defffb04 	addi	sp,sp,-20
 4012dd4:	df000415 	stw	fp,16(sp)
 4012dd8:	df000404 	addi	fp,sp,16
 4012ddc:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union status;
  int retval;
  
  svc.take_sem.type =  sierra_sem_take;
 4012de0:	e0fffd17 	ldw	r3,-12(fp)
 4012de4:	00810034 	movhi	r2,1024
 4012de8:	10bfffc4 	addi	r2,r2,-1
 4012dec:	1884703a 	and	r2,r3,r2
 4012df0:	109c0034 	orhi	r2,r2,28672
 4012df4:	e0bffd15 	stw	r2,-12(fp)
  svc.take_sem.semid =  semid;
 4012df8:	e0bfff17 	ldw	r2,-4(fp)
 4012dfc:	1083ffcc 	andi	r2,r2,4095
 4012e00:	10bfffcc 	andi	r2,r2,65535
 4012e04:	1083ffcc 	andi	r2,r2,4095
 4012e08:	e13ffd17 	ldw	r4,-12(fp)
 4012e0c:	00fc0004 	movi	r3,-4096
 4012e10:	20c6703a 	and	r3,r4,r3
 4012e14:	1884b03a 	or	r2,r3,r2
 4012e18:	e0bffd15 	stw	r2,-12(fp)
#ifdef DEF_LOGGING_PRINT  
	printf("\nSVC; sem_take %d\n", semid); 
#endif

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4012e1c:	e0fffd17 	ldw	r3,-12(fp)
 4012e20:	00820274 	movhi	r2,2057
 4012e24:	10841004 	addi	r2,r2,4160
 4012e28:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4012e2c:	00820274 	movhi	r2,2057
 4012e30:	10840804 	addi	r2,r2,4128
 4012e34:	10800037 	ldwio	r2,0(r2)
 4012e38:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusA_t.svc_ack == 1);
 4012e3c:	e0bffe17 	ldw	r2,-8(fp)
 4012e40:	1080004c 	andi	r2,r2,1
 4012e44:	103ff91e 	bne	r2,zero,4012e2c <__ram_exceptions_end+0xfbf8ab90>

  retval=status.statusA_t.svc_return & 0x3f;
 4012e48:	e0bffe17 	ldw	r2,-8(fp)
 4012e4c:	1004d0ba 	srli	r2,r2,2
 4012e50:	108fffcc 	andi	r2,r2,16383
 4012e54:	10bfffcc 	andi	r2,r2,65535
 4012e58:	10800fcc 	andi	r2,r2,63
 4012e5c:	e0bffc15 	stw	r2,-16(fp)

  if (0 != (retval & 0x1)) { /*Task becomes blocked*/
 4012e60:	e0bffc17 	ldw	r2,-16(fp)
 4012e64:	1080004c 	andi	r2,r2,1
 4012e68:	10000526 	beq	r2,zero,4012e80 <sem_take+0xb0>
    NEXT_TASKID = constant_task_mask & (retval >> 1);
 4012e6c:	e0bffc17 	ldw	r2,-16(fp)
 4012e70:	1005d07a 	srai	r2,r2,1
 4012e74:	108001cc 	andi	r2,r2,7
 4012e78:	d0a35205 	stb	r2,-29368(gp)
    taskswitch; /* perform manual contextswitch */
 4012e7c:	003b683a 	trap	0
  }

}
 4012e80:	0001883a 	nop
 4012e84:	e037883a 	mov	sp,fp
 4012e88:	df000017 	ldw	fp,0(sp)
 4012e8c:	dec00104 	addi	sp,sp,4
 4012e90:	f800283a 	ret

04012e94 <sem_release>:
  Arguments   : int semid - Semaphore ID number

  Return      : none
-----------------------------------------------------------------------------*/
void sem_release(int semid)
{
 4012e94:	defffc04 	addi	sp,sp,-16
 4012e98:	df000315 	stw	fp,12(sp)
 4012e9c:	df000304 	addi	fp,sp,12
 4012ea0:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union statusA;

  svc.release_sem.type =  sierra_sem_release;
 4012ea4:	e0fffd17 	ldw	r3,-12(fp)
 4012ea8:	00810034 	movhi	r2,1024
 4012eac:	10bfffc4 	addi	r2,r2,-1
 4012eb0:	1884703a 	and	r2,r3,r2
 4012eb4:	109d0034 	orhi	r2,r2,29696
 4012eb8:	e0bffd15 	stw	r2,-12(fp)
  svc.release_sem.semid =  semid;
 4012ebc:	e0bfff17 	ldw	r2,-4(fp)
 4012ec0:	1083ffcc 	andi	r2,r2,4095
 4012ec4:	10bfffcc 	andi	r2,r2,65535
 4012ec8:	1083ffcc 	andi	r2,r2,4095
 4012ecc:	e13ffd17 	ldw	r4,-12(fp)
 4012ed0:	00fc0004 	movi	r3,-4096
 4012ed4:	20c6703a 	and	r3,r4,r3
 4012ed8:	1884b03a 	or	r2,r3,r2
 4012edc:	e0bffd15 	stw	r2,-12(fp)
#ifdef DEF_LOGGING_PRINT  
	printf("\nSVC; sem_realease %d\n", semid); 
#endif

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4012ee0:	e0fffd17 	ldw	r3,-12(fp)
 4012ee4:	00820274 	movhi	r2,2057
 4012ee8:	10841004 	addi	r2,r2,4160
 4012eec:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4012ef0:	00820274 	movhi	r2,2057
 4012ef4:	10840804 	addi	r2,r2,4128
 4012ef8:	10800037 	ldwio	r2,0(r2)
 4012efc:	e0bffe15 	stw	r2,-8(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 4012f00:	e0bffe17 	ldw	r2,-8(fp)
 4012f04:	1080004c 	andi	r2,r2,1
 4012f08:	103ff91e 	bne	r2,zero,4012ef0 <__ram_exceptions_end+0xfbf8ac54>
}
 4012f0c:	0001883a 	nop
 4012f10:	e037883a 	mov	sp,fp
 4012f14:	df000017 	ldw	fp,0(sp)
 4012f18:	dec00104 	addi	sp,sp,4
 4012f1c:	f800283a 	ret

04012f20 <sem_read>:
  Arguments   : int semid - Semaphore ID number

  Return      : Datastructure of type sem_info_t. 
-----------------------------------------------------------------------------*/
sem_info_t sem_read(int taskID)
{
 4012f20:	defffa04 	addi	sp,sp,-24
 4012f24:	df000515 	stw	fp,20(sp)
 4012f28:	df000504 	addi	fp,sp,20
 4012f2c:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union status;
  unsigned char info;
  sem_info_t info_t;
  
  svc.read_sem.type =  sierra_sem_read;
 4012f30:	e0fffb17 	ldw	r3,-20(fp)
 4012f34:	00810034 	movhi	r2,1024
 4012f38:	10bfffc4 	addi	r2,r2,-1
 4012f3c:	1884703a 	and	r2,r3,r2
 4012f40:	10980034 	orhi	r2,r2,24576
 4012f44:	e0bffb15 	stw	r2,-20(fp)
  svc.read_sem.taskID =  taskID;
 4012f48:	e0bfff17 	ldw	r2,-4(fp)
 4012f4c:	1083ffcc 	andi	r2,r2,4095
 4012f50:	10bfffcc 	andi	r2,r2,65535
 4012f54:	1083ffcc 	andi	r2,r2,4095
 4012f58:	e13ffb17 	ldw	r4,-20(fp)
 4012f5c:	00fc0004 	movi	r3,-4096
 4012f60:	20c6703a 	and	r3,r4,r3
 4012f64:	1884b03a 	or	r2,r3,r2
 4012f68:	e0bffb15 	stw	r2,-20(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4012f6c:	e0fffb17 	ldw	r3,-20(fp)
 4012f70:	00820274 	movhi	r2,2057
 4012f74:	10841004 	addi	r2,r2,4160
 4012f78:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4012f7c:	00820274 	movhi	r2,2057
 4012f80:	10840804 	addi	r2,r2,4128
 4012f84:	10800037 	ldwio	r2,0(r2)
 4012f88:	e0bffc15 	stw	r2,-16(fp)
  } while (status.statusA_t.svc_ack == 1);
 4012f8c:	e0bffc17 	ldw	r2,-16(fp)
 4012f90:	1080004c 	andi	r2,r2,1
 4012f94:	103ff91e 	bne	r2,zero,4012f7c <__ram_exceptions_end+0xfbf8ace0>

  info = status.statusA_t.svc_return & 0x7f;
 4012f98:	e0bffc17 	ldw	r2,-16(fp)
 4012f9c:	1004d0ba 	srli	r2,r2,2
 4012fa0:	108fffcc 	andi	r2,r2,16383
 4012fa4:	10801fcc 	andi	r2,r2,127
 4012fa8:	e0bffd05 	stb	r2,-12(fp)
  return *(sem_info_t *)&info;
 4012fac:	e0bffd04 	addi	r2,fp,-12
 4012fb0:	10800017 	ldw	r2,0(r2)
}
 4012fb4:	e037883a 	mov	sp,fp
 4012fb8:	df000017 	ldw	fp,0(sp)
 4012fbc:	dec00104 	addi	sp,sp,4
 4012fc0:	f800283a 	ret

04012fc4 <flag_wait>:
  Arguments   : int flag_mask - flag bits

  Return      : none
-----------------------------------------------------------------------------*/
void flag_wait(int flag_mask)
{
 4012fc4:	defffb04 	addi	sp,sp,-20
 4012fc8:	df000415 	stw	fp,16(sp)
 4012fcc:	df000404 	addi	fp,sp,16
 4012fd0:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union status;
  int retval;

  svc.flag_wait.type = sierra_flag_wait;
 4012fd4:	e0fffd17 	ldw	r3,-12(fp)
 4012fd8:	00810034 	movhi	r2,1024
 4012fdc:	10bfffc4 	addi	r2,r2,-1
 4012fe0:	1884703a 	and	r2,r3,r2
 4012fe4:	10990034 	orhi	r2,r2,25600
 4012fe8:	e0bffd15 	stw	r2,-12(fp)
  svc.flag_wait.flag_mask =  flag_mask;
 4012fec:	e0bfff17 	ldw	r2,-4(fp)
 4012ff0:	1083ffcc 	andi	r2,r2,4095
 4012ff4:	10bfffcc 	andi	r2,r2,65535
 4012ff8:	1083ffcc 	andi	r2,r2,4095
 4012ffc:	e13ffd17 	ldw	r4,-12(fp)
 4013000:	00fc0004 	movi	r3,-4096
 4013004:	20c6703a 	and	r3,r4,r3
 4013008:	1884b03a 	or	r2,r3,r2
 401300c:	e0bffd15 	stw	r2,-12(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4013010:	e0fffd17 	ldw	r3,-12(fp)
 4013014:	00820274 	movhi	r2,2057
 4013018:	10841004 	addi	r2,r2,4160
 401301c:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4013020:	00820274 	movhi	r2,2057
 4013024:	10840804 	addi	r2,r2,4128
 4013028:	10800037 	ldwio	r2,0(r2)
 401302c:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusA_t.svc_ack == 1);
 4013030:	e0bffe17 	ldw	r2,-8(fp)
 4013034:	1080004c 	andi	r2,r2,1
 4013038:	103ff91e 	bne	r2,zero,4013020 <__ram_exceptions_end+0xfbf8ad84>

  retval=status.statusA_t.svc_return & 0x3f;
 401303c:	e0bffe17 	ldw	r2,-8(fp)
 4013040:	1004d0ba 	srli	r2,r2,2
 4013044:	108fffcc 	andi	r2,r2,16383
 4013048:	10bfffcc 	andi	r2,r2,65535
 401304c:	10800fcc 	andi	r2,r2,63
 4013050:	e0bffc15 	stw	r2,-16(fp)

  if (0 != (retval & 0x1)) { /*Task becomes blocked*/
 4013054:	e0bffc17 	ldw	r2,-16(fp)
 4013058:	1080004c 	andi	r2,r2,1
 401305c:	10000526 	beq	r2,zero,4013074 <flag_wait+0xb0>
    NEXT_TASKID = constant_task_mask & (retval >> 1);
 4013060:	e0bffc17 	ldw	r2,-16(fp)
 4013064:	1005d07a 	srai	r2,r2,1
 4013068:	108001cc 	andi	r2,r2,7
 401306c:	d0a35205 	stb	r2,-29368(gp)
    taskswitch; /* perform manual contextswitch */
 4013070:	003b683a 	trap	0
  }
}
 4013074:	0001883a 	nop
 4013078:	e037883a 	mov	sp,fp
 401307c:	df000017 	ldw	fp,0(sp)
 4013080:	dec00104 	addi	sp,sp,4
 4013084:	f800283a 	ret

04013088 <flag_set>:
  Arguments   : int flag_mask - flagbits

  Return      : none
-----------------------------------------------------------------------------*/
void flag_set(int flag_mask)
{
 4013088:	defffc04 	addi	sp,sp,-16
 401308c:	df000315 	stw	fp,12(sp)
 4013090:	df000304 	addi	fp,sp,12
 4013094:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union status;

  svc.flag_set.type = sierra_flag_set;
 4013098:	e0fffd17 	ldw	r3,-12(fp)
 401309c:	00810034 	movhi	r2,1024
 40130a0:	10bfffc4 	addi	r2,r2,-1
 40130a4:	1884703a 	and	r2,r3,r2
 40130a8:	109a0034 	orhi	r2,r2,26624
 40130ac:	e0bffd15 	stw	r2,-12(fp)
  svc.flag_set.flag_mask =  flag_mask;
 40130b0:	e0bfff17 	ldw	r2,-4(fp)
 40130b4:	1083ffcc 	andi	r2,r2,4095
 40130b8:	10bfffcc 	andi	r2,r2,65535
 40130bc:	1083ffcc 	andi	r2,r2,4095
 40130c0:	e13ffd17 	ldw	r4,-12(fp)
 40130c4:	00fc0004 	movi	r3,-4096
 40130c8:	20c6703a 	and	r3,r4,r3
 40130cc:	1884b03a 	or	r2,r3,r2
 40130d0:	e0bffd15 	stw	r2,-12(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 40130d4:	e0fffd17 	ldw	r3,-12(fp)
 40130d8:	00820274 	movhi	r2,2057
 40130dc:	10841004 	addi	r2,r2,4160
 40130e0:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 40130e4:	00820274 	movhi	r2,2057
 40130e8:	10840804 	addi	r2,r2,4128
 40130ec:	10800037 	ldwio	r2,0(r2)
 40130f0:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusA_t.svc_ack == 1);
 40130f4:	e0bffe17 	ldw	r2,-8(fp)
 40130f8:	1080004c 	andi	r2,r2,1
 40130fc:	103ff91e 	bne	r2,zero,40130e4 <__ram_exceptions_end+0xfbf8ae48>
}
 4013100:	0001883a 	nop
 4013104:	e037883a 	mov	sp,fp
 4013108:	df000017 	ldw	fp,0(sp)
 401310c:	dec00104 	addi	sp,sp,4
 4013110:	f800283a 	ret

04013114 <flag_clear>:
  Arguments   : int flag_mask - flagbits

  Return      : none
-----------------------------------------------------------------------------*/
void flag_clear(int flag_mask)
{
 4013114:	defffc04 	addi	sp,sp,-16
 4013118:	df000315 	stw	fp,12(sp)
 401311c:	df000304 	addi	fp,sp,12
 4013120:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union status;

  svc.flag_clear.type = sierra_flag_clear;
 4013124:	e0fffd17 	ldw	r3,-12(fp)
 4013128:	00810034 	movhi	r2,1024
 401312c:	10bfffc4 	addi	r2,r2,-1
 4013130:	1884703a 	and	r2,r3,r2
 4013134:	109b0034 	orhi	r2,r2,27648
 4013138:	e0bffd15 	stw	r2,-12(fp)
  svc.flag_clear.flag_mask =  flag_mask;
 401313c:	e0bfff17 	ldw	r2,-4(fp)
 4013140:	1083ffcc 	andi	r2,r2,4095
 4013144:	10bfffcc 	andi	r2,r2,65535
 4013148:	1083ffcc 	andi	r2,r2,4095
 401314c:	e13ffd17 	ldw	r4,-12(fp)
 4013150:	00fc0004 	movi	r3,-4096
 4013154:	20c6703a 	and	r3,r4,r3
 4013158:	1884b03a 	or	r2,r3,r2
 401315c:	e0bffd15 	stw	r2,-12(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4013160:	e0fffd17 	ldw	r3,-12(fp)
 4013164:	00820274 	movhi	r2,2057
 4013168:	10841004 	addi	r2,r2,4160
 401316c:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4013170:	00820274 	movhi	r2,2057
 4013174:	10840804 	addi	r2,r2,4128
 4013178:	10800037 	ldwio	r2,0(r2)
 401317c:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusA_t.svc_ack == 1);
 4013180:	e0bffe17 	ldw	r2,-8(fp)
 4013184:	1080004c 	andi	r2,r2,1
 4013188:	103ff91e 	bne	r2,zero,4013170 <__ram_exceptions_end+0xfbf8aed4>
}
 401318c:	0001883a 	nop
 4013190:	e037883a 	mov	sp,fp
 4013194:	df000017 	ldw	fp,0(sp)
 4013198:	dec00104 	addi	sp,sp,4
 401319c:	f800283a 	ret

040131a0 <task_create>:
                   int priority,
                   int taskstate,
                   void (*taskptr)(void),
                   void *stackptr,
                   int stacksz)
{
 40131a0:	defff704 	addi	sp,sp,-36
 40131a4:	dfc00815 	stw	ra,32(sp)
 40131a8:	df000715 	stw	fp,28(sp)
 40131ac:	df000704 	addi	fp,sp,28
 40131b0:	e13ffc15 	stw	r4,-16(fp)
 40131b4:	e17ffd15 	stw	r5,-12(fp)
 40131b8:	e1bffe15 	stw	r6,-8(fp)
 40131bc:	e1ffff15 	stw	r7,-4(fp)
  tcb_t *newTask;
  svc_t svc;
  statusA_union status;

  newTask = &(TCB_LIST[taskID]);
 40131c0:	01402304 	movi	r5,140
 40131c4:	e13ffc17 	ldw	r4,-16(fp)
 40131c8:	40011140 	call	4001114 <__mulsi3>
 40131cc:	1007883a 	mov	r3,r2
 40131d0:	008100b4 	movhi	r2,1026
 40131d4:	10a45004 	addi	r2,r2,-28352
 40131d8:	1885883a 	add	r2,r3,r2
 40131dc:	e0bff915 	stw	r2,-28(fp)

  /* Parameters to tcb*/
  newTask->taskID = taskID;
 40131e0:	e0fffc17 	ldw	r3,-16(fp)
 40131e4:	e0bff917 	ldw	r2,-28(fp)
 40131e8:	10c00015 	stw	r3,0(r2)
  newTask->task = taskptr;
 40131ec:	e0bff917 	ldw	r2,-28(fp)
 40131f0:	e0ffff17 	ldw	r3,-4(fp)
 40131f4:	10c00115 	stw	r3,4(r2)
  newTask->ea_reg = taskptr;  
 40131f8:	e0ffff17 	ldw	r3,-4(fp)
 40131fc:	e0bff917 	ldw	r2,-28(fp)
 4013200:	10c01c15 	stw	r3,112(r2)
  newTask->ra_reg = taskptr;
 4013204:	e0ffff17 	ldw	r3,-4(fp)
 4013208:	e0bff917 	ldw	r2,-28(fp)
 401320c:	10c01d15 	stw	r3,116(r2)
  newTask->stacktop = stackptr;
 4013210:	e0bff917 	ldw	r2,-28(fp)
 4013214:	e0c00217 	ldw	r3,8(fp)
 4013218:	10c01f15 	stw	r3,124(r2)
  /* Stack counts backwards, set pointer to highest address */
  newTask->stack = (unsigned int *) (stackptr + stacksz - sizeof(int));
 401321c:	e0800317 	ldw	r2,12(fp)
 4013220:	10bfff04 	addi	r2,r2,-4
 4013224:	e0c00217 	ldw	r3,8(fp)
 4013228:	1887883a 	add	r3,r3,r2
 401322c:	e0bff917 	ldw	r2,-28(fp)
 4013230:	10c01e15 	stw	r3,120(r2)
  newTask->stacksz = stacksz;
 4013234:	e0c00317 	ldw	r3,12(fp)
 4013238:	e0bff917 	ldw	r2,-28(fp)
 401323c:	10c02015 	stw	r3,128(r2)
  newTask->fp_reg = stackptr;
 4013240:	e0c00217 	ldw	r3,8(fp)
 4013244:	e0bff917 	ldw	r2,-28(fp)
 4013248:	10c01b15 	stw	r3,108(r2)
  newTask->priority = priority;
 401324c:	e0fffd17 	ldw	r3,-12(fp)
 4013250:	e0bff917 	ldw	r2,-28(fp)
 4013254:	10c02215 	stw	r3,136(r2)

  svc.task_create.type = sierra_task_create;
 4013258:	e0fffa17 	ldw	r3,-24(fp)
 401325c:	00810034 	movhi	r2,1024
 4013260:	10bfffc4 	addi	r2,r2,-1
 4013264:	1884703a 	and	r2,r3,r2
 4013268:	e0bffa15 	stw	r2,-24(fp)
  svc.task_create.state = taskstate;
 401326c:	e0bffe17 	ldw	r2,-8(fp)
 4013270:	1080004c 	andi	r2,r2,1
 4013274:	10803fcc 	andi	r2,r2,255
 4013278:	1080004c 	andi	r2,r2,1
 401327c:	1006963a 	slli	r3,r2,24
 4013280:	e13ffa17 	ldw	r4,-24(fp)
 4013284:	00bfc034 	movhi	r2,65280
 4013288:	10bfffc4 	addi	r2,r2,-1
 401328c:	2084703a 	and	r2,r4,r2
 4013290:	10c4b03a 	or	r2,r2,r3
 4013294:	e0bffa15 	stw	r2,-24(fp)
  svc.task_create.priority = priority;
 4013298:	e0bffd17 	ldw	r2,-12(fp)
 401329c:	1083ffcc 	andi	r2,r2,4095
 40132a0:	10bfffcc 	andi	r2,r2,65535
 40132a4:	1083ffcc 	andi	r2,r2,4095
 40132a8:	1006933a 	slli	r3,r2,12
 40132ac:	e13ffa17 	ldw	r4,-24(fp)
 40132b0:	00bfc034 	movhi	r2,65280
 40132b4:	1083ffc4 	addi	r2,r2,4095
 40132b8:	2084703a 	and	r2,r4,r2
 40132bc:	10c4b03a 	or	r2,r2,r3
 40132c0:	e0bffa15 	stw	r2,-24(fp)
  svc.task_create.taskID = taskID;
 40132c4:	e0bffc17 	ldw	r2,-16(fp)
 40132c8:	1083ffcc 	andi	r2,r2,4095
 40132cc:	10bfffcc 	andi	r2,r2,65535
 40132d0:	1083ffcc 	andi	r2,r2,4095
 40132d4:	e13ffa17 	ldw	r4,-24(fp)
 40132d8:	00fc0004 	movi	r3,-4096
 40132dc:	20c6703a 	and	r3,r4,r3
 40132e0:	1884b03a 	or	r2,r3,r2
 40132e4:	e0bffa15 	stw	r2,-24(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 40132e8:	e0fffa17 	ldw	r3,-24(fp)
 40132ec:	00820274 	movhi	r2,2057
 40132f0:	10841004 	addi	r2,r2,4160
 40132f4:	10c00035 	stwio	r3,0(r2)

  //  ack_wait(&status);
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 40132f8:	00820274 	movhi	r2,2057
 40132fc:	10840804 	addi	r2,r2,4128
 4013300:	10800037 	ldwio	r2,0(r2)
 4013304:	e0bffb15 	stw	r2,-20(fp)
  } while (status.statusA_t.svc_ack == 1);
 4013308:	e0bffb17 	ldw	r2,-20(fp)
 401330c:	1080004c 	andi	r2,r2,1
 4013310:	103ff91e 	bne	r2,zero,40132f8 <__ram_exceptions_end+0xfbf8b05c>

}
 4013314:	0001883a 	nop
 4013318:	e037883a 	mov	sp,fp
 401331c:	dfc00117 	ldw	ra,4(sp)
 4013320:	df000017 	ldw	fp,0(sp)
 4013324:	dec00204 	addi	sp,sp,8
 4013328:	f800283a 	ret

0401332c <task_getinfo>:
  Arguments   : int taskID

  Return      : Datastructure of type task_info_t.
-----------------------------------------------------------------------------*/
task_info_t task_getinfo(int taskID)
{
 401332c:	defffb04 	addi	sp,sp,-20
 4013330:	df000415 	stw	fp,16(sp)
 4013334:	df000404 	addi	fp,sp,16
 4013338:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  unsigned int info;
  statusA_union status;

  svc.task_getinfo.type =  sierra_task_getinfo;
 401333c:	e0fffc17 	ldw	r3,-16(fp)
 4013340:	00810034 	movhi	r2,1024
 4013344:	10bfffc4 	addi	r2,r2,-1
 4013348:	1884703a 	and	r2,r3,r2
 401334c:	10850034 	orhi	r2,r2,5120
 4013350:	e0bffc15 	stw	r2,-16(fp)
  svc.task_getinfo.taskID = taskID;
 4013354:	e0bfff17 	ldw	r2,-4(fp)
 4013358:	1083ffcc 	andi	r2,r2,4095
 401335c:	10bfffcc 	andi	r2,r2,65535
 4013360:	1083ffcc 	andi	r2,r2,4095
 4013364:	e13ffc17 	ldw	r4,-16(fp)
 4013368:	00fc0004 	movi	r3,-4096
 401336c:	20c6703a 	and	r3,r4,r3
 4013370:	1884b03a 	or	r2,r3,r2
 4013374:	e0bffc15 	stw	r2,-16(fp)
  
  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4013378:	e0fffc17 	ldw	r3,-16(fp)
 401337c:	00820274 	movhi	r2,2057
 4013380:	10841004 	addi	r2,r2,4160
 4013384:	10c00035 	stwio	r3,0(r2)

  /* return vale */
  //  ack_wait
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4013388:	00820274 	movhi	r2,2057
 401338c:	10840804 	addi	r2,r2,4128
 4013390:	10800037 	ldwio	r2,0(r2)
 4013394:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusA_t.svc_ack == 1);
 4013398:	e0bffe17 	ldw	r2,-8(fp)
 401339c:	1080004c 	andi	r2,r2,1
 40133a0:	103ff91e 	bne	r2,zero,4013388 <__ram_exceptions_end+0xfbf8b0ec>
    
//  info  = status.statusA_t.svc_return & 0x3FF; 
  info  = status.statusA_t.svc_return;
 40133a4:	e0bffe17 	ldw	r2,-8(fp)
 40133a8:	1004d0ba 	srli	r2,r2,2
 40133ac:	108fffcc 	andi	r2,r2,16383
 40133b0:	10bfffcc 	andi	r2,r2,65535
 40133b4:	e0bffd15 	stw	r2,-12(fp)

  return *(task_info_t *) &info;
 40133b8:	e0bffd04 	addi	r2,fp,-12
 40133bc:	10800017 	ldw	r2,0(r2)
}
 40133c0:	e037883a 	mov	sp,fp
 40133c4:	df000017 	ldw	fp,0(sp)
 40133c8:	dec00104 	addi	sp,sp,4
 40133cc:	f800283a 	ret

040133d0 <task_start>:
  Arguments   : int taskID

  Return      : none
-----------------------------------------------------------------------------*/
void task_start(int taskID)
{
 40133d0:	defffc04 	addi	sp,sp,-16
 40133d4:	df000315 	stw	fp,12(sp)
 40133d8:	df000304 	addi	fp,sp,12
 40133dc:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union status;
  
  svc.task_start.type =  sierra_task_start;
 40133e0:	e0fffd17 	ldw	r3,-12(fp)
 40133e4:	00810034 	movhi	r2,1024
 40133e8:	10bfffc4 	addi	r2,r2,-1
 40133ec:	1884703a 	and	r2,r3,r2
 40133f0:	10820034 	orhi	r2,r2,2048
 40133f4:	e0bffd15 	stw	r2,-12(fp)
  svc.task_start.taskID = taskID;
 40133f8:	e0bfff17 	ldw	r2,-4(fp)
 40133fc:	1083ffcc 	andi	r2,r2,4095
 4013400:	10bfffcc 	andi	r2,r2,65535
 4013404:	1083ffcc 	andi	r2,r2,4095
 4013408:	e13ffd17 	ldw	r4,-12(fp)
 401340c:	00fc0004 	movi	r3,-4096
 4013410:	20c6703a 	and	r3,r4,r3
 4013414:	1884b03a 	or	r2,r3,r2
 4013418:	e0bffd15 	stw	r2,-12(fp)
  
  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 401341c:	e0fffd17 	ldw	r3,-12(fp)
 4013420:	00820274 	movhi	r2,2057
 4013424:	10841004 	addi	r2,r2,4160
 4013428:	10c00035 	stwio	r3,0(r2)
  
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 401342c:	00820274 	movhi	r2,2057
 4013430:	10840804 	addi	r2,r2,4128
 4013434:	10800037 	ldwio	r2,0(r2)
 4013438:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusA_t.svc_ack == 1);
 401343c:	e0bffe17 	ldw	r2,-8(fp)
 4013440:	1080004c 	andi	r2,r2,1
 4013444:	103ff91e 	bne	r2,zero,401342c <__ram_exceptions_end+0xfbf8b190>
  
}
 4013448:	0001883a 	nop
 401344c:	e037883a 	mov	sp,fp
 4013450:	df000017 	ldw	fp,0(sp)
 4013454:	dec00104 	addi	sp,sp,4
 4013458:	f800283a 	ret

0401345c <task_block>:
  Arguments   : none
  Return      : none
-----------------------------------------------------------------------------*/

void task_block(int taskID)
{
 401345c:	defffb04 	addi	sp,sp,-20
 4013460:	df000415 	stw	fp,16(sp)
 4013464:	df000404 	addi	fp,sp,16
 4013468:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union statusA;
  int retval;

  svc.task_block.type =  sierra_task_block;
 401346c:	e0fffd17 	ldw	r3,-12(fp)
 4013470:	00810034 	movhi	r2,1024
 4013474:	10bfffc4 	addi	r2,r2,-1
 4013478:	1884703a 	and	r2,r3,r2
 401347c:	10830034 	orhi	r2,r2,3072
 4013480:	e0bffd15 	stw	r2,-12(fp)
  svc.task_block.taskID = taskID;
 4013484:	e0bfff17 	ldw	r2,-4(fp)
 4013488:	1083ffcc 	andi	r2,r2,4095
 401348c:	10bfffcc 	andi	r2,r2,65535
 4013490:	1083ffcc 	andi	r2,r2,4095
 4013494:	e13ffd17 	ldw	r4,-12(fp)
 4013498:	00fc0004 	movi	r3,-4096
 401349c:	20c6703a 	and	r3,r4,r3
 40134a0:	1884b03a 	or	r2,r3,r2
 40134a4:	e0bffd15 	stw	r2,-12(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 40134a8:	e0fffd17 	ldw	r3,-12(fp)
 40134ac:	00820274 	movhi	r2,2057
 40134b0:	10841004 	addi	r2,r2,4160
 40134b4:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
    statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 40134b8:	00820274 	movhi	r2,2057
 40134bc:	10840804 	addi	r2,r2,4128
 40134c0:	10800037 	ldwio	r2,0(r2)
 40134c4:	e0bffe15 	stw	r2,-8(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 40134c8:	e0bffe17 	ldw	r2,-8(fp)
 40134cc:	1080004c 	andi	r2,r2,1
 40134d0:	103ff91e 	bne	r2,zero,40134b8 <__ram_exceptions_end+0xfbf8b21c>
 
  retval=statusA.statusA_t.svc_return & 0x3f;
 40134d4:	e0bffe17 	ldw	r2,-8(fp)
 40134d8:	1004d0ba 	srli	r2,r2,2
 40134dc:	108fffcc 	andi	r2,r2,16383
 40134e0:	10bfffcc 	andi	r2,r2,65535
 40134e4:	10800fcc 	andi	r2,r2,63
 40134e8:	e0bffc15 	stw	r2,-16(fp)

//if runing task_id blocked the return is true (1) else false (0)
  if (0 != (retval & 0x1)) { /*Task becomes blocked*/
 40134ec:	e0bffc17 	ldw	r2,-16(fp)
 40134f0:	1080004c 	andi	r2,r2,1
 40134f4:	10000526 	beq	r2,zero,401350c <task_block+0xb0>
    /* Get next task ID */
    NEXT_TASKID = constant_task_mask & (retval >> 1);
 40134f8:	e0bffc17 	ldw	r2,-16(fp)
 40134fc:	1005d07a 	srai	r2,r2,1
 4013500:	108001cc 	andi	r2,r2,7
 4013504:	d0a35205 	stb	r2,-29368(gp)
    taskswitch; /* perform manual contextswitch */
 4013508:	003b683a 	trap	0

// NEXT_TASKID = constant_task_mask & statusA.statusA_t.svc_return;
 
//  taskswitch; /* perform manual contextswitch */

}
 401350c:	0001883a 	nop
 4013510:	e037883a 	mov	sp,fp
 4013514:	df000017 	ldw	fp,0(sp)
 4013518:	dec00104 	addi	sp,sp,4
 401351c:	f800283a 	ret

04013520 <task_delete>:
  Return      : none
-----------------------------------------------------------------------------*/


void task_delete(void)
{
 4013520:	defffd04 	addi	sp,sp,-12
 4013524:	df000215 	stw	fp,8(sp)
 4013528:	df000204 	addi	fp,sp,8
  svc_t svc;
  statusA_union statusA;

  svc.wait_for_next_period.type =  sierra_task_delete;
 401352c:	e0fffe17 	ldw	r3,-8(fp)
 4013530:	00810034 	movhi	r2,1024
 4013534:	10bfffc4 	addi	r2,r2,-1
 4013538:	1884703a 	and	r2,r3,r2
 401353c:	10810034 	orhi	r2,r2,1024
 4013540:	e0bffe15 	stw	r2,-8(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4013544:	e0fffe17 	ldw	r3,-8(fp)
 4013548:	00820274 	movhi	r2,2057
 401354c:	10841004 	addi	r2,r2,4160
 4013550:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
    statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4013554:	00820274 	movhi	r2,2057
 4013558:	10840804 	addi	r2,r2,4128
 401355c:	10800037 	ldwio	r2,0(r2)
 4013560:	e0bfff15 	stw	r2,-4(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 4013564:	e0bfff17 	ldw	r2,-4(fp)
 4013568:	1080004c 	andi	r2,r2,1
 401356c:	103ff91e 	bne	r2,zero,4013554 <__ram_exceptions_end+0xfbf8b2b8>

  /* Get next task ID */

 NEXT_TASKID = constant_task_mask & statusA.statusA_t.svc_return;
 4013570:	e0bfff17 	ldw	r2,-4(fp)
 4013574:	1004d0ba 	srli	r2,r2,2
 4013578:	108fffcc 	andi	r2,r2,16383
 401357c:	108001cc 	andi	r2,r2,7
 4013580:	d0a35205 	stb	r2,-29368(gp)

  taskswitch; /* perform manual contextswitch */
 4013584:	003b683a 	trap	0

}
 4013588:	0001883a 	nop
 401358c:	e037883a 	mov	sp,fp
 4013590:	df000017 	ldw	fp,0(sp)
 4013594:	dec00104 	addi	sp,sp,4
 4013598:	f800283a 	ret

0401359c <task_change_prio>:
  Arguments   : int taskID and int priority

  Return      : none
-----------------------------------------------------------------------------*/
void task_change_prio(int taskID, int priority)
{
 401359c:	defffb04 	addi	sp,sp,-20
 40135a0:	df000415 	stw	fp,16(sp)
 40135a4:	df000404 	addi	fp,sp,16
 40135a8:	e13ffe15 	stw	r4,-8(fp)
 40135ac:	e17fff15 	stw	r5,-4(fp)
  svc_t svc;
  statusA_union status;
  
  svc.task_start.type =  sierra_task_change_prio;
 40135b0:	e0fffc17 	ldw	r3,-16(fp)
 40135b4:	00810034 	movhi	r2,1024
 40135b8:	10bfffc4 	addi	r2,r2,-1
 40135bc:	1884703a 	and	r2,r3,r2
 40135c0:	10860034 	orhi	r2,r2,6144
 40135c4:	e0bffc15 	stw	r2,-16(fp)
  svc.task_create.priority = priority;
 40135c8:	e0bfff17 	ldw	r2,-4(fp)
 40135cc:	1083ffcc 	andi	r2,r2,4095
 40135d0:	10bfffcc 	andi	r2,r2,65535
 40135d4:	1083ffcc 	andi	r2,r2,4095
 40135d8:	1006933a 	slli	r3,r2,12
 40135dc:	e13ffc17 	ldw	r4,-16(fp)
 40135e0:	00bfc034 	movhi	r2,65280
 40135e4:	1083ffc4 	addi	r2,r2,4095
 40135e8:	2084703a 	and	r2,r4,r2
 40135ec:	10c4b03a 	or	r2,r2,r3
 40135f0:	e0bffc15 	stw	r2,-16(fp)
  svc.task_start.taskID = taskID;
 40135f4:	e0bffe17 	ldw	r2,-8(fp)
 40135f8:	1083ffcc 	andi	r2,r2,4095
 40135fc:	10bfffcc 	andi	r2,r2,65535
 4013600:	1083ffcc 	andi	r2,r2,4095
 4013604:	e13ffc17 	ldw	r4,-16(fp)
 4013608:	00fc0004 	movi	r3,-4096
 401360c:	20c6703a 	and	r3,r4,r3
 4013610:	1884b03a 	or	r2,r3,r2
 4013614:	e0bffc15 	stw	r2,-16(fp)
  
  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4013618:	e0fffc17 	ldw	r3,-16(fp)
 401361c:	00820274 	movhi	r2,2057
 4013620:	10841004 	addi	r2,r2,4160
 4013624:	10c00035 	stwio	r3,0(r2)
  
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4013628:	00820274 	movhi	r2,2057
 401362c:	10840804 	addi	r2,r2,4128
 4013630:	10800037 	ldwio	r2,0(r2)
 4013634:	e0bffd15 	stw	r2,-12(fp)
  } while (status.statusA_t.svc_ack == 1);
 4013638:	e0bffd17 	ldw	r2,-12(fp)
 401363c:	1080004c 	andi	r2,r2,1
 4013640:	103ff91e 	bne	r2,zero,4013628 <__ram_exceptions_end+0xfbf8b38c>
  
}
 4013644:	0001883a 	nop
 4013648:	e037883a 	mov	sp,fp
 401364c:	df000017 	ldw	fp,0(sp)
 4013650:	dec00104 	addi	sp,sp,4
 4013654:	f800283a 	ret

04013658 <task_yield>:
  Arguments   : none

  Return      : none
-----------------------------------------------------------------------------*/
void task_yield(void)
{
 4013658:	defffc04 	addi	sp,sp,-16
 401365c:	df000315 	stw	fp,12(sp)
 4013660:	df000304 	addi	fp,sp,12
  statusA_union statusA;
  statusB_union statusB;
  svc_t svc;
 
  svc.task_yield.type = sierra_task_yield;
 4013664:	e0ffff17 	ldw	r3,-4(fp)
 4013668:	00810034 	movhi	r2,1024
 401366c:	10bfffc4 	addi	r2,r2,-1
 4013670:	1884703a 	and	r2,r3,r2
 4013674:	10840034 	orhi	r2,r2,4096
 4013678:	e0bfff15 	stw	r2,-4(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 401367c:	e0ffff17 	ldw	r3,-4(fp)
 4013680:	00820274 	movhi	r2,2057
 4013684:	10841004 	addi	r2,r2,4160
 4013688:	10c00035 	stwio	r3,0(r2)

  do {
	statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 401368c:	00820274 	movhi	r2,2057
 4013690:	10840804 	addi	r2,r2,4128
 4013694:	10800037 	ldwio	r2,0(r2)
 4013698:	e0bffd15 	stw	r2,-12(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 401369c:	e0bffd17 	ldw	r2,-12(fp)
 40136a0:	1080004c 	andi	r2,r2,1
 40136a4:	103ff91e 	bne	r2,zero,401368c <__ram_exceptions_end+0xfbf8b3f0>

  
statusB.statusB_reg_integer = M_RD_Sierra_statusB_reg;
 40136a8:	00820274 	movhi	r2,2057
 40136ac:	10840c04 	addi	r2,r2,4144
 40136b0:	10800037 	ldwio	r2,0(r2)
 40136b4:	e0bffe15 	stw	r2,-8(fp)

  /* Get next task ID */
NEXT_TASKID = constant_task_mask & statusB.statusB_t.running_taskID;
 40136b8:	e0bffe17 	ldw	r2,-8(fp)
 40136bc:	1004d07a 	srli	r2,r2,1
 40136c0:	1007883a 	mov	r3,r2
 40136c4:	00bfffc4 	movi	r2,-1
 40136c8:	1884703a 	and	r2,r3,r2
 40136cc:	108001cc 	andi	r2,r2,7
 40136d0:	d0a35205 	stb	r2,-29368(gp)

  taskswitch; /* perform manual contextswitch */
 40136d4:	003b683a 	trap	0
}
 40136d8:	0001883a 	nop
 40136dc:	e037883a 	mov	sp,fp
 40136e0:	df000017 	ldw	fp,0(sp)
 40136e4:	dec00104 	addi	sp,sp,4
 40136e8:	f800283a 	ret

040136ec <init_period_time>:
  Arguments   : Periodtime (in ticks)

  Return      : none
-----------------------------------------------------------------------------*/
void init_period_time(int per_time)
{
 40136ec:	defffc04 	addi	sp,sp,-16
 40136f0:	df000315 	stw	fp,12(sp)
 40136f4:	df000304 	addi	fp,sp,12
 40136f8:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union status;
  svc.init_period_time.type =  sierra_init_period_time;
 40136fc:	e0fffd17 	ldw	r3,-12(fp)
 4013700:	00810034 	movhi	r2,1024
 4013704:	10bfffc4 	addi	r2,r2,-1
 4013708:	1884703a 	and	r2,r3,r2
 401370c:	10910034 	orhi	r2,r2,17408
 4013710:	e0bffd15 	stw	r2,-12(fp)
  svc.init_period_time.period =  per_time;
 4013714:	e0bfff17 	ldw	r2,-4(fp)
 4013718:	e0bffd0d 	sth	r2,-12(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 401371c:	e0fffd17 	ldw	r3,-12(fp)
 4013720:	00820274 	movhi	r2,2057
 4013724:	10841004 	addi	r2,r2,4160
 4013728:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	status.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 401372c:	00820274 	movhi	r2,2057
 4013730:	10840804 	addi	r2,r2,4128
 4013734:	10800037 	ldwio	r2,0(r2)
 4013738:	e0bffe15 	stw	r2,-8(fp)
  } while (status.statusA_t.svc_ack == 1);
 401373c:	e0bffe17 	ldw	r2,-8(fp)
 4013740:	1080004c 	andi	r2,r2,1
 4013744:	103ff91e 	bne	r2,zero,401372c <__ram_exceptions_end+0xfbf8b490>
}
 4013748:	0001883a 	nop
 401374c:	e037883a 	mov	sp,fp
 4013750:	df000017 	ldw	fp,0(sp)
 4013754:	dec00104 	addi	sp,sp,4
 4013758:	f800283a 	ret

0401375c <wait_for_next_period>:
  Description : Let current task wait for next period.
  Arguments   : none
  Return      : none
-----------------------------------------------------------------------------*/
task_periodic_start_union wait_for_next_period(void)
{
 401375c:	defffa04 	addi	sp,sp,-24
 4013760:	dfc00515 	stw	ra,20(sp)
 4013764:	df000415 	stw	fp,16(sp)
 4013768:	df000404 	addi	fp,sp,16
//  unsigned int info;
  task_periodic_start_union info;
  unsigned int temp;
  statusA_union statusA;

  svc.wait_for_next_period.type =  sierra_wait_for_next_period;
 401376c:	e0fffc17 	ldw	r3,-16(fp)
 4013770:	00810034 	movhi	r2,1024
 4013774:	10bfffc4 	addi	r2,r2,-1
 4013778:	1884703a 	and	r2,r3,r2
 401377c:	10940034 	orhi	r2,r2,20480
 4013780:	e0bffc15 	stw	r2,-16(fp)
  tsw_off();
 4013784:	4012c680 	call	4012c68 <tsw_off>

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 4013788:	e0fffc17 	ldw	r3,-16(fp)
 401378c:	00820274 	movhi	r2,2057
 4013790:	10841004 	addi	r2,r2,4160
 4013794:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 4013798:	00820274 	movhi	r2,2057
 401379c:	10840804 	addi	r2,r2,4128
 40137a0:	10800037 	ldwio	r2,0(r2)
 40137a4:	e0bfff15 	stw	r2,-4(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 40137a8:	e0bfff17 	ldw	r2,-4(fp)
 40137ac:	1080004c 	andi	r2,r2,1
 40137b0:	103ff91e 	bne	r2,zero,4013798 <__ram_exceptions_end+0xfbf8b4fc>
 
  /* Get next task ID */
  info.periodic_start_integer = statusA.statusA_t.svc_return;
 40137b4:	e0bfff17 	ldw	r2,-4(fp)
 40137b8:	1004d0ba 	srli	r2,r2,2
 40137bc:	108fffcc 	andi	r2,r2,16383
 40137c0:	10bfffcc 	andi	r2,r2,65535
 40137c4:	e0bffd15 	stw	r2,-12(fp)

NEXT_TASKID = constant_task_mask & info.task_periodic_start_t.task_id;
 40137c8:	e0bffd17 	ldw	r2,-12(fp)
 40137cc:	100493fa 	slli	r2,r2,15
 40137d0:	1005d43a 	srai	r2,r2,16
 40137d4:	108001cc 	andi	r2,r2,7
 40137d8:	d0a35205 	stb	r2,-29368(gp)
 
 temp = info.periodic_start_integer;
 40137dc:	e0bffd17 	ldw	r2,-12(fp)
 40137e0:	e0bffe15 	stw	r2,-8(fp)
  tsw_on();
 40137e4:	4012c180 	call	4012c18 <tsw_on>
  taskswitch; /* perform manual contextswitch */
 40137e8:	003b683a 	trap	0

  return *(task_periodic_start_union *) & temp; //if you do not use deadline control, you can deleate this row.
 40137ec:	e0bffe04 	addi	r2,fp,-8
 40137f0:	10800017 	ldw	r2,0(r2)
}
 40137f4:	e037883a 	mov	sp,fp
 40137f8:	dfc00117 	ldw	ra,4(sp)
 40137fc:	df000017 	ldw	fp,0(sp)
 4013800:	dec00204 	addi	sp,sp,8
 4013804:	f800283a 	ret

04013808 <delay>:
  Arguments   : Number of ticks to delay task.

  Return      : none
-----------------------------------------------------------------------------*/
void delay(int delay_time)
{
 4013808:	defffc04 	addi	sp,sp,-16
 401380c:	df000315 	stw	fp,12(sp)
 4013810:	df000304 	addi	fp,sp,12
 4013814:	e13fff15 	stw	r4,-4(fp)
  svc_t svc;
  statusA_union statusA;
 
  svc.delay.type =  sierra_delay;
 4013818:	e0fffd17 	ldw	r3,-12(fp)
 401381c:	00810034 	movhi	r2,1024
 4013820:	10bfffc4 	addi	r2,r2,-1
 4013824:	1884703a 	and	r2,r3,r2
 4013828:	10900034 	orhi	r2,r2,16384
 401382c:	e0bffd15 	stw	r2,-12(fp)
  svc.delay.nroftick =  delay_time;
 4013830:	e0ffff17 	ldw	r3,-4(fp)
 4013834:	00810034 	movhi	r2,1024
 4013838:	10bfffc4 	addi	r2,r2,-1
 401383c:	1886703a 	and	r3,r3,r2
 4013840:	00810034 	movhi	r2,1024
 4013844:	10bfffc4 	addi	r2,r2,-1
 4013848:	1884703a 	and	r2,r3,r2
 401384c:	e0fffd17 	ldw	r3,-12(fp)
 4013850:	18ff002c 	andhi	r3,r3,64512
 4013854:	1884b03a 	or	r2,r3,r2
 4013858:	e0bffd15 	stw	r2,-12(fp)

  /* Start service call*/
  IOWR_ALT_SVC_REGISTER(svc.svc_input);
 401385c:	e0fffd17 	ldw	r3,-12(fp)
 4013860:	00820274 	movhi	r2,2057
 4013864:	10841004 	addi	r2,r2,4160
 4013868:	10c00035 	stwio	r3,0(r2)

  //  ack_wait
  do {
	statusA.statusA_reg_integer = M_RD_Sierra_statusA_reg;
 401386c:	00820274 	movhi	r2,2057
 4013870:	10840804 	addi	r2,r2,4128
 4013874:	10800037 	ldwio	r2,0(r2)
 4013878:	e0bffe15 	stw	r2,-8(fp)
  } while (statusA.statusA_t.svc_ack == 1);
 401387c:	e0bffe17 	ldw	r2,-8(fp)
 4013880:	1080004c 	andi	r2,r2,1
 4013884:	103ff91e 	bne	r2,zero,401386c <__ram_exceptions_end+0xfbf8b5d0>
  
  /* Get next task ID */
 NEXT_TASKID = constant_task_mask & statusA.statusA_t.svc_return;
 4013888:	e0bffe17 	ldw	r2,-8(fp)
 401388c:	1004d0ba 	srli	r2,r2,2
 4013890:	108fffcc 	andi	r2,r2,16383
 4013894:	108001cc 	andi	r2,r2,7
 4013898:	d0a35205 	stb	r2,-29368(gp)

  taskswitch; /* perform manual contextswitch */
 401389c:	003b683a 	trap	0
}
 40138a0:	0001883a 	nop
 40138a4:	e037883a 	mov	sp,fp
 40138a8:	df000017 	ldw	fp,0(sp)
 40138ac:	dec00104 	addi	sp,sp,4
 40138b0:	f800283a 	ret

040138b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 40138b4:	defffa04 	addi	sp,sp,-24
 40138b8:	dfc00515 	stw	ra,20(sp)
 40138bc:	df000415 	stw	fp,16(sp)
 40138c0:	df000404 	addi	fp,sp,16
 40138c4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 40138c8:	00800244 	movi	r2,9
 40138cc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 40138d0:	014003f4 	movhi	r5,15
 40138d4:	29509004 	addi	r5,r5,16960
 40138d8:	e13ffd17 	ldw	r4,-12(fp)
 40138dc:	40011140 	call	4001114 <__mulsi3>
 40138e0:	100b883a 	mov	r5,r2
 40138e4:	0100bef4 	movhi	r4,763
 40138e8:	213c2004 	addi	r4,r4,-3968
 40138ec:	40010580 	call	4001058 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 40138f0:	100b883a 	mov	r5,r2
 40138f4:	01200034 	movhi	r4,32768
 40138f8:	213fffc4 	addi	r4,r4,-1
 40138fc:	40010580 	call	4001058 <__udivsi3>
 4013900:	100b883a 	mov	r5,r2
 4013904:	e13fff17 	ldw	r4,-4(fp)
 4013908:	40010580 	call	4001058 <__udivsi3>
 401390c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4013910:	e0bffe17 	ldw	r2,-8(fp)
 4013914:	10002a26 	beq	r2,zero,40139c0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4013918:	e03ffc15 	stw	zero,-16(fp)
 401391c:	00001706 	br	401397c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4013920:	00a00034 	movhi	r2,32768
 4013924:	10bfffc4 	addi	r2,r2,-1
 4013928:	10bfffc4 	addi	r2,r2,-1
 401392c:	103ffe1e 	bne	r2,zero,4013928 <__ram_exceptions_end+0xfbf8b68c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4013930:	014003f4 	movhi	r5,15
 4013934:	29509004 	addi	r5,r5,16960
 4013938:	e13ffd17 	ldw	r4,-12(fp)
 401393c:	40011140 	call	4001114 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4013940:	100b883a 	mov	r5,r2
 4013944:	0100bef4 	movhi	r4,763
 4013948:	213c2004 	addi	r4,r4,-3968
 401394c:	40010580 	call	4001058 <__udivsi3>
 4013950:	100b883a 	mov	r5,r2
 4013954:	01200034 	movhi	r4,32768
 4013958:	213fffc4 	addi	r4,r4,-1
 401395c:	40010580 	call	4001058 <__udivsi3>
 4013960:	1007883a 	mov	r3,r2
 4013964:	e0bfff17 	ldw	r2,-4(fp)
 4013968:	10c5c83a 	sub	r2,r2,r3
 401396c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4013970:	e0bffc17 	ldw	r2,-16(fp)
 4013974:	10800044 	addi	r2,r2,1
 4013978:	e0bffc15 	stw	r2,-16(fp)
 401397c:	e0fffc17 	ldw	r3,-16(fp)
 4013980:	e0bffe17 	ldw	r2,-8(fp)
 4013984:	18bfe616 	blt	r3,r2,4013920 <__ram_exceptions_end+0xfbf8b684>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4013988:	014003f4 	movhi	r5,15
 401398c:	29509004 	addi	r5,r5,16960
 4013990:	e13ffd17 	ldw	r4,-12(fp)
 4013994:	40011140 	call	4001114 <__mulsi3>
 4013998:	100b883a 	mov	r5,r2
 401399c:	0100bef4 	movhi	r4,763
 40139a0:	213c2004 	addi	r4,r4,-3968
 40139a4:	40010580 	call	4001058 <__udivsi3>
 40139a8:	e17fff17 	ldw	r5,-4(fp)
 40139ac:	1009883a 	mov	r4,r2
 40139b0:	40011140 	call	4001114 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40139b4:	10bfffc4 	addi	r2,r2,-1
 40139b8:	103ffe1e 	bne	r2,zero,40139b4 <__ram_exceptions_end+0xfbf8b718>
 40139bc:	00000d06 	br	40139f4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40139c0:	014003f4 	movhi	r5,15
 40139c4:	29509004 	addi	r5,r5,16960
 40139c8:	e13ffd17 	ldw	r4,-12(fp)
 40139cc:	40011140 	call	4001114 <__mulsi3>
 40139d0:	100b883a 	mov	r5,r2
 40139d4:	0100bef4 	movhi	r4,763
 40139d8:	213c2004 	addi	r4,r4,-3968
 40139dc:	40010580 	call	4001058 <__udivsi3>
 40139e0:	e17fff17 	ldw	r5,-4(fp)
 40139e4:	1009883a 	mov	r4,r2
 40139e8:	40011140 	call	4001114 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40139ec:	10bfffc4 	addi	r2,r2,-1
 40139f0:	00bffe16 	blt	zero,r2,40139ec <__ram_exceptions_end+0xfbf8b750>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 40139f4:	0005883a 	mov	r2,zero
}
 40139f8:	e037883a 	mov	sp,fp
 40139fc:	dfc00117 	ldw	ra,4(sp)
 4013a00:	df000017 	ldw	fp,0(sp)
 4013a04:	dec00204 	addi	sp,sp,8
 4013a08:	f800283a 	ret

04013a0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4013a0c:	deffff04 	addi	sp,sp,-4
 4013a10:	df000015 	stw	fp,0(sp)
 4013a14:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4013a18:	0001883a 	nop
 4013a1c:	e037883a 	mov	sp,fp
 4013a20:	df000017 	ldw	fp,0(sp)
 4013a24:	dec00104 	addi	sp,sp,4
 4013a28:	f800283a 	ret

04013a2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4013a2c:	defffe04 	addi	sp,sp,-8
 4013a30:	dfc00115 	stw	ra,4(sp)
 4013a34:	df000015 	stw	fp,0(sp)
 4013a38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4013a3c:	d0a00c17 	ldw	r2,-32720(gp)
 4013a40:	10000326 	beq	r2,zero,4013a50 <alt_get_errno+0x24>
 4013a44:	d0a00c17 	ldw	r2,-32720(gp)
 4013a48:	103ee83a 	callr	r2
 4013a4c:	00000106 	br	4013a54 <alt_get_errno+0x28>
 4013a50:	d0a34604 	addi	r2,gp,-29416
}
 4013a54:	e037883a 	mov	sp,fp
 4013a58:	dfc00117 	ldw	ra,4(sp)
 4013a5c:	df000017 	ldw	fp,0(sp)
 4013a60:	dec00204 	addi	sp,sp,8
 4013a64:	f800283a 	ret

04013a68 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4013a68:	defffa04 	addi	sp,sp,-24
 4013a6c:	dfc00515 	stw	ra,20(sp)
 4013a70:	df000415 	stw	fp,16(sp)
 4013a74:	df000404 	addi	fp,sp,16
 4013a78:	e13ffe15 	stw	r4,-8(fp)
 4013a7c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4013a80:	e0bffe17 	ldw	r2,-8(fp)
 4013a84:	10000326 	beq	r2,zero,4013a94 <alt_dev_llist_insert+0x2c>
 4013a88:	e0bffe17 	ldw	r2,-8(fp)
 4013a8c:	10800217 	ldw	r2,8(r2)
 4013a90:	1000061e 	bne	r2,zero,4013aac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4013a94:	4013a2c0 	call	4013a2c <alt_get_errno>
 4013a98:	1007883a 	mov	r3,r2
 4013a9c:	00800584 	movi	r2,22
 4013aa0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4013aa4:	00bffa84 	movi	r2,-22
 4013aa8:	00001306 	br	4013af8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4013aac:	e0bffe17 	ldw	r2,-8(fp)
 4013ab0:	e0ffff17 	ldw	r3,-4(fp)
 4013ab4:	e0fffc15 	stw	r3,-16(fp)
 4013ab8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4013abc:	e0bffd17 	ldw	r2,-12(fp)
 4013ac0:	e0fffc17 	ldw	r3,-16(fp)
 4013ac4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4013ac8:	e0bffc17 	ldw	r2,-16(fp)
 4013acc:	10c00017 	ldw	r3,0(r2)
 4013ad0:	e0bffd17 	ldw	r2,-12(fp)
 4013ad4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4013ad8:	e0bffc17 	ldw	r2,-16(fp)
 4013adc:	10800017 	ldw	r2,0(r2)
 4013ae0:	e0fffd17 	ldw	r3,-12(fp)
 4013ae4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4013ae8:	e0bffc17 	ldw	r2,-16(fp)
 4013aec:	e0fffd17 	ldw	r3,-12(fp)
 4013af0:	10c00015 	stw	r3,0(r2)

  return 0;  
 4013af4:	0005883a 	mov	r2,zero
}
 4013af8:	e037883a 	mov	sp,fp
 4013afc:	dfc00117 	ldw	ra,4(sp)
 4013b00:	df000017 	ldw	fp,0(sp)
 4013b04:	dec00204 	addi	sp,sp,8
 4013b08:	f800283a 	ret

04013b0c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4013b0c:	defffa04 	addi	sp,sp,-24
 4013b10:	dfc00515 	stw	ra,20(sp)
 4013b14:	df000415 	stw	fp,16(sp)
 4013b18:	df000404 	addi	fp,sp,16
 4013b1c:	e13ffe15 	stw	r4,-8(fp)
 4013b20:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4013b24:	e0bfff17 	ldw	r2,-4(fp)
 4013b28:	10800017 	ldw	r2,0(r2)
 4013b2c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4013b30:	e13ffe17 	ldw	r4,-8(fp)
 4013b34:	4007d040 	call	4007d04 <strlen>
 4013b38:	10800044 	addi	r2,r2,1
 4013b3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4013b40:	00000d06 	br	4013b78 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4013b44:	e0bffc17 	ldw	r2,-16(fp)
 4013b48:	10800217 	ldw	r2,8(r2)
 4013b4c:	e0fffd17 	ldw	r3,-12(fp)
 4013b50:	180d883a 	mov	r6,r3
 4013b54:	e17ffe17 	ldw	r5,-8(fp)
 4013b58:	1009883a 	mov	r4,r2
 4013b5c:	40149400 	call	4014940 <memcmp>
 4013b60:	1000021e 	bne	r2,zero,4013b6c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4013b64:	e0bffc17 	ldw	r2,-16(fp)
 4013b68:	00000706 	br	4013b88 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4013b6c:	e0bffc17 	ldw	r2,-16(fp)
 4013b70:	10800017 	ldw	r2,0(r2)
 4013b74:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4013b78:	e0fffc17 	ldw	r3,-16(fp)
 4013b7c:	e0bfff17 	ldw	r2,-4(fp)
 4013b80:	18bff01e 	bne	r3,r2,4013b44 <__ram_exceptions_end+0xfbf8b8a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4013b84:	0005883a 	mov	r2,zero
}
 4013b88:	e037883a 	mov	sp,fp
 4013b8c:	dfc00117 	ldw	ra,4(sp)
 4013b90:	df000017 	ldw	fp,0(sp)
 4013b94:	dec00204 	addi	sp,sp,8
 4013b98:	f800283a 	ret

04013b9c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4013b9c:	deffff04 	addi	sp,sp,-4
 4013ba0:	df000015 	stw	fp,0(sp)
 4013ba4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4013ba8:	0001883a 	nop
 4013bac:	e037883a 	mov	sp,fp
 4013bb0:	df000017 	ldw	fp,0(sp)
 4013bb4:	dec00104 	addi	sp,sp,4
 4013bb8:	f800283a 	ret

04013bbc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4013bbc:	defff904 	addi	sp,sp,-28
 4013bc0:	dfc00615 	stw	ra,24(sp)
 4013bc4:	df000515 	stw	fp,20(sp)
 4013bc8:	df000504 	addi	fp,sp,20
 4013bcc:	e13ffc15 	stw	r4,-16(fp)
 4013bd0:	e17ffd15 	stw	r5,-12(fp)
 4013bd4:	e1bffe15 	stw	r6,-8(fp)
 4013bd8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4013bdc:	e0800217 	ldw	r2,8(fp)
 4013be0:	d8800015 	stw	r2,0(sp)
 4013be4:	e1ffff17 	ldw	r7,-4(fp)
 4013be8:	e1bffe17 	ldw	r6,-8(fp)
 4013bec:	e17ffd17 	ldw	r5,-12(fp)
 4013bf0:	e13ffc17 	ldw	r4,-16(fp)
 4013bf4:	4013d6c0 	call	4013d6c <alt_iic_isr_register>
}  
 4013bf8:	e037883a 	mov	sp,fp
 4013bfc:	dfc00117 	ldw	ra,4(sp)
 4013c00:	df000017 	ldw	fp,0(sp)
 4013c04:	dec00204 	addi	sp,sp,8
 4013c08:	f800283a 	ret

04013c0c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4013c0c:	defff904 	addi	sp,sp,-28
 4013c10:	df000615 	stw	fp,24(sp)
 4013c14:	df000604 	addi	fp,sp,24
 4013c18:	e13ffe15 	stw	r4,-8(fp)
 4013c1c:	e17fff15 	stw	r5,-4(fp)
 4013c20:	e0bfff17 	ldw	r2,-4(fp)
 4013c24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013c28:	0005303a 	rdctl	r2,status
 4013c2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013c30:	e0fffb17 	ldw	r3,-20(fp)
 4013c34:	00bfff84 	movi	r2,-2
 4013c38:	1884703a 	and	r2,r3,r2
 4013c3c:	1001703a 	wrctl	status,r2
  
  return context;
 4013c40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4013c44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4013c48:	00c00044 	movi	r3,1
 4013c4c:	e0bffa17 	ldw	r2,-24(fp)
 4013c50:	1884983a 	sll	r2,r3,r2
 4013c54:	1007883a 	mov	r3,r2
 4013c58:	d0a35317 	ldw	r2,-29364(gp)
 4013c5c:	1884b03a 	or	r2,r3,r2
 4013c60:	d0a35315 	stw	r2,-29364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4013c64:	d0a35317 	ldw	r2,-29364(gp)
 4013c68:	100170fa 	wrctl	ienable,r2
 4013c6c:	e0bffc17 	ldw	r2,-16(fp)
 4013c70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013c74:	e0bffd17 	ldw	r2,-12(fp)
 4013c78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4013c7c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4013c80:	0001883a 	nop
}
 4013c84:	e037883a 	mov	sp,fp
 4013c88:	df000017 	ldw	fp,0(sp)
 4013c8c:	dec00104 	addi	sp,sp,4
 4013c90:	f800283a 	ret

04013c94 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4013c94:	defff904 	addi	sp,sp,-28
 4013c98:	df000615 	stw	fp,24(sp)
 4013c9c:	df000604 	addi	fp,sp,24
 4013ca0:	e13ffe15 	stw	r4,-8(fp)
 4013ca4:	e17fff15 	stw	r5,-4(fp)
 4013ca8:	e0bfff17 	ldw	r2,-4(fp)
 4013cac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013cb0:	0005303a 	rdctl	r2,status
 4013cb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013cb8:	e0fffb17 	ldw	r3,-20(fp)
 4013cbc:	00bfff84 	movi	r2,-2
 4013cc0:	1884703a 	and	r2,r3,r2
 4013cc4:	1001703a 	wrctl	status,r2
  
  return context;
 4013cc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4013ccc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4013cd0:	00c00044 	movi	r3,1
 4013cd4:	e0bffa17 	ldw	r2,-24(fp)
 4013cd8:	1884983a 	sll	r2,r3,r2
 4013cdc:	0084303a 	nor	r2,zero,r2
 4013ce0:	1007883a 	mov	r3,r2
 4013ce4:	d0a35317 	ldw	r2,-29364(gp)
 4013ce8:	1884703a 	and	r2,r3,r2
 4013cec:	d0a35315 	stw	r2,-29364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4013cf0:	d0a35317 	ldw	r2,-29364(gp)
 4013cf4:	100170fa 	wrctl	ienable,r2
 4013cf8:	e0bffc17 	ldw	r2,-16(fp)
 4013cfc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013d00:	e0bffd17 	ldw	r2,-12(fp)
 4013d04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4013d08:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4013d0c:	0001883a 	nop
}
 4013d10:	e037883a 	mov	sp,fp
 4013d14:	df000017 	ldw	fp,0(sp)
 4013d18:	dec00104 	addi	sp,sp,4
 4013d1c:	f800283a 	ret

04013d20 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4013d20:	defffc04 	addi	sp,sp,-16
 4013d24:	df000315 	stw	fp,12(sp)
 4013d28:	df000304 	addi	fp,sp,12
 4013d2c:	e13ffe15 	stw	r4,-8(fp)
 4013d30:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4013d34:	000530fa 	rdctl	r2,ienable
 4013d38:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4013d3c:	00c00044 	movi	r3,1
 4013d40:	e0bfff17 	ldw	r2,-4(fp)
 4013d44:	1884983a 	sll	r2,r3,r2
 4013d48:	1007883a 	mov	r3,r2
 4013d4c:	e0bffd17 	ldw	r2,-12(fp)
 4013d50:	1884703a 	and	r2,r3,r2
 4013d54:	1004c03a 	cmpne	r2,r2,zero
 4013d58:	10803fcc 	andi	r2,r2,255
}
 4013d5c:	e037883a 	mov	sp,fp
 4013d60:	df000017 	ldw	fp,0(sp)
 4013d64:	dec00104 	addi	sp,sp,4
 4013d68:	f800283a 	ret

04013d6c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4013d6c:	defff504 	addi	sp,sp,-44
 4013d70:	dfc00a15 	stw	ra,40(sp)
 4013d74:	df000915 	stw	fp,36(sp)
 4013d78:	df000904 	addi	fp,sp,36
 4013d7c:	e13ffc15 	stw	r4,-16(fp)
 4013d80:	e17ffd15 	stw	r5,-12(fp)
 4013d84:	e1bffe15 	stw	r6,-8(fp)
 4013d88:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4013d8c:	00bffa84 	movi	r2,-22
 4013d90:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4013d94:	e0bffd17 	ldw	r2,-12(fp)
 4013d98:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4013d9c:	e0bff817 	ldw	r2,-32(fp)
 4013da0:	10800808 	cmpgei	r2,r2,32
 4013da4:	1000271e 	bne	r2,zero,4013e44 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013da8:	0005303a 	rdctl	r2,status
 4013dac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013db0:	e0fffb17 	ldw	r3,-20(fp)
 4013db4:	00bfff84 	movi	r2,-2
 4013db8:	1884703a 	and	r2,r3,r2
 4013dbc:	1001703a 	wrctl	status,r2
  
  return context;
 4013dc0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4013dc4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4013dc8:	008100b4 	movhi	r2,1026
 4013dcc:	10a56804 	addi	r2,r2,-27232
 4013dd0:	e0fff817 	ldw	r3,-32(fp)
 4013dd4:	180690fa 	slli	r3,r3,3
 4013dd8:	10c5883a 	add	r2,r2,r3
 4013ddc:	e0fffe17 	ldw	r3,-8(fp)
 4013de0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4013de4:	008100b4 	movhi	r2,1026
 4013de8:	10a56804 	addi	r2,r2,-27232
 4013dec:	e0fff817 	ldw	r3,-32(fp)
 4013df0:	180690fa 	slli	r3,r3,3
 4013df4:	10c5883a 	add	r2,r2,r3
 4013df8:	10800104 	addi	r2,r2,4
 4013dfc:	e0ffff17 	ldw	r3,-4(fp)
 4013e00:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4013e04:	e0bffe17 	ldw	r2,-8(fp)
 4013e08:	10000526 	beq	r2,zero,4013e20 <alt_iic_isr_register+0xb4>
 4013e0c:	e0bff817 	ldw	r2,-32(fp)
 4013e10:	100b883a 	mov	r5,r2
 4013e14:	e13ffc17 	ldw	r4,-16(fp)
 4013e18:	4013c0c0 	call	4013c0c <alt_ic_irq_enable>
 4013e1c:	00000406 	br	4013e30 <alt_iic_isr_register+0xc4>
 4013e20:	e0bff817 	ldw	r2,-32(fp)
 4013e24:	100b883a 	mov	r5,r2
 4013e28:	e13ffc17 	ldw	r4,-16(fp)
 4013e2c:	4013c940 	call	4013c94 <alt_ic_irq_disable>
 4013e30:	e0bff715 	stw	r2,-36(fp)
 4013e34:	e0bffa17 	ldw	r2,-24(fp)
 4013e38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013e3c:	e0bff917 	ldw	r2,-28(fp)
 4013e40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4013e44:	e0bff717 	ldw	r2,-36(fp)
}
 4013e48:	e037883a 	mov	sp,fp
 4013e4c:	dfc00117 	ldw	ra,4(sp)
 4013e50:	df000017 	ldw	fp,0(sp)
 4013e54:	dec00204 	addi	sp,sp,8
 4013e58:	f800283a 	ret

04013e5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4013e5c:	defff804 	addi	sp,sp,-32
 4013e60:	dfc00715 	stw	ra,28(sp)
 4013e64:	df000615 	stw	fp,24(sp)
 4013e68:	dc000515 	stw	r16,20(sp)
 4013e6c:	df000604 	addi	fp,sp,24
 4013e70:	e13ffb15 	stw	r4,-20(fp)
 4013e74:	e17ffc15 	stw	r5,-16(fp)
 4013e78:	e1bffd15 	stw	r6,-12(fp)
 4013e7c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4013e80:	e1bffe17 	ldw	r6,-8(fp)
 4013e84:	e17ffd17 	ldw	r5,-12(fp)
 4013e88:	e13ffc17 	ldw	r4,-16(fp)
 4013e8c:	40142640 	call	4014264 <open>
 4013e90:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4013e94:	e0bffa17 	ldw	r2,-24(fp)
 4013e98:	10002216 	blt	r2,zero,4013f24 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4013e9c:	04010074 	movhi	r16,1025
 4013ea0:	841a3504 	addi	r16,r16,26836
 4013ea4:	e0bffa17 	ldw	r2,-24(fp)
 4013ea8:	01400304 	movi	r5,12
 4013eac:	1009883a 	mov	r4,r2
 4013eb0:	40011140 	call	4001114 <__mulsi3>
 4013eb4:	8085883a 	add	r2,r16,r2
 4013eb8:	10c00017 	ldw	r3,0(r2)
 4013ebc:	e0bffb17 	ldw	r2,-20(fp)
 4013ec0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4013ec4:	04010074 	movhi	r16,1025
 4013ec8:	841a3504 	addi	r16,r16,26836
 4013ecc:	e0bffa17 	ldw	r2,-24(fp)
 4013ed0:	01400304 	movi	r5,12
 4013ed4:	1009883a 	mov	r4,r2
 4013ed8:	40011140 	call	4001114 <__mulsi3>
 4013edc:	8085883a 	add	r2,r16,r2
 4013ee0:	10800104 	addi	r2,r2,4
 4013ee4:	10c00017 	ldw	r3,0(r2)
 4013ee8:	e0bffb17 	ldw	r2,-20(fp)
 4013eec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4013ef0:	04010074 	movhi	r16,1025
 4013ef4:	841a3504 	addi	r16,r16,26836
 4013ef8:	e0bffa17 	ldw	r2,-24(fp)
 4013efc:	01400304 	movi	r5,12
 4013f00:	1009883a 	mov	r4,r2
 4013f04:	40011140 	call	4001114 <__mulsi3>
 4013f08:	8085883a 	add	r2,r16,r2
 4013f0c:	10800204 	addi	r2,r2,8
 4013f10:	10c00017 	ldw	r3,0(r2)
 4013f14:	e0bffb17 	ldw	r2,-20(fp)
 4013f18:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4013f1c:	e13ffa17 	ldw	r4,-24(fp)
 4013f20:	400e4e00 	call	400e4e0 <alt_release_fd>
  }
} 
 4013f24:	0001883a 	nop
 4013f28:	e6ffff04 	addi	sp,fp,-4
 4013f2c:	dfc00217 	ldw	ra,8(sp)
 4013f30:	df000117 	ldw	fp,4(sp)
 4013f34:	dc000017 	ldw	r16,0(sp)
 4013f38:	dec00304 	addi	sp,sp,12
 4013f3c:	f800283a 	ret

04013f40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4013f40:	defffb04 	addi	sp,sp,-20
 4013f44:	dfc00415 	stw	ra,16(sp)
 4013f48:	df000315 	stw	fp,12(sp)
 4013f4c:	df000304 	addi	fp,sp,12
 4013f50:	e13ffd15 	stw	r4,-12(fp)
 4013f54:	e17ffe15 	stw	r5,-8(fp)
 4013f58:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4013f5c:	01c07fc4 	movi	r7,511
 4013f60:	01800044 	movi	r6,1
 4013f64:	e17ffd17 	ldw	r5,-12(fp)
 4013f68:	01010074 	movhi	r4,1025
 4013f6c:	211a3804 	addi	r4,r4,26848
 4013f70:	4013e5c0 	call	4013e5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4013f74:	01c07fc4 	movi	r7,511
 4013f78:	000d883a 	mov	r6,zero
 4013f7c:	e17ffe17 	ldw	r5,-8(fp)
 4013f80:	01010074 	movhi	r4,1025
 4013f84:	211a3504 	addi	r4,r4,26836
 4013f88:	4013e5c0 	call	4013e5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4013f8c:	01c07fc4 	movi	r7,511
 4013f90:	01800044 	movi	r6,1
 4013f94:	e17fff17 	ldw	r5,-4(fp)
 4013f98:	01010074 	movhi	r4,1025
 4013f9c:	211a3b04 	addi	r4,r4,26860
 4013fa0:	4013e5c0 	call	4013e5c <alt_open_fd>
}  
 4013fa4:	0001883a 	nop
 4013fa8:	e037883a 	mov	sp,fp
 4013fac:	dfc00117 	ldw	ra,4(sp)
 4013fb0:	df000017 	ldw	fp,0(sp)
 4013fb4:	dec00204 	addi	sp,sp,8
 4013fb8:	f800283a 	ret

04013fbc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 4013fbc:	defff004 	addi	sp,sp,-64
 4013fc0:	df000f15 	stw	fp,60(sp)
 4013fc4:	df000f04 	addi	fp,sp,60
 4013fc8:	e13ffd15 	stw	r4,-12(fp)
 4013fcc:	e17ffe15 	stw	r5,-8(fp)
 4013fd0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 4013fd4:	00bffa84 	movi	r2,-22
 4013fd8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4013fdc:	e0bffd17 	ldw	r2,-12(fp)
 4013fe0:	10800828 	cmpgeui	r2,r2,32
 4013fe4:	1000501e 	bne	r2,zero,4014128 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013fe8:	0005303a 	rdctl	r2,status
 4013fec:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013ff0:	e0fff617 	ldw	r3,-40(fp)
 4013ff4:	00bfff84 	movi	r2,-2
 4013ff8:	1884703a 	and	r2,r3,r2
 4013ffc:	1001703a 	wrctl	status,r2
  
  return context;
 4014000:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 4014004:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 4014008:	008100b4 	movhi	r2,1026
 401400c:	10a56804 	addi	r2,r2,-27232
 4014010:	e0fffd17 	ldw	r3,-12(fp)
 4014014:	180690fa 	slli	r3,r3,3
 4014018:	10c5883a 	add	r2,r2,r3
 401401c:	e0ffff17 	ldw	r3,-4(fp)
 4014020:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 4014024:	008100b4 	movhi	r2,1026
 4014028:	10a56804 	addi	r2,r2,-27232
 401402c:	e0fffd17 	ldw	r3,-12(fp)
 4014030:	180690fa 	slli	r3,r3,3
 4014034:	10c5883a 	add	r2,r2,r3
 4014038:	10800104 	addi	r2,r2,4
 401403c:	e0fffe17 	ldw	r3,-8(fp)
 4014040:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 4014044:	e0bfff17 	ldw	r2,-4(fp)
 4014048:	10001926 	beq	r2,zero,40140b0 <alt_irq_register+0xf4>
 401404c:	e0bffd17 	ldw	r2,-12(fp)
 4014050:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014054:	0005303a 	rdctl	r2,status
 4014058:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401405c:	e0fff717 	ldw	r3,-36(fp)
 4014060:	00bfff84 	movi	r2,-2
 4014064:	1884703a 	and	r2,r3,r2
 4014068:	1001703a 	wrctl	status,r2
  
  return context;
 401406c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4014070:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 4014074:	00c00044 	movi	r3,1
 4014078:	e0bff217 	ldw	r2,-56(fp)
 401407c:	1884983a 	sll	r2,r3,r2
 4014080:	1007883a 	mov	r3,r2
 4014084:	d0a35317 	ldw	r2,-29364(gp)
 4014088:	1884b03a 	or	r2,r3,r2
 401408c:	d0a35315 	stw	r2,-29364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4014090:	d0a35317 	ldw	r2,-29364(gp)
 4014094:	100170fa 	wrctl	ienable,r2
 4014098:	e0bff817 	ldw	r2,-32(fp)
 401409c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40140a0:	e0bff917 	ldw	r2,-28(fp)
 40140a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40140a8:	0005883a 	mov	r2,zero
 40140ac:	00001906 	br	4014114 <alt_irq_register+0x158>
 40140b0:	e0bffd17 	ldw	r2,-12(fp)
 40140b4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40140b8:	0005303a 	rdctl	r2,status
 40140bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40140c0:	e0fffa17 	ldw	r3,-24(fp)
 40140c4:	00bfff84 	movi	r2,-2
 40140c8:	1884703a 	and	r2,r3,r2
 40140cc:	1001703a 	wrctl	status,r2
  
  return context;
 40140d0:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40140d4:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 40140d8:	00c00044 	movi	r3,1
 40140dc:	e0bff417 	ldw	r2,-48(fp)
 40140e0:	1884983a 	sll	r2,r3,r2
 40140e4:	0084303a 	nor	r2,zero,r2
 40140e8:	1007883a 	mov	r3,r2
 40140ec:	d0a35317 	ldw	r2,-29364(gp)
 40140f0:	1884703a 	and	r2,r3,r2
 40140f4:	d0a35315 	stw	r2,-29364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40140f8:	d0a35317 	ldw	r2,-29364(gp)
 40140fc:	100170fa 	wrctl	ienable,r2
 4014100:	e0bffb17 	ldw	r2,-20(fp)
 4014104:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014108:	e0bffc17 	ldw	r2,-16(fp)
 401410c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4014110:	0005883a 	mov	r2,zero
 4014114:	e0bff115 	stw	r2,-60(fp)
 4014118:	e0bff317 	ldw	r2,-52(fp)
 401411c:	e0bff515 	stw	r2,-44(fp)
 4014120:	e0bff517 	ldw	r2,-44(fp)
 4014124:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 4014128:	e0bff117 	ldw	r2,-60(fp)
}
 401412c:	e037883a 	mov	sp,fp
 4014130:	df000017 	ldw	fp,0(sp)
 4014134:	dec00104 	addi	sp,sp,4
 4014138:	f800283a 	ret

0401413c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401413c:	defffe04 	addi	sp,sp,-8
 4014140:	dfc00115 	stw	ra,4(sp)
 4014144:	df000015 	stw	fp,0(sp)
 4014148:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401414c:	d0a00c17 	ldw	r2,-32720(gp)
 4014150:	10000326 	beq	r2,zero,4014160 <alt_get_errno+0x24>
 4014154:	d0a00c17 	ldw	r2,-32720(gp)
 4014158:	103ee83a 	callr	r2
 401415c:	00000106 	br	4014164 <alt_get_errno+0x28>
 4014160:	d0a34604 	addi	r2,gp,-29416
}
 4014164:	e037883a 	mov	sp,fp
 4014168:	dfc00117 	ldw	ra,4(sp)
 401416c:	df000017 	ldw	fp,0(sp)
 4014170:	dec00204 	addi	sp,sp,8
 4014174:	f800283a 	ret

04014178 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4014178:	defffb04 	addi	sp,sp,-20
 401417c:	dfc00415 	stw	ra,16(sp)
 4014180:	df000315 	stw	fp,12(sp)
 4014184:	dc000215 	stw	r16,8(sp)
 4014188:	df000304 	addi	fp,sp,12
 401418c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4014190:	e0bffe17 	ldw	r2,-8(fp)
 4014194:	10800217 	ldw	r2,8(r2)
 4014198:	10d00034 	orhi	r3,r2,16384
 401419c:	e0bffe17 	ldw	r2,-8(fp)
 40141a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40141a4:	e03ffd15 	stw	zero,-12(fp)
 40141a8:	00002306 	br	4014238 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40141ac:	04010074 	movhi	r16,1025
 40141b0:	841a3504 	addi	r16,r16,26836
 40141b4:	e0bffd17 	ldw	r2,-12(fp)
 40141b8:	01400304 	movi	r5,12
 40141bc:	1009883a 	mov	r4,r2
 40141c0:	40011140 	call	4001114 <__mulsi3>
 40141c4:	8085883a 	add	r2,r16,r2
 40141c8:	10c00017 	ldw	r3,0(r2)
 40141cc:	e0bffe17 	ldw	r2,-8(fp)
 40141d0:	10800017 	ldw	r2,0(r2)
 40141d4:	1880151e 	bne	r3,r2,401422c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40141d8:	04010074 	movhi	r16,1025
 40141dc:	841a3504 	addi	r16,r16,26836
 40141e0:	e0bffd17 	ldw	r2,-12(fp)
 40141e4:	01400304 	movi	r5,12
 40141e8:	1009883a 	mov	r4,r2
 40141ec:	40011140 	call	4001114 <__mulsi3>
 40141f0:	8085883a 	add	r2,r16,r2
 40141f4:	10800204 	addi	r2,r2,8
 40141f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40141fc:	10000b0e 	bge	r2,zero,401422c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4014200:	01400304 	movi	r5,12
 4014204:	e13ffd17 	ldw	r4,-12(fp)
 4014208:	40011140 	call	4001114 <__mulsi3>
 401420c:	1007883a 	mov	r3,r2
 4014210:	00810074 	movhi	r2,1025
 4014214:	109a3504 	addi	r2,r2,26836
 4014218:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401421c:	e0bffe17 	ldw	r2,-8(fp)
 4014220:	18800226 	beq	r3,r2,401422c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4014224:	00bffcc4 	movi	r2,-13
 4014228:	00000806 	br	401424c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401422c:	e0bffd17 	ldw	r2,-12(fp)
 4014230:	10800044 	addi	r2,r2,1
 4014234:	e0bffd15 	stw	r2,-12(fp)
 4014238:	d0a00b17 	ldw	r2,-32724(gp)
 401423c:	1007883a 	mov	r3,r2
 4014240:	e0bffd17 	ldw	r2,-12(fp)
 4014244:	18bfd92e 	bgeu	r3,r2,40141ac <__ram_exceptions_end+0xfbf8bf10>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4014248:	0005883a 	mov	r2,zero
}
 401424c:	e6ffff04 	addi	sp,fp,-4
 4014250:	dfc00217 	ldw	ra,8(sp)
 4014254:	df000117 	ldw	fp,4(sp)
 4014258:	dc000017 	ldw	r16,0(sp)
 401425c:	dec00304 	addi	sp,sp,12
 4014260:	f800283a 	ret

04014264 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4014264:	defff604 	addi	sp,sp,-40
 4014268:	dfc00915 	stw	ra,36(sp)
 401426c:	df000815 	stw	fp,32(sp)
 4014270:	df000804 	addi	fp,sp,32
 4014274:	e13ffd15 	stw	r4,-12(fp)
 4014278:	e17ffe15 	stw	r5,-8(fp)
 401427c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4014280:	00bfffc4 	movi	r2,-1
 4014284:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4014288:	00bffb44 	movi	r2,-19
 401428c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4014290:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4014294:	d1600904 	addi	r5,gp,-32732
 4014298:	e13ffd17 	ldw	r4,-12(fp)
 401429c:	4013b0c0 	call	4013b0c <alt_find_dev>
 40142a0:	e0bff815 	stw	r2,-32(fp)
 40142a4:	e0bff817 	ldw	r2,-32(fp)
 40142a8:	1000051e 	bne	r2,zero,40142c0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40142ac:	e13ffd17 	ldw	r4,-12(fp)
 40142b0:	401473c0 	call	401473c <alt_find_file>
 40142b4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40142b8:	00800044 	movi	r2,1
 40142bc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40142c0:	e0bff817 	ldw	r2,-32(fp)
 40142c4:	10002b26 	beq	r2,zero,4014374 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40142c8:	e13ff817 	ldw	r4,-32(fp)
 40142cc:	40148440 	call	4014844 <alt_get_fd>
 40142d0:	e0bff915 	stw	r2,-28(fp)
 40142d4:	e0bff917 	ldw	r2,-28(fp)
 40142d8:	1000030e 	bge	r2,zero,40142e8 <open+0x84>
    {
      status = index;
 40142dc:	e0bff917 	ldw	r2,-28(fp)
 40142e0:	e0bffa15 	stw	r2,-24(fp)
 40142e4:	00002506 	br	401437c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 40142e8:	01400304 	movi	r5,12
 40142ec:	e13ff917 	ldw	r4,-28(fp)
 40142f0:	40011140 	call	4001114 <__mulsi3>
 40142f4:	1007883a 	mov	r3,r2
 40142f8:	00810074 	movhi	r2,1025
 40142fc:	109a3504 	addi	r2,r2,26836
 4014300:	1885883a 	add	r2,r3,r2
 4014304:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4014308:	e0fffe17 	ldw	r3,-8(fp)
 401430c:	00900034 	movhi	r2,16384
 4014310:	10bfffc4 	addi	r2,r2,-1
 4014314:	1886703a 	and	r3,r3,r2
 4014318:	e0bffc17 	ldw	r2,-16(fp)
 401431c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4014320:	e0bffb17 	ldw	r2,-20(fp)
 4014324:	1000051e 	bne	r2,zero,401433c <open+0xd8>
 4014328:	e13ffc17 	ldw	r4,-16(fp)
 401432c:	40141780 	call	4014178 <alt_file_locked>
 4014330:	e0bffa15 	stw	r2,-24(fp)
 4014334:	e0bffa17 	ldw	r2,-24(fp)
 4014338:	10001016 	blt	r2,zero,401437c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401433c:	e0bff817 	ldw	r2,-32(fp)
 4014340:	10800317 	ldw	r2,12(r2)
 4014344:	10000826 	beq	r2,zero,4014368 <open+0x104>
 4014348:	e0bff817 	ldw	r2,-32(fp)
 401434c:	10800317 	ldw	r2,12(r2)
 4014350:	e1ffff17 	ldw	r7,-4(fp)
 4014354:	e1bffe17 	ldw	r6,-8(fp)
 4014358:	e17ffd17 	ldw	r5,-12(fp)
 401435c:	e13ffc17 	ldw	r4,-16(fp)
 4014360:	103ee83a 	callr	r2
 4014364:	00000106 	br	401436c <open+0x108>
 4014368:	0005883a 	mov	r2,zero
 401436c:	e0bffa15 	stw	r2,-24(fp)
 4014370:	00000206 	br	401437c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4014374:	00bffb44 	movi	r2,-19
 4014378:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401437c:	e0bffa17 	ldw	r2,-24(fp)
 4014380:	1000090e 	bge	r2,zero,40143a8 <open+0x144>
  {
    alt_release_fd (index);  
 4014384:	e13ff917 	ldw	r4,-28(fp)
 4014388:	400e4e00 	call	400e4e0 <alt_release_fd>
    ALT_ERRNO = -status;
 401438c:	401413c0 	call	401413c <alt_get_errno>
 4014390:	1007883a 	mov	r3,r2
 4014394:	e0bffa17 	ldw	r2,-24(fp)
 4014398:	0085c83a 	sub	r2,zero,r2
 401439c:	18800015 	stw	r2,0(r3)
    return -1;
 40143a0:	00bfffc4 	movi	r2,-1
 40143a4:	00000106 	br	40143ac <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 40143a8:	e0bff917 	ldw	r2,-28(fp)
}
 40143ac:	e037883a 	mov	sp,fp
 40143b0:	dfc00117 	ldw	ra,4(sp)
 40143b4:	df000017 	ldw	fp,0(sp)
 40143b8:	dec00204 	addi	sp,sp,8
 40143bc:	f800283a 	ret

040143c0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 40143c0:	defff204 	addi	sp,sp,-56
 40143c4:	dfc00a15 	stw	ra,40(sp)
 40143c8:	df000915 	stw	fp,36(sp)
 40143cc:	df000904 	addi	fp,sp,36
 40143d0:	e13fff15 	stw	r4,-4(fp)
 40143d4:	e1400215 	stw	r5,8(fp)
 40143d8:	e1800315 	stw	r6,12(fp)
 40143dc:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 40143e0:	e0800204 	addi	r2,fp,8
 40143e4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 40143e8:	e0bfff17 	ldw	r2,-4(fp)
 40143ec:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 40143f0:	00006f06 	br	40145b0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 40143f4:	e0bff807 	ldb	r2,-32(fp)
 40143f8:	10800960 	cmpeqi	r2,r2,37
 40143fc:	1000041e 	bne	r2,zero,4014410 <alt_printf+0x50>
        {
            alt_putchar(c);
 4014400:	e0bff807 	ldb	r2,-32(fp)
 4014404:	1009883a 	mov	r4,r2
 4014408:	40145ec0 	call	40145ec <alt_putchar>
 401440c:	00006806 	br	40145b0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 4014410:	e0bff717 	ldw	r2,-36(fp)
 4014414:	10c00044 	addi	r3,r2,1
 4014418:	e0fff715 	stw	r3,-36(fp)
 401441c:	10800003 	ldbu	r2,0(r2)
 4014420:	e0bff805 	stb	r2,-32(fp)
 4014424:	e0bff807 	ldb	r2,-32(fp)
 4014428:	10006926 	beq	r2,zero,40145d0 <alt_printf+0x210>
            {
                if (c == '%')
 401442c:	e0bff807 	ldb	r2,-32(fp)
 4014430:	10800958 	cmpnei	r2,r2,37
 4014434:	1000041e 	bne	r2,zero,4014448 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 4014438:	e0bff807 	ldb	r2,-32(fp)
 401443c:	1009883a 	mov	r4,r2
 4014440:	40145ec0 	call	40145ec <alt_putchar>
 4014444:	00005a06 	br	40145b0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 4014448:	e0bff807 	ldb	r2,-32(fp)
 401444c:	108018d8 	cmpnei	r2,r2,99
 4014450:	1000081e 	bne	r2,zero,4014474 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 4014454:	e0bffe17 	ldw	r2,-8(fp)
 4014458:	10c00104 	addi	r3,r2,4
 401445c:	e0fffe15 	stw	r3,-8(fp)
 4014460:	10800017 	ldw	r2,0(r2)
 4014464:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 4014468:	e13ffd17 	ldw	r4,-12(fp)
 401446c:	40145ec0 	call	40145ec <alt_putchar>
 4014470:	00004f06 	br	40145b0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 4014474:	e0bff807 	ldb	r2,-32(fp)
 4014478:	10801e18 	cmpnei	r2,r2,120
 401447c:	1000341e 	bne	r2,zero,4014550 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 4014480:	e0bffe17 	ldw	r2,-8(fp)
 4014484:	10c00104 	addi	r3,r2,4
 4014488:	e0fffe15 	stw	r3,-8(fp)
 401448c:	10800017 	ldw	r2,0(r2)
 4014490:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 4014494:	e0bffb17 	ldw	r2,-20(fp)
 4014498:	1000031e 	bne	r2,zero,40144a8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 401449c:	01000c04 	movi	r4,48
 40144a0:	40145ec0 	call	40145ec <alt_putchar>
                        continue;
 40144a4:	00004206 	br	40145b0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 40144a8:	00800704 	movi	r2,28
 40144ac:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 40144b0:	00000306 	br	40144c0 <alt_printf+0x100>
                        digit_shift -= 4;
 40144b4:	e0bff917 	ldw	r2,-28(fp)
 40144b8:	10bfff04 	addi	r2,r2,-4
 40144bc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 40144c0:	00c003c4 	movi	r3,15
 40144c4:	e0bff917 	ldw	r2,-28(fp)
 40144c8:	1884983a 	sll	r2,r3,r2
 40144cc:	1007883a 	mov	r3,r2
 40144d0:	e0bffb17 	ldw	r2,-20(fp)
 40144d4:	1884703a 	and	r2,r3,r2
 40144d8:	103ff626 	beq	r2,zero,40144b4 <__ram_exceptions_end+0xfbf8c218>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 40144dc:	00001906 	br	4014544 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 40144e0:	00c003c4 	movi	r3,15
 40144e4:	e0bff917 	ldw	r2,-28(fp)
 40144e8:	1884983a 	sll	r2,r3,r2
 40144ec:	1007883a 	mov	r3,r2
 40144f0:	e0bffb17 	ldw	r2,-20(fp)
 40144f4:	1886703a 	and	r3,r3,r2
 40144f8:	e0bff917 	ldw	r2,-28(fp)
 40144fc:	1884d83a 	srl	r2,r3,r2
 4014500:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 4014504:	e0bffc17 	ldw	r2,-16(fp)
 4014508:	108002a8 	cmpgeui	r2,r2,10
 401450c:	1000041e 	bne	r2,zero,4014520 <alt_printf+0x160>
                            c = '0' + digit;
 4014510:	e0bffc17 	ldw	r2,-16(fp)
 4014514:	10800c04 	addi	r2,r2,48
 4014518:	e0bff805 	stb	r2,-32(fp)
 401451c:	00000306 	br	401452c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 4014520:	e0bffc17 	ldw	r2,-16(fp)
 4014524:	108015c4 	addi	r2,r2,87
 4014528:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 401452c:	e0bff807 	ldb	r2,-32(fp)
 4014530:	1009883a 	mov	r4,r2
 4014534:	40145ec0 	call	40145ec <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4014538:	e0bff917 	ldw	r2,-28(fp)
 401453c:	10bfff04 	addi	r2,r2,-4
 4014540:	e0bff915 	stw	r2,-28(fp)
 4014544:	e0bff917 	ldw	r2,-28(fp)
 4014548:	103fe50e 	bge	r2,zero,40144e0 <__ram_exceptions_end+0xfbf8c244>
 401454c:	00001806 	br	40145b0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 4014550:	e0bff807 	ldb	r2,-32(fp)
 4014554:	10801cd8 	cmpnei	r2,r2,115
 4014558:	1000151e 	bne	r2,zero,40145b0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 401455c:	e0bffe17 	ldw	r2,-8(fp)
 4014560:	10c00104 	addi	r3,r2,4
 4014564:	e0fffe15 	stw	r3,-8(fp)
 4014568:	10800017 	ldw	r2,0(r2)
 401456c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 4014570:	00000906 	br	4014598 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 4014574:	e0bffa17 	ldw	r2,-24(fp)
 4014578:	10c00044 	addi	r3,r2,1
 401457c:	e0fffa15 	stw	r3,-24(fp)
 4014580:	10800003 	ldbu	r2,0(r2)
 4014584:	10803fcc 	andi	r2,r2,255
 4014588:	1080201c 	xori	r2,r2,128
 401458c:	10bfe004 	addi	r2,r2,-128
 4014590:	1009883a 	mov	r4,r2
 4014594:	40145ec0 	call	40145ec <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 4014598:	e0bffa17 	ldw	r2,-24(fp)
 401459c:	10800003 	ldbu	r2,0(r2)
 40145a0:	10803fcc 	andi	r2,r2,255
 40145a4:	1080201c 	xori	r2,r2,128
 40145a8:	10bfe004 	addi	r2,r2,-128
 40145ac:	103ff11e 	bne	r2,zero,4014574 <__ram_exceptions_end+0xfbf8c2d8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 40145b0:	e0bff717 	ldw	r2,-36(fp)
 40145b4:	10c00044 	addi	r3,r2,1
 40145b8:	e0fff715 	stw	r3,-36(fp)
 40145bc:	10800003 	ldbu	r2,0(r2)
 40145c0:	e0bff805 	stb	r2,-32(fp)
 40145c4:	e0bff807 	ldb	r2,-32(fp)
 40145c8:	103f8a1e 	bne	r2,zero,40143f4 <__ram_exceptions_end+0xfbf8c158>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 40145cc:	00000106 	br	40145d4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 40145d0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 40145d4:	0001883a 	nop
 40145d8:	e037883a 	mov	sp,fp
 40145dc:	dfc00117 	ldw	ra,4(sp)
 40145e0:	df000017 	ldw	fp,0(sp)
 40145e4:	dec00504 	addi	sp,sp,20
 40145e8:	f800283a 	ret

040145ec <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 40145ec:	defffd04 	addi	sp,sp,-12
 40145f0:	dfc00215 	stw	ra,8(sp)
 40145f4:	df000115 	stw	fp,4(sp)
 40145f8:	df000104 	addi	fp,sp,4
 40145fc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 4014600:	d0a00217 	ldw	r2,-32760(gp)
 4014604:	10800217 	ldw	r2,8(r2)
 4014608:	100b883a 	mov	r5,r2
 401460c:	e13fff17 	ldw	r4,-4(fp)
 4014610:	4014a5c0 	call	4014a5c <putc>
#endif
#endif
}
 4014614:	e037883a 	mov	sp,fp
 4014618:	dfc00117 	ldw	ra,4(sp)
 401461c:	df000017 	ldw	fp,0(sp)
 4014620:	dec00204 	addi	sp,sp,8
 4014624:	f800283a 	ret

04014628 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4014628:	deffff04 	addi	sp,sp,-4
 401462c:	df000015 	stw	fp,0(sp)
 4014630:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4014634:	000170fa 	wrctl	ienable,zero
}
 4014638:	0001883a 	nop
 401463c:	e037883a 	mov	sp,fp
 4014640:	df000017 	ldw	fp,0(sp)
 4014644:	dec00104 	addi	sp,sp,4
 4014648:	f800283a 	ret

0401464c <upper_char_line>:
		0x18187000, // }
		0x00000000, // ~
};

alt_u32 upper_char_line(const alt_u8 char_pos)
{
 401464c:	defffe04 	addi	sp,sp,-8
 4014650:	df000115 	stw	fp,4(sp)
 4014654:	df000104 	addi	fp,sp,4
 4014658:	2005883a 	mov	r2,r4
 401465c:	e0bfff05 	stb	r2,-4(fp)
	return font32upper[char_pos];
 4014660:	e0ffff03 	ldbu	r3,-4(fp)
 4014664:	00810074 	movhi	r2,1025
 4014668:	10974304 	addi	r2,r2,23820
 401466c:	18c7883a 	add	r3,r3,r3
 4014670:	18c7883a 	add	r3,r3,r3
 4014674:	10c5883a 	add	r2,r2,r3
 4014678:	10800017 	ldw	r2,0(r2)
};
 401467c:	e037883a 	mov	sp,fp
 4014680:	df000017 	ldw	fp,0(sp)
 4014684:	dec00104 	addi	sp,sp,4
 4014688:	f800283a 	ret

0401468c <lower_char_line>:

alt_u32 lower_char_line(const alt_u8 char_pos)
{
 401468c:	defffe04 	addi	sp,sp,-8
 4014690:	df000115 	stw	fp,4(sp)
 4014694:	df000104 	addi	fp,sp,4
 4014698:	2005883a 	mov	r2,r4
 401469c:	e0bfff05 	stb	r2,-4(fp)
	return font32lower[char_pos];
 40146a0:	e0ffff03 	ldbu	r3,-4(fp)
 40146a4:	00810074 	movhi	r2,1025
 40146a8:	1097a204 	addi	r2,r2,24200
 40146ac:	18c7883a 	add	r3,r3,r3
 40146b0:	18c7883a 	add	r3,r3,r3
 40146b4:	10c5883a 	add	r2,r2,r3
 40146b8:	10800017 	ldw	r2,0(r2)
 40146bc:	e037883a 	mov	sp,fp
 40146c0:	df000017 	ldw	fp,0(sp)
 40146c4:	dec00104 	addi	sp,sp,4
 40146c8:	f800283a 	ret

040146cc <HW_CTX_SWITCH>:
	  context switch routine
	**********************************************/

/* registers have been saved into running tcb in exception entry handler */
HW_CTX_SWITCH:
	br gettask
 40146cc:	00000006 	br	40146d0 <gettask>

040146d0 <gettask>:

gettask:
   	call get_next_task //call c-function and return here
 40146d0:	4012b440 	call	4012b44 <get_next_task>
	br restore_context
 40146d4:	00000006 	br	40146d8 <restore_context>

040146d8 <restore_context>:
 40146d8:	00410074 	movhi	at,1025
	
restore_context:
	
	movia	at, current_tcb			# at=current_tcb
 40146dc:	085e6704 	addi	at,at,31132
	ldwio   at, 0(at)				# Get address to current_tcb variable
 40146e0:	08400037 	ldwio	at,0(at)
 
   	/* re-store r1 (at) last */
	ldwio	r2, TCB_REG_RETURNVALUES+0(at)	
 40146e4:	08800337 	ldwio	r2,12(at)
   	ldwio	r3, TCB_REG_RETURNVALUES+4(at)
 40146e8:	08c00437 	ldwio	r3,16(at)
    
   	ldwio	r4, TCB_REG_ARG+0(at)
 40146ec:	09000537 	ldwio	r4,20(at)
   	ldwio	r5, TCB_REG_ARG+4(at)
 40146f0:	09400637 	ldwio	r5,24(at)
   	   	
   	ldwio	r6, TCB_REG_ARG+8(at)
 40146f4:	09800737 	ldwio	r6,28(at)
	ldwio 	r7, TCB_REG_ARG+12(at)
 40146f8:	09c00837 	ldwio	r7,32(at)
	
	ldwio	r8, TCB_REG_GPR+0(at)
 40146fc:	0a000937 	ldwio	r8,36(at)
	ldwio	r9, TCB_REG_GPR+4(at)
 4014700:	0a400a37 	ldwio	r9,40(at)
	ldwio	r10, TCB_REG_GPR+8(at)
 4014704:	0a800b37 	ldwio	r10,44(at)
	ldwio	r11, TCB_REG_GPR+12(at)
 4014708:	0ac00c37 	ldwio	r11,48(at)
	ldwio	r12, TCB_REG_GPR+16(at)
 401470c:	0b000d37 	ldwio	r12,52(at)
	ldwio	r13, TCB_REG_GPR+20(at)
 4014710:	0b400e37 	ldwio	r13,56(at)
	ldwio	r14, TCB_REG_GPR+24(at)
 4014714:	0b800f37 	ldwio	r14,60(at)
	ldwio	r15, TCB_REG_GPR+28(at)
 4014718:	0bc01037 	ldwio	r15,64(at)
	#ldwio	r21, TCB_REG_GPR+52(at)
	#ldwio	r22, TCB_REG_GPR+56(at)
	#ldwio	r23, TCB_REG_GPR+60(at)
	/* r24, r25, r26 not affected */

	ldwio	sp, TCB_STACKPTR(at) # r27 stack pointer 
 401471c:	0ec01e37 	ldwio	sp,120(at)
	ldwio	fp, TCB_REG_FP(at)	 # r28 fram pointer
 4014720:	0f001b37 	ldwio	fp,108(at)
	ldwio	ea, TCB_REG_EA(at)   # r29 return address from interrupt
 4014724:	0f401c37 	ldwio	ea,112(at)
	
	/* r30 not affected */
	
	ldwio	ra, TCB_REG_RA(at) # r31
 4014728:	0fc01d37 	ldwio	ra,116(at)
	ldwio	at, TCB_REG_AT(at)
 401472c:	08400237 	ldwio	at,8(at)
		
   	/* Jump to new task, adr in ea */
	eret 	# return from exception
 4014730:	ef80083a 	eret

04014734 <SW_CTX_SWITCH>:


/* registers have been saved into running tcb in exception entry handler */	
SW_CTX_SWITCH:
	/*** Get new task id ***/
	call get_new_task
 4014734:	4012cb40 	call	4012cb4 <get_new_task>
	
	br restore_context
 4014738:	003fe706 	br	40146d8 <__ram_exceptions_end+0xfbf8c43c>

0401473c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401473c:	defffb04 	addi	sp,sp,-20
 4014740:	dfc00415 	stw	ra,16(sp)
 4014744:	df000315 	stw	fp,12(sp)
 4014748:	df000304 	addi	fp,sp,12
 401474c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4014750:	d0a00717 	ldw	r2,-32740(gp)
 4014754:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4014758:	00003106 	br	4014820 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401475c:	e0bffd17 	ldw	r2,-12(fp)
 4014760:	10800217 	ldw	r2,8(r2)
 4014764:	1009883a 	mov	r4,r2
 4014768:	4007d040 	call	4007d04 <strlen>
 401476c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4014770:	e0bffd17 	ldw	r2,-12(fp)
 4014774:	10c00217 	ldw	r3,8(r2)
 4014778:	e0bffe17 	ldw	r2,-8(fp)
 401477c:	10bfffc4 	addi	r2,r2,-1
 4014780:	1885883a 	add	r2,r3,r2
 4014784:	10800003 	ldbu	r2,0(r2)
 4014788:	10803fcc 	andi	r2,r2,255
 401478c:	1080201c 	xori	r2,r2,128
 4014790:	10bfe004 	addi	r2,r2,-128
 4014794:	10800bd8 	cmpnei	r2,r2,47
 4014798:	1000031e 	bne	r2,zero,40147a8 <alt_find_file+0x6c>
    {
      len -= 1;
 401479c:	e0bffe17 	ldw	r2,-8(fp)
 40147a0:	10bfffc4 	addi	r2,r2,-1
 40147a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40147a8:	e0bffe17 	ldw	r2,-8(fp)
 40147ac:	e0ffff17 	ldw	r3,-4(fp)
 40147b0:	1885883a 	add	r2,r3,r2
 40147b4:	10800003 	ldbu	r2,0(r2)
 40147b8:	10803fcc 	andi	r2,r2,255
 40147bc:	1080201c 	xori	r2,r2,128
 40147c0:	10bfe004 	addi	r2,r2,-128
 40147c4:	10800be0 	cmpeqi	r2,r2,47
 40147c8:	1000081e 	bne	r2,zero,40147ec <alt_find_file+0xb0>
 40147cc:	e0bffe17 	ldw	r2,-8(fp)
 40147d0:	e0ffff17 	ldw	r3,-4(fp)
 40147d4:	1885883a 	add	r2,r3,r2
 40147d8:	10800003 	ldbu	r2,0(r2)
 40147dc:	10803fcc 	andi	r2,r2,255
 40147e0:	1080201c 	xori	r2,r2,128
 40147e4:	10bfe004 	addi	r2,r2,-128
 40147e8:	10000a1e 	bne	r2,zero,4014814 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 40147ec:	e0bffd17 	ldw	r2,-12(fp)
 40147f0:	10800217 	ldw	r2,8(r2)
 40147f4:	e0fffe17 	ldw	r3,-8(fp)
 40147f8:	180d883a 	mov	r6,r3
 40147fc:	e17fff17 	ldw	r5,-4(fp)
 4014800:	1009883a 	mov	r4,r2
 4014804:	40149400 	call	4014940 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4014808:	1000021e 	bne	r2,zero,4014814 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401480c:	e0bffd17 	ldw	r2,-12(fp)
 4014810:	00000706 	br	4014830 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4014814:	e0bffd17 	ldw	r2,-12(fp)
 4014818:	10800017 	ldw	r2,0(r2)
 401481c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4014820:	e0fffd17 	ldw	r3,-12(fp)
 4014824:	d0a00704 	addi	r2,gp,-32740
 4014828:	18bfcc1e 	bne	r3,r2,401475c <__ram_exceptions_end+0xfbf8c4c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401482c:	0005883a 	mov	r2,zero
}
 4014830:	e037883a 	mov	sp,fp
 4014834:	dfc00117 	ldw	ra,4(sp)
 4014838:	df000017 	ldw	fp,0(sp)
 401483c:	dec00204 	addi	sp,sp,8
 4014840:	f800283a 	ret

04014844 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4014844:	defffa04 	addi	sp,sp,-24
 4014848:	dfc00515 	stw	ra,20(sp)
 401484c:	df000415 	stw	fp,16(sp)
 4014850:	dc000315 	stw	r16,12(sp)
 4014854:	df000404 	addi	fp,sp,16
 4014858:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 401485c:	00bffa04 	movi	r2,-24
 4014860:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4014864:	e03ffc15 	stw	zero,-16(fp)
 4014868:	00001d06 	br	40148e0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401486c:	04010074 	movhi	r16,1025
 4014870:	841a3504 	addi	r16,r16,26836
 4014874:	e0bffc17 	ldw	r2,-16(fp)
 4014878:	01400304 	movi	r5,12
 401487c:	1009883a 	mov	r4,r2
 4014880:	40011140 	call	4001114 <__mulsi3>
 4014884:	8085883a 	add	r2,r16,r2
 4014888:	10800017 	ldw	r2,0(r2)
 401488c:	1000111e 	bne	r2,zero,40148d4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4014890:	04010074 	movhi	r16,1025
 4014894:	841a3504 	addi	r16,r16,26836
 4014898:	e0bffc17 	ldw	r2,-16(fp)
 401489c:	01400304 	movi	r5,12
 40148a0:	1009883a 	mov	r4,r2
 40148a4:	40011140 	call	4001114 <__mulsi3>
 40148a8:	8085883a 	add	r2,r16,r2
 40148ac:	e0fffe17 	ldw	r3,-8(fp)
 40148b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40148b4:	d0e00b17 	ldw	r3,-32724(gp)
 40148b8:	e0bffc17 	ldw	r2,-16(fp)
 40148bc:	1880020e 	bge	r3,r2,40148c8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 40148c0:	e0bffc17 	ldw	r2,-16(fp)
 40148c4:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 40148c8:	e0bffc17 	ldw	r2,-16(fp)
 40148cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 40148d0:	00000606 	br	40148ec <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40148d4:	e0bffc17 	ldw	r2,-16(fp)
 40148d8:	10800044 	addi	r2,r2,1
 40148dc:	e0bffc15 	stw	r2,-16(fp)
 40148e0:	e0bffc17 	ldw	r2,-16(fp)
 40148e4:	10800810 	cmplti	r2,r2,32
 40148e8:	103fe01e 	bne	r2,zero,401486c <__ram_exceptions_end+0xfbf8c5d0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40148ec:	e0bffd17 	ldw	r2,-12(fp)
}
 40148f0:	e6ffff04 	addi	sp,fp,-4
 40148f4:	dfc00217 	ldw	ra,8(sp)
 40148f8:	df000117 	ldw	fp,4(sp)
 40148fc:	dc000017 	ldw	r16,0(sp)
 4014900:	dec00304 	addi	sp,sp,12
 4014904:	f800283a 	ret

04014908 <exit>:
 4014908:	defffe04 	addi	sp,sp,-8
 401490c:	000b883a 	mov	r5,zero
 4014910:	dc000015 	stw	r16,0(sp)
 4014914:	dfc00115 	stw	ra,4(sp)
 4014918:	2021883a 	mov	r16,r4
 401491c:	4014bf80 	call	4014bf8 <__call_exitprocs>
 4014920:	00810074 	movhi	r2,1025
 4014924:	109b1704 	addi	r2,r2,27740
 4014928:	11000017 	ldw	r4,0(r2)
 401492c:	20800f17 	ldw	r2,60(r4)
 4014930:	10000126 	beq	r2,zero,4014938 <exit+0x30>
 4014934:	103ee83a 	callr	r2
 4014938:	8009883a 	mov	r4,r16
 401493c:	40156d80 	call	40156d8 <_exit>

04014940 <memcmp>:
 4014940:	01c000c4 	movi	r7,3
 4014944:	3980192e 	bgeu	r7,r6,40149ac <memcmp+0x6c>
 4014948:	2144b03a 	or	r2,r4,r5
 401494c:	11c4703a 	and	r2,r2,r7
 4014950:	10000f26 	beq	r2,zero,4014990 <memcmp+0x50>
 4014954:	20800003 	ldbu	r2,0(r4)
 4014958:	28c00003 	ldbu	r3,0(r5)
 401495c:	10c0151e 	bne	r2,r3,40149b4 <memcmp+0x74>
 4014960:	31bfff84 	addi	r6,r6,-2
 4014964:	01ffffc4 	movi	r7,-1
 4014968:	00000406 	br	401497c <memcmp+0x3c>
 401496c:	20800003 	ldbu	r2,0(r4)
 4014970:	28c00003 	ldbu	r3,0(r5)
 4014974:	31bfffc4 	addi	r6,r6,-1
 4014978:	10c00e1e 	bne	r2,r3,40149b4 <memcmp+0x74>
 401497c:	21000044 	addi	r4,r4,1
 4014980:	29400044 	addi	r5,r5,1
 4014984:	31fff91e 	bne	r6,r7,401496c <__ram_exceptions_end+0xfbf8c6d0>
 4014988:	0005883a 	mov	r2,zero
 401498c:	f800283a 	ret
 4014990:	20c00017 	ldw	r3,0(r4)
 4014994:	28800017 	ldw	r2,0(r5)
 4014998:	18bfee1e 	bne	r3,r2,4014954 <__ram_exceptions_end+0xfbf8c6b8>
 401499c:	31bfff04 	addi	r6,r6,-4
 40149a0:	21000104 	addi	r4,r4,4
 40149a4:	29400104 	addi	r5,r5,4
 40149a8:	39bff936 	bltu	r7,r6,4014990 <__ram_exceptions_end+0xfbf8c6f4>
 40149ac:	303fe91e 	bne	r6,zero,4014954 <__ram_exceptions_end+0xfbf8c6b8>
 40149b0:	003ff506 	br	4014988 <__ram_exceptions_end+0xfbf8c6ec>
 40149b4:	10c5c83a 	sub	r2,r2,r3
 40149b8:	f800283a 	ret

040149bc <_putc_r>:
 40149bc:	defffc04 	addi	sp,sp,-16
 40149c0:	dc000215 	stw	r16,8(sp)
 40149c4:	dfc00315 	stw	ra,12(sp)
 40149c8:	2021883a 	mov	r16,r4
 40149cc:	20000226 	beq	r4,zero,40149d8 <_putc_r+0x1c>
 40149d0:	20800e17 	ldw	r2,56(r4)
 40149d4:	10001b26 	beq	r2,zero,4014a44 <_putc_r+0x88>
 40149d8:	30800217 	ldw	r2,8(r6)
 40149dc:	10bfffc4 	addi	r2,r2,-1
 40149e0:	30800215 	stw	r2,8(r6)
 40149e4:	10000a16 	blt	r2,zero,4014a10 <_putc_r+0x54>
 40149e8:	30800017 	ldw	r2,0(r6)
 40149ec:	11400005 	stb	r5,0(r2)
 40149f0:	30800017 	ldw	r2,0(r6)
 40149f4:	10c00044 	addi	r3,r2,1
 40149f8:	30c00015 	stw	r3,0(r6)
 40149fc:	10800003 	ldbu	r2,0(r2)
 4014a00:	dfc00317 	ldw	ra,12(sp)
 4014a04:	dc000217 	ldw	r16,8(sp)
 4014a08:	dec00404 	addi	sp,sp,16
 4014a0c:	f800283a 	ret
 4014a10:	30c00617 	ldw	r3,24(r6)
 4014a14:	10c00616 	blt	r2,r3,4014a30 <_putc_r+0x74>
 4014a18:	30800017 	ldw	r2,0(r6)
 4014a1c:	00c00284 	movi	r3,10
 4014a20:	11400005 	stb	r5,0(r2)
 4014a24:	30800017 	ldw	r2,0(r6)
 4014a28:	11400003 	ldbu	r5,0(r2)
 4014a2c:	28fff11e 	bne	r5,r3,40149f4 <__ram_exceptions_end+0xfbf8c758>
 4014a30:	8009883a 	mov	r4,r16
 4014a34:	dfc00317 	ldw	ra,12(sp)
 4014a38:	dc000217 	ldw	r16,8(sp)
 4014a3c:	dec00404 	addi	sp,sp,16
 4014a40:	400a6281 	jmpi	400a628 <__swbuf_r>
 4014a44:	d9400015 	stw	r5,0(sp)
 4014a48:	d9800115 	stw	r6,4(sp)
 4014a4c:	40055680 	call	4005568 <__sinit>
 4014a50:	d9800117 	ldw	r6,4(sp)
 4014a54:	d9400017 	ldw	r5,0(sp)
 4014a58:	003fdf06 	br	40149d8 <__ram_exceptions_end+0xfbf8c73c>

04014a5c <putc>:
 4014a5c:	00810074 	movhi	r2,1025
 4014a60:	defffc04 	addi	sp,sp,-16
 4014a64:	109b1804 	addi	r2,r2,27744
 4014a68:	dc000115 	stw	r16,4(sp)
 4014a6c:	14000017 	ldw	r16,0(r2)
 4014a70:	dc400215 	stw	r17,8(sp)
 4014a74:	dfc00315 	stw	ra,12(sp)
 4014a78:	2023883a 	mov	r17,r4
 4014a7c:	80000226 	beq	r16,zero,4014a88 <putc+0x2c>
 4014a80:	80800e17 	ldw	r2,56(r16)
 4014a84:	10001a26 	beq	r2,zero,4014af0 <putc+0x94>
 4014a88:	28800217 	ldw	r2,8(r5)
 4014a8c:	10bfffc4 	addi	r2,r2,-1
 4014a90:	28800215 	stw	r2,8(r5)
 4014a94:	10000b16 	blt	r2,zero,4014ac4 <putc+0x68>
 4014a98:	28800017 	ldw	r2,0(r5)
 4014a9c:	14400005 	stb	r17,0(r2)
 4014aa0:	28800017 	ldw	r2,0(r5)
 4014aa4:	10c00044 	addi	r3,r2,1
 4014aa8:	28c00015 	stw	r3,0(r5)
 4014aac:	10800003 	ldbu	r2,0(r2)
 4014ab0:	dfc00317 	ldw	ra,12(sp)
 4014ab4:	dc400217 	ldw	r17,8(sp)
 4014ab8:	dc000117 	ldw	r16,4(sp)
 4014abc:	dec00404 	addi	sp,sp,16
 4014ac0:	f800283a 	ret
 4014ac4:	28c00617 	ldw	r3,24(r5)
 4014ac8:	10c00e16 	blt	r2,r3,4014b04 <putc+0xa8>
 4014acc:	28800017 	ldw	r2,0(r5)
 4014ad0:	01000284 	movi	r4,10
 4014ad4:	14400005 	stb	r17,0(r2)
 4014ad8:	28800017 	ldw	r2,0(r5)
 4014adc:	10c00003 	ldbu	r3,0(r2)
 4014ae0:	193ff01e 	bne	r3,r4,4014aa4 <__ram_exceptions_end+0xfbf8c808>
 4014ae4:	280d883a 	mov	r6,r5
 4014ae8:	180b883a 	mov	r5,r3
 4014aec:	00000706 	br	4014b0c <putc+0xb0>
 4014af0:	8009883a 	mov	r4,r16
 4014af4:	d9400015 	stw	r5,0(sp)
 4014af8:	40055680 	call	4005568 <__sinit>
 4014afc:	d9400017 	ldw	r5,0(sp)
 4014b00:	003fe106 	br	4014a88 <__ram_exceptions_end+0xfbf8c7ec>
 4014b04:	280d883a 	mov	r6,r5
 4014b08:	880b883a 	mov	r5,r17
 4014b0c:	8009883a 	mov	r4,r16
 4014b10:	dfc00317 	ldw	ra,12(sp)
 4014b14:	dc400217 	ldw	r17,8(sp)
 4014b18:	dc000117 	ldw	r16,4(sp)
 4014b1c:	dec00404 	addi	sp,sp,16
 4014b20:	400a6281 	jmpi	400a628 <__swbuf_r>

04014b24 <_puts_r>:
 4014b24:	defff604 	addi	sp,sp,-40
 4014b28:	dc000715 	stw	r16,28(sp)
 4014b2c:	2021883a 	mov	r16,r4
 4014b30:	2809883a 	mov	r4,r5
 4014b34:	dc400815 	stw	r17,32(sp)
 4014b38:	dfc00915 	stw	ra,36(sp)
 4014b3c:	2823883a 	mov	r17,r5
 4014b40:	4007d040 	call	4007d04 <strlen>
 4014b44:	10c00044 	addi	r3,r2,1
 4014b48:	d8800115 	stw	r2,4(sp)
 4014b4c:	00810074 	movhi	r2,1025
 4014b50:	10980104 	addi	r2,r2,24580
 4014b54:	d8800215 	stw	r2,8(sp)
 4014b58:	00800044 	movi	r2,1
 4014b5c:	d8800315 	stw	r2,12(sp)
 4014b60:	00800084 	movi	r2,2
 4014b64:	dc400015 	stw	r17,0(sp)
 4014b68:	d8c00615 	stw	r3,24(sp)
 4014b6c:	dec00415 	stw	sp,16(sp)
 4014b70:	d8800515 	stw	r2,20(sp)
 4014b74:	80000226 	beq	r16,zero,4014b80 <_puts_r+0x5c>
 4014b78:	80800e17 	ldw	r2,56(r16)
 4014b7c:	10001426 	beq	r2,zero,4014bd0 <_puts_r+0xac>
 4014b80:	81400217 	ldw	r5,8(r16)
 4014b84:	2880030b 	ldhu	r2,12(r5)
 4014b88:	10c8000c 	andi	r3,r2,8192
 4014b8c:	1800061e 	bne	r3,zero,4014ba8 <_puts_r+0x84>
 4014b90:	29001917 	ldw	r4,100(r5)
 4014b94:	00f7ffc4 	movi	r3,-8193
 4014b98:	10880014 	ori	r2,r2,8192
 4014b9c:	20c6703a 	and	r3,r4,r3
 4014ba0:	2880030d 	sth	r2,12(r5)
 4014ba4:	28c01915 	stw	r3,100(r5)
 4014ba8:	d9800404 	addi	r6,sp,16
 4014bac:	8009883a 	mov	r4,r16
 4014bb0:	400998c0 	call	400998c <__sfvwrite_r>
 4014bb4:	1000091e 	bne	r2,zero,4014bdc <_puts_r+0xb8>
 4014bb8:	00800284 	movi	r2,10
 4014bbc:	dfc00917 	ldw	ra,36(sp)
 4014bc0:	dc400817 	ldw	r17,32(sp)
 4014bc4:	dc000717 	ldw	r16,28(sp)
 4014bc8:	dec00a04 	addi	sp,sp,40
 4014bcc:	f800283a 	ret
 4014bd0:	8009883a 	mov	r4,r16
 4014bd4:	40055680 	call	4005568 <__sinit>
 4014bd8:	003fe906 	br	4014b80 <__ram_exceptions_end+0xfbf8c8e4>
 4014bdc:	00bfffc4 	movi	r2,-1
 4014be0:	003ff606 	br	4014bbc <__ram_exceptions_end+0xfbf8c920>

04014be4 <puts>:
 4014be4:	00810074 	movhi	r2,1025
 4014be8:	109b1804 	addi	r2,r2,27744
 4014bec:	200b883a 	mov	r5,r4
 4014bf0:	11000017 	ldw	r4,0(r2)
 4014bf4:	4014b241 	jmpi	4014b24 <_puts_r>

04014bf8 <__call_exitprocs>:
 4014bf8:	defff504 	addi	sp,sp,-44
 4014bfc:	df000915 	stw	fp,36(sp)
 4014c00:	dd400615 	stw	r21,24(sp)
 4014c04:	dc800315 	stw	r18,12(sp)
 4014c08:	dfc00a15 	stw	ra,40(sp)
 4014c0c:	ddc00815 	stw	r23,32(sp)
 4014c10:	dd800715 	stw	r22,28(sp)
 4014c14:	dd000515 	stw	r20,20(sp)
 4014c18:	dcc00415 	stw	r19,16(sp)
 4014c1c:	dc400215 	stw	r17,8(sp)
 4014c20:	dc000115 	stw	r16,4(sp)
 4014c24:	d9000015 	stw	r4,0(sp)
 4014c28:	2839883a 	mov	fp,r5
 4014c2c:	04800044 	movi	r18,1
 4014c30:	057fffc4 	movi	r21,-1
 4014c34:	00810074 	movhi	r2,1025
 4014c38:	109b1704 	addi	r2,r2,27740
 4014c3c:	12000017 	ldw	r8,0(r2)
 4014c40:	45005217 	ldw	r20,328(r8)
 4014c44:	44c05204 	addi	r19,r8,328
 4014c48:	a0001c26 	beq	r20,zero,4014cbc <__call_exitprocs+0xc4>
 4014c4c:	a0800117 	ldw	r2,4(r20)
 4014c50:	15ffffc4 	addi	r23,r2,-1
 4014c54:	b8000d16 	blt	r23,zero,4014c8c <__call_exitprocs+0x94>
 4014c58:	14000044 	addi	r16,r2,1
 4014c5c:	8421883a 	add	r16,r16,r16
 4014c60:	8421883a 	add	r16,r16,r16
 4014c64:	84402004 	addi	r17,r16,128
 4014c68:	a463883a 	add	r17,r20,r17
 4014c6c:	a421883a 	add	r16,r20,r16
 4014c70:	e0001e26 	beq	fp,zero,4014cec <__call_exitprocs+0xf4>
 4014c74:	80804017 	ldw	r2,256(r16)
 4014c78:	e0801c26 	beq	fp,r2,4014cec <__call_exitprocs+0xf4>
 4014c7c:	bdffffc4 	addi	r23,r23,-1
 4014c80:	843fff04 	addi	r16,r16,-4
 4014c84:	8c7fff04 	addi	r17,r17,-4
 4014c88:	bd7ff91e 	bne	r23,r21,4014c70 <__ram_exceptions_end+0xfbf8c9d4>
 4014c8c:	00800034 	movhi	r2,0
 4014c90:	10800004 	addi	r2,r2,0
 4014c94:	10000926 	beq	r2,zero,4014cbc <__call_exitprocs+0xc4>
 4014c98:	a0800117 	ldw	r2,4(r20)
 4014c9c:	1000301e 	bne	r2,zero,4014d60 <__call_exitprocs+0x168>
 4014ca0:	a0800017 	ldw	r2,0(r20)
 4014ca4:	10003226 	beq	r2,zero,4014d70 <__call_exitprocs+0x178>
 4014ca8:	a009883a 	mov	r4,r20
 4014cac:	98800015 	stw	r2,0(r19)
 4014cb0:	00000000 	call	0 <alt_exception_trap>
 4014cb4:	9d000017 	ldw	r20,0(r19)
 4014cb8:	a03fe41e 	bne	r20,zero,4014c4c <__ram_exceptions_end+0xfbf8c9b0>
 4014cbc:	dfc00a17 	ldw	ra,40(sp)
 4014cc0:	df000917 	ldw	fp,36(sp)
 4014cc4:	ddc00817 	ldw	r23,32(sp)
 4014cc8:	dd800717 	ldw	r22,28(sp)
 4014ccc:	dd400617 	ldw	r21,24(sp)
 4014cd0:	dd000517 	ldw	r20,20(sp)
 4014cd4:	dcc00417 	ldw	r19,16(sp)
 4014cd8:	dc800317 	ldw	r18,12(sp)
 4014cdc:	dc400217 	ldw	r17,8(sp)
 4014ce0:	dc000117 	ldw	r16,4(sp)
 4014ce4:	dec00b04 	addi	sp,sp,44
 4014ce8:	f800283a 	ret
 4014cec:	a0800117 	ldw	r2,4(r20)
 4014cf0:	80c00017 	ldw	r3,0(r16)
 4014cf4:	10bfffc4 	addi	r2,r2,-1
 4014cf8:	15c01426 	beq	r2,r23,4014d4c <__call_exitprocs+0x154>
 4014cfc:	80000015 	stw	zero,0(r16)
 4014d00:	183fde26 	beq	r3,zero,4014c7c <__ram_exceptions_end+0xfbf8c9e0>
 4014d04:	95c8983a 	sll	r4,r18,r23
 4014d08:	a0806217 	ldw	r2,392(r20)
 4014d0c:	a5800117 	ldw	r22,4(r20)
 4014d10:	2084703a 	and	r2,r4,r2
 4014d14:	10000b26 	beq	r2,zero,4014d44 <__call_exitprocs+0x14c>
 4014d18:	a0806317 	ldw	r2,396(r20)
 4014d1c:	2088703a 	and	r4,r4,r2
 4014d20:	20000c1e 	bne	r4,zero,4014d54 <__call_exitprocs+0x15c>
 4014d24:	89400017 	ldw	r5,0(r17)
 4014d28:	d9000017 	ldw	r4,0(sp)
 4014d2c:	183ee83a 	callr	r3
 4014d30:	a0800117 	ldw	r2,4(r20)
 4014d34:	15bfbf1e 	bne	r2,r22,4014c34 <__ram_exceptions_end+0xfbf8c998>
 4014d38:	98800017 	ldw	r2,0(r19)
 4014d3c:	153fcf26 	beq	r2,r20,4014c7c <__ram_exceptions_end+0xfbf8c9e0>
 4014d40:	003fbc06 	br	4014c34 <__ram_exceptions_end+0xfbf8c998>
 4014d44:	183ee83a 	callr	r3
 4014d48:	003ff906 	br	4014d30 <__ram_exceptions_end+0xfbf8ca94>
 4014d4c:	a5c00115 	stw	r23,4(r20)
 4014d50:	003feb06 	br	4014d00 <__ram_exceptions_end+0xfbf8ca64>
 4014d54:	89000017 	ldw	r4,0(r17)
 4014d58:	183ee83a 	callr	r3
 4014d5c:	003ff406 	br	4014d30 <__ram_exceptions_end+0xfbf8ca94>
 4014d60:	a0800017 	ldw	r2,0(r20)
 4014d64:	a027883a 	mov	r19,r20
 4014d68:	1029883a 	mov	r20,r2
 4014d6c:	003fb606 	br	4014c48 <__ram_exceptions_end+0xfbf8c9ac>
 4014d70:	0005883a 	mov	r2,zero
 4014d74:	003ffb06 	br	4014d64 <__ram_exceptions_end+0xfbf8cac8>

04014d78 <__divsf3>:
 4014d78:	defff504 	addi	sp,sp,-44
 4014d7c:	200cd5fa 	srli	r6,r4,23
 4014d80:	dcc00415 	stw	r19,16(sp)
 4014d84:	2026d7fa 	srli	r19,r4,31
 4014d88:	00c02034 	movhi	r3,128
 4014d8c:	dd800715 	stw	r22,28(sp)
 4014d90:	dd000515 	stw	r20,20(sp)
 4014d94:	dc800315 	stw	r18,12(sp)
 4014d98:	18ffffc4 	addi	r3,r3,-1
 4014d9c:	dfc00a15 	stw	ra,40(sp)
 4014da0:	df000915 	stw	fp,36(sp)
 4014da4:	ddc00815 	stw	r23,32(sp)
 4014da8:	dd400615 	stw	r21,24(sp)
 4014dac:	dc400215 	stw	r17,8(sp)
 4014db0:	dc000115 	stw	r16,4(sp)
 4014db4:	35003fcc 	andi	r20,r6,255
 4014db8:	1924703a 	and	r18,r3,r4
 4014dbc:	9d803fcc 	andi	r22,r19,255
 4014dc0:	a0005226 	beq	r20,zero,4014f0c <__divsf3+0x194>
 4014dc4:	00803fc4 	movi	r2,255
 4014dc8:	a0802e26 	beq	r20,r2,4014e84 <__divsf3+0x10c>
 4014dcc:	91002034 	orhi	r4,r18,128
 4014dd0:	202490fa 	slli	r18,r4,3
 4014dd4:	a53fe044 	addi	r20,r20,-127
 4014dd8:	0021883a 	mov	r16,zero
 4014ddc:	002f883a 	mov	r23,zero
 4014de0:	280cd5fa 	srli	r6,r5,23
 4014de4:	282ad7fa 	srli	r21,r5,31
 4014de8:	00c02034 	movhi	r3,128
 4014dec:	18ffffc4 	addi	r3,r3,-1
 4014df0:	31803fcc 	andi	r6,r6,255
 4014df4:	1962703a 	and	r17,r3,r5
 4014df8:	af003fcc 	andi	fp,r21,255
 4014dfc:	30004a26 	beq	r6,zero,4014f28 <__divsf3+0x1b0>
 4014e00:	00803fc4 	movi	r2,255
 4014e04:	30804526 	beq	r6,r2,4014f1c <__divsf3+0x1a4>
 4014e08:	89402034 	orhi	r5,r17,128
 4014e0c:	282290fa 	slli	r17,r5,3
 4014e10:	31bfe044 	addi	r6,r6,-127
 4014e14:	000b883a 	mov	r5,zero
 4014e18:	2c20b03a 	or	r16,r5,r16
 4014e1c:	802090ba 	slli	r16,r16,2
 4014e20:	00810074 	movhi	r2,1025
 4014e24:	10939104 	addi	r2,r2,20036
 4014e28:	80a1883a 	add	r16,r16,r2
 4014e2c:	81000017 	ldw	r4,0(r16)
 4014e30:	9d46f03a 	xor	r3,r19,r21
 4014e34:	180f883a 	mov	r7,r3
 4014e38:	18803fcc 	andi	r2,r3,255
 4014e3c:	a18dc83a 	sub	r6,r20,r6
 4014e40:	2000683a 	jmp	r4
 4014e44:	04015028 	cmpgeui	r16,zero,1344
 4014e48:	04014eac 	andhi	r16,zero,1338
 4014e4c:	0401501c 	xori	r16,zero,1344
 4014e50:	04014e98 	cmpnei	r16,zero,1338
 4014e54:	0401501c 	xori	r16,zero,1344
 4014e58:	04014ff4 	movhi	r16,1343
 4014e5c:	0401501c 	xori	r16,zero,1344
 4014e60:	04014e98 	cmpnei	r16,zero,1338
 4014e64:	04014eac 	andhi	r16,zero,1338
 4014e68:	04014eac 	andhi	r16,zero,1338
 4014e6c:	04014ff4 	movhi	r16,1343
 4014e70:	04014e98 	cmpnei	r16,zero,1338
 4014e74:	04015108 	cmpgei	r16,zero,1348
 4014e78:	04015108 	cmpgei	r16,zero,1348
 4014e7c:	04015108 	cmpgei	r16,zero,1348
 4014e80:	040150bc 	xorhi	r16,zero,1346
 4014e84:	9000581e 	bne	r18,zero,4014fe8 <__divsf3+0x270>
 4014e88:	04000204 	movi	r16,8
 4014e8c:	05c00084 	movi	r23,2
 4014e90:	003fd306 	br	4014de0 <__ram_exceptions_end+0xfbf8cb44>
 4014e94:	0023883a 	mov	r17,zero
 4014e98:	e02d883a 	mov	r22,fp
 4014e9c:	282f883a 	mov	r23,r5
 4014ea0:	00800084 	movi	r2,2
 4014ea4:	b8808f1e 	bne	r23,r2,40150e4 <__divsf3+0x36c>
 4014ea8:	b005883a 	mov	r2,r22
 4014eac:	11c0004c 	andi	r7,r2,1
 4014eb0:	013fffc4 	movi	r4,-1
 4014eb4:	000d883a 	mov	r6,zero
 4014eb8:	21003fcc 	andi	r4,r4,255
 4014ebc:	200895fa 	slli	r4,r4,23
 4014ec0:	38803fcc 	andi	r2,r7,255
 4014ec4:	00c02034 	movhi	r3,128
 4014ec8:	100497fa 	slli	r2,r2,31
 4014ecc:	18ffffc4 	addi	r3,r3,-1
 4014ed0:	30c6703a 	and	r3,r6,r3
 4014ed4:	1906b03a 	or	r3,r3,r4
 4014ed8:	1884b03a 	or	r2,r3,r2
 4014edc:	dfc00a17 	ldw	ra,40(sp)
 4014ee0:	df000917 	ldw	fp,36(sp)
 4014ee4:	ddc00817 	ldw	r23,32(sp)
 4014ee8:	dd800717 	ldw	r22,28(sp)
 4014eec:	dd400617 	ldw	r21,24(sp)
 4014ef0:	dd000517 	ldw	r20,20(sp)
 4014ef4:	dcc00417 	ldw	r19,16(sp)
 4014ef8:	dc800317 	ldw	r18,12(sp)
 4014efc:	dc400217 	ldw	r17,8(sp)
 4014f00:	dc000117 	ldw	r16,4(sp)
 4014f04:	dec00b04 	addi	sp,sp,44
 4014f08:	f800283a 	ret
 4014f0c:	90002b1e 	bne	r18,zero,4014fbc <__divsf3+0x244>
 4014f10:	04000104 	movi	r16,4
 4014f14:	05c00044 	movi	r23,1
 4014f18:	003fb106 	br	4014de0 <__ram_exceptions_end+0xfbf8cb44>
 4014f1c:	8800251e 	bne	r17,zero,4014fb4 <__divsf3+0x23c>
 4014f20:	01400084 	movi	r5,2
 4014f24:	00000206 	br	4014f30 <__divsf3+0x1b8>
 4014f28:	88001a1e 	bne	r17,zero,4014f94 <__divsf3+0x21c>
 4014f2c:	01400044 	movi	r5,1
 4014f30:	8160b03a 	or	r16,r16,r5
 4014f34:	802090ba 	slli	r16,r16,2
 4014f38:	00c10074 	movhi	r3,1025
 4014f3c:	18d3d504 	addi	r3,r3,20308
 4014f40:	80e1883a 	add	r16,r16,r3
 4014f44:	80c00017 	ldw	r3,0(r16)
 4014f48:	9d44f03a 	xor	r2,r19,r21
 4014f4c:	a18dc83a 	sub	r6,r20,r6
 4014f50:	1800683a 	jmp	r3
 4014f54:	04014eac 	andhi	r16,zero,1338
 4014f58:	04014eac 	andhi	r16,zero,1338
 4014f5c:	040150f8 	rdprs	r16,zero,1347
 4014f60:	04014e94 	movui	r16,1338
 4014f64:	040150f8 	rdprs	r16,zero,1347
 4014f68:	04014ff4 	movhi	r16,1343
 4014f6c:	040150f8 	rdprs	r16,zero,1347
 4014f70:	04014e94 	movui	r16,1338
 4014f74:	04014eac 	andhi	r16,zero,1338
 4014f78:	04014eac 	andhi	r16,zero,1338
 4014f7c:	04014ff4 	movhi	r16,1343
 4014f80:	04014e94 	movui	r16,1338
 4014f84:	04015108 	cmpgei	r16,zero,1348
 4014f88:	04015108 	cmpgei	r16,zero,1348
 4014f8c:	04015108 	cmpgei	r16,zero,1348
 4014f90:	04015120 	cmpeqi	r16,zero,1348
 4014f94:	8809883a 	mov	r4,r17
 4014f98:	400dd680 	call	400dd68 <__clzsi2>
 4014f9c:	10fffec4 	addi	r3,r2,-5
 4014fa0:	10801d84 	addi	r2,r2,118
 4014fa4:	88e2983a 	sll	r17,r17,r3
 4014fa8:	008dc83a 	sub	r6,zero,r2
 4014fac:	000b883a 	mov	r5,zero
 4014fb0:	003f9906 	br	4014e18 <__ram_exceptions_end+0xfbf8cb7c>
 4014fb4:	014000c4 	movi	r5,3
 4014fb8:	003f9706 	br	4014e18 <__ram_exceptions_end+0xfbf8cb7c>
 4014fbc:	9009883a 	mov	r4,r18
 4014fc0:	d9400015 	stw	r5,0(sp)
 4014fc4:	400dd680 	call	400dd68 <__clzsi2>
 4014fc8:	10fffec4 	addi	r3,r2,-5
 4014fcc:	11801d84 	addi	r6,r2,118
 4014fd0:	90e4983a 	sll	r18,r18,r3
 4014fd4:	01a9c83a 	sub	r20,zero,r6
 4014fd8:	0021883a 	mov	r16,zero
 4014fdc:	002f883a 	mov	r23,zero
 4014fe0:	d9400017 	ldw	r5,0(sp)
 4014fe4:	003f7e06 	br	4014de0 <__ram_exceptions_end+0xfbf8cb44>
 4014fe8:	04000304 	movi	r16,12
 4014fec:	05c000c4 	movi	r23,3
 4014ff0:	003f7b06 	br	4014de0 <__ram_exceptions_end+0xfbf8cb44>
 4014ff4:	01802034 	movhi	r6,128
 4014ff8:	000f883a 	mov	r7,zero
 4014ffc:	31bfffc4 	addi	r6,r6,-1
 4015000:	013fffc4 	movi	r4,-1
 4015004:	003fac06 	br	4014eb8 <__ram_exceptions_end+0xfbf8cc1c>
 4015008:	01400044 	movi	r5,1
 401500c:	2909c83a 	sub	r4,r5,r4
 4015010:	00c006c4 	movi	r3,27
 4015014:	19004b0e 	bge	r3,r4,4015144 <__divsf3+0x3cc>
 4015018:	114e703a 	and	r7,r2,r5
 401501c:	0009883a 	mov	r4,zero
 4015020:	000d883a 	mov	r6,zero
 4015024:	003fa406 	br	4014eb8 <__ram_exceptions_end+0xfbf8cc1c>
 4015028:	9006917a 	slli	r3,r18,5
 401502c:	8822917a 	slli	r17,r17,5
 4015030:	1c40372e 	bgeu	r3,r17,4015110 <__divsf3+0x398>
 4015034:	31bfffc4 	addi	r6,r6,-1
 4015038:	010006c4 	movi	r4,27
 401503c:	000b883a 	mov	r5,zero
 4015040:	180f883a 	mov	r7,r3
 4015044:	294b883a 	add	r5,r5,r5
 4015048:	18c7883a 	add	r3,r3,r3
 401504c:	38000116 	blt	r7,zero,4015054 <__divsf3+0x2dc>
 4015050:	1c400236 	bltu	r3,r17,401505c <__divsf3+0x2e4>
 4015054:	1c47c83a 	sub	r3,r3,r17
 4015058:	29400054 	ori	r5,r5,1
 401505c:	213fffc4 	addi	r4,r4,-1
 4015060:	203ff71e 	bne	r4,zero,4015040 <__ram_exceptions_end+0xfbf8cda4>
 4015064:	1806c03a 	cmpne	r3,r3,zero
 4015068:	1962b03a 	or	r17,r3,r5
 401506c:	31001fc4 	addi	r4,r6,127
 4015070:	013fe50e 	bge	zero,r4,4015008 <__ram_exceptions_end+0xfbf8cd6c>
 4015074:	88c001cc 	andi	r3,r17,7
 4015078:	18000426 	beq	r3,zero,401508c <__divsf3+0x314>
 401507c:	88c003cc 	andi	r3,r17,15
 4015080:	01400104 	movi	r5,4
 4015084:	19400126 	beq	r3,r5,401508c <__divsf3+0x314>
 4015088:	8963883a 	add	r17,r17,r5
 401508c:	88c2002c 	andhi	r3,r17,2048
 4015090:	18000426 	beq	r3,zero,40150a4 <__divsf3+0x32c>
 4015094:	00fe0034 	movhi	r3,63488
 4015098:	18ffffc4 	addi	r3,r3,-1
 401509c:	31002004 	addi	r4,r6,128
 40150a0:	88e2703a 	and	r17,r17,r3
 40150a4:	00c03f84 	movi	r3,254
 40150a8:	193f8016 	blt	r3,r4,4014eac <__ram_exceptions_end+0xfbf8cc10>
 40150ac:	880c91ba 	slli	r6,r17,6
 40150b0:	11c0004c 	andi	r7,r2,1
 40150b4:	300cd27a 	srli	r6,r6,9
 40150b8:	003f7f06 	br	4014eb8 <__ram_exceptions_end+0xfbf8cc1c>
 40150bc:	9080102c 	andhi	r2,r18,64
 40150c0:	10000226 	beq	r2,zero,40150cc <__divsf3+0x354>
 40150c4:	8880102c 	andhi	r2,r17,64
 40150c8:	10001826 	beq	r2,zero,401512c <__divsf3+0x3b4>
 40150cc:	00802034 	movhi	r2,128
 40150d0:	91801034 	orhi	r6,r18,64
 40150d4:	10bfffc4 	addi	r2,r2,-1
 40150d8:	980f883a 	mov	r7,r19
 40150dc:	308c703a 	and	r6,r6,r2
 40150e0:	003fc706 	br	4015000 <__ram_exceptions_end+0xfbf8cd64>
 40150e4:	008000c4 	movi	r2,3
 40150e8:	b8802d26 	beq	r23,r2,40151a0 <__divsf3+0x428>
 40150ec:	00c00044 	movi	r3,1
 40150f0:	b005883a 	mov	r2,r22
 40150f4:	b8ffdd1e 	bne	r23,r3,401506c <__ram_exceptions_end+0xfbf8cdd0>
 40150f8:	11c0004c 	andi	r7,r2,1
 40150fc:	0009883a 	mov	r4,zero
 4015100:	000d883a 	mov	r6,zero
 4015104:	003f6c06 	br	4014eb8 <__ram_exceptions_end+0xfbf8cc1c>
 4015108:	9023883a 	mov	r17,r18
 401510c:	003f6406 	br	4014ea0 <__ram_exceptions_end+0xfbf8cc04>
 4015110:	1c47c83a 	sub	r3,r3,r17
 4015114:	01000684 	movi	r4,26
 4015118:	01400044 	movi	r5,1
 401511c:	003fc806 	br	4015040 <__ram_exceptions_end+0xfbf8cda4>
 4015120:	9080102c 	andhi	r2,r18,64
 4015124:	103fe926 	beq	r2,zero,40150cc <__ram_exceptions_end+0xfbf8ce30>
 4015128:	0023883a 	mov	r17,zero
 401512c:	00802034 	movhi	r2,128
 4015130:	89801034 	orhi	r6,r17,64
 4015134:	10bfffc4 	addi	r2,r2,-1
 4015138:	a80f883a 	mov	r7,r21
 401513c:	308c703a 	and	r6,r6,r2
 4015140:	003faf06 	br	4015000 <__ram_exceptions_end+0xfbf8cd64>
 4015144:	01c00804 	movi	r7,32
 4015148:	390fc83a 	sub	r7,r7,r4
 401514c:	89ce983a 	sll	r7,r17,r7
 4015150:	890ad83a 	srl	r5,r17,r4
 4015154:	380ec03a 	cmpne	r7,r7,zero
 4015158:	29cab03a 	or	r5,r5,r7
 401515c:	28c001cc 	andi	r3,r5,7
 4015160:	18000426 	beq	r3,zero,4015174 <__divsf3+0x3fc>
 4015164:	28c003cc 	andi	r3,r5,15
 4015168:	01000104 	movi	r4,4
 401516c:	19000126 	beq	r3,r4,4015174 <__divsf3+0x3fc>
 4015170:	290b883a 	add	r5,r5,r4
 4015174:	28c1002c 	andhi	r3,r5,1024
 4015178:	18000426 	beq	r3,zero,401518c <__divsf3+0x414>
 401517c:	11c0004c 	andi	r7,r2,1
 4015180:	01000044 	movi	r4,1
 4015184:	000d883a 	mov	r6,zero
 4015188:	003f4b06 	br	4014eb8 <__ram_exceptions_end+0xfbf8cc1c>
 401518c:	280a91ba 	slli	r5,r5,6
 4015190:	11c0004c 	andi	r7,r2,1
 4015194:	0009883a 	mov	r4,zero
 4015198:	280cd27a 	srli	r6,r5,9
 401519c:	003f4606 	br	4014eb8 <__ram_exceptions_end+0xfbf8cc1c>
 40151a0:	00802034 	movhi	r2,128
 40151a4:	89801034 	orhi	r6,r17,64
 40151a8:	10bfffc4 	addi	r2,r2,-1
 40151ac:	b00f883a 	mov	r7,r22
 40151b0:	308c703a 	and	r6,r6,r2
 40151b4:	003f9206 	br	4015000 <__ram_exceptions_end+0xfbf8cd64>

040151b8 <__mulsf3>:
 40151b8:	defff504 	addi	sp,sp,-44
 40151bc:	dc000115 	stw	r16,4(sp)
 40151c0:	2020d5fa 	srli	r16,r4,23
 40151c4:	dd400615 	stw	r21,24(sp)
 40151c8:	202ad7fa 	srli	r21,r4,31
 40151cc:	dc800315 	stw	r18,12(sp)
 40151d0:	04802034 	movhi	r18,128
 40151d4:	df000915 	stw	fp,36(sp)
 40151d8:	dd000515 	stw	r20,20(sp)
 40151dc:	94bfffc4 	addi	r18,r18,-1
 40151e0:	dfc00a15 	stw	ra,40(sp)
 40151e4:	ddc00815 	stw	r23,32(sp)
 40151e8:	dd800715 	stw	r22,28(sp)
 40151ec:	dcc00415 	stw	r19,16(sp)
 40151f0:	dc400215 	stw	r17,8(sp)
 40151f4:	84003fcc 	andi	r16,r16,255
 40151f8:	9124703a 	and	r18,r18,r4
 40151fc:	a829883a 	mov	r20,r21
 4015200:	af003fcc 	andi	fp,r21,255
 4015204:	80005426 	beq	r16,zero,4015358 <__mulsf3+0x1a0>
 4015208:	00803fc4 	movi	r2,255
 401520c:	80802f26 	beq	r16,r2,40152cc <__mulsf3+0x114>
 4015210:	91002034 	orhi	r4,r18,128
 4015214:	202490fa 	slli	r18,r4,3
 4015218:	843fe044 	addi	r16,r16,-127
 401521c:	0023883a 	mov	r17,zero
 4015220:	002f883a 	mov	r23,zero
 4015224:	2804d5fa 	srli	r2,r5,23
 4015228:	282cd7fa 	srli	r22,r5,31
 401522c:	01002034 	movhi	r4,128
 4015230:	213fffc4 	addi	r4,r4,-1
 4015234:	10803fcc 	andi	r2,r2,255
 4015238:	2166703a 	and	r19,r4,r5
 401523c:	b1803fcc 	andi	r6,r22,255
 4015240:	10004c26 	beq	r2,zero,4015374 <__mulsf3+0x1bc>
 4015244:	00c03fc4 	movi	r3,255
 4015248:	10c04726 	beq	r2,r3,4015368 <__mulsf3+0x1b0>
 401524c:	99002034 	orhi	r4,r19,128
 4015250:	202690fa 	slli	r19,r4,3
 4015254:	10bfe044 	addi	r2,r2,-127
 4015258:	0007883a 	mov	r3,zero
 401525c:	80a1883a 	add	r16,r16,r2
 4015260:	010003c4 	movi	r4,15
 4015264:	1c44b03a 	or	r2,r3,r17
 4015268:	b56af03a 	xor	r21,r22,r21
 401526c:	81c00044 	addi	r7,r16,1
 4015270:	20806b36 	bltu	r4,r2,4015420 <__mulsf3+0x268>
 4015274:	100490ba 	slli	r2,r2,2
 4015278:	01010074 	movhi	r4,1025
 401527c:	2114a304 	addi	r4,r4,21132
 4015280:	1105883a 	add	r2,r2,r4
 4015284:	10800017 	ldw	r2,0(r2)
 4015288:	1000683a 	jmp	r2
 401528c:	04015420 	cmpeqi	r16,zero,1360
 4015290:	040152e0 	cmpeqi	r16,zero,1355
 4015294:	040152e0 	cmpeqi	r16,zero,1355
 4015298:	040152dc 	xori	r16,zero,1355
 401529c:	04015404 	movi	r16,1360
 40152a0:	04015404 	movi	r16,1360
 40152a4:	040153f0 	cmpltui	r16,zero,1359
 40152a8:	040152dc 	xori	r16,zero,1355
 40152ac:	04015404 	movi	r16,1360
 40152b0:	040153f0 	cmpltui	r16,zero,1359
 40152b4:	04015404 	movi	r16,1360
 40152b8:	040152dc 	xori	r16,zero,1355
 40152bc:	04015410 	cmplti	r16,zero,1360
 40152c0:	04015410 	cmplti	r16,zero,1360
 40152c4:	04015410 	cmplti	r16,zero,1360
 40152c8:	04015520 	cmpeqi	r16,zero,1364
 40152cc:	90003b1e 	bne	r18,zero,40153bc <__mulsf3+0x204>
 40152d0:	04400204 	movi	r17,8
 40152d4:	05c00084 	movi	r23,2
 40152d8:	003fd206 	br	4015224 <__ram_exceptions_end+0xfbf8cf88>
 40152dc:	302b883a 	mov	r21,r6
 40152e0:	00800084 	movi	r2,2
 40152e4:	18802626 	beq	r3,r2,4015380 <__mulsf3+0x1c8>
 40152e8:	008000c4 	movi	r2,3
 40152ec:	1880b826 	beq	r3,r2,40155d0 <__mulsf3+0x418>
 40152f0:	00800044 	movi	r2,1
 40152f4:	1880af1e 	bne	r3,r2,40155b4 <__mulsf3+0x3fc>
 40152f8:	a829883a 	mov	r20,r21
 40152fc:	0007883a 	mov	r3,zero
 4015300:	0009883a 	mov	r4,zero
 4015304:	18803fcc 	andi	r2,r3,255
 4015308:	100695fa 	slli	r3,r2,23
 401530c:	a0803fcc 	andi	r2,r20,255
 4015310:	100a97fa 	slli	r5,r2,31
 4015314:	00802034 	movhi	r2,128
 4015318:	10bfffc4 	addi	r2,r2,-1
 401531c:	2084703a 	and	r2,r4,r2
 4015320:	10c4b03a 	or	r2,r2,r3
 4015324:	1144b03a 	or	r2,r2,r5
 4015328:	dfc00a17 	ldw	ra,40(sp)
 401532c:	df000917 	ldw	fp,36(sp)
 4015330:	ddc00817 	ldw	r23,32(sp)
 4015334:	dd800717 	ldw	r22,28(sp)
 4015338:	dd400617 	ldw	r21,24(sp)
 401533c:	dd000517 	ldw	r20,20(sp)
 4015340:	dcc00417 	ldw	r19,16(sp)
 4015344:	dc800317 	ldw	r18,12(sp)
 4015348:	dc400217 	ldw	r17,8(sp)
 401534c:	dc000117 	ldw	r16,4(sp)
 4015350:	dec00b04 	addi	sp,sp,44
 4015354:	f800283a 	ret
 4015358:	90000d1e 	bne	r18,zero,4015390 <__mulsf3+0x1d8>
 401535c:	04400104 	movi	r17,4
 4015360:	05c00044 	movi	r23,1
 4015364:	003faf06 	br	4015224 <__ram_exceptions_end+0xfbf8cf88>
 4015368:	9806c03a 	cmpne	r3,r19,zero
 401536c:	18c00084 	addi	r3,r3,2
 4015370:	003fba06 	br	401525c <__ram_exceptions_end+0xfbf8cfc0>
 4015374:	9800141e 	bne	r19,zero,40153c8 <__mulsf3+0x210>
 4015378:	00c00044 	movi	r3,1
 401537c:	003fb706 	br	401525c <__ram_exceptions_end+0xfbf8cfc0>
 4015380:	a829883a 	mov	r20,r21
 4015384:	00ffffc4 	movi	r3,-1
 4015388:	0009883a 	mov	r4,zero
 401538c:	003fdd06 	br	4015304 <__ram_exceptions_end+0xfbf8d068>
 4015390:	9009883a 	mov	r4,r18
 4015394:	d9400015 	stw	r5,0(sp)
 4015398:	400dd680 	call	400dd68 <__clzsi2>
 401539c:	10fffec4 	addi	r3,r2,-5
 40153a0:	10801d84 	addi	r2,r2,118
 40153a4:	90e4983a 	sll	r18,r18,r3
 40153a8:	00a1c83a 	sub	r16,zero,r2
 40153ac:	0023883a 	mov	r17,zero
 40153b0:	002f883a 	mov	r23,zero
 40153b4:	d9400017 	ldw	r5,0(sp)
 40153b8:	003f9a06 	br	4015224 <__ram_exceptions_end+0xfbf8cf88>
 40153bc:	04400304 	movi	r17,12
 40153c0:	05c000c4 	movi	r23,3
 40153c4:	003f9706 	br	4015224 <__ram_exceptions_end+0xfbf8cf88>
 40153c8:	9809883a 	mov	r4,r19
 40153cc:	d9800015 	stw	r6,0(sp)
 40153d0:	400dd680 	call	400dd68 <__clzsi2>
 40153d4:	10fffec4 	addi	r3,r2,-5
 40153d8:	10801d84 	addi	r2,r2,118
 40153dc:	98e6983a 	sll	r19,r19,r3
 40153e0:	0085c83a 	sub	r2,zero,r2
 40153e4:	0007883a 	mov	r3,zero
 40153e8:	d9800017 	ldw	r6,0(sp)
 40153ec:	003f9b06 	br	401525c <__ram_exceptions_end+0xfbf8cfc0>
 40153f0:	01002034 	movhi	r4,128
 40153f4:	0029883a 	mov	r20,zero
 40153f8:	213fffc4 	addi	r4,r4,-1
 40153fc:	00ffffc4 	movi	r3,-1
 4015400:	003fc006 	br	4015304 <__ram_exceptions_end+0xfbf8d068>
 4015404:	9027883a 	mov	r19,r18
 4015408:	b807883a 	mov	r3,r23
 401540c:	003fb406 	br	40152e0 <__ram_exceptions_end+0xfbf8d044>
 4015410:	9027883a 	mov	r19,r18
 4015414:	e02b883a 	mov	r21,fp
 4015418:	b807883a 	mov	r3,r23
 401541c:	003fb006 	br	40152e0 <__ram_exceptions_end+0xfbf8d044>
 4015420:	9028d43a 	srli	r20,r18,16
 4015424:	982cd43a 	srli	r22,r19,16
 4015428:	94bfffcc 	andi	r18,r18,65535
 401542c:	9cffffcc 	andi	r19,r19,65535
 4015430:	980b883a 	mov	r5,r19
 4015434:	9009883a 	mov	r4,r18
 4015438:	d9c00015 	stw	r7,0(sp)
 401543c:	40011140 	call	4001114 <__mulsi3>
 4015440:	a00b883a 	mov	r5,r20
 4015444:	9809883a 	mov	r4,r19
 4015448:	1023883a 	mov	r17,r2
 401544c:	40011140 	call	4001114 <__mulsi3>
 4015450:	a009883a 	mov	r4,r20
 4015454:	b00b883a 	mov	r5,r22
 4015458:	1027883a 	mov	r19,r2
 401545c:	40011140 	call	4001114 <__mulsi3>
 4015460:	b00b883a 	mov	r5,r22
 4015464:	9009883a 	mov	r4,r18
 4015468:	1029883a 	mov	r20,r2
 401546c:	40011140 	call	4001114 <__mulsi3>
 4015470:	8806d43a 	srli	r3,r17,16
 4015474:	14c5883a 	add	r2,r2,r19
 4015478:	d9c00017 	ldw	r7,0(sp)
 401547c:	1885883a 	add	r2,r3,r2
 4015480:	14c0022e 	bgeu	r2,r19,401548c <__mulsf3+0x2d4>
 4015484:	00c00074 	movhi	r3,1
 4015488:	a0e9883a 	add	r20,r20,r3
 401548c:	1026943a 	slli	r19,r2,16
 4015490:	8c7fffcc 	andi	r17,r17,65535
 4015494:	1004d43a 	srli	r2,r2,16
 4015498:	9c63883a 	add	r17,r19,r17
 401549c:	882691ba 	slli	r19,r17,6
 40154a0:	1505883a 	add	r2,r2,r20
 40154a4:	8822d6ba 	srli	r17,r17,26
 40154a8:	100891ba 	slli	r4,r2,6
 40154ac:	9826c03a 	cmpne	r19,r19,zero
 40154b0:	9c62b03a 	or	r17,r19,r17
 40154b4:	8926b03a 	or	r19,r17,r4
 40154b8:	9882002c 	andhi	r2,r19,2048
 40154bc:	10000426 	beq	r2,zero,40154d0 <__mulsf3+0x318>
 40154c0:	9804d07a 	srli	r2,r19,1
 40154c4:	9900004c 	andi	r4,r19,1
 40154c8:	3821883a 	mov	r16,r7
 40154cc:	1126b03a 	or	r19,r2,r4
 40154d0:	80c01fc4 	addi	r3,r16,127
 40154d4:	00c0210e 	bge	zero,r3,401555c <__mulsf3+0x3a4>
 40154d8:	988001cc 	andi	r2,r19,7
 40154dc:	10000426 	beq	r2,zero,40154f0 <__mulsf3+0x338>
 40154e0:	988003cc 	andi	r2,r19,15
 40154e4:	01000104 	movi	r4,4
 40154e8:	11000126 	beq	r2,r4,40154f0 <__mulsf3+0x338>
 40154ec:	9927883a 	add	r19,r19,r4
 40154f0:	9882002c 	andhi	r2,r19,2048
 40154f4:	10000426 	beq	r2,zero,4015508 <__mulsf3+0x350>
 40154f8:	00be0034 	movhi	r2,63488
 40154fc:	10bfffc4 	addi	r2,r2,-1
 4015500:	80c02004 	addi	r3,r16,128
 4015504:	98a6703a 	and	r19,r19,r2
 4015508:	00803f84 	movi	r2,254
 401550c:	10ff9c16 	blt	r2,r3,4015380 <__ram_exceptions_end+0xfbf8d0e4>
 4015510:	980891ba 	slli	r4,r19,6
 4015514:	a829883a 	mov	r20,r21
 4015518:	2008d27a 	srli	r4,r4,9
 401551c:	003f7906 	br	4015304 <__ram_exceptions_end+0xfbf8d068>
 4015520:	9080102c 	andhi	r2,r18,64
 4015524:	10000826 	beq	r2,zero,4015548 <__mulsf3+0x390>
 4015528:	9880102c 	andhi	r2,r19,64
 401552c:	1000061e 	bne	r2,zero,4015548 <__mulsf3+0x390>
 4015530:	00802034 	movhi	r2,128
 4015534:	99001034 	orhi	r4,r19,64
 4015538:	10bfffc4 	addi	r2,r2,-1
 401553c:	b029883a 	mov	r20,r22
 4015540:	2088703a 	and	r4,r4,r2
 4015544:	003fad06 	br	40153fc <__ram_exceptions_end+0xfbf8d160>
 4015548:	00802034 	movhi	r2,128
 401554c:	91001034 	orhi	r4,r18,64
 4015550:	10bfffc4 	addi	r2,r2,-1
 4015554:	2088703a 	and	r4,r4,r2
 4015558:	003fa806 	br	40153fc <__ram_exceptions_end+0xfbf8d160>
 401555c:	00800044 	movi	r2,1
 4015560:	10c7c83a 	sub	r3,r2,r3
 4015564:	008006c4 	movi	r2,27
 4015568:	10ff6316 	blt	r2,r3,40152f8 <__ram_exceptions_end+0xfbf8d05c>
 401556c:	00800804 	movi	r2,32
 4015570:	10c5c83a 	sub	r2,r2,r3
 4015574:	9884983a 	sll	r2,r19,r2
 4015578:	98c6d83a 	srl	r3,r19,r3
 401557c:	1004c03a 	cmpne	r2,r2,zero
 4015580:	1884b03a 	or	r2,r3,r2
 4015584:	10c001cc 	andi	r3,r2,7
 4015588:	18000426 	beq	r3,zero,401559c <__mulsf3+0x3e4>
 401558c:	10c003cc 	andi	r3,r2,15
 4015590:	01000104 	movi	r4,4
 4015594:	19000126 	beq	r3,r4,401559c <__mulsf3+0x3e4>
 4015598:	1105883a 	add	r2,r2,r4
 401559c:	10c1002c 	andhi	r3,r2,1024
 40155a0:	18000626 	beq	r3,zero,40155bc <__mulsf3+0x404>
 40155a4:	a829883a 	mov	r20,r21
 40155a8:	00c00044 	movi	r3,1
 40155ac:	0009883a 	mov	r4,zero
 40155b0:	003f5406 	br	4015304 <__ram_exceptions_end+0xfbf8d068>
 40155b4:	3821883a 	mov	r16,r7
 40155b8:	003fc506 	br	40154d0 <__ram_exceptions_end+0xfbf8d234>
 40155bc:	100491ba 	slli	r2,r2,6
 40155c0:	a829883a 	mov	r20,r21
 40155c4:	0007883a 	mov	r3,zero
 40155c8:	1008d27a 	srli	r4,r2,9
 40155cc:	003f4d06 	br	4015304 <__ram_exceptions_end+0xfbf8d068>
 40155d0:	00802034 	movhi	r2,128
 40155d4:	99001034 	orhi	r4,r19,64
 40155d8:	10bfffc4 	addi	r2,r2,-1
 40155dc:	a829883a 	mov	r20,r21
 40155e0:	2088703a 	and	r4,r4,r2
 40155e4:	003f8506 	br	40153fc <__ram_exceptions_end+0xfbf8d160>

040155e8 <__floatunsisf>:
 40155e8:	defffe04 	addi	sp,sp,-8
 40155ec:	dfc00115 	stw	ra,4(sp)
 40155f0:	dc000015 	stw	r16,0(sp)
 40155f4:	20002c26 	beq	r4,zero,40156a8 <__floatunsisf+0xc0>
 40155f8:	2021883a 	mov	r16,r4
 40155fc:	400dd680 	call	400dd68 <__clzsi2>
 4015600:	00c02784 	movi	r3,158
 4015604:	1887c83a 	sub	r3,r3,r2
 4015608:	01002584 	movi	r4,150
 401560c:	20c00f16 	blt	r4,r3,401564c <__floatunsisf+0x64>
 4015610:	20c9c83a 	sub	r4,r4,r3
 4015614:	8108983a 	sll	r4,r16,r4
 4015618:	00802034 	movhi	r2,128
 401561c:	10bfffc4 	addi	r2,r2,-1
 4015620:	2088703a 	and	r4,r4,r2
 4015624:	18803fcc 	andi	r2,r3,255
 4015628:	100695fa 	slli	r3,r2,23
 401562c:	00802034 	movhi	r2,128
 4015630:	10bfffc4 	addi	r2,r2,-1
 4015634:	2084703a 	and	r2,r4,r2
 4015638:	10c4b03a 	or	r2,r2,r3
 401563c:	dfc00117 	ldw	ra,4(sp)
 4015640:	dc000017 	ldw	r16,0(sp)
 4015644:	dec00204 	addi	sp,sp,8
 4015648:	f800283a 	ret
 401564c:	01002644 	movi	r4,153
 4015650:	20c01816 	blt	r4,r3,40156b4 <__floatunsisf+0xcc>
 4015654:	20c9c83a 	sub	r4,r4,r3
 4015658:	8108983a 	sll	r4,r16,r4
 401565c:	017f0034 	movhi	r5,64512
 4015660:	297fffc4 	addi	r5,r5,-1
 4015664:	218001cc 	andi	r6,r4,7
 4015668:	214a703a 	and	r5,r4,r5
 401566c:	30000426 	beq	r6,zero,4015680 <__floatunsisf+0x98>
 4015670:	210003cc 	andi	r4,r4,15
 4015674:	01800104 	movi	r6,4
 4015678:	21800126 	beq	r4,r6,4015680 <__floatunsisf+0x98>
 401567c:	298b883a 	add	r5,r5,r6
 4015680:	2901002c 	andhi	r4,r5,1024
 4015684:	20000526 	beq	r4,zero,401569c <__floatunsisf+0xb4>
 4015688:	00c027c4 	movi	r3,159
 401568c:	1887c83a 	sub	r3,r3,r2
 4015690:	00bf0034 	movhi	r2,64512
 4015694:	10bfffc4 	addi	r2,r2,-1
 4015698:	288a703a 	and	r5,r5,r2
 401569c:	280891ba 	slli	r4,r5,6
 40156a0:	2008d27a 	srli	r4,r4,9
 40156a4:	003fdf06 	br	4015624 <__ram_exceptions_end+0xfbf8d388>
 40156a8:	0007883a 	mov	r3,zero
 40156ac:	0009883a 	mov	r4,zero
 40156b0:	003fdc06 	br	4015624 <__ram_exceptions_end+0xfbf8d388>
 40156b4:	01402e44 	movi	r5,185
 40156b8:	28cbc83a 	sub	r5,r5,r3
 40156bc:	01000144 	movi	r4,5
 40156c0:	2089c83a 	sub	r4,r4,r2
 40156c4:	814a983a 	sll	r5,r16,r5
 40156c8:	8108d83a 	srl	r4,r16,r4
 40156cc:	2820c03a 	cmpne	r16,r5,zero
 40156d0:	2408b03a 	or	r4,r4,r16
 40156d4:	003fe106 	br	401565c <__ram_exceptions_end+0xfbf8d3c0>

040156d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40156d8:	defffd04 	addi	sp,sp,-12
 40156dc:	df000215 	stw	fp,8(sp)
 40156e0:	df000204 	addi	fp,sp,8
 40156e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40156e8:	0001883a 	nop
 40156ec:	e0bfff17 	ldw	r2,-4(fp)
 40156f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40156f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40156f8:	10000226 	beq	r2,zero,4015704 <_exit+0x2c>
    ALT_SIM_FAIL();
 40156fc:	002af070 	cmpltui	zero,zero,43969
 4015700:	00000106 	br	4015708 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4015704:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4015708:	003fff06 	br	4015708 <__ram_exceptions_end+0xfbf8d46c>
